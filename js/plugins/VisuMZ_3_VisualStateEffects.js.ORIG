//=============================================================================
// VisuStella MZ - Visual State Effects
// VisuMZ_3_VisualStateEffects.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_3_VisualStateEffects = true;

var VisuMZ = VisuMZ || {};
VisuMZ.VisualStateEffects = VisuMZ.VisualStateEffects || {};
VisuMZ.VisualStateEffects.version = 1.11;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 3] [Version 1.11] [VisualStateEffects]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Visual_State_Effects_VisuStella_MZ
 * @base VisuMZ_0_CoreEngine
 * @base VisuMZ_1_BattleCore
 * @base VisuMZ_1_SkillsStatesCore
 * @orderAfter VisuMZ_1_BattleCore
 * @orderAfter VisuMZ_1_SkillsStatesCore
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * States, buffs, and debuffs are amongst one of the most important aspects of
 * the battle system. Therefore, relaying proper information to the player is
 * extremely important. RPG Maker MZ does relay information to the player about
 * the various states and effects, but it is far from perfect. This plugin
 * allows you to add more detail and visual effects regarding states to relay
 * proper data.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Choose to display State Overlays and State Icons over actors and enemies.
 * * Create text popups for Buffs, Debuffs, and States along with full control
 *   over their color, flash, and flash duration.
 * * Play animations upon receiving or removing Buffs, Debuffs, and States.
 * * States can have repeating animations.
 * * States can change the tone of a sprite.
 * * States can freeze a sprite in place.
 * * States can adjust the opacity of a battler to make them semi-transparent.
 * * Hovering effects that can be visibly applied to trait objects.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Required Plugin List ------
 *
 * - VisuMZ_0_CoreEngine
 * - VisuMZ_1_BattleCore
 * - VisuMZ_1_SkillsStatesCore
 *
 * This plugin requires the above listed plugins to be installed inside your
 * game's Plugin Manager list in order to work. You cannot start your game with
 * this plugin enabled without the listed plugins.
 *
 * ------ Tier 3 ------
 *
 * This plugin is a Tier 3 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin adds some new hard-coded features to RPG Maker MZ's functions.
 * The following is a list of them.
 *
 * ---
 *
 * State Motion Index and State Overlay Index
 * 
 * - The original RPG Maker MZ functions have been overwritten because they
 * only display the motions and overlays of the highest priority state even if
 * it does not have any motions while lower priority states with motions and
 * overlays will be hidden.
 * 
 * - The changed code will now take the highest priority state motion index (or
 * a custom one defined by a notetag) and the highest priority state overlay
 * index to show those instead.
 *
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 *
 * === State-Related Notetags ===
 * 
 * The following notetags are made for states.
 * 
 * ---
 * 
 * <Hide State Popup>
 *
 * - Used for: State Notetags
 * - Don't display any of the popups for this state.
 * 
 * ---
 * 
 * <State Popup>
 *  text color: c
 *  flash color: r, g, b, a
 *  flash duration: d
 * </State Popup>
 *
 * - Used for: State Notetags
 * - Changes the settings of the state popup from the defaults declared by the
 *   Plugin Parameters. Each of the settings are optional. If the lines do not
 *   appear in the notetag, then the default values from the Plugin Parameters
 *   will be used instead.
 * - Replace 'c' #rrggbb for custom colors or insert a regular number for text
 *   colors from the Window Skin.
 * - Replace 'r', 'g', 'b', 'a' with number values ranging from 0 to 255 for
 *   'red', 'green', 'blue', and 'alpha' to determine the flash color.
 * - Replace 'd' with a number representing the amount of frames you want the
 *   flash duration to last for.
 * 
 * Examples:
 * 
 * <State Popup>
 *  text color: 3
 * </State Popup>
 * 
 * <State Popup>
 *  text color: #abcdef
 *  flash color: 255, 255, 0, 160
 * </State Popup>
 * 
 * <State Popup>
 *  flash color: 0, 255, 255, 160
 *  flash duration: 90
 * </State Popup>
 * 
 * <State Popup>
 *  flash duration: 777
 * </State Popup>
 * 
 * ---
 * 
 * <Add Animation: x>
 *
 * - Used for: State Notetags
 * - Determines the battle animation to play when the state is applied.
 * - Replace 'x' with a number representing the ID of the animation you wish
 *   to play when the state is added.
 * - This does not work for states without icons nor the death state.
 * 
 * ---
 * 
 * <Erase Animation: x>
 *
 * - Used for: State Notetags
 * - Determines the battle animation to play when the state is removed.
 * - Replace 'x' with a number representing the ID of the animation you wish
 *   to play when the state is removed.
 * - This does not work for states without icons nor the death state.
 * 
 * ---
 * 
 * <Repeat Animation: x>
 *
 * - Used for: State Notetags
 * - Determines the battle animation to play in intervals when the battler is
 *   affected by it.
 * - Replace 'x' with a number representing the ID of the animation you wish
 *   to play on repeat while the battler is affected by the state.
 * - The battler will cycle through the various repeating state animations
 *   available through states.
 * - WARNING: Abusing Repeat Animations can jeopardize game performance.
 * 
 * ---
 * 
 * <Repeat Animation Cycle: x>
 *
 * - Used for: State Notetags
 * - Determines the cycle/duration of this specific state's repeating animation
 *   if you do not wish to use the plugin parameter's default setting.
 * - Replace 'x' with the number of frames you wish to play this animation for
 *   before moving onto the next animation.
 * - WARNING: Lower numbers can jeopardize game performance.
 * 
 * ---
 * 
 * <State Motion: Walk>
 * <State Motion: Wait>
 * <State Motion: Chant>
 * <State Motion: Guard>
 * <State Motion: Damage>
 * <State Motion: Evade>
 * <State Motion: Thrust>
 * <State Motion: Swing>
 * <State Motion: Missile>
 * <State Motion: Skill>
 * <State Motion: Spell>
 * <State Motion: Item>
 * <State Motion: Escape>
 * <State Motion: Victory>
 * <State Motion: Dying>
 * <State Motion: Abnormal>
 * <State Motion: Sleep>
 * <State Motion: Dead>
 *
 * - Used for: State Notetags
 * - Lets you determine what kind of state motion to play when the battler is
 *   affected by the state.
 * - The battler will only play the highest priority state motion.
 * 
 * ---
 * 
 * <State Motion Lock>
 * 
 * - Used for: State Notetags
 * - If an actor or animated sideview enemy is affected by a state that has
 *   this notetag, their animation will be locked in place while this state
 *   is in effect.
 * 
 * ---
 * 
 * <State Tone: red, green, blue, gray>
 *
 * - Used for: State Notetags
 * - Tints the battler with a tone determined by the state.
 * - Replace 'red', 'green', 'blue' with a value between -255 and 255.
 * - Replace 'gray' with a value between 0 and 255.
 * - If a battler has multiple states with tones, then the state with the
 *   highest priority value is applied to the battler.
 * 
 * ---
 * 
 * <Visual Opacity: x>
 * <Visual Opacity: x%>
 * 
 * - Used for: State Notetags
 * - When a battler is affected by this state, change the opacity of their main
 *   battler sprite to 'x' or 'x%'.
 * - Replace 'x' with a number from 0 to 255 representing the opacity level.
 * - Replace 'x%' with a percentage from 0% to 100% representing the opacity.
 * - This does NOT affect UI elements like the HP Gauges, State Icons, or their
 *   positioning markers such as the battler's shadow as this is only to used
 *   to represent a change in their opacity through a state.
 * - To change the whole battler's opacity including everything from the UI
 *   elements, State Icons, etc., use the Action Sequence Plugin Command to
 *   visually alter the whole opacity level instead.
 * - The Visual Opacity level will compound with the opacity level adjusted by
 *   the Action Sequence Plugin Command. Keep this in mind when using both of
 *   them together.
 * 
 * ---
 * 
 * <Visual Rainbow: +x>
 * <Visual Rainbow: -x>
 * 
 * - Used for: State Notetags
 * - When a battler is affected by this state, the battler has a colorful
 *   rainbow shifting effect.
 * - Replace 'x' with a number representing how fast the colors shift for the
 *   battler. Higher numbers are faster. Lower numbers are slower.
 * - This does NOT affect UI elements like the HP Gauges, State Icons, or their
 *   positioning markers such as the battler's shadow as this is only to used
 *   to represent a change in their opacity through a state.
 * - The Visual Rainbow shift will be stacked on top of any battlers/enemies
 *   that already have a hue change.
 * 
 * ---
 *
 * === Hover-Related Notetags ===
 * 
 * ---
 * 
 * <Visual Hover Effect>
 *  Base: x
 *  Speed: y
 *  Rate: z
 *  Death: case
 * </Visual Hover Effect>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Creates a hover effect when tied to a trait object.
 * - The 'base' value determines the minimum height above the ground for the
 *   hover effect. Replace 'x' with a number representing the pixel height.
 * - The 'speed' value determines the flat adjustment towards the wobbling
 *   change. Replace 'y' with a number representing the speed. Lower values
 *   move faster while higher values move slower.
 * - The 'rate' determines the fluctuation rate when the hover effect bobbles
 *   up and down. Replace 'z' with a number representing the fluctuation rate.
 * - The 'death' scenario lets you decide if you want the hovering battler to
 *   remain hovering if they're dead or fall down to the floor. Replace 'case'
 *   with 'Hover' or 'Floor'.
 * 
 * Example:
 * 
 * <Visual Hover Effect>
 *  Base: 100
 *  Speed: 20
 *  Rate: 5.0
 *  Death: floor
 * </Visual Hover Effect>
 * 
 * ---
 *
 * === Breathing-Related Notetags ===
 * 
 * The following notetags are purely EXPERIMENTAL. There is a high likelihood
 * of unintended graphical glitches when using them. Use them at your own risk.
 * 
 * ---
 * 
 * <Visual Breathing Effect>
 *  Speed: x
 *  Speed X: x
 *  Speed Y: x
 *  
 *  Rate: x.y
 *  Rate X: x.y
 *  Rate Y: x.y
 * 
 *  HP Link: On
 *  HP Link: Off
 * </Visual Breathing Effect>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Creates a hover effect when tied to a trait object.
 * - The 'speed' value determines how long each cycle is.
 *   - When using 'Speed', this will apply to both 'Speed X' and 'Speed Y'
 *   - 'Speed X' refers to the horizontal breathing cycle
 *   - 'Speed Y' refers to the vertical breathing cycle
 *   - If not declared, both will default to a value of '10'
 * - The 'rate' value determines how exaggerated the breathing distortion looks
 *   for the affected target.
 *   - When using 'Rate', this will apply to both 'Rate X' and 'Rate Y
 *   - 'Rate X' refers to horizontal breathing distortion effect
 *   - 'Rate Y' refers to vertical breathing distortion effect
 *   - If not declared, 'Rate X' will default to 0.000 and 'Rate Y' to 0.020.
 * - HP Link refers to the breathing speed relative to the target's HP rate
 *   where the lower the rate, the slower the speed becomes.
 *   - 'On' means it's enabled.
 *   - 'Off' means it's disabled.
 *   - If not declared, this will default to 'OFF'
 * 
 * Examples:
 * 
 * <Visual Breathing Effect>
 *  Speed: 10
 *  Rate Y: 0.050
 *  HP Link: On
 * </Visual Breathing Effect>
 * 
 * <Visual Breathing Effect>
 *  Speed X: 15
 *  Speed Y: 10
 *  Rate X: 0.01
 *  Rate Y: 0.050
 * </Visual Breathing Effect>
 * 
 * ---
 * 
 * <No Breathing>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Removes any breathing effects for the affected target.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: General Settings
 * ============================================================================
 *
 * General settings for Visual State Effects.
 *
 * ---
 *
 * Actors
 * 
 *   Show State Overlay?:
 *   - Show state overlays over an actor's head?
 * 
 *   Show State Icons?:
 *   - Show state icons over an actor's head?
 *
 * ---
 *
 * Enemies
 * 
 *   Show State Overlay?:
 *   - Show state overlays over an enemy's head?
 * 
 *   Show State Icons?:
 *   - Show state icons over an enemy's head?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Buff/Debuff Settings Settings
 * ============================================================================
 *
 * Buff/Debuff settings for Visual State Effects.
 *
 * ---
 *
 * Popups
 * 
 *   Show Popups?:
 *   - Show Buff/Debuff Popups when applied?
 * 
 *     Buff Format:
 *     - How do you want the buff text to appear?
 *     - %1 - Parameter Name
 * 
 *       Text Color:
 *       - Use #rrggbb for custom colors or regular numbers for text colors
 *         from the Window Skin.
 * 
 *       Flash Color:
 *       - Adjust the popup's flash color.
 *       - Format: [red, green, blue, alpha]
 * 
 *       Flash Duration:
 *       - What is the frame duration of the flash effect?
 * 
 *     Debuff Format:
 *     - How do you want the debuff text to appear?
 *     - %1 - Parameter Name
 * 
 *       Text Color:
 *       - Use #rrggbb for custom colors or regular numbers for text colors
 *         from the Window Skin.
 * 
 *       Flash Color:
 *       - Adjust the popup's flash color.
 *       - Format: [red, green, blue, alpha]
 * 
 *       Flash Duration:
 *       - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * Animations
 * 
 *   Show Animations?:
 *   - Show Buff/Debuff Animations when applied?
 * 
 *     Mirror Animations?:
 *     - Mirror animations for buffs/debuffs?
 * 
 *     Mute Animations?:
 *     - Mute animations for buffs/debuffs?
 * 
 * ---
 * 
 * Buff Animations
 * 
 *   MaxHP Buff:
 *   MaxMP Buff:
 *   ATK Buff:
 *   DEF Buff:
 *   MAT Buff:
 *   MDF Buff:
 *   AGI Buff:
 *   LUK Buff:
 *   - Animation played when applying specific Buffs.
 * 
 * Debuff Animations
 * 
 *   MaxHP Debuff:
 *   MaxMP Debuff:
 *   ATK Debuff:
 *   DEF Debuff:
 *   MAT Debuff:
 *   MDF Debuff:
 *   AGI Debuff:
 *   LUK Debuff:
 *   - Animation played when applying specific Debuff.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: State Settings
 * ============================================================================
 *
 * Default State settings for Visual State Effects.
 *
 * ---
 *
 * Popups
 * 
 *   Show Popups?:
 *   - Show States Popups when applied and removed?
 * 
 *     Add State Format:
 *     - How do you want added states to appear?
 *     - %1 - State Name
 * 
 *     Erase State Format:
 *     - How do you want erased states to appear?
 *     - %1 - State Name
 * 
 *     Default Text Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 * 
 *       Match Turn Count?:
 *       - Match turn count color by default?
 * 
 *     Flash Color:
 *     - Adjust the popup's default flash color.
 *     - Format: [red, green, blue, alpha]
 * 
 *       Flash Duration:
 *       - What is the frame duration of the default flash effect?
 *
 * ---
 *
 * State Animations
 * 
 *   Add/Erase Animations
 * 
 *     Mirror Animations?:
 *     - Mirror animations for states?
 * 
 *     Mute Animations?:
 *     - Mute animations for states?
 * 
 *   Repeating Animations
 * 
 *     Cycle Time:
 *     - The amount of frames to wait before each animation cycle.
 *     - WARNING: Lower numbers can jeopardize game performance.
 * 
 *     Mirror Animations?:
 *     - Mirror repeating animations for states by default?
 * 
 *     Mute Animations?:
 *     - Mute repeating animations for states by default?
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 * 
 * 7. If this VisuStella MZ plugin is a paid product, all project team members
 * must purchase their own individual copies of the paid product if they are to
 * use it. Usage includes working on related game mechanics, managing related
 * code, and/or using related Plugin Commands and features. Redistribution of
 * the plugin and/or its code to other members of the team is NOT allowed
 * unless they own the plugin itself as that conflicts with Article 4.
 * 
 * 8. Any extensions and/or addendums made to this plugin's Terms of Use can be
 * found on VisuStella.com and must be followed.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.11: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Irina:
 * *** <Visual Breathing Effect>
 * *** <No Breathing>
 * **** Enables/disables breathing effects for your actors and/or enemies.
 *      Refer to the documentation for more details on how to set it up.
 * **** These are EXPERIMENTAL notetags. This means that these effects have the
 *      possibility of creating graphical glitches when used. Use at your own
 *      risk as these are not perfected features.
 * 
 * Version 1.10: January 1, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Yanfly.
 * *** <Visual Rainbow: +x> and <Visual Rainbow: -x>
 * 
 * Version 1.09: December 25, 2020
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Yanfly.
 * *** <Visual Opacity: x> and <Visual Opacity: x%>
 * 
 * Version 1.08: December 18, 2020
 * * Bug Fixes!
 * ** RPG Maker MV animations will no longer crash for unplayable sound
 *    effects. Requires updated Core Engine. Fix made by Yanfly.
 * 
 * Version 1.07: November 22, 2020
 * * Bug Fixes!
 * ** <State Motion: x> now works for sideview enemies. Keep in mind the state
 *    motion does not apply to the active battler during the Input phase. Fix
 *    made by Yanfly.
 * 
 * Version 1.06: November 8, 2020
 * * Bug Fixes!
 * ** <Add Animation: x> and <Erase Animation: x> notetags now work properly.
 *    Fix by Arisu.
 * 
 * Version 1.05: November 1, 2020
 * * Feature Update!
 * ** Upon dying, state removal popups are no longer shown to prevent massive
 *    clutter of the screen. Update by Irina.
 * 
 * Version 1.04: October 25, 2020
 * * Bug Fixes!
 * ** Zooming in should no longer display faint outlines around state sprites.
 *    Fix made by Arisu.
 * * Compatibility Update
 * ** Added compatibility with the Battle Core's new <Battler Sprite Grounded>
 *    notetag. Added by Irina.
 * 
 * Version 1.03: October 11, 2020
 * * Bug Fixes!
 * ** Motion Locked Battlers at the start of battle no longer show their entire
 *    sprite sheet. Fix made by Arisu.
 * 
 * Version 1.02: September 13, 2020
 * * Compatibility Update
 * ** Added compatibility with Battle Core's newest update for the new
 *    distortion effects.
 * 
 * Version 1.01: September 6, 2020
 * * Compatibility Update
 * ** Added compatibility with Battle Core's newest update for the
 *    <Battle UI Offset: +x, +y> notetags. Update made by Yanfly.
 *
 * Version 1.00: September 2, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param VisualStateEffects
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param General:struct
 * @text General Settings
 * @type struct<General>
 * @desc General settings for Visual State Effects.
 * @default {"Actors":"","ActorOverlay:eval":"true","ActorStateIcon:eval":"true","Enemies":"","EnemyOverlay:eval":"true","EnemyStateIcon:eval":"true"}
 *
 * @param BuffDebuff:struct
 * @text Buff/Debuff Settings
 * @type struct<BuffDebuff>
 * @desc Buff/Debuff settings for Visual State Effects.
 * @default {"ShowPopups:eval":"true","BuffPopupFmt:str":"%1▲","BuffTextColor:str":"24","BuffFlashColor:eval":"[0, 255, 0, 160]","BuffFlashDuration:num":"60","DebuffPopupFmt:str":"%1▼","DebuffTextColor:str":"27","DebuffFlashColor:eval":"[255, 0, 0, 160]","DebuffFlashDuration:num":"60","ShowAnimations:eval":"true","AnimationMirror:eval":"false","AnimationMute:eval":"false","BuffAnimations":"","Buff0Animation:num":"52","Buff1Animation:num":"53","Buff2Animation:num":"52","Buff3Animation:num":"52","Buff4Animation:num":"53","Buff5Animation:num":"53","Buff6Animation:num":"51","Buff7Animation:num":"51","DebuffAnimations":"","Debuff0Animation:num":"55","Debuff1Animation:num":"56","Debuff2Animation:num":"55","Debuff3Animation:num":"55","Debuff4Animation:num":"56","Debuff5Animation:num":"56","Debuff6Animation:num":"54","Debuff7Animation:num":"54"}
 *
 * @param State:struct
 * @text State Defaults
 * @type struct<State>
 * @desc Default State settings for Visual State Effects.
 * @default {"ShowPopups:eval":"true","AddPopupFmt:str":"+%1","ErasePopupFmt:str":"-%1","TextColor:str":"0","MatchTurnCountColor:eval":"true","FlashColor:eval":"[0, 0, 0, 0]","FlashDuration:num":"60","StateAnimations":"","AddEraseAnimations":"","AnimationMirror:eval":"false","AnimationMute:eval":"false","RepeatingAnimations":"","CycleTime:num":"300","RepeatMirror:eval":"false","RepeatMute:eval":"true"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * General Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~General:
 *
 * @param Actors
 *
 * @param ActorOverlay:eval
 * @text Show State Overlay?
 * @parent Actors
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show state overlays over an actor's head?
 * @default true
 *
 * @param ActorStateIcon:eval
 * @text Show State Icons?
 * @parent Actors
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show state icons over an actor's head?
 * @default true
 *
 * @param Enemies
 *
 * @param EnemyOverlay:eval
 * @text Show State Overlay?
 * @parent Enemies
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show state overlays over an enemy's head?
 * @default true
 *
 * @param EnemyStateIcon:eval
 * @text Show State Icons?
 * @parent Enemies
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show state icons over an enemy's head?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Buff/Debuff Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BuffDebuff:
 *
 * @param ShowPopups:eval
 * @text Show Popups?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show Buff/Debuff Popups when applied?
 * @default true
 *
 * @param BuffPopupFmt:str
 * @text Buff Format
 * @parent ShowPopups:eval
 * @desc How do you want the buff text to appear?
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param BuffTextColor:str
 * @text Text Color
 * @parent BuffPopupFmt:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 24
 *
 * @param BuffFlashColor:eval
 * @text Flash Color
 * @parent BuffPopupFmt:str
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 255, 0, 160]
 * 
 * @param BuffFlashDuration:num
 * @text Flash Duration
 * @parent BuffPopupFmt:str
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @param DebuffPopupFmt:str
 * @text Debuff Format
 * @parent ShowPopups:eval
 * @desc How do you want the debuff text to appear?
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param DebuffTextColor:str
 * @text Text Color
 * @parent DebuffPopupFmt:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 27
 *
 * @param DebuffFlashColor:eval
 * @text Flash Color
 * @parent DebuffPopupFmt:str
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @param DebuffFlashDuration:num
 * @text Flash Duration
 * @parent DebuffPopupFmt:str
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @param ShowAnimations:eval
 * @text Show Animations?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show Buff/Debuff Animations when applied?
 * @default true
 *
 * @param AnimationMirror:eval
 * @text Mirror Animations?
 * @parent ShowAnimations:eval
 * @type boolean
 * @on Mirror
 * @off Don't
 * @desc Mirror animations for buffs/debuffs?
 * @default false
 *
 * @param AnimationMute:eval
 * @text Mute Animations?
 * @parent ShowAnimations:eval
 * @type boolean
 * @on Mute
 * @off Don't
 * @desc Mute animations for buffs/debuffs?
 * @default false
 * 
 * @param BuffAnimations
 * @text Buff Animations
 * @parent ShowAnimations:eval
 *
 * @param Buff0Animation:num
 * @text MaxHP Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying MaxHP Buffs.
 * @default 52
 *
 * @param Buff1Animation:num
 * @text MaxMP Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying MaxMP Buffs.
 * @default 53
 *
 * @param Buff2Animation:num
 * @text ATK Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying ATK Buffs.
 * @default 52
 *
 * @param Buff3Animation:num
 * @text DEF Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying DEF Buffs.
 * @default 52
 *
 * @param Buff4Animation:num
 * @text MAT Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying MAT Buffs.
 * @default 53
 *
 * @param Buff5Animation:num
 * @text MDF Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying MDF Buffs.
 * @default 53
 *
 * @param Buff6Animation:num
 * @text AGI Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying AGI Buffs.
 * @default 51
 *
 * @param Buff7Animation:num
 * @text LUK Buff
 * @parent BuffAnimations
 * @type animation
 * @desc Animation played when applying LUK Buffs.
 * @default 51
 * 
 * @param DebuffAnimations
 * @text Debuff Animations
 * @parent ShowAnimations:eval
 *
 * @param Debuff0Animation:num
 * @text MaxHP Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying MaxHP Debuffs.
 * @default 55
 *
 * @param Debuff1Animation:num
 * @text MaxMP Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying MaxMP Debuffs.
 * @default 56
 *
 * @param Debuff2Animation:num
 * @text ATK Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying ATK Debuffs.
 * @default 55
 *
 * @param Debuff3Animation:num
 * @text DEF Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying DEF Debuffs.
 * @default 55
 *
 * @param Debuff4Animation:num
 * @text MAT Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying MAT Debuffs.
 * @default 56
 *
 * @param Debuff5Animation:num
 * @text MDF Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying MDF Debuffs.
 * @default 56
 *
 * @param Debuff6Animation:num
 * @text AGI Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying AGI Debuffs.
 * @default 54
 *
 * @param Debuff7Animation:num
 * @text LUK Debuff
 * @parent DebuffAnimations
 * @type animation
 * @desc Animation played when applying LUK Debuffs.
 * @default 54
 *
 */
/* ----------------------------------------------------------------------------
 * State Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~State:
 *
 * @param ShowPopups:eval
 * @text Show Popups?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show States Popups when applied and removed?
 * @default true
 *
 * @param AddPopupFmt:str
 * @text Add State Format
 * @parent ShowPopups:eval
 * @desc How do you want added states to appear?
 * %1 - State Name
 * @default +%1
 *
 * @param ErasePopupFmt:str
 * @text Erase State Format
 * @parent ShowPopups:eval
 * @desc How do you want erased states to appear?
 * %1 - State Name
 * @default -%1
 *
 * @param TextColor:str
 * @text Default Text Color
 * @parent ShowPopups:eval
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 0
 *
 * @param MatchTurnCountColor:eval
 * @text Match Turn Count?
 * @parent TextColor:str
 * @type boolean
 * @on Match
 * @off Don't
 * @desc Match turn count color by default?
 * @default true
 *
 * @param FlashColor:eval
 * @text Flash Color
 * @parent ShowPopups:eval
 * @desc Adjust the popup's default flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @param FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the default flash effect?
 * @default 60
 * 
 * @param StateAnimations
 * @text State Animations
 * 
 * @param AddEraseAnimations
 * @text Add/Erase Animations
 * @parent StateAnimations
 *
 * @param AnimationMirror:eval
 * @text Mirror Animations?
 * @parent AddEraseAnimations
 * @type boolean
 * @on Mirror
 * @off Don't
 * @desc Mirror animations for states?
 * @default false
 *
 * @param AnimationMute:eval
 * @text Mute Animations?
 * @parent AddEraseAnimations
 * @type boolean
 * @on Mute
 * @off Don't
 * @desc Mute animations for states?
 * @default false
 * 
 * @param RepeatingAnimations
 * @text Repeating Animations
 * @parent StateAnimations
 *
 * @param CycleTime:num
 * @text Cycle Time
 * @parent RepeatingAnimations
 * @type number
 * @min 1
 * @desc The amount of frames to wait before each animation cycle.
 * WARNING: Lower numbers can jeopardize game performance.
 * @default 300
 *
 * @param RepeatMirror:eval
 * @text Mirror Animations?
 * @parent RepeatingAnimations
 * @type boolean
 * @on Mirror
 * @off Don't
 * @desc Mirror repeating animations for states by default?
 * @default false
 *
 * @param RepeatMute:eval
 * @text Mute Animations?
 * @parent RepeatingAnimations
 * @type boolean
 * @on Mute
 * @off Don't
 * @desc Mute repeating animations for states by default?
 * @default true
 *
 */
//=============================================================================

const _0x204e=['VisualStateEffects','setupVisualStateEffectsPopup','createVisualBattlerOpacity','Buff','battleUIOffsetY','exit','Game_BattlerBase_initMembers','includes','ShowAnimations','ARRAYEVAL','RepeatMirror','Game_BattlerBase_die','toUpperCase','timeScale','parse','cos','onAddState','GJoov','updateOpacity','_hoverRand','_stateSprite','_cache','%1FlashDuration','IrZuj','Game_BattlerBase_refresh','base','AnimationMirror','match','RepeatMute','updateDistortionOpacity','State','isEnemy','iconIndex','width','onRemoveState','kBZxd','kBVyZ','Game_Battler_onRemoveState','Sprite_Battler_initMembers','constructor','Sprite_Actor_updateFrame','createStateIconSprite','_visualStateAnimationIndex','ARRAYNUM','gouGn','JSON','_customStateMotion','createVisualRepeatingStateAnimation','Add','createVisualStateTone','floor','Sprite_Battler_mainSpriteScaleX','opacity','Game_BattlerBase_decreaseBuff','visible','updateDragonbonesTimeScale','stXnh','toLowerCase','flashDuration','_distortionSprite','setupBuffDebuffPopup','initVisualHoverEffect','NUM','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','max','battleUIOffsetX','setupVisualBuffDebuffEffect','_hoverMinimum','getStateMotionIndex','ARRAYFUNC','Sprite_Battler_updateDragonbonesTimeScale','_die_bypass_visualStateEffects','kSWuJ','flashColor','getVisualStateTone','requestFauxAnimation','updateRepeatingVisualStateAnimation','Ammtx','param','_actor','note','setupVisualStateEffect','General','createVisualHoveringData','CycleTime','rateY','createVisualStateRainbow','updateVisualStateTone','169251NcjouF','JwvQw','die','vLNlY','mainSpriteScaleY','visualRepeatingStateAnimation','decreaseBuff','stateColor','Sprite_Actor_setBattler','addLoadListener','APVSw','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','length','name','FUNC','scale','push','version','Settings','waZZG','Sprite_Battler_updateOpacity','nSwqw','isBattlerGrounded','bind','createVisualRepeatingStateAnimationCycle','hniga','applyBreathingCalculations','smooth','_visualStateAnimationRepeatDuration','isSceneBattle','setupIconTextPopup','tUEbH','ICON_BUFF_START','round','height','visualStateTone','bjFsR','aDZbE','checkCacheKey','%1PopupFmt','ARRAYSTRUCT','Sprite_Enemy_setBattler','Sprite_Battler_extraPositionY','traitObjects','noBreathing','izsyl','format','isDead','emXyS','refreshMotion','getVisualRepeatingStateAnimationCycle','speed','ybyKY','701184fENyEB','states','hpRate','applyBreathingScaleX','817726EBNFCz','GUVLv','battler','split','1207959gGZMHp','updateVisualStateEffects','XonbQ','increaseBuff','addChild','startMotion','isStateAffected','_breathingRand','Sprite_Enemy_createStateIconSprite','randomInt','hover','applyBreathingScaleY','updateVisualStateRainbow','ActorStateIcon','clamp','_stateIconSprite','rate','505908VFUOrr','hpLinked','hoverData','isInputting','AweTl','stateOverlayIndex','STRUCT','_dragonbonesSpriteContainer','overlay','_frame','stateMotionLock','fbxqX','status','Erase','call','Sprite_Actor_createStateSprite','rateX','eazWj','VisuMZ_0_CoreEngine','initMembers','Sprite_Actor_refreshMotion','EnemyOverlay','1GaEZNe','MNBDZ','IAXLz','385239EchXNB','_battler','ihlzm','update','JubgV','_stateMotionLocked','speedY','2DKtOEI','refresh','setup','isActing','Game_BattlerBase_increaseBuff','STR','setColorTone','Game_Battler_onAddState','animation','dgKXr','visualBattlerOpacity','return\x200','Sprite_Actor_update','TextColor','deathStateId','_dragonbones','setupStateAnimation','setBattler','description','updateFrame','trim','OddtX','visualRepeatingStateAniCycle','motion','SlEhe','initVisualStateEffects','eZbzF','getStateOverlayIndex','stateMotionIndex','textColor','visualStateToneTargetSprite','VWSCt','parameters','getVisualRepeatingStateAnimation','aEgIa','visualStateRainbow','axDuH','pAJmi','min','IconSet','RjUIp','bitmap','updateVisualStateEffectsIcons','breathing','random','loadSystem','prototype','Sprite_SvEnemy_refreshMotion','ICON_DEBUFF_START','isActor','Sprite_Enemy_update','_mainSprite','ShowPopups','breathingData','%1%2Animation','yKkMj','FlashDuration','speedX','ARRAYSTR','kaHFS','some','deathHover','664879MlCezy','frameCount','updateVisualStateEffectsOverlay','AnimationMute','hoverHeight','mainSpriteScaleX','createStateSprite','extraPositionY','ConvertParams','_hue','customizeStatePopup','BuffDebuff','map','getStateMotionLock','Debuff','ARRAYJSON'];function _0x12d2(_0xbafa4f,_0x1ce89c){_0xbafa4f=_0xbafa4f-0xbf;let _0x204ed4=_0x204e[_0xbafa4f];return _0x204ed4;}const _0x323b6c=_0x12d2;(function(_0x55cd80,_0x184cb6){const _0x58f776=_0x12d2;while(!![]){try{const _0x2acf52=-parseInt(_0x58f776(0x1bd))*-parseInt(_0x58f776(0x175))+-parseInt(_0x58f776(0x178))*-parseInt(_0x58f776(0x17f))+-parseInt(_0x58f776(0x14a))+-parseInt(_0x58f776(0x15f))+-parseInt(_0x58f776(0x111))+-parseInt(_0x58f776(0x146))+parseInt(_0x58f776(0x14e));if(_0x2acf52===_0x184cb6)break;else _0x55cd80['push'](_0x55cd80['shift']());}catch(_0x536596){_0x55cd80['push'](_0x55cd80['shift']());}}}(_0x204e,0x6dadf));var label=_0x323b6c(0x1cd),tier=tier||0x0,dependencies=[_0x323b6c(0x171),'VisuMZ_1_BattleCore','VisuMZ_1_SkillsStatesCore'],pluginData=$plugins['filter'](function(_0x5c77f1){const _0x4a75c8=_0x323b6c;return _0x5c77f1[_0x4a75c8(0x16b)]&&_0x5c77f1[_0x4a75c8(0x191)][_0x4a75c8(0xc0)]('['+label+']');})[0x0];VisuMZ[label][_0x323b6c(0x123)]=VisuMZ[label]['Settings']||{},VisuMZ['ConvertParams']=function(_0x3d0739,_0x462d5c){const _0x18818e=_0x323b6c;for(const _0x3cee95 in _0x462d5c){if(_0x3cee95[_0x18818e(0xd4)](/(.*):(.*)/i)){const _0x43589f=String(RegExp['$1']),_0x279df4=String(RegExp['$2'])[_0x18818e(0xc5)]()[_0x18818e(0x193)]();let _0x2a4489,_0x4daad2,_0x283293;switch(_0x279df4){case _0x18818e(0xf7):_0x2a4489=_0x462d5c[_0x3cee95]!==''?Number(_0x462d5c[_0x3cee95]):0x0;break;case _0x18818e(0xe4):_0x4daad2=_0x462d5c[_0x3cee95]!==''?JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95]):[],_0x2a4489=_0x4daad2[_0x18818e(0x1c9)](_0x12ce32=>Number(_0x12ce32));break;case'EVAL':_0x2a4489=_0x462d5c[_0x3cee95]!==''?eval(_0x462d5c[_0x3cee95]):null;break;case _0x18818e(0xc2):_0x4daad2=_0x462d5c[_0x3cee95]!==''?JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95]):[],_0x2a4489=_0x4daad2[_0x18818e(0x1c9)](_0x274260=>eval(_0x274260));break;case _0x18818e(0xe6):_0x2a4489=_0x462d5c[_0x3cee95]!==''?JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95]):'';break;case _0x18818e(0x1cc):_0x4daad2=_0x462d5c[_0x3cee95]!==''?JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95]):[],_0x2a4489=_0x4daad2[_0x18818e(0x1c9)](_0x228a11=>JSON['parse'](_0x228a11));break;case _0x18818e(0x11f):_0x2a4489=_0x462d5c[_0x3cee95]!==''?new Function(JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95])):new Function(_0x18818e(0x18a));break;case _0x18818e(0xfe):_0x4daad2=_0x462d5c[_0x3cee95]!==''?JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95]):[],_0x2a4489=_0x4daad2[_0x18818e(0x1c9)](_0x253b09=>new Function(JSON[_0x18818e(0xc7)](_0x253b09)));break;case _0x18818e(0x184):_0x2a4489=_0x462d5c[_0x3cee95]!==''?String(_0x462d5c[_0x3cee95]):'';break;case _0x18818e(0x1b9):_0x4daad2=_0x462d5c[_0x3cee95]!==''?JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95]):[],_0x2a4489=_0x4daad2['map'](_0x20d3e5=>String(_0x20d3e5));break;case _0x18818e(0x165):_0x283293=_0x462d5c[_0x3cee95]!==''?JSON['parse'](_0x462d5c[_0x3cee95]):{},_0x2a4489=VisuMZ['ConvertParams']({},_0x283293);break;case _0x18818e(0x139):_0x4daad2=_0x462d5c[_0x3cee95]!==''?JSON[_0x18818e(0xc7)](_0x462d5c[_0x3cee95]):[],_0x2a4489=_0x4daad2['map'](_0x5d465e=>VisuMZ[_0x18818e(0x1c5)]({},JSON[_0x18818e(0xc7)](_0x5d465e)));break;default:continue;}_0x3d0739[_0x43589f]=_0x2a4489;}}return _0x3d0739;},(_0x548228=>{const _0x92423f=_0x323b6c,_0x214c5b=_0x548228['name'];for(const _0x744294 of dependencies){if(!Imported[_0x744294]){if(_0x92423f(0x141)===_0x92423f(0x141)){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x92423f(0x13f)](_0x214c5b,_0x744294)),SceneManager[_0x92423f(0x1d2)]();break;}else{function _0x2f045b(){const _0x21539f=_0x92423f;this[_0x21539f(0x15d)]?_0x405559['y']=this[_0x21539f(0x15d)]['y']+_0xa08fae[_0x21539f(0x133)]:_0x87e866['y']=-this['height']+_0x16e2a9[_0x21539f(0x133)];}}}}const _0x1e1e1d=_0x548228[_0x92423f(0x191)];if(_0x1e1e1d['match'](/\[Version[ ](.*?)\]/i)){const _0x5bc95e=Number(RegExp['$1']);_0x5bc95e!==VisuMZ[label][_0x92423f(0x122)]&&(alert(_0x92423f(0x11c)[_0x92423f(0x13f)](_0x214c5b,_0x5bc95e)),SceneManager[_0x92423f(0x1d2)]());}if(_0x1e1e1d[_0x92423f(0xd4)](/\[Tier[ ](\d+)\]/i)){const _0x3f1b85=Number(RegExp['$1']);_0x3f1b85<tier?(alert(_0x92423f(0xf8)[_0x92423f(0x13f)](_0x214c5b,_0x3f1b85,tier)),SceneManager[_0x92423f(0x1d2)]()):tier=Math[_0x92423f(0xf9)](_0x3f1b85,tier);}VisuMZ[_0x92423f(0x1c5)](VisuMZ[label]['Settings'],_0x548228[_0x92423f(0x19f)]);})(pluginData),VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0xbf)]=Game_BattlerBase['prototype']['initMembers'],Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x172)]=function(){const _0x2dd8dd=_0x323b6c;this[_0x2dd8dd(0xce)]={},VisuMZ['VisualStateEffects'][_0x2dd8dd(0xbf)][_0x2dd8dd(0x16d)](this);},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0xd1)]=Game_BattlerBase['prototype']['refresh'],Game_BattlerBase['prototype'][_0x323b6c(0x180)]=function(){const _0x2f5e24=_0x323b6c;this['_cache']={},VisuMZ[_0x2f5e24(0x1cd)][_0x2f5e24(0xd1)][_0x2f5e24(0x16d)](this);},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x137)]=function(_0x4e0317){const _0xa0cd99=_0x323b6c;return this[_0xa0cd99(0xce)]=this[_0xa0cd99(0xce)]||{},this['_cache'][_0x4e0317]!==undefined;},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x183)]=Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x151)],Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x151)]=function(_0xbccac0){const _0x24a073=_0x323b6c;VisuMZ[_0x24a073(0x1cd)][_0x24a073(0x183)][_0x24a073(0x16d)](this,_0xbccac0),this['setupVisualBuffDebuffEffect'](_0xbccac0,!![]);},VisuMZ['VisualStateEffects'][_0x323b6c(0xee)]=Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x117)],Game_BattlerBase[_0x323b6c(0x1ad)]['decreaseBuff']=function(_0x247cf7){const _0x3b5243=_0x323b6c;VisuMZ[_0x3b5243(0x1cd)][_0x3b5243(0xee)][_0x3b5243(0x16d)](this,_0x247cf7),this[_0x3b5243(0xfb)](_0x247cf7,![]);},Game_BattlerBase['prototype'][_0x323b6c(0xfb)]=function(_0x56c1b4,_0x3f410b){const _0x4a8dc5=_0x323b6c;if(!SceneManager[_0x4a8dc5(0x12e)]())return;if(!this[_0x4a8dc5(0x14c)]())return;const _0x40403c=VisuMZ['VisualStateEffects'][_0x4a8dc5(0x123)][_0x4a8dc5(0x1c8)],_0x422173=_0x3f410b?_0x4a8dc5(0x1d0):_0x4a8dc5(0x1cb);_0x40403c[_0x4a8dc5(0x1b3)]&&this[_0x4a8dc5(0x14c)]()[_0x4a8dc5(0xf5)](_0x56c1b4,_0x3f410b);if(_0x40403c[_0x4a8dc5(0xc1)]){if(_0x4a8dc5(0x177)===_0x4a8dc5(0x19e)){function _0x58f732(){return 0x0;}}else{const _0xa94451=[this],_0x3640c1=_0x40403c[_0x4a8dc5(0x1b5)[_0x4a8dc5(0x13f)](_0x422173,_0x56c1b4)]||0x0,_0x158615=_0x40403c['AnimationMirror'],_0x38a7e2=_0x40403c[_0x4a8dc5(0x1c0)];$gameTemp[_0x4a8dc5(0x104)](_0xa94451,_0x3640c1,_0x158615,_0x38a7e2);}}},Game_BattlerBase[_0x323b6c(0x1ad)]['setupVisualStateEffect']=function(_0x589225,_0x436984){const _0x42a56a=_0x323b6c;if(!SceneManager[_0x42a56a(0x12e)]())return;if(_0x589225===this[_0x42a56a(0x18d)]())return;if(_0x436984&&!this[_0x42a56a(0x154)](_0x589225))return;if(!_0x436984&&this[_0x42a56a(0x154)](_0x589225))return;if(!this[_0x42a56a(0x14c)]())return;const _0x1c89f6=VisuMZ['VisualStateEffects'][_0x42a56a(0x123)][_0x42a56a(0xd7)],_0x2f2bc4=$dataStates[_0x589225];if(!_0x2f2bc4)return;if(_0x1c89f6['ShowPopups']&&!_0x2f2bc4['note'][_0x42a56a(0xd4)](/<HIDE STATE POPUP>/i)){if('yOBph'==='LVwXk'){function _0x449ebb(){const _0x101171=_0x42a56a;_0x4415ab[_0x101171(0x144)]=_0x5b3065(_0x2c0b19['$1'])||0x0;}}else this[_0x42a56a(0x14c)]()['setupVisualStateEffectsPopup'](_0x589225,_0x436984);}VisuMZ[_0x42a56a(0x1cd)][_0x42a56a(0x18f)](this,_0x2f2bc4,_0x436984);},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x18f)]=function(_0xc1d57c,_0x184ad8,_0x3749ef){const _0x599540=_0x323b6c,_0x4a0e72=VisuMZ[_0x599540(0x1cd)][_0x599540(0x123)][_0x599540(0xd7)],_0x42d522=_0x4a0e72[_0x599540(0xd3)],_0x1a5bb3=_0x4a0e72['AnimationMute'],_0x4f9c23=_0x184ad8[_0x599540(0x109)];if(_0x3749ef&&_0x4f9c23['match'](/(?:ADD|APPLY) ANIMATION:[ ](\d+)/i)){const _0x347a07=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([_0xc1d57c],_0x347a07,_0x42d522,_0x1a5bb3);}if(!_0x3749ef&&_0x4f9c23[_0x599540(0xd4)](/(?:ERASE|REMOVE) ANIMATION:[ ](\d+)/i)){const _0x83df5a=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([_0xc1d57c],_0x83df5a,_0x42d522,_0x1a5bb3);}},Game_BattlerBase[_0x323b6c(0x1ad)]['getVisualRepeatingStateAnimation']=function(){const _0x589874=_0x323b6c,_0x239fb5=_0x589874(0x116);if(this['checkCacheKey'](_0x239fb5))return this[_0x589874(0xce)][_0x239fb5];return this[_0x589874(0xce)][_0x239fb5]=this[_0x589874(0xe8)](),this[_0x589874(0xce)][_0x239fb5];},Game_BattlerBase[_0x323b6c(0x1ad)]['createVisualRepeatingStateAnimation']=function(){const _0x3eb130=_0x323b6c;let _0xd75579=[];for(const _0x3e2d68 of this[_0x3eb130(0x147)]()){if(_0x3eb130(0x199)!==_0x3eb130(0x176)){if(!_0x3e2d68)continue;_0x3e2d68[_0x3eb130(0x109)]['match'](/<(?:REPEAT|REPEATING|CYCLE|STATE) ANIMATION:[ ](\d+)>/i)&&_0xd75579[_0x3eb130(0x121)](Number(RegExp['$1'])||0x0);}else{function _0x2f0857(){const _0x8992bf=_0x3eb130;let _0x4d838e=_0x1b2db6(_0x4464d0['$1'])[_0x8992bf(0x193)]()[_0x8992bf(0x14d)](',')[_0x8992bf(0x1c9)](_0x6c0b9=>_0x60bb8(_0x6c0b9)||0x0);while(_0x4d838e[_0x8992bf(0x11d)]<0x4)_0x4d838e[_0x8992bf(0x121)](0x0);return _0x4d838e[0x0]=_0x4d838e[0x0][_0x8992bf(0x15c)](-0xff,0xff),_0x4d838e[0x1]=_0x4d838e[0x1]['clamp'](-0xff,0xff),_0x4d838e[0x2]=_0x4d838e[0x2][_0x8992bf(0x15c)](-0xff,0xff),_0x4d838e[0x3]=_0x4d838e[0x3][_0x8992bf(0x15c)](0x0,0xff),_0x4d838e;}}}return _0xd75579;},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x143)]=function(){const _0xfae8eb=_0x323b6c,_0x21f8b8=_0xfae8eb(0x195);if(this['checkCacheKey'](_0x21f8b8))return this[_0xfae8eb(0xce)][_0x21f8b8];return this[_0xfae8eb(0xce)][_0x21f8b8]=this[_0xfae8eb(0x129)](),this[_0xfae8eb(0xce)][_0x21f8b8];},Game_BattlerBase[_0x323b6c(0x1ad)]['createVisualRepeatingStateAnimationCycle']=function(){const _0x17bea2=_0x323b6c;let _0x3573fe=[];for(const _0x13146e of this[_0x17bea2(0x147)]()){if(_0x17bea2(0xca)==='YwCiw'){function _0x1aaa8a(){const _0x2c155e=_0x17bea2,_0x11970f=_0x2c155e(0x195);if(this['checkCacheKey'](_0x11970f))return this[_0x2c155e(0xce)][_0x11970f];return this['_cache'][_0x11970f]=this['createVisualRepeatingStateAnimationCycle'](),this[_0x2c155e(0xce)][_0x11970f];}}else{if(!_0x13146e)continue;_0x13146e[_0x17bea2(0x109)][_0x17bea2(0xd4)](/<(?:REPEAT|REPEATING|CYCLE|STATE) ANIMATION CYCLE:[ ](\d+)>/i)?_0x3573fe['push'](Number(RegExp['$1'])||0x0):_0x3573fe[_0x17bea2(0x121)](VisuMZ[_0x17bea2(0x1cd)][_0x17bea2(0x123)]['State'][_0x17bea2(0x10d)]);}}return _0x3573fe;},Game_BattlerBase[_0x323b6c(0x1ad)]['stateMotionIndex']=function(){const _0x5dea0f=_0x323b6c,_0x2e13c8=_0x5dea0f(0x19b);if(this[_0x5dea0f(0x137)](_0x2e13c8))return this[_0x5dea0f(0xce)][_0x2e13c8];return this[_0x5dea0f(0xce)][_0x2e13c8]=this[_0x5dea0f(0xfd)](),this[_0x5dea0f(0xce)][_0x2e13c8];},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0xfd)]=function(){const _0x395490=_0x323b6c,_0x5ba267=this[_0x395490(0x147)]();for(const _0x4739e4 of _0x5ba267){if('CGqeM'==='aujQX'){function _0xcffe02(){const _0x321fe2=_0x395490;return this[_0x321fe2(0xe7)]=_0x7181ea(_0x2fbedd['$1'])['toLowerCase']()[_0x321fe2(0x193)](),0x4;}}else{if(!_0x4739e4)continue;if(_0x4739e4['note'][_0x395490(0xd4)](/<STATE MOTION:[ ](.*)>/i)){if(_0x395490(0x150)!==_0x395490(0x194))return this[_0x395490(0xe7)]=String(RegExp['$1'])[_0x395490(0xf2)]()['trim'](),0x4;else{function _0x43ff61(){const _0x3b1895=_0x395490;this[_0x3b1895(0xf4)]['opacity']=_0x4095b9[_0x3b1895(0x1a5)](this['_distortionSprite']['opacity']+_0x12a92b,_0x45d028);}}}else{if(_0x4739e4[_0x395490(0x196)]!==0x0){if(_0x395490(0x124)===_0x395490(0x1a3)){function _0x2067ba(){const _0x28587a=_0x395490,_0xe66b74=_0x24813f(_0x2bf0da['$1']);_0x13ca01[_0x28587a(0x104)]([_0x4b3041],_0xe66b74,_0x206207,_0x157460);}}else return _0x4739e4[_0x395490(0x196)];}}}}return 0x0;},Game_BattlerBase[_0x323b6c(0x1ad)]['stateMotionLock']=function(){const _0xdbcdc7=_0x323b6c,_0x27b7ec=_0xdbcdc7(0x169);if(this[_0xdbcdc7(0x137)](_0x27b7ec))return this[_0xdbcdc7(0xce)][_0x27b7ec];return this['_cache'][_0x27b7ec]=this[_0xdbcdc7(0x1ca)](),this[_0xdbcdc7(0xce)][_0x27b7ec];},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x1ca)]=function(){const _0x5aef0b=_0x323b6c,_0x16e9f5=this[_0x5aef0b(0x147)]();for(const _0x50fd30 of _0x16e9f5){if(_0x5aef0b(0xd0)!==_0x5aef0b(0xd0)){function _0x2d052f(){const _0x2636d4=_0x5aef0b,_0x57c8e2=_0x2a4c1d['VisualStateEffects'][_0x2636d4(0x123)]['State'],_0x42fbed=_0x57c8e2['AnimationMirror'],_0x7ecc24=_0x57c8e2[_0x2636d4(0x1c0)],_0x4ca518=_0x30c671[_0x2636d4(0x109)];if(_0x49fecc&&_0x4ca518[_0x2636d4(0xd4)](/(?:ADD|APPLY) ANIMATION:[ ](\d+)/i)){const _0x445b65=_0x23d715(_0x34487f['$1']);_0x112ccb['requestFauxAnimation']([_0x22b694],_0x445b65,_0x42fbed,_0x7ecc24);}if(!_0x5231de&&_0x4ca518['match'](/(?:ERASE|REMOVE) ANIMATION:[ ](\d+)/i)){const _0x3e45c8=_0x17799f(_0x259915['$1']);_0x13b41a['requestFauxAnimation']([_0x3f34e4],_0x3e45c8,_0x42fbed,_0x7ecc24);}}}else{if(!_0x50fd30)continue;if(_0x50fd30[_0x5aef0b(0x109)][_0x5aef0b(0xd4)](/<STATE MOTION (?:LOCK|LOCKED)>/i))return!![];}}return![];},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x164)]=function(){const _0x294646=_0x323b6c,_0x2fceda=_0x294646(0x164);if(this[_0x294646(0x137)](_0x2fceda))return this[_0x294646(0xce)][_0x2fceda];return this[_0x294646(0xce)][_0x2fceda]=this[_0x294646(0x19a)](),this[_0x294646(0xce)][_0x2fceda];},Game_BattlerBase[_0x323b6c(0x1ad)]['getStateOverlayIndex']=function(){const _0x420666=_0x323b6c,_0x170f76=this['states']();for(const _0x12d4b0 of _0x170f76){if(!_0x12d4b0)continue;if(_0x12d4b0[_0x420666(0x167)]!==0x0)return _0x12d4b0[_0x420666(0x167)];}return 0x0;},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x103)]=function(){const _0x4ea804=_0x323b6c,_0x105588=_0x4ea804(0x134);if(this[_0x4ea804(0x137)](_0x105588))return this['_cache'][_0x105588];return this[_0x4ea804(0xce)][_0x105588]=this[_0x4ea804(0xea)](),this[_0x4ea804(0xce)][_0x105588];},Game_BattlerBase[_0x323b6c(0x1ad)]['createVisualStateTone']=function(){const _0x21d3e4=_0x323b6c;for(const _0x184070 of this[_0x21d3e4(0x147)]()){if(!_0x184070)continue;if(_0x184070[_0x21d3e4(0x109)][_0x21d3e4(0xd4)](/<STATE TONE:[ ](.*)>/i)){if(_0x21d3e4(0x1a4)===_0x21d3e4(0x12a)){function _0xecdb3(){const _0x31a2f5=_0x21d3e4,_0xb06880=_0x16fe02(_0x1e5e97['$1']);_0xb06880!==_0x4c70d0[_0x594848]['version']&&(_0x788707(_0x31a2f5(0x11c)[_0x31a2f5(0x13f)](_0x503ef6,_0xb06880)),_0x55c951[_0x31a2f5(0x1d2)]());}}else{let _0x2ec2eb=String(RegExp['$1'])['trim']()[_0x21d3e4(0x14d)](',')['map'](_0xd14fa1=>Number(_0xd14fa1)||0x0);while(_0x2ec2eb['length']<0x4)_0x2ec2eb[_0x21d3e4(0x121)](0x0);return _0x2ec2eb[0x0]=_0x2ec2eb[0x0][_0x21d3e4(0x15c)](-0xff,0xff),_0x2ec2eb[0x1]=_0x2ec2eb[0x1]['clamp'](-0xff,0xff),_0x2ec2eb[0x2]=_0x2ec2eb[0x2][_0x21d3e4(0x15c)](-0xff,0xff),_0x2ec2eb[0x3]=_0x2ec2eb[0x3][_0x21d3e4(0x15c)](0x0,0xff),_0x2ec2eb;}}}return[0x0,0x0,0x0,0x0];},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x161)]=function(){const _0x409a46=_0x323b6c,_0x3c7ae8='hoverData';if(this['checkCacheKey'](_0x3c7ae8))return this['_cache'][_0x3c7ae8];return this[_0x409a46(0xce)][_0x3c7ae8]=this[_0x409a46(0x10c)](),this[_0x409a46(0xce)][_0x3c7ae8];},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x10c)]=function(){const _0x4ac273=_0x323b6c,_0x446e51=/<VISUAL (?:HOVER|FLOAT) EFFECT>\s*([\s\S]*)\s*<\/VISUAL (?:HOVER|FLOAT) EFFECT>/i,_0x516dfa={'hover':![],'base':0x64,'speed':0x14,'rate':0x5,'deathHover':![]};for(const _0x2d0cda of this[_0x4ac273(0x13c)]()){if(!_0x2d0cda)continue;if(_0x2d0cda[_0x4ac273(0x109)][_0x4ac273(0xd4)](_0x446e51)){if(_0x4ac273(0x145)===_0x4ac273(0x145)){_0x516dfa[_0x4ac273(0x158)]=!![];const _0x1a2bca=String(RegExp['$1']);_0x1a2bca['match'](/BASE:[ ](.*)/i)&&(_0x516dfa[_0x4ac273(0xd2)]=Number(RegExp['$1'])||0x0);if(_0x1a2bca[_0x4ac273(0xd4)](/SPEED:[ ](.*)/i)){if('tUEbH'===_0x4ac273(0x130))_0x516dfa[_0x4ac273(0x144)]=Number(RegExp['$1'])||0x0;else{function _0x46a8c1(){const _0x34cd6f=_0x4ac273;_0x19c1a0['VisualStateEffects'][_0x34cd6f(0x16e)][_0x34cd6f(0x16d)](this),this[_0x34cd6f(0xe2)]();}}}_0x1a2bca[_0x4ac273(0xd4)](/RATE:[ ](.*)/i)&&(_0x516dfa[_0x4ac273(0x15e)]=Number(RegExp['$1'])||0x0);if(_0x1a2bca[_0x4ac273(0xd4)](/DEATH: HOVER/i))_0x516dfa[_0x4ac273(0x1bc)]=!![];else _0x1a2bca[_0x4ac273(0xd4)](/DEATH: FLOOR/i)&&(_0x516dfa[_0x4ac273(0x1bc)]=![]);break;}else{function _0x114090(){const _0x42eded=_0x4ac273;_0x4d281a[_0x42eded(0x1cd)]['Sprite_Battler_updateOpacity'][_0x42eded(0x16d)](this),this[_0x42eded(0xd6)]();}}}}return _0x516dfa;},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x13d)]=function(){const _0x1c0189=_0x323b6c,_0x2a4e01='noBreathing';if(this[_0x1c0189(0x137)](_0x2a4e01))return this[_0x1c0189(0xce)][_0x2a4e01];const _0x2f32b7=this[_0x1c0189(0x13c)]();return this[_0x1c0189(0xce)][_0x2a4e01]=_0x2f32b7[_0x1c0189(0x1bb)](_0x19660b=>_0x19660b&&_0x19660b[_0x1c0189(0x109)][_0x1c0189(0xd4)](/<NO (?:BREATH|BREATHING)>/i)),this[_0x1c0189(0xce)][_0x2a4e01];},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x1b4)]=function(){const _0x2b5787=_0x323b6c,_0x4f25d7=_0x2b5787(0x1b4);if(this['checkCacheKey'](_0x4f25d7))return this[_0x2b5787(0xce)][_0x4f25d7];return this[_0x2b5787(0xce)][_0x4f25d7]=this['createVisualBreathingData'](),this['_cache'][_0x4f25d7];},Game_BattlerBase[_0x323b6c(0x1ad)]['createVisualBreathingData']=function(){const _0x45a8ed=_0x323b6c,_0x245ea9=/<VISUAL (?:BREATH|BREATHING) EFFECT>\s*([\s\S]*)\s*<\/VISUAL (?:BREATH|BREATHING) EFFECT>/i,_0x3a978b={'breathing':![],'speedX':0xa,'speedY':0xa,'rateX':0x0,'rateY':0.02,'hpLinked':![]};for(const _0x40341a of this[_0x45a8ed(0x13c)]()){if(!_0x40341a)continue;if(_0x40341a[_0x45a8ed(0x109)][_0x45a8ed(0xd4)](_0x245ea9)){_0x3a978b[_0x45a8ed(0x1aa)]=!![];const _0x234991=String(RegExp['$1']);_0x234991[_0x45a8ed(0xd4)](/SPEED:[ ](.*)/i)&&(_0x3a978b[_0x45a8ed(0x1b8)]=Number(RegExp['$1'])||0x0,_0x3a978b['speedY']=Number(RegExp['$1'])||0x0);if(_0x234991['match'](/(?:SPEEDX|SPEED X):[ ](.*)/i)){if(_0x45a8ed(0x101)!==_0x45a8ed(0x1a1))_0x3a978b[_0x45a8ed(0x1b8)]=Number(RegExp['$1'])||0x0;else{function _0x373df6(){const _0x1ad171=_0x45a8ed,_0x30e937=_0x15a2d(_0xd1da74['$1']);_0x30e937<_0x3279ad?(_0x3bafaf(_0x1ad171(0xf8)['format'](_0x2ba014,_0x30e937,_0x28698d)),_0x20dfba[_0x1ad171(0x1d2)]()):_0x2a4839=_0x4c4b3a['max'](_0x30e937,_0xf2e96);}}}_0x234991['match'](/(?:SPEEDY|SPEED Y):[ ](.*)/i)&&(_0x3a978b[_0x45a8ed(0x17e)]=Number(RegExp['$1'])||0x0);if(_0x234991[_0x45a8ed(0xd4)](/RATE:[ ](.*)/i)){if(_0x45a8ed(0xe5)!=='gouGn'){function _0x430bfb(){const _0x3943a2=_0x45a8ed,_0x5a5178='stateMotionIndex';if(this[_0x3943a2(0x137)](_0x5a5178))return this[_0x3943a2(0xce)][_0x5a5178];return this[_0x3943a2(0xce)][_0x5a5178]=this[_0x3943a2(0xfd)](),this[_0x3943a2(0xce)][_0x5a5178];}}else _0x3a978b[_0x45a8ed(0x16f)]=Number(RegExp['$1'])||0x0,_0x3a978b[_0x45a8ed(0x10e)]=Number(RegExp['$1'])||0x0;}if(_0x234991[_0x45a8ed(0xd4)](/(?:RATEX|RATE X):[ ](.*)/i)){if(_0x45a8ed(0x197)!=='GFYNM')_0x3a978b[_0x45a8ed(0x16f)]=Number(RegExp['$1'])||0x0;else{function _0x1531e5(){const _0x1dadc6=_0x45a8ed;_0x1520fc[_0x1dadc6(0x1bc)]=!![];}}}_0x234991[_0x45a8ed(0xd4)](/(?:RATEY|RATE Y):[ ](.*)/i)&&(_0x3a978b['rateY']=Number(RegExp['$1'])||0x0);if(_0x234991[_0x45a8ed(0xd4)](/(?:HPLINK|HP LINK|HPLINKED|HP LINKED): ON/i)){if(_0x45a8ed(0x17c)===_0x45a8ed(0xf1)){function _0x17eb9a(){const _0x58a5dd=_0x45a8ed;this[_0x58a5dd(0x15d)]&&this[_0x58a5dd(0x1a9)](),this['_stateSprite']&&this[_0x58a5dd(0x1bf)](),this[_0x58a5dd(0x105)](),this['updateVisualStateTone'](),this[_0x58a5dd(0x15a)]();}}else _0x3a978b['hpLinked']=!![];}else{if(_0x234991[_0x45a8ed(0xd4)](/(?:HPLINK|HP LINK|HPLINKED|HP LINKED): OFF/i)){if('kaHFS'!==_0x45a8ed(0x1ba)){function _0x2c09a9(){const _0x1a8533=_0x45a8ed;this[_0x1a8533(0x14c)]()[_0x1a8533(0x1ce)](_0x56e132,_0x408368);}}else _0x3a978b[_0x45a8ed(0x160)]=![];}}break;}}return _0x3a978b;},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x186)]=Game_Battler[_0x323b6c(0x1ad)][_0x323b6c(0xc9)],Game_Battler[_0x323b6c(0x1ad)][_0x323b6c(0xc9)]=function(_0x2261c3){const _0x4ac44c=_0x323b6c;VisuMZ['VisualStateEffects'][_0x4ac44c(0x186)]['call'](this,_0x2261c3),this['setupVisualStateEffect'](_0x2261c3,!![]);},VisuMZ[_0x323b6c(0x1cd)]['Game_BattlerBase_die']=Game_BattlerBase['prototype']['die'],Game_BattlerBase['prototype'][_0x323b6c(0x113)]=function(){const _0x1e1230=_0x323b6c;this[_0x1e1230(0x100)]=!![],VisuMZ[_0x1e1230(0x1cd)][_0x1e1230(0xc4)][_0x1e1230(0x16d)](this),this[_0x1e1230(0x100)]=undefined;},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0xde)]=Game_Battler['prototype'][_0x323b6c(0xdb)],Game_Battler[_0x323b6c(0x1ad)][_0x323b6c(0xdb)]=function(_0xa66e6){const _0x33185d=_0x323b6c;if(!this[_0x33185d(0x100)])this[_0x33185d(0x10a)](_0xa66e6,![]);VisuMZ[_0x33185d(0x1cd)]['Game_Battler_onRemoveState']['call'](this,_0xa66e6);},VisuMZ['VisualStateEffects']['Sprite_Battler_initMembers']=Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x172)],Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x172)]=function(){const _0x223cbc=_0x323b6c;VisuMZ[_0x223cbc(0x1cd)][_0x223cbc(0xdf)]['call'](this),this[_0x223cbc(0x198)](),this[_0x223cbc(0xf6)]();},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x198)]=function(){const _0x4139d3=_0x323b6c;this[_0x4139d3(0x12d)]=0x0,this[_0x4139d3(0xe3)]=0x0;},Sprite_Battler[_0x323b6c(0x1ad)]['setupBuffDebuffPopup']=function(_0x3e86e8,_0x36ee0a){const _0x4a0cf7=_0x323b6c,_0x2a115c=VisuMZ[_0x4a0cf7(0x1cd)][_0x4a0cf7(0x123)][_0x4a0cf7(0x1c8)],_0x4646e7=_0x36ee0a?'Buff':_0x4a0cf7(0x1cb),_0x1603a9=_0x36ee0a?Game_BattlerBase['ICON_BUFF_START']:Game_BattlerBase[_0x4a0cf7(0x1af)],_0x3c7425=_0x1603a9+_0x3e86e8,_0x458cf0=TextManager[_0x4a0cf7(0x107)](_0x3e86e8),_0x180aae=_0x2a115c[_0x4a0cf7(0x138)['format'](_0x4646e7)];if(_0x180aae['length']<=0x0)return;let _0x47bb9c=_0x180aae['format'](_0x458cf0);const _0x20d5a1={'textColor':_0x2a115c['%1TextColor'['format'](_0x4646e7)]||0x0,'flashColor':_0x2a115c['%1FlashColor'[_0x4a0cf7(0x13f)](_0x4646e7)]||[0x0,0x0,0x0,0x0],'flashDuration':_0x2a115c[_0x4a0cf7(0xcf)[_0x4a0cf7(0x13f)](_0x4646e7)]||0x0},_0x1381c5=ImageManager[_0x4a0cf7(0x1ac)]('IconSet');_0x1381c5[_0x4a0cf7(0x11a)](this[_0x4a0cf7(0x12f)]['bind'](this,_0x3c7425,_0x47bb9c,_0x20d5a1));},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x1ce)]=function(_0x4931aa,_0x4dd901){const _0x4795bc=_0x323b6c,_0x4430a6=VisuMZ['VisualStateEffects'][_0x4795bc(0x123)][_0x4795bc(0xd7)],_0x2654ac=$dataStates[_0x4931aa];if(!_0x2654ac)return;const _0x43204b=_0x4dd901?_0x4795bc(0xe9):_0x4795bc(0x16c),_0x393c6d=_0x2654ac[_0x4795bc(0xd9)];if(_0x393c6d<=0x0)return;const _0x41d7e1=_0x4430a6[_0x4795bc(0x138)[_0x4795bc(0x13f)](_0x43204b)];if(_0x41d7e1[_0x4795bc(0x11d)]<=0x0)return;let _0x915a0d=_0x41d7e1[_0x4795bc(0x13f)](_0x2654ac[_0x4795bc(0x11e)]);const _0x2de8c9={'textColor':_0x4430a6[_0x4795bc(0x18c)]||0x0,'flashColor':_0x4430a6['FlashColor']||[0x0,0x0,0x0,0x0],'flashDuration':_0x4430a6[_0x4795bc(0x1b7)]||0x0};_0x4430a6['MatchTurnCountColor']&&(_0x2de8c9['textColor']=ColorManager[_0x4795bc(0x118)](_0x2654ac));VisuMZ[_0x4795bc(0x1cd)][_0x4795bc(0x1c7)](_0x2654ac,_0x2de8c9);const _0x5d47c0=ImageManager[_0x4795bc(0x1ac)](_0x4795bc(0x1a6));_0x5d47c0[_0x4795bc(0x11a)](this[_0x4795bc(0x12f)][_0x4795bc(0x128)](this,_0x393c6d,_0x915a0d,_0x2de8c9));},VisuMZ['VisualStateEffects'][_0x323b6c(0x1c7)]=function(_0x148c83,_0x50089f){const _0x58a575=_0x323b6c,_0x5e760e=_0x148c83[_0x58a575(0x109)];if(_0x5e760e[_0x58a575(0xd4)](/<STATE POPUP>\s*([\s\S]*)\s*<\/STATE POPUP>/i)){const _0x9ce0ce=String(RegExp['$1'])[_0x58a575(0x193)]()[_0x58a575(0x14d)](/[\r\n]+/);for(const _0x5ed966 of _0x9ce0ce){if(_0x5ed966[_0x58a575(0xd4)](/(?:TEXT COLOR|TEXTCOLOR):[ ](.*)/i)){if(_0x58a575(0x16a)==='fbxqX')_0x50089f[_0x58a575(0x19c)]=String(RegExp['$1'])[_0x58a575(0x193)]();else{function _0x42ba67(){const _0x4ba5cf=_0x58a575;this['_stateSprite']=new _0x41348f(),this[_0x4ba5cf(0x152)](this[_0x4ba5cf(0xcd)]);}}}if(_0x5ed966[_0x58a575(0xd4)](/(?:FLASH COLOR|FLASHCOLOR):[ ](.*)/i)){_0x50089f[_0x58a575(0x102)]=String(RegExp['$1'])[_0x58a575(0x193)]()[_0x58a575(0x14d)](',')[_0x58a575(0x1c9)](_0x292e4=>Number(_0x292e4));while(_0x50089f['flashColor']['length']<=0x4){if('aVyAI'==='aVyAI')_0x50089f['flashColor'][_0x58a575(0x121)](0x0);else{function _0x58d82b(){return!![];}}};_0x50089f['flashDuration']=_0x50089f[_0x58a575(0xf3)]||0x1;}if(_0x5ed966['match'](/(?:FLASH DURATION|FLASHDURATION):[ ](\d+)/i)){if(_0x58a575(0x188)!==_0x58a575(0x17a))_0x50089f[_0x58a575(0xf3)]=Number(RegExp['$1']);else{function _0x2df4de(){const _0x450f12=_0x58a575;this[_0x450f12(0x18e)][_0x450f12(0x187)][_0x450f12(0xc6)]=0x0;}}}}}},Sprite_Battler['prototype'][_0x323b6c(0x105)]=function(){const _0x6fe939=_0x323b6c;if(!this[_0x6fe939(0x179)])return;if(!this[_0x6fe939(0x179)]['isSpriteVisible']())return;if(this['_visualStateAnimationRepeatDuration']>0x0){if(_0x6fe939(0x136)==='aDZbE'){this[_0x6fe939(0x12d)]--;return;}else{function _0xc8a023(){const _0x580276=_0x6fe939;if(this[_0x580276(0x179)][_0x580276(0x169)]()&&this[_0x580276(0x1b2)]&&this['_mainSprite']['bitmap']){if(this[_0x580276(0x17d)])return;this[_0x580276(0x17d)]=this[_0x580276(0x1b2)][_0x580276(0x168)][_0x580276(0xda)]>0x0;}else this['_stateMotionLocked']=![];_0x16f493[_0x580276(0x1cd)]['Sprite_Actor_updateFrame'][_0x580276(0x16d)](this);}}}const _0x1277b3=this[_0x6fe939(0x179)][_0x6fe939(0x1a0)](),_0x20a492=this[_0x6fe939(0x179)][_0x6fe939(0x143)]();if(_0x1277b3[_0x6fe939(0x11d)]<=0x0)return;if(this[_0x6fe939(0xe3)]>=_0x1277b3[_0x6fe939(0x11d)]){if(_0x6fe939(0x170)===_0x6fe939(0x170))this['_visualStateAnimationIndex']=0x0;else{function _0x237738(){const _0x5ae089=_0x6fe939,_0x47de58=this[_0x5ae089(0x108)];if(!_0x47de58)return;const _0x42cd3e=_0x47de58[_0x5ae089(0x19b)]();if(_0x42cd3e>=0x4){if(!_0x47de58[_0x5ae089(0x162)]()&&!_0x47de58[_0x5ae089(0x182)]())return this[_0x5ae089(0x153)](_0x47de58[_0x5ae089(0xe7)]);}_0x52ffd1[_0x5ae089(0x1cd)][_0x5ae089(0x173)]['call'](this);}}}const _0x1a53e9=_0x1277b3[this[_0x6fe939(0xe3)]],_0x2b7e2c=VisuMZ['VisualStateEffects'][_0x6fe939(0x123)]['State'],_0x422d55=[this[_0x6fe939(0x179)]],_0x4230d2=_0x2b7e2c[_0x6fe939(0xc3)],_0x417071=_0x2b7e2c[_0x6fe939(0xd5)];$gameTemp[_0x6fe939(0x104)](_0x422d55,_0x1a53e9,_0x4230d2,_0x417071);const _0x583382=_0x20a492[this[_0x6fe939(0xe3)]]||_0x2b7e2c[_0x6fe939(0x10d)];this[_0x6fe939(0x12d)]=_0x583382,this[_0x6fe939(0xe3)]++;},Sprite_Battler[_0x323b6c(0x1ad)]['updateVisualStateEffects']=function(){const _0x4ab004=_0x323b6c;this['_stateIconSprite']&&this[_0x4ab004(0x1a9)](),this['_stateSprite']&&this[_0x4ab004(0x1bf)](),this[_0x4ab004(0x105)](),this['updateVisualStateTone'](),this[_0x4ab004(0x15a)]();},Sprite_Battler['prototype'][_0x323b6c(0x1a9)]=function(){const _0x17e2e5=_0x323b6c;if(!this['_battler'])return;const _0x3e5dd0=VisuMZ[_0x17e2e5(0x1cd)][_0x17e2e5(0x123)][_0x17e2e5(0x10b)],_0x1da192=this['_stateIconSprite'];_0x1da192[_0x17e2e5(0xef)]=this[_0x17e2e5(0x179)]['isActor']()?_0x3e5dd0[_0x17e2e5(0x15b)]:_0x3e5dd0['EnemyStateIcon'];if(this[_0x17e2e5(0x179)][_0x17e2e5(0x1b0)]()){if(_0x17e2e5(0x11b)!==_0x17e2e5(0x11b)){function _0x38d7cf(){this['_stateMotionLocked']=![];}}else{_0x1da192['x']=0x0;this[_0x17e2e5(0x179)][_0x17e2e5(0xfa)]&&(_0x1da192['x']+=this['_battler'][_0x17e2e5(0xfa)]());_0x1da192['y']=-Math[_0x17e2e5(0x132)]((this[_0x17e2e5(0x133)]+0x28)*0.9);if(_0x1da192['y']<0x14-this['y']){if('eupAy'===_0x17e2e5(0x114)){function _0x45ef07(){const _0x389221=_0x17e2e5,_0x4bf574=[this],_0x1721a7=_0x2b4b77[_0x389221(0x1b5)[_0x389221(0x13f)](_0x55d547,_0x91d248)]||0x0,_0x2a5c72=_0x17dc78[_0x389221(0xd3)],_0xa9f0ee=_0x4f5528[_0x389221(0x1c0)];_0x447e05[_0x389221(0x104)](_0x4bf574,_0x1721a7,_0x2a5c72,_0xa9f0ee);}}else _0x1da192['y']=0x14-this['y'];}this[_0x17e2e5(0x179)][_0x17e2e5(0x1d1)]&&(_0x1da192['y']+=this[_0x17e2e5(0x179)]['battleUIOffsetY']());}}},Sprite_Battler['prototype'][_0x323b6c(0x1bf)]=function(){const _0x404250=_0x323b6c;if(!this[_0x404250(0x179)])return;const _0x59024c=VisuMZ['VisualStateEffects'][_0x404250(0x123)][_0x404250(0x10b)],_0x33dd20=this[_0x404250(0xcd)];_0x33dd20[_0x404250(0xef)]=this['_battler']['isActor']()?_0x59024c['ActorOverlay']:_0x59024c[_0x404250(0x174)];this['_svBattlerSprite']&&(this['_svBattlerSprite'][_0x404250(0xcd)][_0x404250(0xef)]=![]);this[_0x404250(0x179)][_0x404250(0xd8)]()&&!this['_battler']['hasSvBattler']()&&(this[_0x404250(0x15d)]?_0x33dd20['y']=this[_0x404250(0x15d)]['y']+_0x33dd20['height']:_0x33dd20['y']=-this[_0x404250(0x133)]+_0x33dd20[_0x404250(0x133)]);;},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x110)]=function(){const _0x337209=_0x323b6c;if(!this['_battler'])return;const _0x4cc252=this['visualStateToneTargetSprite'](),_0x69c816=this[_0x337209(0x179)]['getVisualStateTone']();_0x4cc252&&_0x4cc252[_0x337209(0x185)](_0x69c816);if(this[_0x337209(0x166)]){if(_0x337209(0x106)===_0x337209(0x1a7)){function _0x763104(){const _0x582d51=_0x337209,_0x343e3c=_0x3d5b11[_0x582d51(0x1cd)]['Settings'][_0x582d51(0x1c8)],_0x479167=_0x20f51e?_0x582d51(0x1d0):_0x582d51(0x1cb),_0x2611ba=_0x283f50?_0x37a01d[_0x582d51(0x131)]:_0xbb60f8[_0x582d51(0x1af)],_0x2c47af=_0x2611ba+_0x12fce1,_0x581ba2=_0x3b4fbf['param'](_0xd85c0a),_0x3bb035=_0x343e3c[_0x582d51(0x138)[_0x582d51(0x13f)](_0x479167)];if(_0x3bb035['length']<=0x0)return;let _0x1889c7=_0x3bb035[_0x582d51(0x13f)](_0x581ba2);const _0x2859ae={'textColor':_0x343e3c['%1TextColor'[_0x582d51(0x13f)](_0x479167)]||0x0,'flashColor':_0x343e3c['%1FlashColor'[_0x582d51(0x13f)](_0x479167)]||[0x0,0x0,0x0,0x0],'flashDuration':_0x343e3c[_0x582d51(0xcf)['format'](_0x479167)]||0x0},_0x5a2e81=_0x371bd1[_0x582d51(0x1ac)](_0x582d51(0x1a6));_0x5a2e81['addLoadListener'](this[_0x582d51(0x12f)][_0x582d51(0x128)](this,_0x2c47af,_0x1889c7,_0x2859ae));}}else this['_dragonbonesSpriteContainer'][_0x337209(0x185)](_0x69c816);}},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x19d)]=function(){const _0x4b78d4=_0x323b6c;return this[_0x4b78d4(0x1b2)]||this;},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0xff)]=Sprite_Battler[_0x323b6c(0x1ad)]['updateDragonbonesTimeScale'],Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0xf0)]=function(){const _0x5780ca=_0x323b6c;if(!this['_dragonbones'])return;if(this[_0x5780ca(0x179)][_0x5780ca(0x169)]()){if(_0x5780ca(0xdc)!==_0x5780ca(0x126))this[_0x5780ca(0x18e)][_0x5780ca(0x187)][_0x5780ca(0xc6)]=0x0;else{function _0x2d2bca(){const _0x3bef7a=_0x5780ca,_0x348555=_0x2ae2c3(_0x4872f3['$1']);_0x5cae5d[_0x3bef7a(0x104)]([_0x18dc24],_0x348555,_0x33ba7f,_0x49b689);}}}else{if('nZvAU'===_0x5780ca(0x14b)){function _0x1ffdd9(){const _0x3b821b=_0x5780ca;this[_0x3b821b(0x155)]=this['_breathingRand']??_0x3f56c5['randomInt'](0x2710);let _0x116f26=_0x1842f4[_0x3b821b(0x1be)]+this['_breathingRand'];return _0x1ec896['hpLinked']&&(_0x114c56/=this[_0x3b821b(0x179)]['hpRate']()),_0x143b44[_0x3b821b(0xc8)](_0x116f26/_0xdd0a5d)*_0x36135a;}}else VisuMZ[_0x5780ca(0x1cd)][_0x5780ca(0xff)][_0x5780ca(0x16d)](this);}},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0xf6)]=function(){const _0x497f41=_0x323b6c;this[_0x497f41(0xfc)]=-0x1;},VisuMZ['VisualStateEffects'][_0x323b6c(0x13b)]=Sprite_Battler['prototype']['extraPositionY'],Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x1c4)]=function(){const _0x3c5b0a=_0x323b6c;let _0x3c3c69=VisuMZ[_0x3c5b0a(0x1cd)][_0x3c5b0a(0x13b)]['call'](this);return _0x3c3c69-=Math[_0x3c5b0a(0xeb)](this['hoverHeight']()),_0x3c3c69;},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x1c1)]=function(){const _0x265a69=_0x323b6c;if(this['constructor']===Sprite_SvEnemy)return 0x0;if(!this[_0x265a69(0x179)])return 0x0;if(this['_battler'][_0x265a69(0x127)]&&this[_0x265a69(0x179)][_0x265a69(0x127)]())return 0x0;const _0x390b59=this[_0x265a69(0x179)]['hoverData']();let _0x470a9a=0x0;this[_0x265a69(0xcc)]=this['_hoverRand']||Math[_0x265a69(0xeb)](Math[_0x265a69(0x1ab)]()*0x2710);const _0x4db6dd=Graphics[_0x265a69(0x1be)]+this[_0x265a69(0xcc)],_0x503798=_0x390b59[_0x265a69(0x144)],_0x1a542b=_0x390b59[_0x265a69(0x15e)];let _0x159ff8=_0x390b59[_0x265a69(0x158)];if(_0x159ff8&&this[_0x265a69(0x179)][_0x265a69(0x140)]())_0x159ff8=_0x390b59[_0x265a69(0x1bc)];if(_0x159ff8){_0x470a9a+=Math[_0x265a69(0xc8)](_0x4db6dd/(_0x503798||0x1))*_0x1a542b,_0x470a9a+=_0x390b59['base'];if(this[_0x265a69(0xfc)]<0x0)this[_0x265a69(0xfc)]=_0x470a9a;const _0x5d1cb0=this[_0x265a69(0xfc)]+_0x503798/Math[_0x265a69(0xf9)](0x1,_0x1a542b**1.5);this['_hoverMinimum']=Math[_0x265a69(0x1a5)](_0x5d1cb0,_0x470a9a);}else{const _0x5f57ca=this[_0x265a69(0xfc)]-_0x503798/Math[_0x265a69(0xf9)](0x1,_0x1a542b/0x2);this[_0x265a69(0xfc)]=Math[_0x265a69(0xf9)](_0x5f57ca,0x0);}return Math[_0x265a69(0xf9)](0x0,this[_0x265a69(0xfc)]);},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x125)]=Sprite_Battler['prototype'][_0x323b6c(0xcb)],Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0xcb)]=function(){const _0x2aad57=_0x323b6c;VisuMZ['VisualStateEffects'][_0x2aad57(0x125)][_0x2aad57(0x16d)](this),this[_0x2aad57(0xd6)]();},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0xd6)]=function(){const _0xd9e3bf=_0x323b6c;if(!this['_distortionSprite'])return;if(!this['_battler'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x5c85ed=this[_0xd9e3bf(0x179)][_0xd9e3bf(0x189)]();if(this[_0xd9e3bf(0xf4)]['opacity']!==_0x5c85ed){const _0x4a7d3c=0x8;if(this[_0xd9e3bf(0xf4)][_0xd9e3bf(0xed)]>_0x5c85ed)this[_0xd9e3bf(0xf4)]['opacity']=Math['max'](this[_0xd9e3bf(0xf4)][_0xd9e3bf(0xed)]-_0x4a7d3c,_0x5c85ed);else{if('ckzER'===_0xd9e3bf(0x1b6)){function _0x46da71(){const _0x3e963d=_0xd9e3bf;_0x165aa4[_0x3e963d(0x1cd)][_0x3e963d(0x1b1)][_0x3e963d(0x16d)](this),this[_0x3e963d(0x14f)]();}}else this['_distortionSprite']['opacity']=Math['min'](this[_0xd9e3bf(0xf4)][_0xd9e3bf(0xed)]+_0x4a7d3c,_0x5c85ed);}}},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x189)]=function(){const _0x1b5ca7=_0x323b6c,_0x12181e='visualBattlerOpacity';if(this[_0x1b5ca7(0x137)](_0x12181e))return this[_0x1b5ca7(0xce)][_0x12181e];return this['_cache'][_0x12181e]=this['createVisualBattlerOpacity'](),this[_0x1b5ca7(0xce)][_0x12181e];},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x1cf)]=function(){const _0x704e2b=_0x323b6c;for(const _0x5c74f0 of this['states']()){if(_0x704e2b(0x135)===_0x704e2b(0x135)){if(!_0x5c74f0)continue;if(_0x5c74f0['note'][_0x704e2b(0xd4)](/<VISUAL OPACITY:[ ](\d+)([%％])>/i)){const _0x575df6=Number(RegExp['$1'])*0.01;return Math[_0x704e2b(0x132)](_0x575df6*0xff)['clamp'](0x0,0xff);}if(_0x5c74f0[_0x704e2b(0x109)][_0x704e2b(0xd4)](/<VISUAL OPACITY:[ ](\d+)>/i))return Number(RegExp['$1'])[_0x704e2b(0x15c)](0x0,0xff);}else{function _0x5a5ab1(){const _0x4f7c94=_0x704e2b;if(!_0x43c331['isInputting']()&&!_0x552ae3[_0x4f7c94(0x182)]())return this[_0x4f7c94(0x153)](_0x4c19c0[_0x4f7c94(0xe7)]);}}}return 0xff;},Sprite_Battler[_0x323b6c(0x1ad)]['updateVisualStateRainbow']=function(){const _0xfe294b=_0x323b6c;if(!this[_0xfe294b(0x179)])return;const _0x5930e0=this[_0xfe294b(0x179)][_0xfe294b(0x1a2)]();if(_0x5930e0===0x0&&this[_0xfe294b(0xf4)][_0xfe294b(0x1c6)]!==0x0)this['_distortionSprite']['setHue'](0x0);else{if('pwlRr'===_0xfe294b(0x13e)){function _0x227979(){const _0x47c528=_0xfe294b;_0x15cf60[_0x47c528(0xd2)]=_0x1ab396(_0x13f07c['$1'])||0x0;}}else{let _0x4af959=this[_0xfe294b(0xf4)][_0xfe294b(0x1c6)]+_0x5930e0;_0x4af959%=0x168,this[_0xfe294b(0xf4)]['setHue'](_0x4af959);}}},Game_BattlerBase[_0x323b6c(0x1ad)][_0x323b6c(0x1a2)]=function(){const _0x1f932f=_0x323b6c,_0x215a5d=_0x1f932f(0x1a2);if(this[_0x1f932f(0x137)](_0x215a5d))return this[_0x1f932f(0xce)][_0x215a5d];return this[_0x1f932f(0xce)][_0x215a5d]=this[_0x1f932f(0x10f)](),this['_cache'][_0x215a5d];},Game_BattlerBase[_0x323b6c(0x1ad)]['createVisualStateRainbow']=function(){const _0x214e8c=_0x323b6c;for(const _0x4ea498 of this[_0x214e8c(0x147)]()){if(!_0x4ea498)continue;if(_0x4ea498[_0x214e8c(0x109)][_0x214e8c(0xd4)](/<VISUAL RAINBOW:[ ]([\+\-]\d+)>/i)){if('AAnPW'===_0x214e8c(0x163)){function _0x3796e9(){const _0x1bd719=_0x214e8c;let _0x133f66=_0x41580b[_0x1bd719(0x1cd)][_0x1bd719(0x13b)]['call'](this);return _0x133f66-=_0x4182ba[_0x1bd719(0xeb)](this['hoverHeight']()),_0x133f66;}}else return Number(RegExp['$1']);}}return 0x0;},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0xec)]=Sprite_Battler[_0x323b6c(0x1ad)]['mainSpriteScaleX'],Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x1c2)]=function(){const _0x398cdd=_0x323b6c;let _0x10451c=VisuMZ['VisualStateEffects'][_0x398cdd(0xec)][_0x398cdd(0x16d)](this);return _0x10451c+=this[_0x398cdd(0x149)](),_0x10451c;},VisuMZ[_0x323b6c(0x1cd)]['Sprite_Battler_mainSpriteScaleY']=Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x115)],Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x115)]=function(){const _0x2a11ee=_0x323b6c;let _0x44cced=VisuMZ['VisualStateEffects']['Sprite_Battler_mainSpriteScaleY'][_0x2a11ee(0x16d)](this);return _0x44cced+=this['applyBreathingScaleY'](),_0x44cced;},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x149)]=function(){const _0x180255=_0x323b6c;if(!this['_battler'])return 0x0;if(this[_0x180255(0x179)]['noBreathing']())return 0x0;const _0x166238=this['_battler'][_0x180255(0x1b4)]();if(!_0x166238)return 0x0;if(!_0x166238[_0x180255(0x1aa)])return 0x0;let _0x1f3447=this[_0x180255(0x12b)](_0x166238,_0x166238['speedX'],_0x166238['rateX']);const _0x5dd03a=this['_distortionSprite'][_0x180255(0x120)]['x']>0x0?0x1:-0x1;return _0x1f3447*_0x5dd03a;},Sprite_Battler[_0x323b6c(0x1ad)][_0x323b6c(0x159)]=function(){const _0x20a2da=_0x323b6c;if(!this[_0x20a2da(0x179)])return 0x0;if(this[_0x20a2da(0x179)][_0x20a2da(0x13d)]())return 0x0;const _0x293921=this[_0x20a2da(0x179)][_0x20a2da(0x1b4)]();if(!_0x293921)return 0x0;if(!_0x293921[_0x20a2da(0x1aa)])return 0x0;let _0x44828=this[_0x20a2da(0x12b)](_0x293921,_0x293921[_0x20a2da(0x17e)],_0x293921[_0x20a2da(0x10e)]);return _0x44828;},Sprite_Battler['prototype'][_0x323b6c(0x12b)]=function(_0x1b2623,_0x539b14,_0x4b55be){const _0xac6e3e=_0x323b6c;this['_breathingRand']=this['_breathingRand']??Math[_0xac6e3e(0x157)](0x2710);let _0x488f8c=Graphics[_0xac6e3e(0x1be)]+this[_0xac6e3e(0x155)];if(_0x1b2623[_0xac6e3e(0x160)]){if(_0xac6e3e(0x112)!==_0xac6e3e(0x112)){function _0x55f4d6(){const _0x16d368=_0xac6e3e,_0x5dde55=_0x6571ea(_0x287420['$1'])*0.01;return _0x839d7a[_0x16d368(0x132)](_0x5dde55*0xff)[_0x16d368(0x15c)](0x0,0xff);}}else _0x539b14/=this[_0xac6e3e(0x179)][_0xac6e3e(0x148)]();}return Math[_0xac6e3e(0xc8)](_0x488f8c/_0x539b14)*_0x4b55be;},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x16e)]=Sprite_Actor['prototype'][_0x323b6c(0x1c3)],Sprite_Actor[_0x323b6c(0x1ad)][_0x323b6c(0x1c3)]=function(){const _0x448124=_0x323b6c;VisuMZ[_0x448124(0x1cd)][_0x448124(0x16e)][_0x448124(0x16d)](this),this[_0x448124(0xe2)]();},Sprite_Actor[_0x323b6c(0x1ad)][_0x323b6c(0xe2)]=function(){const _0x10812e=_0x323b6c;if(this[_0x10812e(0xe0)]!==Sprite_Actor)return;this[_0x10812e(0x15d)]=new Sprite_StateIcon(),this['addChild'](this[_0x10812e(0x15d)]),this[_0x10812e(0x15d)][_0x10812e(0x1a8)][_0x10812e(0x12c)]=![];},VisuMZ['VisualStateEffects'][_0x323b6c(0x173)]=Sprite_Actor['prototype']['refreshMotion'],Sprite_Actor['prototype'][_0x323b6c(0x142)]=function(){const _0x56920f=_0x323b6c,_0x2e9a6a=this[_0x56920f(0x108)];if(!_0x2e9a6a)return;const _0x3d51b5=_0x2e9a6a[_0x56920f(0x19b)]();if(_0x3d51b5>=0x4){if(!_0x2e9a6a[_0x56920f(0x162)]()&&!_0x2e9a6a[_0x56920f(0x182)]())return this[_0x56920f(0x153)](_0x2e9a6a[_0x56920f(0xe7)]);}VisuMZ[_0x56920f(0x1cd)][_0x56920f(0x173)]['call'](this);},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x1ae)]=Sprite_SvEnemy[_0x323b6c(0x1ad)][_0x323b6c(0x142)],Sprite_SvEnemy[_0x323b6c(0x1ad)]['refreshMotion']=function(){const _0x32af4f=_0x323b6c,_0x3c3a94=this[_0x32af4f(0x108)];if(!_0x3c3a94)return;const _0x460f48=_0x3c3a94['stateMotionIndex']();if(_0x460f48>=0x4){if(_0x32af4f(0xdd)===_0x32af4f(0xdd)){if(!_0x3c3a94[_0x32af4f(0x162)]()&&!_0x3c3a94[_0x32af4f(0x182)]())return this['startMotion'](_0x3c3a94['_customStateMotion']);}else{function _0x38a5ff(){const _0x46c3d8=_0x32af4f,_0x3ee9a0=_0x46c3d8(0x134);if(this[_0x46c3d8(0x137)](_0x3ee9a0))return this['_cache'][_0x3ee9a0];return this[_0x46c3d8(0xce)][_0x3ee9a0]=this[_0x46c3d8(0xea)](),this[_0x46c3d8(0xce)][_0x3ee9a0];}}}VisuMZ[_0x32af4f(0x1cd)][_0x32af4f(0x1ae)][_0x32af4f(0x16d)](this);},VisuMZ['VisualStateEffects'][_0x323b6c(0x119)]=Sprite_Actor['prototype']['setBattler'],Sprite_Actor[_0x323b6c(0x1ad)]['setBattler']=function(_0x5102ca){const _0x5d0c21=_0x323b6c;VisuMZ[_0x5d0c21(0x1cd)][_0x5d0c21(0x119)][_0x5d0c21(0x16d)](this,_0x5102ca);if(this[_0x5d0c21(0x15d)])this[_0x5d0c21(0x15d)][_0x5d0c21(0x181)](_0x5102ca);},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x18b)]=Sprite_Actor[_0x323b6c(0x1ad)]['update'],Sprite_Actor[_0x323b6c(0x1ad)]['update']=function(){const _0x2ccbe9=_0x323b6c;VisuMZ[_0x2ccbe9(0x1cd)][_0x2ccbe9(0x18b)][_0x2ccbe9(0x16d)](this),this[_0x2ccbe9(0x14f)]();},VisuMZ[_0x323b6c(0x1cd)]['Sprite_Actor_updateFrame']=Sprite_Actor['prototype'][_0x323b6c(0x192)],Sprite_Actor[_0x323b6c(0x1ad)]['updateFrame']=function(){const _0x4e3de1=_0x323b6c;if(this['_battler'][_0x4e3de1(0x169)]()&&this[_0x4e3de1(0x1b2)]&&this[_0x4e3de1(0x1b2)]['bitmap']){if(this['_stateMotionLocked'])return;this[_0x4e3de1(0x17d)]=this['_mainSprite'][_0x4e3de1(0x168)][_0x4e3de1(0xda)]>0x0;}else this[_0x4e3de1(0x17d)]=![];VisuMZ[_0x4e3de1(0x1cd)][_0x4e3de1(0xe1)][_0x4e3de1(0x16d)](this);},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x156)]=Sprite_Enemy[_0x323b6c(0x1ad)][_0x323b6c(0xe2)],Sprite_Enemy[_0x323b6c(0x1ad)][_0x323b6c(0xe2)]=function(){const _0x33035a=_0x323b6c;this[_0x33035a(0x1c3)](),VisuMZ['VisualStateEffects'][_0x33035a(0x156)][_0x33035a(0x16d)](this);},Sprite_Enemy[_0x323b6c(0x1ad)][_0x323b6c(0x1c3)]=function(){const _0xab5b49=_0x323b6c;this['_stateSprite']=new Sprite_StateOverlay(),this[_0xab5b49(0x152)](this[_0xab5b49(0xcd)]);},VisuMZ[_0x323b6c(0x1cd)][_0x323b6c(0x13a)]=Sprite_Enemy[_0x323b6c(0x1ad)][_0x323b6c(0x190)],Sprite_Enemy[_0x323b6c(0x1ad)]['setBattler']=function(_0x324ff1){const _0x5eda6c=_0x323b6c;VisuMZ[_0x5eda6c(0x1cd)][_0x5eda6c(0x13a)]['call'](this,_0x324ff1);if(this['_stateSprite'])this[_0x5eda6c(0xcd)][_0x5eda6c(0x181)](_0x324ff1);},VisuMZ[_0x323b6c(0x1cd)]['Sprite_Enemy_update']=Sprite_Enemy['prototype'][_0x323b6c(0x17b)],Sprite_Enemy[_0x323b6c(0x1ad)][_0x323b6c(0x17b)]=function(){const _0x320a93=_0x323b6c;VisuMZ['VisualStateEffects'][_0x320a93(0x1b1)]['call'](this),this[_0x320a93(0x14f)]();};