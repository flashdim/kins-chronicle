//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.39;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.39] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: ETB Action Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 *   Sound Effect:
 *   - Which system sound effect do you wish to play for this scenario?
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @param alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @arg alterSound:str
 * @text Sound Effect
 * @type combo
 * @option None
 * @option Cursor
 * @option Ok
 * @option Cancel
 * @option Buzzer
 * @option Equip
 * @option Save
 * @option Load
 * @option BattleStart
 * @option Escape
 * @option EnemyAttack
 * @option EnemyDamage
 * @option EnemyCollapse
 * @option BossCollapse1
 * @option BossCollapse2
 * @option ActorDamage
 * @option ActorCollapse
 * @option Recovery
 * @option Miss
 * @option Evasion
 * @option MagicEvasion
 * @option Reflection
 * @option Shop
 * @option UseItem
 * @option UseSkill
 * @desc Which system sound effect do you wish to play for this scenario?
 * @default UseSkill
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"1","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 1
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0xb61c=['processEscape','isChanting','SvBattlerMass-%1-%2','createDistortionSprite','includes','cameraClamp','drawItemStyleIconText','addSkillTypeCommand','Msxqy','getBattlePortraitOffsetX','weatherType','isPhysical','getNextSubject','TVIgc','BattleStartEvent','Game_Battler_performEvasion','ActSeq_Mechanics_RemoveState','Scene_Battle_createAllWindows','parse','displayChangedBuffs','zzEBs','VariableHeal','invokeMagicReflection','_preBattleCommonEvent','isQueueOptionsMenu','_damageContainer','Scene_Battle_onActorCancel','GHpCo','Vvqep','makeEscapeRatio','kODld','VisuMZ_2_DragonbonesUnion','gainFullActionsPTB','emerge','customDamageFormula','applyFreezeMotionFrames','xArNA','AutoMeleeAoE','WaitForAnimation','_skewY','_jumpWholeDuration','setActiveWeaponSet','adjustPosition','popBaseLine','isAlwaysHidden','battleCameraData','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Sprite_Enemy_setHue','CGLgC','damageContainer','getTraitSetKeys','clearFreezeMotion','remove','PreEndTurnJS','performAttack','members','visibilityState','_jumpDuration','setupHpGaugeSprite','CgZrG','_effectType','icon','_battleCoreBattleStartEvent','isAttack','JS\x20%1END\x20BATTLE','_requestRefresh','YVcXR','DefaultSoftCap','updateScale','isBypassDamageCap','_updateCursorFilterArea','JS\x20%1APPLY\x20%2','uiInputPosition','commandAutoBattle','HQclu','rkeSm','AS\x20USER','VisuMZ_3_ActSeqCamera','qwOyw','makeSpeed','onEscapeFailure','Scene_Battle_createPartyCommandWindow','Game_Battler_makeSpeed','QZwtO','DistanceY','Sprite_Actor_createStateSprite','AOOSE','ActSeq_Weapon_NextActiveWeapon','makeActionListAutoAttack','svBattlerShadowVisible','scope','VHYFZ','hdlGI','ActSeq_Movement_WaitForFloat','JumpToLabel','setSvBattlerSprite','makeHpDamageText','isStateResist','ecnXC','power','ActSeq_Mechanics_SwapWeapon','zwuEe','QoL','ZkUnO','WaitForSpin','Item-%1-%2','sfUPg','applyGuard','Enemy-%1-%2','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','isInputting','equips','ActSeq_BattleLog_WaitForNewLine','qPcfz','updateRefresh','_actionInputIndex','isCTB','updateBattlerContainer','yIeOw','Window_Options_addGeneralOptions','CvBOL','mhvqk','format','front\x20base','ShowAddedState','yBmow','pattern','isTpbCharged','tESIb','EVAL','createEmptyBitmap','ActSeq_Movement_Jump','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','addState','drawItem','VisuMZ_2_BattleSystemOTB','turn','ScaleX','useItem','isDisplayEmergedEnemies','close','applyBattleCoreJS','_stateIconSprite','commandNameWindowDrawBackground','battleCommandIcon','ParseWeaponNotetags','updateFlip','alive\x20enemies\x20not\x20user','statusWindowRect','refreshActorPortrait','bvwsQ','loadEnemy','onAngleEnd','item','iwEKb','PostStartTurnJS','Apjjv','logWindowRect','isSTB','Sprite_Battleback_adjustPosition','ActSeq_Mechanics_BoostPointsStoreData','WrSRH','changeCtbChargeTime','ReqrO','BnkMB','Scene_Boot_onDatabaseLoaded','retreat','actorCommandAutoBattle','partyCommandWindowRect','partyCommandWindowRectXPStyle','isAlive','magicSkills','SkillsStatesCore','front\x20center','_colorType','%1StartActionJS','changeBattlebacks','_immortal','ShowAddedBuff','isUndecided','_effectsContainer','KJkKu','PopupShiftX','_battlePortrait','_motionCount','Amp','Game_Actor_makeActionList','showPortraits','xmUyw','3530ShUjpm','_weather','ActSeq_Mechanics_TextPopup','_skillWindow','jWoMb','rJxBC','EqaCI','ApplyImmortal','unchanged','CYwKV','TPmgA','clearFreezeMotionForWeapons','rXUkt','applyArmorModifiers','Sprite_Actor_updateBitmap','ConvertParams','onTurnEnd','aUpVi','autoBattleAtStart','WaitForScale','aAaCN','Window_BattleLog_performMagicEvasion','rXuoC','_damages','Game_Party_addActor','maxBattleMembers','clearDamagePopup','victory','isPreviousScene','RSFAF','validTargets','becomeSTBExploited','_speed','Text','waitForNewLine','wvTSf','addCombatLogCommand','ActSeq_Movement_MoveBy','AldyF','Scene_Battle_startActorCommandSelection','WaitCount2','AnchorY','getColor','JS\x20%1START\x20BATTLE','Window_Options_statusText','_svBattlerData','DamageType%1','actorCommandWindowRect','showHelpWindow','drawItemImage','floatBattler','Pre','dmyST','CUzRI','SkillItemMiddleLayout','POST-','RTAyw','applyData','weaponTypes','cancel','getInputButtonString','_enemyId','setupTextPopup','updateBorderStyle','WvpKN','ActionEnd','_updateCursorArea','ShowCritical','_visualHpGauge_JustDied','MP_Flat','loadSvEnemy','BattleManager_processDefeat','softDamageCap','yxldH','VwJmA','OYuGh','isATB','SvMotionIdleMass-%1-%2','TimeScale','StartTurnWait','random','updateStateSprite','Sprite_Enemy_updateCollapse','updateMotionCount','HMpXO','active','dTSIH','swing','AWMHU','Sprite_Battler_update','canInput','BattleCmdList','setFrame','_shake','tbhcF','isForFriend','sliceMax','NbKWI','_enemyIDs','Game_Battler_regenerateAll','SlotID','tone','WaitForSkew','Game_Action_isForFriend','wholeActionSet','attackAnimationIdSlot','WaitForCamera','motionIdle','playReflection','ConfigManager_makeData','commandEscape','KuYVT','alive\x20battlers\x20not\x20user','initMembers','battlerShadowScaleY','Cdurs','_battlerName','currentValue','createAllWindows','drawSkillCost','onEncounterBattleCore','Post','toString','contentsOpacity','isOpponent','ActSeq_Impact_ShockwaveCenterTargets','FlashDuration','HpGaugeOffsetX','battlerSmoothImage','updateAngleCalculations','battleCamera','isAtbCastingState','addDamageSprite','setHelpWindow','Wave','LXSpl','traitSet','isSelected','MotionIdle','SwitchMissEvade','ActSeq_Movement_MoveToTarget','_damagePopupArray','dead\x20friends','repeatTargets','executeDamage','angle','Scene_Battle_selectNextCommand','_createClientArea','message2','arRedRate','isLearnedSkill','Spriteset_Battle_createLowerLayer','NtGmM','clearForcedGameTroopSettingsBattleCore','tcGIC','VexvU','ShowMpDmg','command236','AZXoU','ActSeq_Movement_WaitForOpacity','setupBattleCoreData','pushBaseLine','JSON','MAT','placeActorName','VkJMc','bXdhY','svAnchorY','right','StepDistanceY','oSZMV','_angleRevertOnFinish','sleep','updateStateSpriteBattleCore','JcbYJ','ncKuj','addFightCommand','kjQOK','priority','sfiKn','attack','FGhkt','xuuzK','BoostPoints','dimColor1','process_VisuMZ_BattleCore_Failsafes','_lastPluginCommandInterpreter','BvPdX','_weaponImageId','Scene_Battle_windowAreaHeight','MessageWait','exit','ARRAYEVAL','AGI','cancelTargetSelectionVisibility','NameAlwaysHidden','_waitMode','ActSeq_Angle_Reset','startJump','rAmuR','jump','VisuMZ_4_BreakShields','createJS','process_VisuMZ_BattleCore_TraitObject_Notetags','kAdPc','HelpItem','Game_BattlerBase_canGuard','Game_Map_encounterList','parent','CmdStyle','isRightInputMode','Window_BattleLog_performRecovery','currentSymbol','addChildAt','AnimationID','bgERA','BattleManager_onEscapeFailure','_dragonbonesSpriteContainer','processBorderActor','Game_Battler_forceAction','ActionCount','_methods','ActSeq_Horror_NoiseRemove','Game_Temp_requestAnimation','xFErW','performRecovery','message4','_borderPortraitDuration','ActSeq_Mechanics_AnalyzeWeakness','WeaponTypeID','FaceDirection','onEncounter','not\x20focus','ShowActorGauge','isMVAnimation','HitFlat','pazMd','koWwA','waitForJump','transform','JS\x20BATTLE\x20VICTORY','friendsUnit','Scene_Map_launchBattle','fqUaB','Sprite_Enemy_setBattler','Game_Interpreter_PluginCommand','Battleback','yxzrt','finishActorInput','IvxEg','anchorX','autoBattleUseSkills','flashDuration','NqfbJ','zrUQI','changeInputWindow','Game_BattlerBase_canAttack','isPartyTpbInputtable','ActSeq_Camera_Offset','ActSeq_BattleLog_PopBaseLine','addText','resetResultSwitches','dwUdZ','removeStatesAuto','CwwGt','callOkHandler','setBattleCameraPoint','setCursorRect','PopupOffsetX','ClearBattleLog','ALL\x20SKILLS','TsKWg','selectPreviousCommand','yOKrj','regenerateAll','PreApplyAsTargetJS','_enemySprites','getDefeatedEnemies','BattleManager_endBattle','ycytU','_createCursorArea','helpWindowRectBorderStyle','_updateFilterArea','_defeatedEnemies','Mechanics','casting','damage','actionEffect','BattleManager_selectNextCommand','_battleCoreNoElement','Window_BattleLog_performReflection','actorCommandSingleSkill','prepareBorderActor','vsaAo','putActiveBattlerOnTop','traitObjects','isTpbMainPhase','floor','Scene_Battle_onEnemyCancel','performActionStart','commandStyle','Game_Map_battleback2Name','isChangingOpacity','drawItemImageXPStyle','textSizeEx','onBattleStartBattleCore','iWXEL','Game_Actor_equips','waitForMovement','ohTIx','die','AnchorX','PNyLf','command301_PreBattleEvent','BTestBypass','ActSeq_Mechanics_AtbGauge','PortraitScale','damageFlat','isDead','Duration','isAnyoneGrowing','ActSeq_Projectile_Animation','custom','_shadowSprite','ActSeq_Element_ForceElements','qYXbh','updateAttachedSprites','loop','_baseY','battleCorePreBattleCommonEvent','performMoveToPoint','battleFloat','setBackgroundType','finalizeScale','MotionSpeed','VisuMZ_2_WeaponSwapSystem','setupBattleCore','sAUSD','DqXCC','isForOne','mainSprite','processForcedAction','canMove','JXuiL','cameraOffsetDuration','Rate','repositionCancelButtonBorderStyle','HdjJg','_uiContainer','process_VisuMZ_BattleCore_DamageStyles','performSTBExploiter','84RfZYzl','WLTMD','VariableDmg','_wtypeIDs','wtypeId','MuFFa','clearRect','_currentActor','ParseAllNotetags','processDefeat','StatusWindowAttachmentBack','DaVNo','mpvfw','getBattlePortraitOffsetY','FkEma','Turns','iconText','CalcEscapeRatioJS','sPAHV','windowskin','addWeaponSwapCommand','applyEasing','UIdeK','BreakShields','turnCount','itemHit','updatePosition','_escapeRatio','efzsK','wWHCd','isBusy','EQfod','applyAngleChange','hide','getBattlePortraitFilename','stop','createEnemyNameContainer','battleSys','rUHdr','BattleManager_onEncounter','battleback2Name','actorCommandEscape','zenzf','Name','ARRAYJSON','surprise','okButtonText','_indent','ofgeX','updateCancel','clearElementChanges','prepareCustomActionSequence','displayCurrentState','getAttackWeaponAnimationId','removeAnimation','zDPhI','BeFEq','ATTACK','CriticalHitFlat','jNKAu','Window_BattleEnemy_initialize','_linkedSprite','smooth','collapse','_animationCount','WaitCount','isEnemy','_animationSprites','displayFailure','pRIuZ','battleback1Name','hyjTf','1:1','1063660NlcQRm','createActorCommandWindow','isAutoBattleCommandAdded','battleUIOffsetY','VisuMZ_3_ActSeqProjectiles','JHVEC','CalcActionSpeedJS','log','CriticalHitMultiplier','updateEffectContainers','getNextDamagePopup','Sprite_Enemy_initVisibility','MotionFrameWait','trueRandomTarget','adjustPosition_1for1','RzsHg','ActSeq_Mechanics_AddState','onSkewEnd','kcJQS','HelpSkillType','isOnCurrentMap','setBattlerMotionTrailData','_partyCommandWindow','ABQjG','tozHG','battleStatusWindowAnimationContainer','type','_flashDuration','autoBattleStyle','_updateClientArea','NameOffsetX','onDisabledPartyCommandSelection','animationShouldMirror','guardSkillId','opponentsUnit','updateCommandNameWindow','WaitForFloat','Game_Action_makeTargets','ParseEnemyNotetags','isSideButtonLayout','partyCommandWindowRectBorderStyle','endAnimation','PopupDuration','ActSeq_Projectile_Icon','usePremadeActionSequence','charged','makeBattleCommand','reserveCommonEvent','Sprite_Enemy_updateBossCollapse','createBattleUIOffsetY','RZmXj','ShowSubstitute','createPartyCommandWindow','needsSelection','QlNeC','MPgDx','ggzOS','EqbtN','_createEffectsContainer','displayReflection','criticalDmgRate','setVisibleUI','loadBitmap','NameOffsetY','command339','isBattleFlipped','KlJfz','canAttackBattleCore','ChantStyle','updateCallMenu','ActSeq_Weapon_SetActiveWeapon','createInnerPortrait','hXbCK','adjustWeaponSpriteOffset','KPIeu','selectNextActor','Sprite_Weapon_loadBitmap','yGDLR','Game_BattlerBase_die','OirUB','ActSeq_BattleLog_AddText','makeTargetsBattleCore','_shadowScaleY','pkkPE','attackStates','mainFontSize','okTargetSelectionVisibility','Scene_Battle_helpWindowRect','STR','displayStartMessages','addNewState','itemEffectAddNormalState','StatusWindowAttachmentFront','Sprite_Actor_initMembers','joIvA','ChargeRate','irtyY','requestAnimation','NewPopupBottom','HRFgf','YbmZN','actionSplicePoint','ActSeq_DB_DragonbonesTimeScale','MZBsa','isSkewing','isDamagePopupRequested','drawItemImagePortraitStyle','PreEndActionJS','currentClass','_preemptive','updateStatusWindowPosition','addAutoBattleCommand','dead\x20enemies','tHXUA','DamageFlat','Window_BattleLog_performCounter','battleAngle','updateShadowPosition','setBattlerFacePoint','fight','XoBzX','checkCacheKey','addGuardCommand','createEnemyNames','logActionList','YUzaJ','createContents','drawGauge','BMhEO','DefaultHardCap','tpbCommandFight','ceil','isTpb','createWeather','VariableID','update','eAsyR','alterBreakShield','TrAmw','oijbe','spinBattler','drawLineText','adjustPosition_ScaleUp','setupDamagePopup','qwJKO','drawEnemyName','actor','_logWindow','onEscapeSuccess','GwnNg','_helpWindow','filters','mainSpriteScaleX','TpbActiveChangeEnabled','enemyId','ext','CommandAddOptions','Scene_ItemBase_applyItem','isCommandEnabled','_actorSprites','isHiddenSkill','FShPO','battlelog','zDsVU','HMXwl','setSkill','wqxoZ','ActSeq_Target_NextTarget','ActionEndUpdate','iRqhk','createLowerLayer','getItemDamageAmountTextOriginal','isFlipped','arPenRate','createHpGaugeSprite','Window_BattleLog_displayFailure','drawItemStatusXPStyle','_baseLineStack','adjustPosition_ScaleToFit','_tpbSceneChangeCacheActor','drawIcon','_distortionSprite','addCustomCommands','Game_Enemy_setup','addAnimationSpriteToContainer','enhuZ','wfeUB','gainCurrentActionsFTB','ShowPortraits','regionId','VisuMZ_3_ActSeqImpact','ParseStateNotetags','_homeY','processPostBattleCommonEvents','YkNkF','UIdIC','aliveMembers','StepDuration','getStypeIdWithName','expRate','CalcEscapeRaiseJS','Drdtv','OXRRg','iIqlR','%1EndActionJS','addedDebuffs','startWeaponAnimation','ATK','visible','MDF','performActionMotions','anchor','ActSeq_Animation_AttackAnimation2','performEvasion','IconStypeMagic','XfIPE','all\x20targets','isForFriendBattleCore','ParseActorNotetags','maxCols','startTurn','Rcory','tQjia','startEnemySelection','Sprite_Battler_updateMain','applyVariance','QYlzQ','_itemWindow','_actionBattlers','applyGlobal','FidZM','eDlsL','startDamagePopup','removeImmortal','Elements','animationId','NextTurn','createCancelButton','MAXHP','hrdHW','_createCursorSprite','tpbActorSwitchConditionsMet','ActSeq_Movement_Spin','isActor','ActSeq_Mechanics_CustomDmgFormula','VisuMZ_1_SkillsStatesCore','ePPoM','_pattern','criticalHitFlat','isSkipPartyCommandWindow','Scene_Battle_startPartyCommandSelection','innerHeight','_cache','EFFECT_COMMON_EVENT','hpHealingFmt','_windowLayer','contents','isOkEnabled','isActing','BnDSD','isBattleTest','ShowPortraitsBorderStyle','checkTpbInputClose','VzoPK','OffsetX','Window_BattleEnemy_show','arRedFlat','maxCommands','battleDisplayText','battleOpacity','updateOpacity','physical','PgEHA','itemLineRect','Window_BattleStatus_initialize','SkillItemBorderCols','PKUqW','CHhyt','_targetSkewY','isAppeared','isSceneBattle','_cursorArea','TextColor','_borderPortraitSprite','_emptyBitmap','rKpfV','updateLink','processBattleCoreJS','ActSeq_BattleLog_PushBaseLine','_lineHeight','isBTB','JzdYe','PrioritySortActors','createAnimationSprite','addSingleSkillCommands','ActSeq_Skew_WaitForSkew','JCGgA','OGsio','PreStartTurnJS','AttachStateOffsetY','isPTB','iconIndex','AKQIF','JafRT','QjZUv','battleGrow','JIWCz','FZPaU','State-%1-%2','GSbva','%1EndTurnJS','kRHCD','SkewX','toUpperCase','_checkOn','xWlhU','HurSz','performDamage','setEventCallback','wjDWC','isBattlerGrounded','isDebuffAffected','setupBattleback','hpDamage','yWGyN','string','Scene_Battle_createCancelButton','getMenuImage','isPreviousSceneBattleTransitionable','alive\x20battlers','mainSpriteHeight','ZcKtO','createEnemies','Game_Action_apply','AutoBattleRect','BattleManager_makeActionOrders','WaitForZoom','Sprite_Actor_updateShadow','JetHy','buffAdd','ShowAddedDebuff','loadBattleback2','IzPJl','ArRedRate','tfjMQ','setupBattlebackBattleCore','_motionType','iconWidth','PopupShiftY','parseForcedGameTroopSettingsBattleCore','svBattlerName','wnjde','AllowRandomSpeed','canBattlerMove','optDisplayTp','clearMotion','Window_ActorCommand_setup','SkillItemStandardCols','motionType','KvHoY','ActSeq_Motion_WaitMotionFrame','performWeaponAnimation','commandNameWindowCenter','Game_Action_isForRandom','createHelpWindowBattleCore','ActiveTpbOptionsMessage','counterAttack','onActorOk','_surprise','Window_PartyCommand_initialize','BattleVictoryJS','mmDVL','BackColor','canUseItemCommand','makeActionOrders','JtLxJ','VisuMZ_2_PartySystem','match','BBkZA','boxWidth','command283','initialize','performAttackSlot','move','updateWeather','launchBattle','battleCommandName','missed','acdQG','MAXMP','nameY','OCifD','XpakA','setBattleAngle','chant','loadPicture','WPABm','+%1','AsTarget','visualHpGauge','DefeatEvent','hgeNk','process_VisuMZ_BattleCore_CreateRegExp','PreDamageAsTargetJS','linkSprite','Damage','updateVisibility','isBattleCoreTargetScope','AS\x20TARGET','StepDistanceX','Window_BattleLog_displayMpDamage','WaitForMovement','jZgnN','ROQGW','allBattleMembers','CounterPlayback','setBattleCameraTargets','setLastPluginCommandInterpreter','Angle','updateAttachmentSprites','Window_ItemList_maxCols','canEscape','isBattlerFlipped','STPeA','njZhd','ActorCmd','showAnimation','ActSeq_Movement_WaitForSpin','EmergeText','frameVisible','setSTBExploited','round','Game_BattlerBase_isStateResist','SkipPartyCmd','_actorCommandWindow','_targetFloatHeight','isAtbChargingState','cdfgS','setupChild','statusWindowRectXPStyle','requestDragonbonesAnimation','DwhJl','_angleEasing','Parse_Notetags_Action','randomInt','VisuMZ_2_BattleSystemPTB','Sprite_Battler_initMembers','getDamageStyle','_isBattlerFlipped','MvqdT','updateBattlebackBitmap2','bqrBP','padding','updateSkew','adjustPosition_ScaleDown','uurtR','MlMjE','ActSeq_Weapon_ClearActiveWeapon','push','vkgbV','Actions','gainStoredBoostPoints','rWAUS','isIncludedInEnemyWindow','weatherPower','drawActorFace','Spriteset_Battle_update','performFlinch','isForOpponent','weapons','setImmortal','isEffecting','ForceExploited','speed','note','alterSound','updateGrow','CriticalDmgRate','createString','setText','Scene_Battle_itemWindowRect','vfThv','BymPR','_inputting','removeHorrorEffect','ActSeq_Motion_MotionType','SvWeaponSolo-%1-%2','#%1','_skewX','useDigitGrouping','SkewY','eElvP','drawSingleSkillCost','setHome','updateTargetPosition','process_VisuMZ_BattleCore_PluginParams','helpAreaHeight','Victory','Settings','ActSeq_BattleLog_UI','ITsTb','Sprite_Enemy_update','ActSeq_Movement_BattleStep','autoBattleWindowRect','lOlUj','FLJaC','createUIContainer','JS\x20%1DAMAGE\x20%2','HelpOptions','performMagicEvasion','AUTO\x20BATTLE','getEnemyIdWithName','Game_Battler_onBattleStart','zIDAH','targetObjects','ActSeq_Motion_PerformAction','initBattlePortrait','oGqEh','_text','ActionCenteredName','actorCommandCancelTPB','critical','COMBAT\x20LOG','_floatEasing','EscapeFailureJS','Game_System_initialize','criticalDmgFlat','missile','UNydt','_spriteset','wyVzj','ParseItemNotetags','updateMain','isMeleeSingleTargetAction','536923EDNAOb','param','RJZNC','targetSpritePosition','getDualWieldTimes','ActSeq_Set_FinishAction','alive\x20actors','_battleLayoutStyle','HKdzg','performTpbActiveCheckSwitch','battleSpriteSkew','DnGTc','updateEventMain','loadWindowskin','TqEtR','cancelActorInput','ScaleUp','createTroopNote','Window_BattleLog_performEvasion','PostDamageJS','WaitForProjectile','_forcedBattleLayout','SideviewSelect','unshift','Game_Troop_expTotal','CriticalHitRateJS','HkZmP','_battleCoreForcedElements','HvriN','evaded','jqjJq','_callSceneOptions','refreshStatusWindow','regenerateAllBattleCore','isSpinning','startOpacity','alterActionCostPTB','hpAffected','_lastRegenFrameCount','subject','alive\x20opponents','createPartyCommandWindowBattleCore','battleAnimation','DamageDisplay','noise','Scene_Map_updateCallMenu','XPActorCommandLines','showNormalAnimation','ActSeq_Motion_RefreshMotion','zXthF','removeDamageSprite','PreApplyJS','idgjV','processRandomizedData','_floatHeight','_enemies','createActionSequenceProjectile','itemEffectAddAttackState','taInJ','setValue','shadow','setupRgbSplitImpactFilter','omCZC','_battleCoreBattleResumeAfter','text\x20target','changeCtbCastTime','Immortal','CriticalDuration','ShowCounter','ActSeq_Motion_FreezeMotionFrame','ActSeq_Mechanics_StbExploit','TFrqf','EscapeSuccessJS','createBattleField','sVBRx','VTIAH','bitmapWidth','callOptions','basicGaugesY','displayAction','applyResultSwitches','ParseSkillNotetags','sKlnv','Formula','mainSpriteScaleY','OQjre','_autoBattle','skew','terminate','EYuJt','GoUCV','_targetGrowY','isFrameVisible','addBattleCoreAutoBattleStartupCommand','isClicked','MeleeDistance','VMIgx','_armorPenetration','createMiss','canGuard','cEDdu','TePCf','_weaponSprite','removeChild','setWaitMode','ChangeOrderBy','isDuringNonLoopingMotion','PostStartActionJS','Buffs','VisuMZ_3_SideviewBattleUI','isBorderStylePortraitShown','kBzMA','MrdIC','OYUBp','ActSeq_Camera_Reset','TpbGaugeOffsetY','_customDamageFormula','isGuard','Window_BattleLog_performDamage','addSkillCommands','isForRandom','moveToStartPosition','vxwzt','ActSeq_Mechanics_VariablePopup','hue','Sprite_Battler_isMoving','isActiveTpb','VPZOv','_canLose','AddHpGaugeOption','BattleDefeatJS','measureTextWidth','BvUQp','FlinchDuration','WavlD','_ptbActionCost','Imndi','dyEHW','DefaultSoftScaler','FaceAway','RXpLe','Height','updateActors','ovjfy','MOTIONS','drawItemStatusListStyle','loadSvActor','commandSymbol','CNLiA','performSubstitute','startMove','ActSeq_Skew_Reset','WaitForJump','KTSzM','createCommandVisibleJS','evalDamageFormulaBattleCore','ActSeq_DB_DragonbonesMotionAni','Scene_Map_initializeAfter','CastAnimation','stateMotionIndex','maxTp','QoJlg','DLXXe','CriticalHitRate','_targetOpacity','arPenFlat','ActSeq_Impact_ZoomBlurPoint','createTargetsJS','createBattleFieldContainer','partyCommandWindowRectDefaultStyle','CTTck','createActors','gyvHU','registerCommand','battler','\x5cI[%1]%2','open','isSkillItemWindowsMiddle','ActSeq_Movement_FacePoint','updateStart','moveBattlerDistance','startInput','PreApplyAsUserJS','placeStateIcon','cRwkL','applyDamageCaps','RQmGS','_tempEquipCheck','%1Damage%2JS','Sprite_Actor_update','refresh','randomTargets','isSkill','BattleManager_inputtingAction','clearActiveWeaponSlot','top','Aywoq','float','clearBattlerMotionTrailData','fFnsr','apply','moveBattlerToPoint','ShowCosts','BattleManager_isTpbMainPhase','_battleField','fRVOq','AXyQj','setupWeaponAnimation','animation','getHardDamageCap','isTickBased','create','Sprite_StateIcon_updateFrame','FzfcN','getCommonEventIdWithName','updateForceAction','process_VisuMZ_BattleCore_Notetags','isEscapeCommandEnabled','EqsGH','startSkew','CreateActionSequenceTargets','updateShadowBattleCore','statusTextAutoBattleStyle','dead\x20battlers','alive\x20enemies','value','ReflectPlayback','ActSeq_Angle_WaitForAngle','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','_active','shouldPopupDamage','YkVjc','uiMenuStyle','commandFight','DamageRate','isBattleSys','outRO','alterPriority','FlinchDistanceY','drawItemStatus','result','displayItemMessage','VQEgD','aErWm','TNhCB','_floatDuration','isDeathStateAffected','1yZMBZB','forceEscapeSprite','applyTargetFilters','PreDamageJS','battleUIOffsetX','WaitForOpacity','faceWidth','ActSeq_Animation_CastAnimation','commandNameWindowDrawText','nFEEs','getWtypeIdWithName','setHorrorEffectSettings','performMoveToTargets','JS\x20%1START\x20TURN','makeTargetSelectionMoreVisible','sortDamageSprites','_skewEasing','_targetGrowX','skillWindowRect','isDying','isNextScene','alterChange','Scene_Battle_logWindowRect','Window_BattleLog_performActionEnd','maxItems','ElementStatusCore','JmYsb','inputtingAction','opKRG','WaitForAngle','BattleManager_endAction','IWXSW','createCommandNameWindow','initMembersBattleCore','_forceAction','parameters','nNesB','Game_Interpreter_command283','deadMembers','callUpdateHelp','IconStypeNorm','Game_Interpreter_command301','sort','setBattlerBattleCore','isDTB','_tpbState','makeData','skewDuration','Window_BattleLog_update','ActSeq_Mechanics_BtbGain','RWqiA','KyIOr','performActionEnd','canAddSkillCommand','xpDXk','thrust','mNoOO','CastCertain','createDamageContainer','splice','createShadowSprite','_hpGaugeSprite','Inpfy','SceneManager_isSceneChanging','autoSelectLastSelected','Game_Battler_performMiss','softDamageCapRate','waitCount','redraw','Scene_Battle_updateStatusWindowPosition','TextAlign','_offsetY','DEF','commandStyleCheck','width','Xpkfc','angleDuration','AutoBattleBgType','snapForBackground','makeAutoBattleActions','Spriteset_Battle_createBattleField','_tempActor','mainSpriteWidth','%1StartBattleJS','KCMhN','_interpreter','destroy','HpGauge','addAttackCommand','EasingType','head','Scene_Battle_createActorCommandWindow','DisablePartyCmd','startMotion','svShadow','length','lVCiW','PostEndActionJS','ActSeq_Zoom_Scale','bCmJS','startSpin','Game_Battler_onTurnEnd','rAAFp','JAWAO','Ljhbt','pwVkg','actionBattleCoreJS','commandName','StateIconOffsetX','kVOcM','IqUMV','rZwKm','<CENTER>%1','refreshCursor','switchToWeaponType','battleCoreResumeLaunchBattle','constructor','ShowCurrentState','#ffffff','Direction','popupDamage','applyForcedGameTroopSettingsBattleCore','Spriteset_Battle_updateActors','ISAhP','call','_multipliers','battleZoom','fldrK','fittingHeight','BattleCore','HitRate','isCharging','evade','onMoveEnd','isBuffAffected','FKxPh','fZLRq','loadBattleback1','hWYqU','_eventId','Game_BattlerBase_initMembers','reverse','isMagical','attackMotions','bgType','UNTITLED','vumuG','skJBr','selectNextCommandTpb','_opacityEasing','JS\x20%1START\x20ACTION','Game_BattlerBase_refresh','Window_ActorCommand_initialize','dcjMa','_totalValue','ActSeq_Impact_MotionTrailRemove','ITEM','isItemCommandEnabled','performAction','BattleManager_updatePhase','gainBravePoints','dragonbonesData','max','TpGaugeOffsetX','StatusWindowSkinFilename','action','_dimmerSprite','WGFyk','_cancelButton','ShowRemovedState','onGrowEnd','OzREq','Game_Battler_clearMotion','equipSlots','Strength','setBattler','-%1','updateBossCollapse','freezeMotion','PopupPosition','WFSJM','createStateIconSprite','Sprite_Battler_damageOffsetX','auto','createDamageSprite','SrMtu','updateStateIconSprite','vObJY','setBattlerFlip','QxQak','Debuffs','YMixq','bitmapHeight','alive\x20enemies\x20not\x20target','ShuffleArray','GCmwn','join','shift','performCounter','Window_BattleLog_performCollapse','sideview_ui','Window_BattleStatus_drawItemImage','OffsetAdjust','performCastAnimation','_action','npWrB','updateShadowScale','VisuMZ_4_CombatLog','isShownOnBattlePortrait','expTotal','NzcxS','messageSpeed','rVZHk','MwzlX','createActorCommandWindowBattleCore','Window_SkillList_maxCols','esfiu','checkAutoCustomActionSequenceNotetagEffect','setHelpWindowItem','VSmiw','CmdTextAlign','isSceneChanging','reduce','Point','TpbGaugeOffsetX','WdiQd','ENLUE','ActSeq_Movement_HomeReset','IpfMX','_handlers','HP_Rate','concat','updateJump','AttackAnimation','UtQBB','isVisualHpGaugeDisplayed','wait','backColor','battleProjectiles','compareBattlerSprites','_list','clearBattleRefreshRequest','_item','stepFlinch','FWmhf','AlphaFilter','YOops','Scene_Battle_createHelpWindow','cplii','_allTargets','GzHNk','_homeX','MaxLines','PostEndTurnJS','command301','WkiIl','startBattle','GmWpT','%1Event','IconSet','stypeId','zxlyI','DualWield','setMoveEasingType','ActionEffect','placeGauge','boxHeight','UXnjn','Scale','klNYw','createStateSprite','removeBuff','filter','NBWkl','addedBuffs','formula','Sprite_Battler_setHome','DamageStyleList','isAnimationPlaying','sliceMin','RequiresDefeat','show','list','command3011','changePaintOpacity','ActSeq_Mechanics_PtbAlterCost','showEnemyAttackAnimation','checkShowHideSwitchNotetags','updateBitmap','cwejD','HelpAutoBattle','AutoBattleMsg','oHiiS','displayTpDamage','startActorSelection','createChildSprite','ActSeq_Camera_FocusTarget','registerDefeatedEnemy','bhYbu','FbpFe','ArPenRate','isCertainHit','sortEnemies','NameLegacy','_backAttachmentSprite','adjustFlippedBattlefield','NVryv','oogWE','isSideView','_forcing','MotionAni','Window_BattleLog_displayTpDamage','origin','isAnyoneFloating','worldTransform','alive\x20friends\x20not\x20target','ARRAYFUNC','ConvertActionSequenceTarget','_animation','startAttackWeaponAnimation','updateWaitMode','battlerShadowScaleX','performJump','growBattler','_angleDuration','isPlaytest','extraPositionX','COMBATLOG','PostStartBattleJS','isItem','FlashColor','YGONk','waitForOpacity','_endBattle','enemy','displayCritical','addBattleCoreAutoBattleStyleCommand','ActSeq_Element_Clear','addImmortal','NameAttachStateIcon','_index','isFastForward','isAutoBattleCommandEnabled','MotionType','1hlhPop','prototype','ActSeq_BattleLog_Refresh','Shadow2','STYPES','GroupDigits','changeAtbCastTime','cluGN','WnMSJ','JLRsu','CmdIconEscape','jILMG','changeAtbChargeTime','autoBattleStart','performMiss','PreRegenerateJS','tcjkp','collapseType','_enemyWindow','processActorCommandCancelTPB','bottom','MWGhO','_tpbNeedsPartyCommand','pop','mpHealingFmt','qMlRa','addOptionsCommand','ShowTpDmg','setAttack','stepForward','chantStyle','Targets2','Width','battleJump','targetActionSet','VisuMZ_2_BattleSystemATB','uKMLv','charging','qnOsZ','deathStateId','Scene_Battle_commandFight','getNextSubjectFromPool','attachSpritesToDistortionSprite','_growWholeDuration','VisuMZ_2_BattleSystemFTB','moveToStartPositionBattleCore','displayType','setBattleZoom','iconHeight','ActionAnimation','setupMotion','Sprite_Actor_setBattler','_frontAttachmentSprite','isImmortal','hSORZ','mpDamage','OPhem','cancelButtonText','_motion','updateCollapse','skillId','jrqPQ','CmdIconItem','_floatWholeDuration','LUK','description','toJZx','Game_Action_itemHit','Game_BattlerBase_addNewState','ActSeq_Animation_ActionAnimation','skillTypes','AddOption','displayHpDamage','slices','NameAlwaysSelectOnly','spriteId','_offsetX','PostApplyAsTargetJS','ActSeq_Impact_MotionTrailCreate','scale','Filename','ActSeq_Mechanics_PtbFullHalfAction','MpGaugeOffsetX','Ohjnc','extraPositionY','RyslM','pow','VisuMZ_0_CoreEngine','inBattle','Scene_Options_maxCommands','nLovW','autoBattle','ActSeq_Mechanics_Collapse','_duration','isAlwaysVisible','processAnimationRequests','vTtTa','Actor','extraHeight','resetFontSettings','_growY','_growDuration','CommandAddAutoBattle','oxafU','ShowFacesListStyle','StatusWindowAttachmentBackOffsetY','Scene_Battle_terminate','zrsgP','updateFloat','_angleWholeDuration','autoMeleeSingleTargetActionSet','preemptive','process_VisuMZ_BattleCore_jsFunctions','_opacityWholeDuration','fillRect','requestMotionRefresh','CommandVisible','cameraDuration','makeActionList','clear','SwitchCritical','LYySf','CoreEngine','getLastPluginCommandInterpreter','ActSeq_Horror_GlitchCreate','HomePosJS','getHalfActionsPTB','createAttachmentSprites','addPartyCommand','ShowEnemyGauge','return\x200','TP_Rate','SKILLS','DamageStyles','start','HpGaugeOffsetY','getAttackMotionSlot','IkrVO','EnableDamageCap','indexOf','eSqAS','gradientFillRect','StatusWindowAttachmentFrontOffsetY','MtFqP','getItemDamageAmountLabelOriginal','PARTY','_attackAnimationId','drawItemStyleIcon','_skillIDs','zfjtE','Game_BattlerBase_eraseState','_motionSpeed','XqBch','ActSeq_Mechanics_HpMpTp','turnOrderChangeOTB','Window_BattleLog_popBaseLine','ActSeq_ChangeAngle','THMtC','CmdTextAutoBattle','_createDamageContainer','ActionItemMsg','Window_BattleLog_performMiss','alive\x20friends\x20not\x20user','wcshg','startFloat','_tempBattler','damageOffsetX','FlinchDistanceX','isNextSceneBattleTransitionable','_targetIndex','ZBnRy','Window_BattleLog_displayEvasion','TP_Flat','StatusWindowAttachmentBackOffsetX','drawItemImageListStyle','ActSeq_Animation_AttackAnimation','applySoftDamageCap','PostDamageAsUserJS','abs','WCxaw','308VUZWwK','PRE-','_back1Sprite','clearActiveWeaponSet','setHue','VHWeI','invokeAction','Game_Action_clear','CombatLogIcon','GUMOv','hpDamageFmt','eraseState','UvZgA','iQRAu','updatePositionBattleCore','text','fontSize','index','performCollapse','_actions','hitFlat','hitRate','anchorY','ucIqp','startActorCommandSelection','svBattlerData','dead','actions','Game_Battler_performActionStart','setActionState','_cursorSprite','-%1\x20MP','isOpen','GUARD','alignBattleCoreDamageSprite','voPVw','enemyNames','canGuardBattleCore','gaugeX','createAnimationContainer','checkShowHideBattleNotetags','flashColor','twFTw','allowCollapse','860424YFuJDF','FjHgC','attackAnimationId1','currentAction','FollowTurn','_subject','nGRjB','_jumpMaxHeight','createKeyJS','statusText','alterCost','DistanceX','States','createAutoBattleWindow','displayActionResults','forceWeaponAnimation','isOTB','Game_Action_evalDamageFormula','rowSpacing','XFBQo','ActSeq_Projectile_Picture','Qdtjt','skewBattler','fYuio','VOpTZ','ActSeq_Camera_FocusPoint','_battlerContainer','uhtto','notFocusValid','WaitForNewLine','Sprite_Actor_moveToStartPosition','revertTpbCachedActor','Ghtey','PreStartActionJS','Sprite_Animation_targetSpritePosition','IErpw','clearBattleCoreData','ActSeq_Target_CurrentIndex','applyHardDamageCap','slice','SmoothImage','ActSeq_Mechanics_AddBuffDebuff','isAutoBattle','_target','movement','Lipfm','Sprite_Enemy_updateStateSprite','getConfigValue','Armor-%1-%2','Game_Interpreter_terminate','Parse_Notetags_TraitObjects','kooTW','ActSeq_Impact_MotionBlurTarget','ActionSkillMsg1','applyGlobalCommonEventNotetags','BoOgZ','wiAtn','endBattle','message1','battleSkew','height','WUaEi','CastMagical','ActSeq_Movement_WaitForMovement','PostDamageAsTargetJS','refreshBattlerMotions','battleMembers','addSingleSkillCommand','name','nmerZ','setupShockwaveImpactFilter','addItemCommand','Game_Map_battleback1Name','jXMpf','EscapeFail','isConfused','ActSeq_Mechanics_DeathBreak','WEAPON\x20SWAP','ActSeq_Impact_ZoomBlurTargetCenter','TpGaugeOffsetY','setupCriticalEffect','makeCommandList','DcSXm','Scene_Battle_startEnemySelection','LMALI','toLowerCase','Skill-%1-%2','updateStyleOpacity','skillItemWindowRectMiddle','RegExp','ActSeq_Movement_FaceTarget','Game_Action_applyGlobal','BattleManager_startAction','border','BattleLog','displayReflectionPlayBack','initElementStatusCore','Scene_Battle_selectPreviousCommand','hasBeenDefeatedBefore','battlerSprites','targetDistortionSpritePosition','ESCAPE','jAXEF','BkupT','isActionSelectionValid','drawTextEx','Index','uEciP','actor%1-portrait','Window_BattleLog_refresh','battleEffect','ActSeq_Camera_WaitForCamera','isBattleMember','NnpmV','currentExt','allowRandomSpeed','Game_Actor_setup','_flinched','pages','battleLayoutStyle','Shadow','ActSeq_Movement_Scale','extraPositionScaledY','processVictory','swapEnemyIDs','setupFont','Destination','onEnemyOk','Sprite_Battler_setBattler','animationNextDelay','Sprite_Battler_updatePosition','%1RegenerateJS','mtaMQ','setupMotionBlurImpactFilter','opacity','helpWindowRect','waitForEffect','CmdIconFight','_mainSprite','displayAddedStates','refreshMotion','onOpacityEnd','_opacityDuration','StyleOFF','Mirror','AEXWi','482803bZCbaR','Sprite_Actor_updateFrame','battleEnd','BXQgf','NcJBh','BattleManager_startInput','addLoadListener','liYKk','addGeneralOptions','_commonEventQueue','encounterList','_animationContainer','_waitCount','textColor','initBattleCore','ActSeq_Mechanics_BoostPointsChange','statusWindowRectDefaultStyle','_svBattlerSprite','requestRefresh','ActSeq_Zoom_Reset','BattleLogRectJS','_autoBattleWindow','_shadowScaleX','_stateSprite','FocusX','isMeleeMultiTargetAction','applyImmortal','itemWindowRect','damageOffsetY','calcWindowHeight','command119','bitmap','blt','updatePadding','_back2Sprite','endAction','setHandler','inputting','statusWindowRectBorderStyle','drain','ResetOffset','ShowMissEvasion','toUseBoostPoints','onEnemyCancel','xMQlv','addCommand','HUrTN','Scene_Battle_start','ARRAYNUM','setupActionSet','jAUzP','NKFMY','commandOptions','checkShowHideSkillNotetags','ArPenFlat','setCustomDamageFormula','Window_BattleLog_pushBaseLine','_phase','makeDeepCopy','isCancelled','updateCustomActionSequence','ActSeq_Impact_ColorBreak','itemTextAlign','BattleEndEvent','resizeWindowBorderStyle','setup','VisuMZ_2_HorrorEffects','createDigits','_actor','windowAreaHeight','ActSeq_ChangeSkew','battleCommands','MANUAL','command357','ActSeq_Impact_MotionBlurScreen','_actorWindow','Game_Troop_setup','WmTfc','ucVqY','_growEasing','isTurnBased','magicReflection','dying','onFloatEnd','nAaqh','innerWidth','canAlterActionCostPTB','svBattlerAnchorX','CurrentTurn','CmdIconAutoBattle','Scene_Battle_skillWindowRect','attackAnimationId2','alive\x20opponents\x20not\x20target','ZlqII','NUAqx','setBattlePortrait','bMAvC','qvzxU','ActSeq_BattleLog_Clear','_lastEnemy','camfe','Sprite_Enemy_loadBitmap','isCustomBattleScope','initVisibility','stepBack','ParseArmorNotetags','CxUTp','addActor','StatusWindowAttachmentFrontOffsetX','refreshRequest','createSeparateDamagePopups','isAnyoneMoving','isAnimationShownOnBattlePortrait','frameCount','updateBattleProcess','CommandWidth','startAction','repeats','CheckSkillCommandShowSwitches','children','damageStyle','loadSystem','zFplj','cdnaP','needsSelectionBattleCore','BattleManager_onEscapeSuccess','displayBuffs','lineHeight','recoverAll','Sprite_Battler_startMove','animationBaseDelay','SvWeaponMass-%1-%2','updateBorderSprite','evalDamageFormula','setupZoomBlurImpactFilter','walk','JS\x20BATTLE\x20DEFEAT','fvUgu','isSpriteVisible','ActSeq_Animation_WaitForAnimation','jumpBattler','updateHpGaugePosition','_appeared','ActSeq_Element_AddElements','PopupOffsetY','isCustomActionSequence','MPmwx','duYpH','olSrw','min','requestFauxAnimation','freezeFrame','helpAreaBottom','makeTargetSprites','_executedValue','isTriggered','isHidden','weaponImageId','setBattleCameraOffset','_borderPortraitTargetX','battleCoreTpbMainPhase','BravePoints','TargetLocation','Scene_Map_initialize','abnormal','addChildToBack','ForceDeath','Window_BattleLog_displayCurrentState','MP_Rate','updateAction','rQDFQ','PerformAction','qeCkk','centerFrontViewSprite','Targets','_jumpHeight','callNextMethod','EscapeSuccess','status','Enemy','PostApply%1JS','oAJtE','_regionBattleback2','_regionBattleback1','isForOpponentBattleCore','Sprite_Battler_damageOffsetY','zFxVl','alive\x20battlers\x20not\x20target','Window_BattleLog_performSubstitute','ArRedFlat','MyYXB','itemRect','ActSeq_Movement_WaitForSkew','skills','setBattleSkew','canAttack','mkAVe','_stypeIDs','eDgrb','HgvqE','RThvo','isGrowing','BattleManager_cancelActorInput','ForceRandom','Game_Battler_startTpbTurn','base','process_VisuMZ_BattleCore_PreBattleCommonEvent','Game_Action_needsSelection','setActiveWeaponSlot','SvBattlerSolo-%1-%2','DigitGroupingDamageSprites','glitch','AutoBattle','updateFrame','eQaNS','setActorHome','refreshDimmerBitmap','Override','vYKSz','EmCDY','YXWKp','PijDa','replace','HWbKQ','PPzut','code','DistanceAdjust','drawItemBackground','JDqoS','resizeWindowXPStyle','YxmGJ','ShowHpDmg','ActSeq_Set_SetupAction','process_VisuMZ_BattleCore_Action_Notetags','Scene_Battle_startActorSelection','isMagicSkill','autoMeleeMultiTargetActionSet','skill','onAllActionsEnd','ActSeq_Movement_MoveToPoint','ResetFocus','motionSpeed','updateShadow','stbGainInstant','qTLjA','PreEndBattleJS','onJumpEnd','VisuMZ_3_BoostAction','ActSeq_Mechanics_BreakShieldReset','gWSIH','Game_Action_isForOpponent','CastPhysical','startTpbTurn','CmdIconOptions','ECeRl','removeBuffsAuto','_effectDuration','performActionEndMembers','WvWmA','cDWEH','_baseX','Window_BattleLog_displayCritical','maxLines','JdgyR','inHomePosition','_commandNameWindow','jJkqw','PartyCmd','GuardFormulaJS','Scene_Battle_onEnemyOk','ActSeq_Horror_TVRemove','itemHeight','Defeat','makeTargets','NameAlwaysVisible','resize','Setting','startPartyCommandSelection','wdtwA','ScaleY','Game_Interpreter_updateWaitMode','drawBackgroundRect','ActionSequence','autoSelect','_currentAngle','iterateBattler','EqREN','ScaleToFit','Parse_Notetags_Targets','onSelectAction','alive\x20actors\x20not\x20target','clamp','alive\x20friends','VisuMZ_2_BattleSystemSTB','ZWTdb','forceSelect','ActSeq_Target_PrevTarget','addTextToCombatLog','isAnyProjectilePresent','Game_Party_removeActor','createBattleUIOffsetX','ScaleDown','ActSeq_Mechanics_OtbOrder','gainHp','isBreakStunned','Scene_Battle_onActorOk','singleSkill','isPartyCommandWindowDisabled','svAnchorX','_battler','addShowHpGaugeCommand','Window_BattleLog_popupDamage','FrontViewSelect','RepositionEnemies','MZuIj','_flipScaleX','Yxigs','wUABZ','onRegeneratePlayStateAnimation','updateBattlebackBitmap','processRefresh','ActSeq_Mechanics_PtbConvert','hardDamageCap','_statusWindow','Class-%1-%2','onDatabaseLoaded','hasSvBattler','_freezeMotionData','MODfm','_branch','LqYpc','battleMove','WaitForEffect','bind','_enemyNameContainer','YXCnB','isJumping','%1Apply%2JS','updateHelp','115082fqZTOL','jjFnq','ybRQJ','_targetSkewX','kDSuR','AdjustRect','createHelpWindow','isTeamBased','getBattlePortrait','preparePartyRefresh','Nggof','guard','kdRqV','ShowFailure','ActSeq_BattleLog_WaitForBattleLog','jLtRQ','Game_Map_setupBattleback','portrait','addChild','VisuMZ_1_ElementStatusCore','StatusWindowSkinHide','_targets','split','_cacheTextWidth','mNqDs','_targetAngle','Xxznv','mmp','isFTB','VisuMZ_2_BattleSystemCTB','fwIUA','PostRegenerateJS','updateShadowVisibility','BattleManager_processVictory','CheckMapBattleEventValid','options','XsAQp','createAttachedSprites','hBheJ','Scene_Battle_updateBattleProcess','Window_BattleLog_performAction','faceRect','Interrupt','createBattleFieldBattleCore','sIFKB','HsGUX','rCIUj','noSimilarSTypes','_enemy','FeHQI','Actor-%1-%2','HhoIU','MZsch','Skills','DefaultDamageStyle','PostApplyJS','debuffAdd','_commonEventIDs','nextActiveWeaponSlot','isAffectedByBreakShield','_forcedBattlers','BattleManager_initMembers','forceMotion','findTargetSprite','rEWVd','TPB','updateSpin','PreStartBattleJS','GGrhf','dTUiY','setupIconTextPopup','default','battleSpin','center','aHWoL','OffsetY','bGzyA','Targets1','ConfigManager_applyData','AutoNotetag','_padding','Radius','onBattleStart','_flashColor','nRWUr','Window_BattleLog_performActionStart','frontviewSpriteY','svBattlerAnchorY','_skewWholeDuration','cQWdP','map','pMMfX','placeTimeGauge','aYGpe','WaitCount1','criticalHitRate','filterArea','FCLTR','_additionalSprites','drawText','resetBreakShield','Agfbg','alterType','Sprite_Actor_setActorHome','_iconIndex','performReflection','getItemDamageAmountTextBattleCore','ParseClassNotetags','some','getItemDamageAmountLabelBattleCore','Game_Action_executeDamage','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ehPpD','waitForAnimation','blockWidth','finishActionSet','removedStateObjects','Linear','displayMiss','Window_BattleLog_displayMiss','addAutoBattleCommands','isNonSubmenuCancel','ActSeq_Mechanics_Multipliers','updateBattlebackBitmap1','ActSeq_Horror_NoiseCreate','_activeWeaponSlot','forceAction','requestMotion','undecided','iSYll','_growX','attackSkillId','Style','addEscapeCommand','1924eTBgUW','Variable','getAttackMotion','WqvJT','ggizI','_skewDuration','isAnyoneJumping','CopyCombatLog','isWaiting','Game_Battler_clearDamagePopup','isAnyoneSpinning','JS\x20%1END\x20TURN','isAnyoneChangingOpacity','BattleLayout','selectNextCommand','Sprite_Enemy_createStateIconSprite','WLsEY','addedStateObjects','isOptionsCommandAdded','CSGhx','isMoving','removeAnimationFromContainer','skillItemWindowRectBorderStyle','PrioritySortActive','damageRate','Reveal','ActSeq_Movement_Opacity','removeActor','process_VisuMZ_BattleCore_BaseTroops','btMuC','DefaultStyle','StateIconOffsetY','escape','ciLnl','displaySubstitute','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','Upvgg','MhJME','_scene','sSgUn','applyItem','zZbRo','activate','PreApply%1JS','TJudh','trim','SWYer','autoSelectPriority','FocusY','gaugeLineHeight','Exploited','TdbdG'];const _0x8db8d6=_0x1bcc;(function(_0x4d3bb6,_0x30f9e9){const _0x24022d=_0x1bcc;while(!![]){try{const _0xdb5dca=parseInt(_0x24022d(0x7b9))+-parseInt(_0x24022d(0x48a))+-parseInt(_0x24022d(0x274))+parseInt(_0x24022d(0x84b))*parseInt(_0x24022d(0x6d9))+parseInt(_0x24022d(0x581))*parseInt(_0x24022d(0x99e))+parseInt(_0x24022d(0x78d))*parseInt(_0x24022d(0xa24))+-parseInt(_0x24022d(0x22b))*-parseInt(_0x24022d(0xb15));if(_0xdb5dca===_0x30f9e9)break;else _0x4d3bb6['push'](_0x4d3bb6['shift']());}catch(_0x560029){_0x4d3bb6['push'](_0x4d3bb6['shift']());}}}(_0xb61c,0xb6556));var label=_0x8db8d6(0x602),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x47eab3){const _0x3b61e1=_0x8db8d6;return _0x47eab3[_0x3b61e1(0x8fd)]&&_0x47eab3[_0x3b61e1(0x71a)][_0x3b61e1(0xa5c)]('['+label+']');})[0x0];VisuMZ[label][_0x8db8d6(0x466)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x8db8d6(0xb24)]=function(_0x252395,_0x406f1e){const _0x301c59=_0x8db8d6;for(const _0x357a7f in _0x406f1e){if('yhDqA'==='uboNH')this[_0x301c59(0x23f)](!![]);else{if(_0x357a7f[_0x301c59(0x3ed)](/(.*):(.*)/i)){const _0x4cbc28=String(RegExp['$1']),_0x1839ea=String(RegExp['$2'])[_0x301c59(0x3ad)]()[_0x301c59(0xa51)]();let _0x408ddf,_0x2eea9b,_0x3e240a;switch(_0x1839ea){case'NUM':_0x408ddf=_0x406f1e[_0x357a7f]!==''?Number(_0x406f1e[_0x357a7f]):0x0;break;case _0x301c59(0x87b):_0x2eea9b=_0x406f1e[_0x357a7f]!==''?JSON['parse'](_0x406f1e[_0x357a7f]):[],_0x408ddf=_0x2eea9b[_0x301c59(0x9f8)](_0x59eba0=>Number(_0x59eba0));break;case _0x301c59(0xad9):_0x408ddf=_0x406f1e[_0x357a7f]!==''?eval(_0x406f1e[_0x357a7f]):null;break;case _0x301c59(0x18c):_0x2eea9b=_0x406f1e[_0x357a7f]!==''?JSON[_0x301c59(0xa6a)](_0x406f1e[_0x357a7f]):[],_0x408ddf=_0x2eea9b['map'](_0x238b81=>eval(_0x238b81));break;case _0x301c59(0x16e):_0x408ddf=_0x406f1e[_0x357a7f]!==''?JSON['parse'](_0x406f1e[_0x357a7f]):'';break;case _0x301c59(0x257):_0x2eea9b=_0x406f1e[_0x357a7f]!==''?JSON[_0x301c59(0xa6a)](_0x406f1e[_0x357a7f]):[],_0x408ddf=_0x2eea9b[_0x301c59(0x9f8)](_0x109339=>JSON[_0x301c59(0xa6a)](_0x109339));break;case'FUNC':_0x408ddf=_0x406f1e[_0x357a7f]!==''?new Function(JSON[_0x301c59(0xa6a)](_0x406f1e[_0x357a7f])):new Function(_0x301c59(0x75b));break;case _0x301c59(0x6bd):_0x2eea9b=_0x406f1e[_0x357a7f]!==''?JSON[_0x301c59(0xa6a)](_0x406f1e[_0x357a7f]):[],_0x408ddf=_0x2eea9b[_0x301c59(0x9f8)](_0x21c9ed=>new Function(JSON['parse'](_0x21c9ed)));break;case _0x301c59(0x2cc):_0x408ddf=_0x406f1e[_0x357a7f]!==''?String(_0x406f1e[_0x357a7f]):'';break;case'ARRAYSTR':_0x2eea9b=_0x406f1e[_0x357a7f]!==''?JSON[_0x301c59(0xa6a)](_0x406f1e[_0x357a7f]):[],_0x408ddf=_0x2eea9b['map'](_0x366a49=>String(_0x366a49));break;case'STRUCT':_0x3e240a=_0x406f1e[_0x357a7f]!==''?JSON[_0x301c59(0xa6a)](_0x406f1e[_0x357a7f]):{},_0x252395[_0x4cbc28]={},VisuMZ['ConvertParams'](_0x252395[_0x4cbc28],_0x3e240a);continue;case'ARRAYSTRUCT':_0x2eea9b=_0x406f1e[_0x357a7f]!==''?JSON[_0x301c59(0xa6a)](_0x406f1e[_0x357a7f]):[],_0x408ddf=_0x2eea9b[_0x301c59(0x9f8)](_0x11035d=>VisuMZ[_0x301c59(0xb24)]({},JSON['parse'](_0x11035d)));break;default:continue;}_0x252395[_0x4cbc28]=_0x408ddf;}}}return _0x252395;},(_0x4b6fc2=>{const _0xba2eb6=_0x8db8d6,_0x2e5e75=_0x4b6fc2['name'];for(const _0x40cac0 of dependencies){if(_0xba2eb6(0x3af)!=='xWlhU'){if(_0x4ddbeb[_0xba2eb6(0xa96)])return;_0x5812d5['BattleCore']['Scene_Map_updateCallMenu'][_0xba2eb6(0x5fd)](this);}else{if(!Imported[_0x40cac0]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'['format'](_0x2e5e75,_0x40cac0)),SceneManager[_0xba2eb6(0x18b)]();break;}}}const _0x4595b7=_0x4b6fc2[_0xba2eb6(0x71a)];if(_0x4595b7['match'](/\[Version[ ](.*?)\]/i)){const _0x197345=Number(RegExp['$1']);_0x197345!==VisuMZ[label]['version']&&(_0xba2eb6(0x523)!==_0xba2eb6(0x523)?this[_0xba2eb6(0x862)][_0xba2eb6(0x344)]=![]:(alert(_0xba2eb6(0xa0d)[_0xba2eb6(0xad2)](_0x2e5e75,_0x197345)),SceneManager['exit']()));}if(_0x4595b7[_0xba2eb6(0x3ed)](/\[Tier[ ](\d+)\]/i)){if(_0xba2eb6(0x609)===_0xba2eb6(0x609)){const _0x24b832=Number(RegExp['$1']);if(_0x24b832<tier)alert(_0xba2eb6(0xa86)['format'](_0x2e5e75,_0x24b832,tier)),SceneManager[_0xba2eb6(0x18b)]();else{if(_0xba2eb6(0x765)===_0xba2eb6(0x765))tier=Math[_0xba2eb6(0x623)](_0x24b832,tier);else{const _0x2610db=_0x1d9990[_0xba2eb6(0xaf1)]();this[_0xba2eb6(0x87c)](_0x5e4b4c,_0x408203,_0x556c8e),this['createEffectActionSet'](_0x30db39,_0x595e52,_0x204887),this['finishActionSet'](_0x597226,_0x15696c,_0x295b1b);}}}else{if(_0x6585e4['_battler']&&_0x359682[_0xba2eb6(0x980)]){if(_0x4212c4[_0xba2eb6(0x980)]['isActor']()&&_0x49b2d3['_battler'][_0xba2eb6(0x26d)]())return 0x1;else{if(_0xeeee27[_0xba2eb6(0x980)]['isActor']()&&_0x1cd6ff[_0xba2eb6(0x980)][_0xba2eb6(0x26d)]())return-0x1;}}}}VisuMZ[_0xba2eb6(0xb24)](VisuMZ[label][_0xba2eb6(0x466)],_0x4b6fc2[_0xba2eb6(0x5a4)]);})(pluginData),VisuMZ[_0x8db8d6(0x566)]=function(_0x1fd1d3){const _0x3fc4e4=_0x8db8d6;let _0x214f04=[];for(const _0x2a0d6b of _0x1fd1d3){_0x214f04=_0x214f04[_0x3fc4e4(0x668)](VisuMZ[_0x3fc4e4(0x6be)](_0x2a0d6b));}return _0x214f04[_0x3fc4e4(0x691)](_0xb99726=>_0xb99726);},VisuMZ[_0x8db8d6(0x6be)]=function(_0x5064aa){const _0x1de0b7=_0x8db8d6,_0x318ae1=BattleManager['allBattleMembers']()['filter'](_0x4b2187=>_0x4b2187&&_0x4b2187[_0x1de0b7(0x38b)]()),_0x3aef29=BattleManager['_subject'],_0x2aa5f6=BattleManager['_target'],_0x37627a=BattleManager[_0x1de0b7(0x67a)]?BattleManager['_allTargets'][_0x1de0b7(0x7e0)](0x0):_0x318ae1;_0x5064aa=_0x5064aa[_0x1de0b7(0x80e)]()['trim']();if(_0x5064aa==='user')return _0x1de0b7(0x4be)!==_0x1de0b7(0x4be)?!![]:[_0x3aef29];else{if(_0x5064aa==='current\x20target')return[_0x2aa5f6];else{if(_0x5064aa==='prev\x20target'){if(_0x2aa5f6){const _0x55598b=_0x37627a[_0x1de0b7(0x764)](_0x2aa5f6);return _0x55598b>=0x0?[_0x37627a[_0x55598b-0x1]||_0x2aa5f6]:[_0x2aa5f6];}}else{if(_0x5064aa===_0x1de0b7(0x4ca)){if(_0x2aa5f6){if(_0x1de0b7(0x337)!==_0x1de0b7(0x337))_0x414c89[_0x1de0b7(0x4f7)]?this[_0x1de0b7(0x49f)]=_0x1de0b7(0x649):this[_0x1de0b7(0x49f)]='default';else{const _0x27f271=_0x37627a[_0x1de0b7(0x764)](_0x2aa5f6);return _0x27f271>=0x0?[_0x37627a[_0x27f271+0x1]||_0x2aa5f6]:[_0x2aa5f6];}}}else{if(_0x5064aa===_0x1de0b7(0x34c))return _0x37627a;else{if(_0x5064aa==='focus')return _0x1de0b7(0xabf)===_0x1de0b7(0xabf)?[_0x3aef29]['concat'](_0x37627a):0x1;else{if(_0x5064aa===_0x1de0b7(0x1b4))return _0x318ae1[_0x1de0b7(0x691)](_0x11b741=>_0x11b741!==_0x3aef29&&!_0x37627a[_0x1de0b7(0xa5c)](_0x11b741)&&_0x11b741[_0x1de0b7(0x7d5)]());}}}}}}if(_0x3aef29){if(_0x5064aa===_0x1de0b7(0x96f))return _0x3aef29['friendsUnit']()['aliveMembers']();else{if(_0x5064aa===_0x1de0b7(0x77b))return _0x3aef29[_0x1de0b7(0x1bd)]()['aliveMembers']()[_0x1de0b7(0x691)](_0x44ccac=>_0x44ccac!==_0x3aef29);else{if(_0x5064aa===_0x1de0b7(0x6bc))return _0x3aef29[_0x1de0b7(0x1bd)]()[_0x1de0b7(0x338)]()['filter'](_0x34064a=>_0x34064a!==_0x2aa5f6);else{if(_0x5064aa===_0x1de0b7(0x15a))return _0x3aef29['friendsUnit']()[_0x1de0b7(0x5a7)]();else{if(_0x5064aa['match'](/FRIEND INDEX (\d+)/i)){const _0x3b3c92=Number(RegExp['$1']);return[_0x3aef29[_0x1de0b7(0x1bd)]()[_0x1de0b7(0xa8f)]()[_0x3b3c92]];}}}}}if(_0x5064aa===_0x1de0b7(0x4b2)){if(_0x1de0b7(0x92f)===_0x1de0b7(0x92f))return _0x3aef29[_0x1de0b7(0x296)]()[_0x1de0b7(0x338)]();else{if(_0x4857c7[_0x1de0b7(0x602)][_0x1de0b7(0x466)]['BattleLog'][_0x1de0b7(0x85f)])return _0x134d65[_0x1de0b7(0x602)][_0x1de0b7(0x466)][_0x1de0b7(0x817)]['BattleLogRectJS'][_0x1de0b7(0x5fd)](this);return _0x14dc2e[_0x1de0b7(0x602)][_0x1de0b7(0x597)][_0x1de0b7(0x5fd)](this);}}else{if(_0x5064aa===_0x1de0b7(0x8a7))return _0x3aef29[_0x1de0b7(0x296)]()[_0x1de0b7(0x338)]()[_0x1de0b7(0x691)](_0x20f64a=>_0x20f64a!==_0x2aa5f6);else{if(_0x5064aa==='dead\x20opponents'){if(_0x1de0b7(0x799)!==_0x1de0b7(0x799))this[_0x1de0b7(0x532)](),this[_0x1de0b7(0x7b4)](),this[_0x1de0b7(0x5bb)](),this[_0x1de0b7(0x6b2)]();else return _0x3aef29['opponentsUnit']()[_0x1de0b7(0x5a7)]();}else{if(_0x5064aa[_0x1de0b7(0x3ed)](/OPPONENT INDEX (\d+)/i)){const _0x4008eb=Number(RegExp['$1']);return[_0x3aef29[_0x1de0b7(0x296)]()[_0x1de0b7(0xa8f)]()[_0x4008eb]];}}}}}if(_0x5064aa===_0x1de0b7(0x490)){if(_0x1de0b7(0x2aa)!=='QlNeC')_0x53051c['BattleCore'][_0x1de0b7(0x77a)]['call'](this,_0x49af32),this[_0x1de0b7(0x8fb)]();else return $gameParty[_0x1de0b7(0x338)]();}else{if(_0x5064aa==='alive\x20actors\x20not\x20user'){if('LIubR'!=='LIubR'){if(!_0x80c846[_0x1de0b7(0x38c)]())return;if(!_0xa926fe['VisuMZ_3_ActSeqCamera'])return;_0x531bd8['ConvertParams'](_0x59511c,_0x3d9cff);const _0x4051ae=_0x17b50d[_0x1de0b7(0x754)](),_0x4dd146=_0x3e6c9f[_0x1de0b7(0x3c4)];if(!_0x4051ae)return;_0xa88324[_0x1de0b7(0x708)](0x1,_0x3ad9ec[_0x1de0b7(0x20b)],_0x3efce5['EasingType']);if(_0x4dd146)_0x4051ae[_0x1de0b7(0x4f2)](_0x1de0b7(0x5ff));}else return $gameParty[_0x1de0b7(0x338)]()[_0x1de0b7(0x691)](_0x57b7c9=>_0x57b7c9!==_0x3aef29);}else{if(_0x5064aa===_0x1de0b7(0x96d))return $gameParty[_0x1de0b7(0x338)]()[_0x1de0b7(0x691)](_0x125716=>_0x125716!==_0x2aa5f6);else{if(_0x5064aa==='dead\x20actors'){if(_0x1de0b7(0x78c)===_0x1de0b7(0x78c))return $gameParty['deadMembers']();else _0x955f01[_0x1de0b7(0x602)][_0x1de0b7(0xa72)][_0x1de0b7(0x5fd)](this);}else{if(_0x5064aa[_0x1de0b7(0x3ed)](/ACTOR INDEX (\d+)/i)){if(_0x1de0b7(0x9e8)===_0x1de0b7(0x13f))return _0x529a76[_0x1de0b7(0x1bd)]()[_0x1de0b7(0x338)]()[_0x1de0b7(0x691)](_0x542bb2=>_0x542bb2!==_0xf61fe6);else{const _0x1cc661=Number(RegExp['$1']);return[$gameParty[_0x1de0b7(0xa8f)]()[_0x1cc661]];}}else{if(_0x5064aa[_0x1de0b7(0x3ed)](/ACTOR ID (\d+)/i)){if('uPRPH'!==_0x1de0b7(0x263)){const _0x43c74a=Number(RegExp['$1']);return[$gameActors[_0x1de0b7(0x306)](_0x43c74a)];}else{if(_0x1a48cd[_0x1de0b7(0x2f8)]())return'TPB';return'DTB';}}}}}}}if(_0x5064aa===_0x1de0b7(0x56a))return $gameTroop[_0x1de0b7(0x338)]();else{if(_0x5064aa===_0x1de0b7(0xaeb)){if('HurSz'===_0x1de0b7(0x3b0))return $gameTroop[_0x1de0b7(0x338)]()[_0x1de0b7(0x691)](_0x3e4e0d=>_0x3e4e0d!==_0x3aef29);else this['canMove']()&&_0xc302d5[_0x1de0b7(0x602)][_0x1de0b7(0x8cc)][_0x1de0b7(0x5fd)](this,_0x2c6fb3,_0xfba40,_0x41d0c7);}else{if(_0x5064aa===_0x1de0b7(0x642))return _0x1de0b7(0x411)===_0x1de0b7(0x411)?$gameTroop[_0x1de0b7(0x338)]()['filter'](_0x1f43f4=>_0x1f43f4!==_0x2aa5f6):![];else{if(_0x5064aa===_0x1de0b7(0x2e4)){if(_0x1de0b7(0x255)===_0x1de0b7(0x8ab)){if(!this[_0x1de0b7(0x980)])return;if(!this[_0x1de0b7(0x5be)])return;const _0x342d8a=_0x19590f[_0x1de0b7(0x602)][_0x1de0b7(0x466)][_0x1de0b7(0x5d8)],_0x2282f8=this[_0x1de0b7(0x5be)];_0x2282f8[_0x1de0b7(0x344)]=this[_0x1de0b7(0x66c)]();const _0xb04141=_0x342d8a['OffsetX'],_0x4ad697=_0x342d8a[_0x1de0b7(0x9e9)];_0x2282f8['x']=_0xb04141,_0x2282f8['x']+=this['_battler'][_0x1de0b7(0x585)](),_0x2282f8['y']=-this[_0x1de0b7(0x7f5)]+_0x4ad697,_0x2282f8['y']+=this['_battler']['battleUIOffsetY']();}else return $gameTroop[_0x1de0b7(0x5a7)]();}else{if(_0x5064aa[_0x1de0b7(0x3ed)](/ENEMY INDEX (\d+)/i)){const _0x227f7f=Number(RegExp['$1']);return[$gameTroop[_0x1de0b7(0xa8f)]()[_0x227f7f]];}else{if(_0x5064aa['match'](/ENEMY ID (\d+)/i)){if(_0x1de0b7(0x628)!==_0x1de0b7(0x628))return _0x38de26[_0x1de0b7(0x338)]();else{const _0x3ddb4a=Number(RegExp['$1']);return $gameTroop[_0x1de0b7(0x338)]()[_0x1de0b7(0x691)](_0x3659d5=>_0x3659d5['enemyId']()===_0x3ddb4a);}}}}}}}if(_0x5064aa===_0x1de0b7(0x3bd)){if(_0x1de0b7(0x317)!==_0x1de0b7(0x317))this['_windowLayer']['x']=_0x2fd5fa[_0x1de0b7(0x5cb)]*0xa,this[_0x1de0b7(0x373)]['y']=_0x2861c6[_0x1de0b7(0x7f5)]*0xa;else return _0x318ae1[_0x1de0b7(0x691)](_0x2bc962=>_0x2bc962[_0x1de0b7(0xb02)]());}else{if(_0x5064aa===_0x1de0b7(0x13c))return _0x318ae1[_0x1de0b7(0x691)](_0x48094e=>_0x48094e[_0x1de0b7(0xb02)]()&&_0x48094e!==_0x3aef29);else{if(_0x5064aa===_0x1de0b7(0x906))return _0x318ae1[_0x1de0b7(0x691)](_0x48838b=>_0x48838b[_0x1de0b7(0xb02)]()&&_0x48838b!==_0x2aa5f6);else{if(_0x5064aa===_0x1de0b7(0x569)){if(_0x1de0b7(0x792)!==_0x1de0b7(0x792))_0x2921fd[_0x1de0b7(0x602)]['Scene_Battle_stop'][_0x1de0b7(0x5fd)](this);else return _0x318ae1[_0x1de0b7(0x691)](_0x27e930=>_0x27e930[_0x1de0b7(0x20a)]());}}}}return[];},PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x933),_0xb805f=>{const _0x502902=_0x8db8d6;if(!SceneManager[_0x502902(0x38c)]())return;VisuMZ['ConvertParams'](_0xb805f,_0xb805f);const _0x2ce9f5=$gameTemp[_0x502902(0x754)](),_0xe765cc=BattleManager[_0x502902(0x64d)],_0x34e9d6=BattleManager[_0x502902(0x7be)],_0x2bbed3=BattleManager[_0x502902(0x67a)]?BattleManager['_allTargets'][_0x502902(0x7e0)](0x0):[],_0x2c0436=BattleManager[_0x502902(0x307)];if(!_0x2ce9f5||!_0xe765cc||!_0x34e9d6)return;if(!_0xe765cc['item']())return;if(_0xb805f['DisplayAction'])_0x2c0436[_0x502902(0x4d9)](_0x34e9d6,_0xe765cc[_0x502902(0xaf1)]());if(_0xb805f['ApplyImmortal']){if(_0x502902(0x926)!==_0x502902(0x926)){if(!_0x341c94[_0x502902(0x38c)]())return;if(!_0x3c0741['VisuMZ_3_ActSeqCamera'])return;_0x4ffbc8[_0x502902(0xb24)](_0x150130,_0x4ab003);const _0xdf3ef8=_0x91bcfe[_0x502902(0x754)](),_0x12ecfd=_0x497d80[_0x502902(0x136)];_0x5e98e2[_0x502902(0x1d6)](_0x3f07d8[_0x502902(0x863)],_0x372ae0[_0x502902(0xa54)],_0x544a68['Duration'],_0x3359a7['EasingType']);if(_0x12ecfd)_0xdf3ef8['setWaitMode']('battleCamera');}else _0x2c0436[_0x502902(0x43e)](_0x502902(0x865),_0x34e9d6,_0x2bbed3,!![]);}if(_0xb805f['ActionStart'])_0x2c0436[_0x502902(0x43e)](_0x502902(0x1f7),_0x34e9d6,_0xe765cc);if(_0xb805f[_0x502902(0x40f)])_0x2c0436[_0x502902(0x43e)](_0x502902(0x200));if(_0xb805f[_0x502902(0x528)])_0x2c0436[_0x502902(0x43e)]('performCastAnimation',_0x34e9d6,_0xe765cc);if(_0xb805f[_0x502902(0xa7e)])_0x2c0436['push'](_0x502902(0xa0f));_0x2ce9f5[_0x502902(0x4f2)](_0x502902(0x316));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Set_WholeActionSet',_0x988d95=>{const _0x387eea=_0x8db8d6;if(!SceneManager[_0x387eea(0x38c)]())return;VisuMZ['ConvertParams'](_0x988d95,_0x988d95);const _0x1ab358=$gameTemp[_0x387eea(0x754)](),_0x1f13da=BattleManager[_0x387eea(0x64d)],_0x5b20e4=BattleManager['_subject'],_0x156e33=BattleManager['_allTargets']?BattleManager[_0x387eea(0x67a)][_0x387eea(0x7e0)](0x0):[],_0x46c391=BattleManager[_0x387eea(0x307)],_0x5a43f9=_0x988d95[_0x387eea(0x687)]??![];if(!_0x1ab358||!_0x1f13da||!_0x5b20e4)return;if(!_0x1f13da['item']())return;let _0x246701=_0x5a43f9?_0x46c391[_0x387eea(0x48e)](_0x5b20e4):0x1;for(let _0x3d33bc=0x0;_0x3d33bc<_0x246701;_0x3d33bc++){if(_0x5a43f9&&_0x5b20e4[_0x387eea(0x367)]()){if('Flujn'!=='JDmZV')_0x46c391[_0x387eea(0x43e)](_0x387eea(0xa81),_0x5b20e4,_0x3d33bc);else{const _0x1efe12=_0xf4bc24[_0x387eea(0xa6a)]('['+_0x1c67a4['$1'][_0x387eea(0x3ed)](/\d+/g)+']');for(const _0x3307a3 of _0x1efe12){if(!_0x2a9859[_0x387eea(0x56b)](_0x3307a3))return![];}return!![];}}if(_0x988d95[_0x387eea(0x8f6)])_0x46c391[_0x387eea(0x43e)](_0x387eea(0x61f),_0x5b20e4,_0x1f13da);if(_0x988d95[_0x387eea(0x26c)]>0x0)_0x46c391[_0x387eea(0x43e)](_0x387eea(0x5c4),_0x988d95[_0x387eea(0x26c)]);if(_0x988d95[_0x387eea(0x70a)])_0x46c391[_0x387eea(0x43e)](_0x387eea(0x41e),_0x5b20e4,_0x156e33,_0x1f13da[_0x387eea(0xaf1)]()[_0x387eea(0x35f)]);if(_0x988d95[_0x387eea(0xa7e)])_0x46c391[_0x387eea(0x43e)](_0x387eea(0xa0f));for(const _0x1ce2de of _0x156e33){if(!_0x1ce2de)continue;if(_0x988d95['ActionEffect'])_0x46c391[_0x387eea(0x43e)](_0x387eea(0x1eb),_0x5b20e4,_0x1ce2de);}}_0x5a43f9&&_0x5b20e4[_0x387eea(0x367)]()&&('BuNtL'!==_0x387eea(0xa4b)?_0x46c391[_0x387eea(0x43e)](_0x387eea(0x790),_0x5b20e4):(this[_0x387eea(0x856)]=new _0x2c9246(),this['_battleField'][_0x387eea(0x9b0)](this[_0x387eea(0x856)])));if(_0x988d95[_0x387eea(0xb1c)])_0x46c391[_0x387eea(0x43e)](_0x387eea(0x865),_0x5b20e4,_0x156e33,![]);_0x1ab358[_0x387eea(0x4f2)](_0x387eea(0x316));}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Set_TargetActionSet',_0x434aca=>{const _0x5a67f7=_0x8db8d6;if(!SceneManager[_0x5a67f7(0x38c)]())return;VisuMZ['ConvertParams'](_0x434aca,_0x434aca);const _0x1d61a4=$gameTemp[_0x5a67f7(0x754)](),_0x21cb8c=BattleManager[_0x5a67f7(0x64d)],_0x11e31c=BattleManager[_0x5a67f7(0x7be)],_0xd68bdc=BattleManager[_0x5a67f7(0x67a)]?BattleManager[_0x5a67f7(0x67a)]['slice'](0x0):[],_0x28ce6e=BattleManager[_0x5a67f7(0x307)],_0x4c6b72=_0x434aca[_0x5a67f7(0x687)]??![];if(!_0x1d61a4||!_0x21cb8c||!_0x11e31c)return;if(!_0x21cb8c[_0x5a67f7(0xaf1)]())return;let _0x464348=_0x4c6b72?_0x28ce6e['getDualWieldTimes'](_0x11e31c):0x1;for(let _0x2fcf57=0x0;_0x2fcf57<_0x464348;_0x2fcf57++){for(const _0x5c1a7f of _0xd68bdc){if(!_0x5c1a7f)continue;if(_0x4c6b72&&_0x11e31c['isActor']()){if(_0x5a67f7(0x9a2)!==_0x5a67f7(0x9a2)){this['_cacheTextWidth']=_0x47b80c;const _0x3e487d=this[_0x5a67f7(0x7fd)](),_0x578fa5=this[_0x5a67f7(0x4d6)](),_0x3cd24a=_0x43ad46[_0x5a67f7(0x6da)]['lineHeight']();this[_0x5a67f7(0x836)](),this[_0x5a67f7(0x86a)][_0x5a67f7(0x750)](),this[_0x5a67f7(0x86a)][_0x5a67f7(0xa01)](_0x3e487d,0x0,0x0,_0x578fa5,_0x3cd24a,_0x5a67f7(0x9e7));}else _0x28ce6e[_0x5a67f7(0x43e)](_0x5a67f7(0xa81),_0x11e31c,_0x2fcf57);}if(_0x434aca[_0x5a67f7(0x8f6)])_0x28ce6e[_0x5a67f7(0x43e)](_0x5a67f7(0x61f),_0x11e31c,_0x21cb8c);if(_0x434aca[_0x5a67f7(0x9fc)]>0x0)_0x28ce6e[_0x5a67f7(0x43e)]('waitCount',_0x434aca[_0x5a67f7(0x9fc)]);if(_0x434aca[_0x5a67f7(0x70a)])_0x28ce6e[_0x5a67f7(0x43e)](_0x5a67f7(0x41e),_0x11e31c,[_0x5c1a7f],_0x21cb8c['item']()[_0x5a67f7(0x35f)]);if(_0x434aca[_0x5a67f7(0xb3d)]>0x0)_0x28ce6e[_0x5a67f7(0x43e)]('waitCount',_0x434aca['WaitCount2']);if(_0x434aca[_0x5a67f7(0x689)])_0x28ce6e[_0x5a67f7(0x43e)](_0x5a67f7(0x1eb),_0x11e31c,_0x5c1a7f);}}_0x4c6b72&&_0x11e31c[_0x5a67f7(0x367)]()&&_0x28ce6e['push'](_0x5a67f7(0x790),_0x11e31c);if(_0x434aca[_0x5a67f7(0xb1c)])_0x28ce6e['push']('applyImmortal',_0x11e31c,_0xd68bdc,![]);_0x1d61a4[_0x5a67f7(0x4f2)](_0x5a67f7(0x316));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x48f),_0x4557a0=>{const _0xd8a77f=_0x8db8d6;if(!SceneManager[_0xd8a77f(0x38c)]())return;VisuMZ[_0xd8a77f(0xb24)](_0x4557a0,_0x4557a0);const _0x1f45cf=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bc61f=BattleManager[_0xd8a77f(0x64d)],_0x47124e=BattleManager[_0xd8a77f(0x7be)],_0x18425e=BattleManager['_allTargets']?BattleManager['_allTargets'][_0xd8a77f(0x7e0)](0x0):[],_0x57798a=BattleManager[_0xd8a77f(0x307)];if(!_0x1f45cf||!_0x3bc61f||!_0x47124e)return;if(!_0x3bc61f['item']())return;if(_0x4557a0[_0xd8a77f(0xb1c)])_0x57798a[_0xd8a77f(0x43e)](_0xd8a77f(0x865),_0x47124e,_0x18425e,![]);if(_0x4557a0[_0xd8a77f(0x7d6)])_0x57798a['push']('waitForNewLine');if(_0x4557a0[_0xd8a77f(0x997)])_0x57798a[_0xd8a77f(0x43e)]('waitForEffect');if(_0x4557a0[_0xd8a77f(0x1d9)])_0x57798a[_0xd8a77f(0x43e)]('clear');if(_0x4557a0[_0xd8a77f(0x10d)])_0x57798a[_0xd8a77f(0x43e)]('performActionEnd',_0x47124e);if(_0x4557a0[_0xd8a77f(0x40f)])_0x57798a['push'](_0xd8a77f(0x200));_0x1f45cf[_0xd8a77f(0x4f2)](_0xd8a77f(0x316));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x775),_0x3d1d1=>{const _0x26fe7e=_0x8db8d6;if(!SceneManager[_0x26fe7e(0x38c)]())return;if(!Imported[_0x26fe7e(0xaa5)])return;VisuMZ['ConvertParams'](_0x3d1d1,_0x3d1d1);const _0x4dd761=$gameTemp['getLastPluginCommandInterpreter'](),_0x3af7e2=_0x3d1d1[_0x26fe7e(0x59e)];if(!_0x4dd761)return;$gameScreen[_0x26fe7e(0x3fd)](_0x3d1d1[_0x26fe7e(0x416)],_0x3d1d1['Duration'],_0x3d1d1['EasingType']);if(_0x3af7e2)_0x4dd761['setWaitMode'](_0x26fe7e(0x2e8));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x191),_0x44791f=>{const _0x67b75d=_0x8db8d6;if(!SceneManager[_0x67b75d(0x38c)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x67b75d(0xb24)](_0x44791f,_0x44791f);const _0x508ec9=$gameTemp[_0x67b75d(0x754)](),_0x559a8c=_0x44791f[_0x67b75d(0x59e)];if(!_0x508ec9)return;$gameScreen[_0x67b75d(0x3fd)](0x0,_0x44791f['Duration'],_0x44791f[_0x67b75d(0x5da)]);if(_0x559a8c)_0x508ec9['setWaitMode']('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x56d),_0x423755=>{const _0x39568d=_0x8db8d6;if(!SceneManager[_0x39568d(0x38c)]())return;if(!Imported[_0x39568d(0xaa5)])return;const _0x361f1a=$gameTemp[_0x39568d(0x754)]();if(!_0x361f1a)return;_0x361f1a[_0x39568d(0x4f2)]('battleAngle');}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x71e),_0xf5502d=>{const _0x16322b=_0x8db8d6;if(!SceneManager[_0x16322b(0x38c)]())return;VisuMZ[_0x16322b(0xb24)](_0xf5502d,_0xf5502d);const _0x2e8e29=$gameTemp[_0x16322b(0x754)](),_0x433940=BattleManager[_0x16322b(0x64d)],_0x801841=BattleManager['_subject'],_0x5aa0ca=VisuMZ[_0x16322b(0x566)](_0xf5502d['Targets']),_0x134c47=_0xf5502d['Mirror'],_0x128415=BattleManager[_0x16322b(0x307)];if(!_0x2e8e29||!_0x433940||!_0x801841)return;if(!_0x433940['item']())return;let _0x5a3681=_0x433940['item']()[_0x16322b(0x35f)];if(_0x5a3681<0x0)_0x5a3681=_0x801841[_0x16322b(0x7bb)]();$gameTemp[_0x16322b(0x2d5)](_0x5aa0ca,_0x5a3681,_0x134c47),_0xf5502d['WaitForAnimation']&&_0x2e8e29[_0x16322b(0x4f2)](_0x16322b(0x4b4));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x788),_0x4e346a=>{const _0x4970fa=_0x8db8d6;if(!SceneManager[_0x4970fa(0x38c)]())return;VisuMZ[_0x4970fa(0xb24)](_0x4e346a,_0x4e346a);const _0x21fcb7=$gameTemp[_0x4970fa(0x754)](),_0x3138bc=BattleManager[_0x4970fa(0x7be)],_0x20dc37=VisuMZ[_0x4970fa(0x566)](_0x4e346a['Targets']),_0x204409=_0x4e346a[_0x4970fa(0x849)],_0x3920bd=BattleManager[_0x4970fa(0x307)];if(!_0x21fcb7||!_0x3138bc)return;const _0x2d064b=_0x3138bc[_0x4970fa(0x7bb)]();$gameTemp[_0x4970fa(0x2d5)](_0x20dc37,_0x2d064b,_0x204409),_0x4e346a['WaitForAnimation']&&_0x21fcb7[_0x4970fa(0x4f2)](_0x4970fa(0x4b4));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x348),_0x48f355=>{const _0x471191=_0x8db8d6;if(!SceneManager[_0x471191(0x38c)]())return;VisuMZ[_0x471191(0xb24)](_0x48f355,_0x48f355);const _0x2e2f34=_0x41829a[_0x471191(0x135)](_0x48f355['Slot']);if(_0x2e2f34<=0x0)return;const _0x15318f=$gameTemp[_0x471191(0x754)](),_0x41829a=BattleManager[_0x471191(0x7be)],_0x3e6de3=VisuMZ[_0x471191(0x566)](_0x48f355[_0x471191(0x8f9)]),_0x54f53f=_0x48f355['Mirror'],_0xcfbe28=BattleManager[_0x471191(0x307)];if(!_0x15318f||!_0x41829a)return;$gameTemp[_0x471191(0x2d5)](_0x3e6de3,_0x2e2f34,_0x54f53f);if(_0x48f355[_0x471191(0xa7e)]){if(_0x471191(0x84a)==='TprNh')return _0x393a5a[_0x471191(0x730)]?_0x4fdb61[_0x471191(0x753)]['Settings'][_0x471191(0xabe)][_0x471191(0x91d)]:![];else _0x15318f[_0x471191(0x4f2)]('battleAnimation');}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x588),_0x4b93e8=>{const _0x5f026d=_0x8db8d6;if(!SceneManager[_0x5f026d(0x38c)]())return;VisuMZ[_0x5f026d(0xb24)](_0x4b93e8,_0x4b93e8);const _0x3211b5=$gameTemp[_0x5f026d(0x754)](),_0x40f41e=BattleManager[_0x5f026d(0x64d)],_0x1e871c=_0x4b93e8[_0x5f026d(0x849)],_0x28eeeb=VisuMZ[_0x5f026d(0x566)](_0x4b93e8[_0x5f026d(0x8f9)]);if(!_0x3211b5||!_0x40f41e)return;if(!_0x40f41e[_0x5f026d(0xaf1)]())return;for(const _0x4e3608 of _0x28eeeb){if(_0x5f026d(0x227)===_0x5f026d(0x655))this[_0x5f026d(0xa5f)](_0x3f52ff);else{if(!_0x4e3608)continue;_0x4e3608['performCastAnimation'](_0x40f41e,_0x1e871c);}}if(_0x4b93e8[_0x5f026d(0xa7e)])_0x3211b5[_0x5f026d(0x4f2)]('battleAnimation');}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Animation_ChangeBattlePortrait',_0x16923b=>{const _0x236dc4=_0x8db8d6;VisuMZ['ConvertParams'](_0x16923b,_0x16923b);const _0xa3bdf1=$gameTemp[_0x236dc4(0x754)](),_0x13af6d=VisuMZ[_0x236dc4(0x566)](_0x16923b[_0x236dc4(0x8f9)]),_0x35de10=_0x16923b[_0x236dc4(0x729)];if(!_0x35de10)return;for(const _0xb6218c of _0x13af6d){if(!_0xb6218c)continue;if(!_0xb6218c[_0x236dc4(0x367)]())continue;_0xb6218c['setBattlePortrait'](_0x35de10);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Animation_ShowAnimation',_0xd21703=>{const _0x1b93e3=_0x8db8d6;if(!SceneManager[_0x1b93e3(0x38c)]())return;VisuMZ[_0x1b93e3(0xb24)](_0xd21703,_0xd21703);const _0x4d5150=$gameTemp[_0x1b93e3(0x754)](),_0x351f4e=VisuMZ['CreateActionSequenceTargets'](_0xd21703[_0x1b93e3(0x8f9)]),_0x26508e=_0xd21703[_0x1b93e3(0x1a2)],_0x375af1=_0xd21703[_0x1b93e3(0x849)];if(!_0x4d5150)return;$gameTemp[_0x1b93e3(0x2d5)](_0x351f4e,_0x26508e,_0x375af1);if(_0xd21703[_0x1b93e3(0xa7e)])_0x4d5150[_0x1b93e3(0x4f2)](_0x1b93e3(0x4b4));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x8d6),_0x4cd5a0=>{const _0x39ed06=_0x8db8d6;if(!SceneManager[_0x39ed06(0x38c)]())return;const _0xf1676a=$gameTemp[_0x39ed06(0x754)]();if(!_0xf1676a)return;_0xf1676a[_0x39ed06(0x4f2)](_0x39ed06(0x4b4));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x2c4),_0x45ddff=>{const _0x2f1d82=_0x8db8d6;if(!SceneManager[_0x2f1d82(0x38c)]())return;VisuMZ[_0x2f1d82(0xb24)](_0x45ddff,_0x45ddff);const _0x4dbfb7=BattleManager[_0x2f1d82(0x307)],_0x4a94f7=_0x45ddff[_0x2f1d82(0xa2b)]&&Imported[_0x2f1d82(0x650)];_0x4dbfb7[_0x2f1d82(0x1d0)](_0x45ddff[_0x2f1d82(0xb36)]),_0x4a94f7&&Imported[_0x2f1d82(0x650)]&&$gameSystem[_0x2f1d82(0x974)](_0x45ddff['Text']||'',_0x45ddff[_0x2f1d82(0x795)]||0x0);}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x8ad),_0x2627f6=>{const _0x55bc34=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;const _0x579614=BattleManager[_0x55bc34(0x307)];_0x579614['clear']();}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_BattleLog_DisplayAction',_0x95003e=>{const _0x27014c=_0x8db8d6;if(!SceneManager[_0x27014c(0x38c)]())return;const _0x132b0f=$gameTemp[_0x27014c(0x754)](),_0x4db6cc=BattleManager[_0x27014c(0x64d)],_0x46534c=BattleManager[_0x27014c(0x7be)],_0x5be2c5=BattleManager[_0x27014c(0x307)];if(!_0x132b0f||!_0x4db6cc||!_0x46534c)return;if(!_0x4db6cc[_0x27014c(0xaf1)]())return;_0x5be2c5[_0x27014c(0x4d9)](_0x46534c,_0x4db6cc[_0x27014c(0xaf1)]()),_0x132b0f['setWaitMode'](_0x27014c(0x316));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x1cf),_0x4380ca=>{const _0x58ed2=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;const _0x571463=BattleManager[_0x58ed2(0x307)];_0x571463[_0x58ed2(0xa83)]();}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x394),_0x26a4e4=>{const _0x30ac99=_0x8db8d6;if(!SceneManager[_0x30ac99(0x38c)]())return;const _0x4f0491=BattleManager[_0x30ac99(0x307)];_0x4f0491[_0x30ac99(0x16d)]();}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x6db),_0x1fafe7=>{const _0x3ae786=_0x8db8d6;if(!SceneManager[_0x3ae786(0x38c)]())return;const _0x4bcbb8=BattleManager['_logWindow'];_0x4bcbb8[_0x3ae786(0x548)]();}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x467),_0x65529e=>{const _0xcd7254=_0x8db8d6;if(!SceneManager[_0xcd7254(0x38c)]())return;VisuMZ[_0xcd7254(0xb24)](_0x65529e,_0x65529e),SceneManager[_0xcd7254(0xa4a)][_0xcd7254(0x2b1)](_0x65529e['ShowHide']);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x9ac),_0x142fee=>{const _0x4cc66d=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;const _0x32de60=$gameTemp[_0x4cc66d(0x754)]();_0x32de60[_0x4cc66d(0x4f2)](_0x4cc66d(0x316));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xac8),_0x281cde=>{const _0x18d0ef=_0x8db8d6;if(!SceneManager[_0x18d0ef(0x38c)]())return;const _0x599c7a=$gameTemp['getLastPluginCommandInterpreter'](),_0x36973f=BattleManager[_0x18d0ef(0x307)];_0x36973f[_0x18d0ef(0xb37)](),_0x599c7a[_0x18d0ef(0x4f2)](_0x18d0ef(0x316));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Camera_Clamp',_0x147110=>{const _0x55d802=_0x8db8d6;if(!SceneManager[_0x55d802(0x38c)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x147110,_0x147110);const _0x17dde7=$gameScreen[_0x55d802(0xa85)]();_0x17dde7['cameraClamp']=_0x147110[_0x55d802(0x95f)];}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x7d2),_0x224934=>{const _0x4559b5=_0x8db8d6;if(!SceneManager[_0x4559b5(0x38c)]())return;if(!Imported[_0x4559b5(0xaa5)])return;VisuMZ[_0x4559b5(0xb24)](_0x224934,_0x224934);const _0x2faff1=$gameTemp['getLastPluginCommandInterpreter'](),_0x21ed61=_0x224934[_0x4559b5(0x136)];$gameScreen[_0x4559b5(0x1d6)](_0x224934[_0x4559b5(0x863)],_0x224934[_0x4559b5(0xa54)],_0x224934[_0x4559b5(0x20b)],_0x224934[_0x4559b5(0x5da)]);if(_0x21ed61)_0x2faff1[_0x4559b5(0x4f2)](_0x4559b5(0x14e));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x6a9),_0x30690b=>{const _0x38f155=_0x8db8d6;if(!SceneManager[_0x38f155(0x38c)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x30690b,_0x30690b);const _0x42f33d=$gameTemp[_0x38f155(0x754)](),_0x1e4959=VisuMZ[_0x38f155(0x566)](_0x30690b[_0x38f155(0x8f9)]),_0x114781=_0x30690b['WaitForCamera'];$gameScreen[_0x38f155(0x414)](_0x1e4959,_0x30690b[_0x38f155(0x20b)],_0x30690b['EasingType']);if(_0x114781)_0x42f33d[_0x38f155(0x4f2)](_0x38f155(0x14e));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x1ce),_0x27fcda=>{const _0x4b41c8=_0x8db8d6;if(!SceneManager[_0x4b41c8(0x38c)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4b41c8(0xb24)](_0x27fcda,_0x27fcda);const _0x4fab02=$gameTemp[_0x4b41c8(0x754)](),_0x26ed83=_0x27fcda['WaitForCamera'];$gameScreen['setBattleCameraOffset'](_0x27fcda['OffsetX'],_0x27fcda[_0x4b41c8(0x9e9)],_0x27fcda['Duration'],_0x27fcda[_0x4b41c8(0x5da)]);if(_0x26ed83)_0x4fab02[_0x4b41c8(0x4f2)](_0x4b41c8(0x14e));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x4fc),_0x3153cb=>{const _0x290756=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x290756(0xaa5)])return;VisuMZ[_0x290756(0xb24)](_0x3153cb,_0x3153cb);const _0x49a40c=$gameTemp[_0x290756(0x754)](),_0x17ba40=_0x3153cb[_0x290756(0x93b)],_0x17e931=_0x3153cb[_0x290756(0x873)],_0x5b1289=_0x3153cb['WaitForCamera'];if(_0x17ba40){const _0x114929=Math[_0x290756(0x423)](Graphics[_0x290756(0x5cb)]/0x2),_0x141f77=Math[_0x290756(0x423)](Graphics[_0x290756(0x7f5)]/0x2);$gameScreen[_0x290756(0x1d6)](_0x114929,_0x141f77,_0x3153cb['Duration'],_0x3153cb[_0x290756(0x5da)]);}_0x17e931&&$gameScreen[_0x290756(0x8e9)](0x0,0x0,_0x3153cb[_0x290756(0x20b)],_0x3153cb[_0x290756(0x5da)]);if(_0x5b1289)_0x49a40c['setWaitMode'](_0x290756(0x14e));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x828),_0x5f5062=>{const _0x3460dc=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3460dc(0xaa5)])return;const _0x4d7d87=$gameTemp[_0x3460dc(0x754)]();if(!_0x4d7d87)return;_0x4d7d87[_0x3460dc(0x4f2)](_0x3460dc(0x14e));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x526),_0x4d7e75=>{const _0x4cab72=_0x8db8d6;if(!SceneManager[_0x4cab72(0x38c)]())return;if(!Imported[_0x4cab72(0xa77)])return;VisuMZ['ConvertParams'](_0x4d7e75,_0x4d7e75);const _0x349b4d=VisuMZ['CreateActionSequenceTargets'](_0x4d7e75[_0x4cab72(0x8f9)]),_0x1bfeaf=_0x4d7e75[_0x4cab72(0x6b7)]['toLowerCase']()[_0x4cab72(0xa51)]();for(const _0x388197 of _0x349b4d){if(_0x4cab72(0x7d1)!=='TCsPG'){if(!_0x388197)continue;_0x388197[_0x4cab72(0x42c)](_0x1bfeaf);}else{const _0x447d96=this[_0x4cab72(0x980)][_0x4cab72(0x992)];this[_0x4cab72(0x713)]=_0x2e8354[_0x4cab72(0x51a)][_0x447d96['motionType']],this['_pattern']=_0x447d96['pattern'];const _0x1c4383=this[_0x4cab72(0x4f0)];_0x1c4383[_0x4cab72(0x8e2)](_0x447d96[_0x4cab72(0x8e8)],_0x447d96['pattern']),this[_0x4cab72(0x2bd)]();}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x2da),_0x211341=>{const _0x8702ef=_0x8db8d6;if(!SceneManager[_0x8702ef(0x38c)]())return;if(!Imported[_0x8702ef(0xa77)])return;VisuMZ[_0x8702ef(0xb24)](_0x211341,_0x211341);const _0x4b22ef=VisuMZ[_0x8702ef(0x566)](_0x211341[_0x8702ef(0x8f9)]),_0x5564b5=_0x211341[_0x8702ef(0x11a)];for(const _0x5d9f8f of _0x4b22ef){if(!_0x5d9f8f)continue;_0x5d9f8f[_0x8702ef(0x622)]()['timeScale']=_0x5564b5;}}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x8da),_0x337861=>{const _0x3b2ca5=_0x8db8d6;if(!SceneManager[_0x3b2ca5(0x38c)]())return;if(!Imported[_0x3b2ca5(0x9b1)])return;VisuMZ[_0x3b2ca5(0xb24)](_0x337861,_0x337861);const _0x1ca3e7=BattleManager['_action'],_0x28a8f6=_0x337861[_0x3b2ca5(0x35e)];if(!_0x1ca3e7)return;_0x1ca3e7['_battleCoreAddedElements']=_0x28a8f6;}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x6d2),_0x191d14=>{const _0x5e967d=_0x8db8d6;if(!SceneManager[_0x5e967d(0x38c)]())return;if(!Imported[_0x5e967d(0x9b1)])return;const _0x32eeeb=BattleManager[_0x5e967d(0x64d)];if(!_0x32eeeb)return;_0x32eeeb[_0x5e967d(0x25d)]();}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x210),_0x5a57ee=>{const _0x193867=_0x8db8d6;if(!SceneManager[_0x193867(0x38c)]())return;if(!Imported[_0x193867(0x9b1)])return;VisuMZ[_0x193867(0xb24)](_0x5a57ee,_0x5a57ee);const _0x1d3909=BattleManager[_0x193867(0x64d)],_0x51d661=_0x5a57ee[_0x193867(0x35e)];if(!_0x1d3909)return;_0x1d3909[_0x193867(0x4a5)]=_0x51d661;}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Element_NullElements',_0x46e9b0=>{const _0x391f02=_0x8db8d6;if(!SceneManager[_0x391f02(0x38c)]())return;if(!Imported[_0x391f02(0x9b1)])return;const _0x466cf1=BattleManager[_0x391f02(0x64d)];if(!_0x466cf1)return;_0x466cf1[_0x391f02(0x1ed)]=!![];}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Horror_Clear',_0x48ae41=>{const _0xc0c9a9=_0x8db8d6;if(!Imported[_0xc0c9a9(0x88d)])return;if(!SceneManager[_0xc0c9a9(0x38c)]())return;VisuMZ[_0xc0c9a9(0xb24)](_0x48ae41,_0x48ae41);const _0x2a7bfa=VisuMZ[_0xc0c9a9(0x566)](_0x48ae41[_0xc0c9a9(0x8f9)]);for(const _0x33463c of _0x2a7bfa){if(!_0x33463c)continue;_0x33463c[_0xc0c9a9(0x458)]('noise'),_0x33463c['removeHorrorEffect'](_0xc0c9a9(0x91e)),_0x33463c[_0xc0c9a9(0x458)]('tv'),_0x33463c['clearHorrorEffects']();}$gamePlayer['refresh']();}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x755),_0x24fba1=>{const _0x3ee502=_0x8db8d6;if(!Imported[_0x3ee502(0x88d)])return;if(!SceneManager[_0x3ee502(0x38c)]())return;VisuMZ[_0x3ee502(0xb24)](_0x24fba1,_0x24fba1);const _0x1c3787=VisuMZ[_0x3ee502(0x566)](_0x24fba1['Targets']),_0x64824b=_0x3ee502(0x91e);_0x24fba1[_0x3ee502(0x698)]=Math[_0x3ee502(0x2f7)](_0x24fba1['slices']/0x2),_0x24fba1[_0x3ee502(0x12c)]=_0x24fba1[_0x3ee502(0x722)],_0x24fba1[_0x3ee502(0x8b8)]=!![];for(const _0x2497a9 of _0x1c3787){if(!_0x2497a9)continue;_0x2497a9[_0x3ee502(0x58c)](_0x64824b,_0x24fba1);}$gamePlayer[_0x3ee502(0x548)]();}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Horror_GlitchRemove',_0x4c52f7=>{const _0x47599d=_0x8db8d6;if(!Imported[_0x47599d(0x88d)])return;if(!SceneManager[_0x47599d(0x38c)]())return;VisuMZ[_0x47599d(0xb24)](_0x4c52f7,_0x4c52f7);const _0x14385d=VisuMZ[_0x47599d(0x566)](_0x4c52f7['Targets']);for(const _0x35c4d0 of _0x14385d){if(!_0x35c4d0)continue;_0x35c4d0['removeHorrorEffect'](_0x47599d(0x91e));}$gamePlayer['refresh']();}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xa1a),_0x54b87a=>{const _0x173f64=_0x8db8d6;if(!Imported[_0x173f64(0x88d)])return;if(!SceneManager[_0x173f64(0x38c)]())return;VisuMZ[_0x173f64(0xb24)](_0x54b87a,_0x54b87a);const _0xba1281=VisuMZ[_0x173f64(0x566)](_0x54b87a[_0x173f64(0x8f9)]),_0xd91a56=_0x173f64(0x4b6);for(const _0x5119bf of _0xba1281){if(!_0x5119bf)continue;_0x5119bf[_0x173f64(0x58c)](_0xd91a56,_0x54b87a);}$gamePlayer[_0x173f64(0x548)]();}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x1aa),_0x19a762=>{const _0x5779a3=_0x8db8d6;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x19a762,_0x19a762);const _0x1c73b3=VisuMZ[_0x5779a3(0x566)](_0x19a762['Targets']);for(const _0xe47d5e of _0x1c73b3){if(!_0xe47d5e)continue;_0xe47d5e[_0x5779a3(0x458)]('noise');}$gamePlayer['refresh']();}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Horror_TVCreate',_0x1d1095=>{const _0x27f566=_0x8db8d6;if(!Imported[_0x27f566(0x88d)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1d1095,_0x1d1095);const _0x243ffe=VisuMZ['CreateActionSequenceTargets'](_0x1d1095['Targets']),_0x119de8='tv';for(const _0x43e0f9 of _0x243ffe){if(!_0x43e0f9)continue;_0x43e0f9[_0x27f566(0x58c)](_0x119de8,_0x1d1095);}$gamePlayer[_0x27f566(0x548)]();}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x959),_0x4a03f3=>{const _0x4f4782=_0x8db8d6;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4f4782(0x38c)]())return;VisuMZ[_0x4f4782(0xb24)](_0x4a03f3,_0x4a03f3);const _0x1238c5=VisuMZ[_0x4f4782(0x566)](_0x4a03f3[_0x4f4782(0x8f9)]);for(const _0x32b523 of _0x1238c5){if(_0x4f4782(0x739)===_0x4f4782(0x739)){if(!_0x32b523)continue;_0x32b523[_0x4f4782(0x458)]('tv');}else this[_0x4f4782(0x43e)](_0x4f4782(0x3b1),_0x291a4c);}$gamePlayer['refresh']();}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x888),_0x571df7=>{const _0x529cc8=_0x8db8d6;if(!SceneManager[_0x529cc8(0x38c)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x473510=SceneManager[_0x529cc8(0xa4a)]['_spriteset'];if(!_0x473510)return;VisuMZ[_0x529cc8(0xb24)](_0x571df7,_0x571df7);const _0x16cbfc=_0x571df7['Intensity']||0x1,_0x1ea3c9=_0x571df7[_0x529cc8(0x20b)]||0x1,_0x2628c9=_0x571df7['EasingType']||_0x529cc8(0xa13);_0x473510[_0x529cc8(0x4c7)](_0x16cbfc,_0x1ea3c9,_0x2628c9);}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x895),_0x56ac04=>{const _0x52a21b=_0x8db8d6;if(!SceneManager[_0x52a21b(0x38c)]())return;if(!Imported[_0x52a21b(0x332)])return;const _0x5a4454=SceneManager[_0x52a21b(0xa4a)][_0x52a21b(0x485)];if(!_0x5a4454)return;VisuMZ[_0x52a21b(0xb24)](_0x56ac04,_0x56ac04);const _0x278ef3=Number(_0x56ac04[_0x52a21b(0x416)])||0x0,_0x2129ad=Number(_0x56ac04[_0x52a21b(0x225)]),_0x87597d=_0x56ac04[_0x52a21b(0x20b)]||0x1,_0x1f5d03=_0x56ac04[_0x52a21b(0x5da)]||_0x52a21b(0xa13);_0x5a4454[_0x52a21b(0x83e)](_0x278ef3,_0x2129ad,_0x87597d,_0x1f5d03);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x7ed),_0x42c52d=>{const _0x2de6b3=_0x8db8d6;if(!SceneManager[_0x2de6b3(0x38c)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4ff6f6=SceneManager[_0x2de6b3(0xa4a)][_0x2de6b3(0x485)];if(!_0x4ff6f6)return;VisuMZ['ConvertParams'](_0x42c52d,_0x42c52d);const _0x2fb960=Number(_0x42c52d[_0x2de6b3(0x416)])||0x0,_0x183db0=Number(_0x42c52d[_0x2de6b3(0x225)]),_0x1ca78b=_0x42c52d['Duration']||0x1,_0x1dd32c=_0x42c52d[_0x2de6b3(0x5da)]||'Linear',_0x10f875=VisuMZ[_0x2de6b3(0x566)](_0x42c52d[_0x2de6b3(0x8f9)]);for(const _0x22903c of _0x10f875){if(!_0x22903c)continue;if(!_0x22903c['battler']())continue;_0x22903c['battler']()[_0x2de6b3(0x83e)](_0x2fb960,_0x183db0,_0x1ca78b,_0x1dd32c);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x727),_0x22c806=>{const _0x712846=_0x8db8d6;if(!SceneManager[_0x712846(0x38c)]())return;if(!Imported[_0x712846(0x332)])return;VisuMZ[_0x712846(0xb24)](_0x22c806,_0x22c806);const _0x58a53a={'delay':_0x22c806['delay'],'duration':_0x22c806['duration'],'hue':_0x22c806[_0x712846(0x506)],'opacityStart':_0x22c806['opacityStart'],'tone':_0x22c806[_0x712846(0x131)],'visible':!![]},_0x5ca712=VisuMZ[_0x712846(0x566)](_0x22c806[_0x712846(0x8f9)]);for(const _0x7d210c of _0x5ca712){if(_0x712846(0x656)==='YmUHQ'){if(!_0x972bb4[_0x712846(0x38c)]())return;if(!_0x33072f['VisuMZ_1_ElementStatusCore'])return;const _0x419202=_0xfa7c3b[_0x712846(0x64d)];if(!_0x419202)return;_0x419202[_0x712846(0x1ed)]=!![];}else{if(!_0x7d210c)continue;_0x7d210c[_0x712846(0x289)](_0x58a53a);}}}),PluginManager['registerCommand'](pluginData['name'],_0x8db8d6(0x61c),_0x4df683=>{const _0x4a13a4=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4a13a4(0x332)])return;VisuMZ[_0x4a13a4(0xb24)](_0x4df683,_0x4df683);const _0x44a6d8=VisuMZ[_0x4a13a4(0x566)](_0x4df683[_0x4a13a4(0x8f9)]);for(const _0x1ac390 of _0x44a6d8){if(_0x4a13a4(0x211)===_0x4a13a4(0xa37)){const _0x538f45=this[_0x4a13a4(0xaf1)]()['note'];if(_0x538f45['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x538f45['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x3fea4b(_0x1d014b['$1'])/0x64;else{let _0x399b16=_0x1b3afe['BattleCore'][_0x4a13a4(0x71c)][_0x4a13a4(0x5fd)](this,_0x47a44c);return _0x399b16=this[_0x4a13a4(0x5fe)][_0x4a13a4(0x7a2)]*_0x399b16+this[_0x4a13a4(0x5fe)][_0x4a13a4(0x7a1)],_0x399b16;}}}else{if(!_0x1ac390)continue;_0x1ac390[_0x4a13a4(0x550)]();}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0x18c09b=>{const _0x14274e=_0x8db8d6;if(!Imported[_0x14274e(0x332)])return;const _0xb628c2=SceneManager[_0x14274e(0xa4a)]['_spriteset'];if(!_0xb628c2)return;VisuMZ['ConvertParams'](_0x18c09b,_0x18c09b);const _0x3e7618=_0x18c09b['X']||0x0,_0x41e398=_0x18c09b['Y']||0x0,_0x21c7fd=_0x18c09b[_0x14274e(0xb11)]||0x0,_0xa58d88=_0x18c09b[_0x14274e(0x152)]||0x0,_0x2ab0d2=_0x18c09b[_0x14274e(0x20b)]||0x1;_0xb628c2[_0x14274e(0x7ff)](_0x3e7618,_0x41e398,_0x21c7fd,_0xa58d88,_0x2ab0d2);}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Impact_ShockwaveEachTargets',_0x5b6cfd=>{const _0x3b5bf8=_0x8db8d6;if(!SceneManager[_0x3b5bf8(0x38c)]())return;if(!Imported[_0x3b5bf8(0x332)])return;const _0xc14e48=SceneManager['_scene'][_0x3b5bf8(0x485)];if(!_0xc14e48)return;VisuMZ[_0x3b5bf8(0xb24)](_0x5b6cfd,_0x5b6cfd);const _0x5d83d5=VisuMZ[_0x3b5bf8(0x566)](_0x5b6cfd[_0x3b5bf8(0x8f9)]),_0x83304d=_0x5b6cfd[_0x3b5bf8(0x8ed)],_0x49f9e3=_0x5b6cfd[_0x3b5bf8(0x37c)]||0x0,_0x36ec99=_0x5b6cfd[_0x3b5bf8(0x9e9)]||0x0,_0x462b7d=_0x5b6cfd[_0x3b5bf8(0xb11)]||0x0,_0x2e9b25=_0x5b6cfd[_0x3b5bf8(0x152)]||0x0,_0x1f8147=_0x5b6cfd['Duration']||0x1;for(const _0x55f8eb of _0x5d83d5){if('FuleG'==='FuleG'){if(!_0x55f8eb)continue;if(!_0x55f8eb[_0x3b5bf8(0x538)]())continue;const _0x28d6ee=_0x55f8eb[_0x3b5bf8(0x538)]();let _0x627e44=_0x28d6ee[_0x3b5bf8(0x94f)],_0x1a0813=_0x28d6ee[_0x3b5bf8(0x214)];_0x627e44+=(Graphics[_0x3b5bf8(0x5cb)]-Graphics['boxWidth'])/0x2,_0x1a0813+=(Graphics[_0x3b5bf8(0x7f5)]-Graphics[_0x3b5bf8(0x68b)])/0x2;if(_0x83304d[_0x3b5bf8(0x3ed)](/front/i))_0x627e44+=(_0x55f8eb[_0x3b5bf8(0x26d)]()?0x1:-0x1)*_0x28d6ee[_0x3b5bf8(0x5d3)]()/0x2;else _0x83304d[_0x3b5bf8(0x3ed)](/back/i)&&(_0x627e44+=(_0x55f8eb['isEnemy']()?-0x1:0x1)*_0x28d6ee[_0x3b5bf8(0x5d3)]()/0x2);if(_0x83304d[_0x3b5bf8(0x3ed)](/head/i))_0x1a0813-=_0x28d6ee[_0x3b5bf8(0x3be)]();else _0x83304d['match'](/center/i)&&(_0x1a0813-=_0x28d6ee[_0x3b5bf8(0x3be)]()/0x2);_0x627e44+=_0x49f9e3,_0x1a0813+=_0x36ec99,_0xc14e48[_0x3b5bf8(0x7ff)](_0x627e44,_0x1a0813,_0x462b7d,_0x2e9b25,_0x1f8147);}else{let _0x3009c7=_0x4b76c2[_0x3b5bf8(0x602)][_0x3b5bf8(0x637)][_0x3b5bf8(0x5fd)](this),_0x46f34e=_0xb5d0d7['BattleCore']['Settings']['Damage']['PopupOffsetX']||0x0;return _0x4c1e3a[_0x3b5bf8(0x423)](_0x3009c7+_0x46f34e);}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x149),_0x7150e0=>{const _0x5e9aa4=_0x8db8d6;if(!SceneManager[_0x5e9aa4(0x38c)]())return;if(!Imported[_0x5e9aa4(0x332)])return;const _0x1d777a=SceneManager['_scene'][_0x5e9aa4(0x485)];if(!_0x1d777a)return;VisuMZ['ConvertParams'](_0x7150e0,_0x7150e0);const _0x35a88c=VisuMZ[_0x5e9aa4(0x566)](_0x7150e0[_0x5e9aa4(0x8f9)]),_0x1dcc52=_0x7150e0['TargetLocation'],_0x20cd7c=_0x7150e0[_0x5e9aa4(0x37c)]||0x0,_0x4c8e59=_0x7150e0[_0x5e9aa4(0x9e9)]||0x0,_0x4cc16b=_0x7150e0[_0x5e9aa4(0xb11)]||0x0,_0x53ab6d=_0x7150e0[_0x5e9aa4(0x152)]||0x0,_0x50a7fc=_0x7150e0[_0x5e9aa4(0x20b)]||0x1,_0x8c2cd0=Math[_0x5e9aa4(0x8e0)](..._0x35a88c[_0x5e9aa4(0x9f8)](_0x3be0e0=>_0x3be0e0[_0x5e9aa4(0x538)]()[_0x5e9aa4(0x94f)]-_0x3be0e0[_0x5e9aa4(0x538)]()['mainSpriteWidth']()/0x2)),_0x2206aa=Math[_0x5e9aa4(0x623)](..._0x35a88c['map'](_0x5558bb=>_0x5558bb[_0x5e9aa4(0x538)]()[_0x5e9aa4(0x94f)]+_0x5558bb[_0x5e9aa4(0x538)]()['mainSpriteWidth']()/0x2)),_0x954e22=Math['min'](..._0x35a88c[_0x5e9aa4(0x9f8)](_0x8f74f7=>_0x8f74f7[_0x5e9aa4(0x538)]()[_0x5e9aa4(0x214)]-_0x8f74f7[_0x5e9aa4(0x538)]()[_0x5e9aa4(0x3be)]())),_0x1d5cb0=Math[_0x5e9aa4(0x623)](..._0x35a88c[_0x5e9aa4(0x9f8)](_0x1d993e=>_0x1d993e[_0x5e9aa4(0x538)]()[_0x5e9aa4(0x214)])),_0x3f9a86=_0x35a88c[_0x5e9aa4(0x691)](_0x438eb5=>_0x438eb5[_0x5e9aa4(0x367)]())['length'],_0x2f3b12=_0x35a88c['filter'](_0x15635e=>_0x15635e[_0x5e9aa4(0x26d)]())['length'];let _0x192226=0x0,_0x4c50d3=0x0;if(_0x1dcc52[_0x5e9aa4(0x3ed)](/front/i))_0x192226=_0x3f9a86>=_0x2f3b12?_0x8c2cd0:_0x2206aa;else{if(_0x1dcc52[_0x5e9aa4(0x3ed)](/middle/i))_0x5e9aa4(0x1c3)===_0x5e9aa4(0x644)?this[_0x5e9aa4(0x49f)]=_0x5e9aa4(0x816):(_0x192226=(_0x8c2cd0+_0x2206aa)/0x2,melee=-0x1);else _0x1dcc52['match'](/back/i)&&(_0x192226=_0x3f9a86>=_0x2f3b12?_0x2206aa:_0x8c2cd0);}if(_0x1dcc52[_0x5e9aa4(0x3ed)](/head/i)){if('WPABm'===_0x5e9aa4(0x400))_0x4c50d3=_0x954e22;else{if(!_0x301c4e[_0x5e9aa4(0x38c)]())return;if(!this['battler']())return;if(_0xf474ab['length']<=0x0)return;_0x5d7588=_0x1c05e1||{},_0x5507a6['textColor']=_0x34015f[_0x5e9aa4(0x858)]||'#ffffff',_0x276f09[_0x5e9aa4(0x7b6)]=_0x2c32d3['flashColor']||[0x0,0x0,0x0,0x0],_0x5cc482['flashDuration']=_0x151dae[_0x5e9aa4(0x1c8)]||0x0,this[_0x5e9aa4(0x538)]()['setupIconTextPopup'](_0x50082c,_0x547ef8,_0x4dcd75);}}else{if(_0x1dcc52[_0x5e9aa4(0x3ed)](/center/i))_0x4c50d3=(_0x954e22+_0x1d5cb0)/0x2;else _0x1dcc52[_0x5e9aa4(0x3ed)](/base/i)&&(_0x4c50d3=_0x1d5cb0);}_0x192226+=(Graphics['width']-Graphics[_0x5e9aa4(0x3ef)])/0x2,_0x4c50d3+=(Graphics[_0x5e9aa4(0x7f5)]-Graphics[_0x5e9aa4(0x68b)])/0x2,_0x192226+=_0x20cd7c,_0x4c50d3+=_0x4c8e59,_0x1d777a[_0x5e9aa4(0x7ff)](_0x192226,_0x4c50d3,_0x4cc16b,_0x53ab6d,_0x50a7fc);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x530),_0x22cea7=>{const _0x528c2b=_0x8db8d6;if(!Imported[_0x528c2b(0x332)])return;const _0x2f1e89=SceneManager[_0x528c2b(0xa4a)][_0x528c2b(0x485)];if(!_0x2f1e89)return;VisuMZ[_0x528c2b(0xb24)](_0x22cea7,_0x22cea7);const _0x5d0cf3=_0x22cea7['X']||0x0,_0x4e6e8d=_0x22cea7['Y']||0x0,_0x108b9a=_0x22cea7['Strength']||0x0,_0x289d92=_0x22cea7[_0x528c2b(0x9ef)]||0x0,_0xffaa36=_0x22cea7['Duration']||0x1,_0x1d0bd7=_0x22cea7[_0x528c2b(0x5da)]||_0x528c2b(0xa13);_0x2f1e89[_0x528c2b(0x8d1)](_0x108b9a,_0x5d0cf3,_0x4e6e8d,_0x289d92,_0xffaa36,_0x1d0bd7);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x807),_0x4b309b=>{const _0x5a9a70=_0x8db8d6;if(!Imported[_0x5a9a70(0x332)])return;const _0x2487c1=SceneManager[_0x5a9a70(0xa4a)][_0x5a9a70(0x485)];if(!_0x2487c1)return;VisuMZ[_0x5a9a70(0xb24)](_0x4b309b,_0x4b309b);const _0x56b901=VisuMZ['CreateActionSequenceTargets'](_0x4b309b[_0x5a9a70(0x8f9)]),_0x3c6f3c=_0x4b309b['TargetLocation'],_0x447c73=_0x4b309b[_0x5a9a70(0x37c)]||0x0,_0x4b9d8b=_0x4b309b[_0x5a9a70(0x9e9)]||0x0,_0x46b2cb=_0x4b309b[_0x5a9a70(0x62f)]||0x0,_0x27621b=_0x4b309b[_0x5a9a70(0x9ef)]||0x0,_0x5db506=_0x4b309b[_0x5a9a70(0x20b)]||0x1,_0x37d04b=_0x4b309b[_0x5a9a70(0x5da)]||_0x5a9a70(0xa13),_0xf35099=Math[_0x5a9a70(0x8e0)](..._0x56b901[_0x5a9a70(0x9f8)](_0x36e083=>_0x36e083[_0x5a9a70(0x538)]()['_baseX']-_0x36e083[_0x5a9a70(0x538)]()['mainSpriteWidth']()/0x2)),_0x3bc251=Math[_0x5a9a70(0x623)](..._0x56b901[_0x5a9a70(0x9f8)](_0x2d00bb=>_0x2d00bb[_0x5a9a70(0x538)]()[_0x5a9a70(0x94f)]+_0x2d00bb[_0x5a9a70(0x538)]()['mainSpriteWidth']()/0x2)),_0x24eaaa=Math[_0x5a9a70(0x8e0)](..._0x56b901['map'](_0x38ff09=>_0x38ff09[_0x5a9a70(0x538)]()[_0x5a9a70(0x214)]-_0x38ff09['battler']()[_0x5a9a70(0x3be)]())),_0x5dcab9=Math[_0x5a9a70(0x623)](..._0x56b901[_0x5a9a70(0x9f8)](_0x2ed7c3=>_0x2ed7c3[_0x5a9a70(0x538)]()[_0x5a9a70(0x214)])),_0x23a7ed=_0x56b901[_0x5a9a70(0x691)](_0x352fe0=>_0x352fe0['isActor']())[_0x5a9a70(0x5e0)],_0x514290=_0x56b901[_0x5a9a70(0x691)](_0xf31806=>_0xf31806[_0x5a9a70(0x26d)]())[_0x5a9a70(0x5e0)];let _0x5983c2=0x0,_0x284932=0x0;if(_0x3c6f3c['match'](/front/i))_0x5983c2=_0x23a7ed>=_0x514290?_0xf35099:_0x3bc251;else{if(_0x3c6f3c[_0x5a9a70(0x3ed)](/middle/i))'jjFnq'!==_0x5a9a70(0x99f)?(_0x29f043['_battleCoreBattleStartEvent']=_0x4bdb47,_0x47d103[_0x5a9a70(0x4c9)]=!![],this['stop']()):(_0x5983c2=(_0xf35099+_0x3bc251)/0x2,melee=-0x1);else{if(_0x3c6f3c[_0x5a9a70(0x3ed)](/back/i)){if(_0x5a9a70(0x2d8)!==_0x5a9a70(0x659))_0x5983c2=_0x23a7ed>=_0x514290?_0x3bc251:_0xf35099;else{const _0x318a14=_0x33a842[_0x5a9a70(0xad2)](_0x4f4b46[_0x5a9a70(0x7fd)](),_0x4dbe85[_0x5a9a70(0x48b)](_0x4e5ca0));this[_0x5a9a70(0x43e)](_0x5a9a70(0xa83)),this[_0x5a9a70(0x43e)](_0x5a9a70(0x16d)),this[_0x5a9a70(0x43e)](_0x5a9a70(0x1d0),_0x318a14),this['push']('wait');}}}}if(_0x3c6f3c[_0x5a9a70(0x3ed)](/head/i)){if(_0x5a9a70(0xad1)===_0x5a9a70(0x456)){if(_0x39cadf[_0x5a9a70(0x28e)]===0x0)this[_0x5a9a70(0xa1d)](_0x5a9a70(0x5b8));else{if(_0xdff912['type']===0x1)this[_0x5a9a70(0xa1d)]('swing');else _0x576531['type']===0x2&&this['requestMotion']('missile');}this[_0x5a9a70(0x342)](_0x6f5d15[_0x5a9a70(0x8e8)]);}else _0x284932=_0x24eaaa;}else{if(_0x3c6f3c['match'](/center/i)){if(_0x5a9a70(0x99a)==='ceIsU'){if(!_0xb5523[_0x5a9a70(0x6b5)]())return;const _0x3a791b=this[_0x5a9a70(0x538)]();if(!_0x3a791b)return;if(_0xab0109===_0x3a791b[_0x5a9a70(0x94f)])return;let _0x1f65c4=![];if(this[_0x5a9a70(0x367)]()){if(_0x603f9d>_0x3a791b[_0x5a9a70(0x94f)])_0x1f65c4=!![];if(_0x57d769<_0x3a791b['_baseX'])_0x1f65c4=![];}else{if(this[_0x5a9a70(0x26d)]()){if(_0x4d65d4>_0x3a791b[_0x5a9a70(0x94f)])_0x1f65c4=![];if(_0xd2f444<_0x3a791b[_0x5a9a70(0x94f)])_0x1f65c4=!![];}};this[_0x5a9a70(0x63d)](_0x11a491?!_0x1f65c4:_0x1f65c4),_0x3a791b[_0x5a9a70(0xaea)]();}else _0x284932=(_0x24eaaa+_0x5dcab9)/0x2;}else{if(_0x3c6f3c['match'](/base/i)){if(_0x5a9a70(0x17b)===_0x5a9a70(0x17b))_0x284932=_0x5dcab9;else{if(!_0x5b3b8d[_0x5a9a70(0x6b5)]())return;const _0x5ead05=this[_0x5a9a70(0x538)]();if(!_0x5ead05)return;_0x533539=_0x411677||0x0;if(_0x51d62e>0x0){if(_0x5ead05[_0x5a9a70(0x94f)]>_0x5553e3)_0xf27b35+=_0x5ead05[_0x5a9a70(0x5cb)]/0x2+_0x316005;if(_0x5ead05['_baseX']<_0x5b3c35)_0x1b0a41-=_0x5ead05[_0x5a9a70(0x5cb)]/0x2+_0x25ca41;}if(_0x310555)this['setBattlerFacePoint'](_0x2123bb,_0x4bdc03,![]);_0x108236-=_0x5ead05[_0x5a9a70(0x67c)],_0x123aad-=_0x5ead05['_homeY'],_0x5ead05[_0x5a9a70(0x520)](_0x111ea0,_0xe3da7d,_0x2f446e);if(_0x21381a[_0x5a9a70(0x730)])_0x5ead05['setMoveEasingType'](_0x528372||'Linear');}}}}_0x5983c2+=(Graphics[_0x5a9a70(0x5cb)]-Graphics[_0x5a9a70(0x3ef)])/0x2,_0x284932+=(Graphics[_0x5a9a70(0x7f5)]-Graphics['boxHeight'])/0x2,_0x5983c2+=_0x447c73,_0x284932+=_0x4b9d8b,_0x2487c1['setupZoomBlurImpactFilter'](_0x46b2cb,_0x5983c2,_0x284932,_0x27621b,_0x5db506,_0x37d04b);}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_ActionEffect',_0x16a88c=>{const _0x1943fd=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x16a88c,_0x16a88c);const _0x43fe1a=$gameTemp['getLastPluginCommandInterpreter'](),_0xde5ac1=BattleManager['_action'],_0x3e7e46=BattleManager[_0x1943fd(0x7be)],_0x511e21=BattleManager['_logWindow'];if(!_0x43fe1a||!_0xde5ac1||!_0x3e7e46)return;if(!_0xde5ac1['item']())return;const _0x4c7713=VisuMZ[_0x1943fd(0x566)](_0x16a88c[_0x1943fd(0x8f9)]);for(const _0x30ef28 of _0x4c7713){if(!_0x30ef28)continue;_0x511e21['push'](_0x1943fd(0x1eb),_0x3e7e46,_0x30ef28);}_0x43fe1a[_0x1943fd(0x4f2)](_0x1943fd(0x316));}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x7e2),_0x4a405d=>{const _0x9f0144=_0x8db8d6;if(!SceneManager[_0x9f0144(0x38c)]())return;VisuMZ[_0x9f0144(0xb24)](_0x4a405d,_0x4a405d);const _0x5ab8e3=['MAXHP',_0x9f0144(0x3f9),'ATK','DEF',_0x9f0144(0x16f),_0x9f0144(0x345),_0x9f0144(0x18d),_0x9f0144(0x719)],_0x9d7400=_0x4a405d[_0x9f0144(0x4f6)],_0x49e57a=_0x4a405d[_0x9f0144(0x63f)],_0x4f956f=_0x4a405d[_0x9f0144(0x23a)],_0x5a84de=VisuMZ[_0x9f0144(0x566)](_0x4a405d[_0x9f0144(0x8f9)]);for(const _0x1e3987 of _0x5a84de){if(!_0x1e3987)continue;for(const _0xc8466 of _0x9d7400){const _0x878b0f=_0x5ab8e3[_0x9f0144(0x764)](_0xc8466[_0x9f0144(0x3ad)]()['trim']());_0x878b0f>=0x0&&_0x878b0f<=0x7&&_0x1e3987['addBuff'](_0x878b0f,_0x4f956f);}for(const _0x5d8b43 of _0x49e57a){const _0x14e50a=_0x5ab8e3[_0x9f0144(0x764)](_0x5d8b43[_0x9f0144(0x3ad)]()['trim']());if(_0x14e50a>=0x0&&_0x14e50a<=0x7){if(_0x9f0144(0x80b)==='EqRLA')return this[_0x9f0144(0x7a6)]()[_0x9f0144(0x4c6)];else _0x1e3987['addDebuff'](_0x14e50a,_0x4f956f);}}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x284),_0x3fe8fe=>{const _0x278b2a=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x278b2a(0xb24)](_0x3fe8fe,_0x3fe8fe);const _0xa68e77=_0x3fe8fe[_0x278b2a(0x7c5)],_0x5e6676=VisuMZ[_0x278b2a(0x566)](_0x3fe8fe[_0x278b2a(0x8f9)]);for(const _0x29e4cb of _0x5e6676){if(!_0x29e4cb)continue;for(const _0x58600c of _0xa68e77){if(_0x278b2a(0x52b)!==_0x278b2a(0x2ad))_0x29e4cb[_0x278b2a(0xadd)](_0x58600c);else for(const _0x3b6bb5 of this['members']()){if(_0x3b6bb5)_0x3b6bb5[_0x278b2a(0x393)](_0x5bde09);}}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_ArmorPenetration',_0x5dc94c=>{const _0xcd82bc=_0x8db8d6;if(!SceneManager[_0xcd82bc(0x38c)]())return;VisuMZ[_0xcd82bc(0xb24)](_0x5dc94c,_0x5dc94c);const _0x5c061b=BattleManager[_0xcd82bc(0x64d)],_0x287273={'arPenRate':_0x5dc94c['ArPenRate'],'arPenFlat':_0x5dc94c[_0xcd82bc(0x881)],'arRedRate':_0x5dc94c[_0xcd82bc(0x3cb)],'arRedFlat':_0x5dc94c[_0xcd82bc(0x908)]};_0x5c061b[_0xcd82bc(0x4eb)]=_0x287273;}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x1b0),_0x2f57a9=>{const _0x52a16b=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x52a16b(0xb24)](_0x2f57a9,_0x2f57a9);const _0x4c1134=VisuMZ[_0x52a16b(0x566)](_0x2f57a9[_0x52a16b(0x8f9)]),_0x54908d=_0x2f57a9[_0x52a16b(0xa3d)]||0x1;for(const _0x189754 of _0x4c1134){if(!_0x189754)continue;if(!_0x189754[_0x52a16b(0x26d)]())continue;_0x189754['revealNewWeaknesses'](_0x54908d);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x207),_0x83b457=>{const _0x13b9c5=_0x8db8d6;if(!SceneManager[_0x13b9c5(0x38c)]())return;if(!Imported[_0x13b9c5(0x6fc)])return;if(!BattleManager[_0x13b9c5(0x118)]())return;VisuMZ[_0x13b9c5(0xb24)](_0x83b457,_0x83b457);const _0x59d435=VisuMZ['CreateActionSequenceTargets'](_0x83b457[_0x13b9c5(0x8f9)]),_0x3943ba=_0x83b457['ChargeRate'],_0x463899=_0x83b457['ChargeRate'],_0x4627a2=_0x83b457[_0x13b9c5(0x9c8)];for(const _0x514ad6 of _0x59d435){if(!_0x514ad6)continue;if(_0x514ad6[_0x13b9c5(0x428)]())'jqAPE'==='jqAPE'?_0x514ad6[_0x13b9c5(0x6e5)](_0x3943ba):(this[_0x13b9c5(0x307)][_0x13b9c5(0x43e)](_0x13b9c5(0x66d)),this[_0x13b9c5(0x307)]['push'](_0x13b9c5(0x750)));else{if(_0x514ad6[_0x13b9c5(0x14f)]()){_0x514ad6[_0x13b9c5(0x6df)](_0x463899);if(_0x4627a2)_0x514ad6['atbInterrupt']();}}}}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x85a),_0x3f0ef8=>{const _0x136249=_0x8db8d6;if(!SceneManager[_0x136249(0x38c)]())return;if(!Imported[_0x136249(0x942)])return;VisuMZ[_0x136249(0xb24)](_0x3f0ef8,_0x3f0ef8);const _0x3eecb1=VisuMZ[_0x136249(0x566)](_0x3f0ef8['Targets']),_0x4d220e=_0x3f0ef8[_0x136249(0x183)];for(const _0x5b63c5 of _0x3eecb1){if(!_0x5b63c5)continue;_0x5b63c5[_0x136249(0x441)](_0x4d220e);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xaf8),_0x4c6cab=>{const _0x4c5146=_0x8db8d6;if(!SceneManager[_0x4c5146(0x38c)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x4c5146(0x7be)])return;VisuMZ[_0x4c5146(0xb24)](_0x4c6cab,_0x4c6cab);const _0xb5e470=_0x4c6cab[_0x4c5146(0x2fa)];$gameVariables[_0x4c5146(0x4c5)](_0xb5e470,BattleManager[_0x4c5146(0x7be)][_0x4c5146(0x875)]());}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_BreakShieldChange',_0x18cc39=>{const _0x5b27dc=_0x8db8d6;if(!SceneManager[_0x5b27dc(0x38c)]())return;if(!Imported[_0x5b27dc(0x195)])return;VisuMZ[_0x5b27dc(0xb24)](_0x18cc39,_0x18cc39);const _0xf591d5=VisuMZ[_0x5b27dc(0x566)](_0x18cc39[_0x5b27dc(0x8f9)]),_0x5e5279=_0x18cc39[_0x5b27dc(0x242)];for(const _0x3d1c44 of _0xf591d5){if(!_0x3d1c44)continue;if(_0x3d1c44['isBreakStunned']())continue;if(!_0x3d1c44[_0x5b27dc(0x9d9)]())continue;_0x3d1c44[_0x5b27dc(0x2fd)](_0x5e5279);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x943),_0x3a6373=>{const _0x13bd10=_0x8db8d6;if(!SceneManager[_0x13bd10(0x38c)]())return;if(!Imported[_0x13bd10(0x195)])return;VisuMZ[_0x13bd10(0xb24)](_0x3a6373,_0x3a6373);const _0xf75ac2=VisuMZ[_0x13bd10(0x566)](_0x3a6373['Targets']);for(const _0x287d98 of _0xf75ac2){if(!_0x287d98)continue;if(_0x287d98[_0x13bd10(0x97b)]())continue;if(!_0x287d98[_0x13bd10(0x9d9)]())continue;_0x287d98[_0x13bd10(0xa02)]();}}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x5b2),_0x35b852=>{const _0x5c9848=_0x8db8d6;if(!SceneManager[_0x5c9848(0x38c)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x5c9848(0x396)]())return;VisuMZ[_0x5c9848(0xb24)](_0x35b852,_0x35b852);const _0xff998=VisuMZ['CreateActionSequenceTargets'](_0x35b852['Targets']),_0x302f36=_0x35b852[_0x5c9848(0x8ec)];for(const _0x1793a2 of _0xff998){if(_0x5c9848(0x9b6)!==_0x5c9848(0x315)){if(!_0x1793a2)continue;_0x1793a2[_0x5c9848(0x621)](_0x302f36);}else{if(!this[_0x5c9848(0x7b2)]())return![];return _0x3ed1ad[_0x5c9848(0x602)][_0x5c9848(0x19a)][_0x5c9848(0x5fd)](this);}}}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x735),_0x49f478=>{const _0x68441d=_0x8db8d6;if(!SceneManager[_0x68441d(0x38c)]())return;VisuMZ['ConvertParams'](_0x49f478,_0x49f478);const _0x21023a=$gameTemp[_0x68441d(0x754)](),_0x1e39c6=BattleManager[_0x68441d(0x64d)],_0xd1617b=BattleManager[_0x68441d(0x7be)];if(!_0x21023a||!_0x1e39c6||!_0xd1617b)return;if(!_0x1e39c6[_0x68441d(0xaf1)]())return;const _0x42ca06=VisuMZ[_0x68441d(0x566)](_0x49f478[_0x68441d(0x8f9)]);for(const _0x11bad6 of _0x42ca06){if(_0x68441d(0x60b)!==_0x68441d(0x377)){if(!_0x11bad6)continue;_0x49f478[_0x68441d(0x8f1)]&&(_0x11bad6[_0x68441d(0x35d)](),_0x11bad6[_0x68441d(0xadd)](_0x11bad6[_0x68441d(0x700)]())),_0x11bad6[_0x68441d(0x580)]()&&_0x11bad6[_0x68441d(0x79f)]();}else _0x9fce61[_0x68441d(0xa4a)][_0x68441d(0x98e)][_0x68441d(0x150)](_0x44d7ce,this[_0x68441d(0x980)]);}_0x21023a['setWaitMode'](_0x68441d(0x827));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_CtbOrder',_0x97366=>{const _0x5e887c=_0x8db8d6;if(!SceneManager[_0x5e887c(0x38c)]())return;if(!Imported[_0x5e887c(0x9bb)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x5e887c(0xb24)](_0x97366,_0x97366);const _0x55b66a=VisuMZ['CreateActionSequenceTargets'](_0x97366[_0x5e887c(0x8f9)]),_0x498b93=_0x97366[_0x5e887c(0x4f3)];for(const _0x407582 of _0x55b66a){if(!_0x407582)continue;_0x407582['changeTurnOrderByCTB'](_0x498b93);}}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Mechanics_CtbSpeed',_0x42d449=>{const _0x23bf2a=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x23bf2a(0xacc)]())return;VisuMZ[_0x23bf2a(0xb24)](_0x42d449,_0x42d449);const _0x4b43f0=VisuMZ['CreateActionSequenceTargets'](_0x42d449[_0x23bf2a(0x8f9)]),_0x54769c=_0x42d449['ChargeRate'],_0xf53744=_0x42d449[_0x23bf2a(0x2d3)];for(const _0x5950bf of _0x4b43f0){if(!_0x5950bf)continue;if(_0x5950bf[_0x23bf2a(0x5ae)]===_0x23bf2a(0x6fe))_0x5950bf[_0x23bf2a(0xafa)](_0x54769c);else{if(_0x5950bf[_0x23bf2a(0x5ae)]==='casting'){if(_0x23bf2a(0x93f)!==_0x23bf2a(0x8ac))_0x5950bf[_0x23bf2a(0x4cb)](_0xf53744);else return _0x54a632[_0x23bf2a(0x4dd)][_0x23bf2a(0x5fd)](this,_0xecfb1c);}}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x368),_0x43c69d=>{const _0x52b3b4=_0x8db8d6;if(!SceneManager[_0x52b3b4(0x38c)]())return;VisuMZ[_0x52b3b4(0xb24)](_0x43c69d,_0x43c69d);const _0x5cfdb7=BattleManager['_action'];if(!_0x5cfdb7)return;let _0x4301b6=_0x43c69d['Formula'];_0x5cfdb7['setCustomDamageFormula'](_0x4301b6);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_DamagePopup',_0x42e762=>{const _0x11f40d=_0x8db8d6;if(!SceneManager[_0x11f40d(0x38c)]())return;VisuMZ[_0x11f40d(0xb24)](_0x42e762,_0x42e762);const _0x2dfbfd=VisuMZ['CreateActionSequenceTargets'](_0x42e762[_0x11f40d(0x8f9)]);for(const _0x334f88 of _0x2dfbfd){if(_0x11f40d(0x7dc)!==_0x11f40d(0x7dc))_0x1ad607['scope']=_0x45f7da(_0x395a8e['$1'])[_0x11f40d(0x3ad)]()[_0x11f40d(0xa51)]();else{if(!_0x334f88)continue;if(_0x334f88[_0x11f40d(0x570)]())_0x334f88['startDamagePopup']();}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x805),_0x42444f=>{const _0x30ed8e=_0x8db8d6;if(!SceneManager[_0x30ed8e(0x38c)]())return;VisuMZ[_0x30ed8e(0xb24)](_0x42444f,_0x42444f);const _0x11c17c=$gameTemp[_0x30ed8e(0x754)](),_0x195f56=BattleManager[_0x30ed8e(0x7be)],_0x56475d=_0x42444f[_0x30ed8e(0xab6)];if(!_0x11c17c)return;if(!_0x195f56)return;_0x195f56&&_0x195f56[_0x30ed8e(0x20a)]()&&_0x56475d[_0x30ed8e(0x3ad)]()[_0x30ed8e(0xa51)]()!==_0x30ed8e(0x612)&&_0x11c17c['command119']([_0x56475d]);}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Mechanics_EtbAction',_0x5b8fa8=>{const _0x1d613f=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager['isETB']())return;VisuMZ[_0x1d613f(0xb24)](_0x5b8fa8,_0x5b8fa8);const _0xda666e=_0x5b8fa8[_0x1d613f(0x1a8)];if(BattleManager[_0x1d613f(0x7be)]){if(_0x1d613f(0x41b)!==_0x1d613f(0x41b)){if(_0x2410e5[_0x1d613f(0x94f)]>_0x20cb14)_0x24c737+=_0x172041[_0x1d613f(0x5cb)]/0x2+_0xbd0597;if(_0x48d417[_0x1d613f(0x94f)]<_0x5d80ec)_0x17b477-=_0x42113e[_0x1d613f(0x5cb)]/0x2+_0x217af9;}else BattleManager[_0x1d613f(0x7be)][_0x1d613f(0x1bd)]()['gainCurrentActionsETB'](_0xda666e);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_FtbAction',_0x240187=>{const _0x90100d=_0x8db8d6;if(!SceneManager[_0x90100d(0x38c)]())return;if(!Imported[_0x90100d(0x705)])return;if(!BattleManager[_0x90100d(0x9ba)]())return;VisuMZ[_0x90100d(0xb24)](_0x240187,_0x240187);const _0x2a4f79=_0x240187[_0x90100d(0x1a8)];if(BattleManager['_subject']){if(_0x90100d(0x1e3)===_0x90100d(0x2fe)){if(this['isDead']())return;this[_0x90100d(0xb09)]=!![];}else BattleManager['_subject']['friendsUnit']()[_0x90100d(0x32f)](_0x2a4f79);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x772),_0x456aa6=>{const _0x2d7f28=_0x8db8d6;if(!SceneManager[_0x2d7f28(0x38c)]())return;VisuMZ['ConvertParams'](_0x456aa6,_0x456aa6);const _0x4e8d12=VisuMZ[_0x2d7f28(0x566)](_0x456aa6[_0x2d7f28(0x8f9)]),_0x83009c=_0x456aa6[_0x2d7f28(0x667)],_0x5bd619=_0x456aa6['HP_Flat'],_0x188566=_0x456aa6[_0x2d7f28(0x8f3)],_0x490b8a=_0x456aa6[_0x2d7f28(0x111)],_0x4f7d67=_0x456aa6[_0x2d7f28(0x75c)],_0x367c76=_0x456aa6[_0x2d7f28(0x785)],_0x215bd9=_0x456aa6['ShowPopup'];for(const _0x4bbabe of _0x4e8d12){if(_0x2d7f28(0x7a4)!==_0x2d7f28(0x71b)){if(!_0x4bbabe)continue;const _0x27e7a0=_0x4bbabe[_0x2d7f28(0xb02)](),_0x4ac826=Math[_0x2d7f28(0x423)](_0x83009c*_0x4bbabe['mhp']+_0x5bd619),_0xc2525f=Math['round'](_0x188566*_0x4bbabe[_0x2d7f28(0x9b9)]+_0x490b8a),_0x5181e2=Math['round'](_0x4f7d67*_0x4bbabe[_0x2d7f28(0x52a)]()+_0x367c76);if(_0x4ac826!==0x0)_0x4bbabe[_0x2d7f28(0x97a)](_0x4ac826);if(_0xc2525f!==0x0)_0x4bbabe['gainMp'](_0xc2525f);if(_0x5181e2!==0x0)_0x4bbabe['gainTp'](_0x5181e2);if(_0x215bd9)_0x4bbabe[_0x2d7f28(0x35c)]();_0x27e7a0&&_0x4bbabe[_0x2d7f28(0x20a)]()&&(_0x2d7f28(0x172)!=='bXdhY'?(_0x23c448=_0x18d49c+_0x405adf[_0x2d7f28(0x3cf)]/0x2-0x4,_0xe0744=_0x599b0f-_0x5b3881[_0x2d7f28(0x709)]/0x2):_0x4bbabe[_0x2d7f28(0x79f)]());}else{if(!_0x5850ee[_0x2d7f28(0x38c)]())return;if(!this[_0x2d7f28(0x159)])this[_0x2d7f28(0xb2f)]();this['createSeparateDamagePopups']();const _0x1ef7cf=this['battler']();if(_0x1ef7cf)_0x1ef7cf['setupDamagePopup']();}}}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Mechanics_Immortal',_0x144b29=>{const _0x5dff49=_0x8db8d6;if(!SceneManager[_0x5dff49(0x38c)]())return;VisuMZ[_0x5dff49(0xb24)](_0x144b29,_0x144b29);const _0x17898a=VisuMZ['CreateActionSequenceTargets'](_0x144b29['Targets']);for(const _0x245d7c of _0x17898a){if(_0x5dff49(0x36a)!=='IkklN'){if(!_0x245d7c)continue;_0x245d7c['setImmortal'](_0x144b29[_0x5dff49(0x4cc)]);}else this[_0x5dff49(0xa32)]();}}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xa18),_0xd5564a=>{const _0x30b1a2=_0x8db8d6;if(!SceneManager[_0x30b1a2(0x38c)]())return;VisuMZ['ConvertParams'](_0xd5564a,_0xd5564a);const _0x4c4361=BattleManager[_0x30b1a2(0x64d)],_0x37605b={'criticalHitRate':_0xd5564a[_0x30b1a2(0x52d)],'criticalHitFlat':_0xd5564a[_0x30b1a2(0x265)],'criticalDmgRate':_0xd5564a[_0x30b1a2(0x451)],'criticalDmgFlat':_0xd5564a['CriticalDmgFlat'],'damageRate':_0xd5564a[_0x30b1a2(0x574)],'damageFlat':_0xd5564a[_0x30b1a2(0x2e6)],'hitRate':_0xd5564a[_0x30b1a2(0x603)],'hitFlat':_0xd5564a[_0x30b1a2(0x1b7)]};_0x4c4361['_multipliers']=_0x37605b;}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x979),_0x2240e4=>{const _0x553f82=_0x8db8d6;if(!SceneManager[_0x553f82(0x38c)]())return;if(!Imported[_0x553f82(0xadf)])return;if(!BattleManager[_0x553f82(0x7c9)]())return;VisuMZ[_0x553f82(0xb24)](_0x2240e4,_0x2240e4);const _0x1c75f3=VisuMZ[_0x553f82(0x566)](_0x2240e4[_0x553f82(0x8f9)]);for(const _0x193a48 of _0x1c75f3){if(!_0x193a48)continue;let _0x2a0fc6=_0x2240e4[_0x553f82(0x8a3)],_0x44f29a=_0x2240e4[_0x553f82(0x360)],_0x509224=_0x2240e4[_0x553f82(0x7bd)];BattleManager['_actionBattlers'][_0x553f82(0xa5c)](_0x193a48)?_0x2a0fc6+=_0x509224:_0x44f29a+=_0x509224,BattleManager[_0x553f82(0x773)](_0x193a48,-_0x2a0fc6,![]),BattleManager['turnOrderChangeOTB'](_0x193a48,-_0x44f29a,!![]);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x69e),_0x54209e=>{const _0x4665bb=_0x8db8d6;if(!SceneManager[_0x4665bb(0x38c)]())return;if(!Imported[_0x4665bb(0x431)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x4665bb(0xb24)](_0x54209e,_0x54209e);const _0x3e1be4=BattleManager['_subject'][_0x4665bb(0x1bd)](),_0x1b041f=_0x54209e[_0x4665bb(0x924)],_0x28e747=_0x54209e[_0x4665bb(0x596)]||_0x4665bb(0xb1d),_0x17a8fd=_0x54209e[_0x4665bb(0xa04)]||_0x4665bb(0xb1d),_0xfcf305=_0x54209e[_0x4665bb(0x7c3)]||0x0,_0x1f500f=_0x54209e[_0x4665bb(0x577)]||0x0,_0x31f345=_0x54209e[_0x4665bb(0x44f)]||'';if(_0x3e1be4[_0x4665bb(0x8a1)]()||_0x1b041f){if(_0x1b041f){if('rdGlx'!=='JIUiz')_0x3e1be4[_0x4665bb(0x511)]=_0x3e1be4['_ptbActionCost']||{},_0x3e1be4[_0x4665bb(0x511)][_0x4665bb(0x17e)]=0x0;else{if(!_0x185503[_0x4665bb(0x6b5)]())return;const _0x5198fd=this[_0x4665bb(0x538)](),_0xff3b79=_0x2edb81[_0x4665bb(0x538)]();if(!_0x5198fd||!_0xff3b79)return;const _0x2675ee=_0xff3b79[_0x4665bb(0x94f)],_0x3fe193=_0xff3b79['_baseY'];this[_0x4665bb(0x553)](_0x2675ee,_0x3fe193,0x0,![],_0x4665bb(0xa13),-0x1),_0x5198fd[_0x4665bb(0x245)]();const _0x2fe2b3=_0x52fbe0['BattleCore'][_0x4665bb(0x466)][_0x4665bb(0x965)];let _0x10650a=(_0xff3b79[_0x4665bb(0x5cb)]+_0x5198fd[_0x4665bb(0x5cb)])/0x2;_0x10650a*=this[_0x4665bb(0x367)]()?0x1:-0x1;let _0x457f46=_0x2fe2b3['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x1e2c0c[_0x4665bb(0x53e)](_0x10650a,_0x457f46,0x0,![],'Linear'),_0xff3b79['updatePosition']();}}_0x3e1be4[_0x4665bb(0x4ae)](_0x28e747,_0x17a8fd,_0xfcf305,_0x1f500f,_0x31f345);}}),PluginManager['registerCommand'](pluginData['name'],_0x8db8d6(0x98c),_0x1e36f5=>{const _0x38a648=_0x8db8d6;if(!SceneManager[_0x38a648(0x38c)]())return;if(!Imported[_0x38a648(0x431)])return;if(!BattleManager[_0x38a648(0x3a0)]())return;VisuMZ['ConvertParams'](_0x1e36f5,_0x1e36f5);const _0x1baa69=BattleManager[_0x38a648(0x7be)]['friendsUnit']();let _0x35365e=Math[_0x38a648(0x623)](_0x1e36f5['ConvertCount'],0x0),_0x47a782=_0x1baa69['getFullActionsPTB'](),_0x425de1=_0x1baa69[_0x38a648(0x757)]();while(_0x35365e--){if(_0x47a782<=0x0&&_0x425de1<=0x0)break;else _0x47a782>0x0?(_0x47a782--,_0x425de1++):_0x425de1--;}_0x1baa69['setFullActionsPTB'](_0x47a782),_0x1baa69['setHalfActionsPTB'](_0x425de1);}),PluginManager['registerCommand'](pluginData['name'],_0x8db8d6(0x72a),_0xbdd0b6=>{const _0x180ad4=_0x8db8d6;if(!SceneManager[_0x180ad4(0x38c)]())return;if(!Imported[_0x180ad4(0x431)])return;if(!BattleManager[_0x180ad4(0x3a0)]())return;VisuMZ[_0x180ad4(0xb24)](_0xbdd0b6,_0xbdd0b6);const _0x5e2e48=BattleManager[_0x180ad4(0x7be)]['friendsUnit']();let _0x5a4b49=_0xbdd0b6['FullActions'],_0x3fb392=_0xbdd0b6['HalfActions'];_0x5e2e48[_0x180ad4(0xa78)](_0x5a4b49),_0x5e2e48['gainHalfActionsPTB'](_0x3fb392);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x38ecfc=>{const _0x5efc71=_0x8db8d6;if(!SceneManager[_0x5efc71(0x38c)]())return;VisuMZ[_0x5efc71(0xb24)](_0x38ecfc,_0x38ecfc);const _0x227375=[_0x5efc71(0x362),_0x5efc71(0x3f9),_0x5efc71(0x343),_0x5efc71(0x5c9),'MAT','MDF',_0x5efc71(0x18d),_0x5efc71(0x719)],_0x3fab85=_0x38ecfc['Buffs'],_0x294b57=_0x38ecfc[_0x5efc71(0x63f)],_0x2c90d0=VisuMZ[_0x5efc71(0x566)](_0x38ecfc[_0x5efc71(0x8f9)]);for(const _0x36716b of _0x2c90d0){if(!_0x36716b)continue;for(const _0x232bd2 of _0x3fab85){if(_0x5efc71(0x8b5)===_0x5efc71(0x8b5)){const _0x8ce35a=_0x227375[_0x5efc71(0x764)](_0x232bd2[_0x5efc71(0x3ad)]()[_0x5efc71(0xa51)]());_0x8ce35a>=0x0&&_0x8ce35a<=0x7&&_0x36716b[_0x5efc71(0x607)](_0x8ce35a)&&('GtPNC'!==_0x5efc71(0x309)?_0x36716b[_0x5efc71(0x690)](_0x8ce35a):_0x32539a['setActiveWeaponSlot'](_0x3297bc));}else for(const _0x10faf3 of _0x3c5c94){const _0x1191e5=_0x10be2c[0x0][_0x5efc71(0xad2)](_0x10faf3[0x0],_0x29b3c6[0x0]),_0x4cfe04=_0xb88a1c[0x1][_0x5efc71(0xad2)](_0x10faf3[0x1],_0xaab831[0x1])[_0x5efc71(0xa51)](),_0x1f4b39=new _0x9a3150(_0x4d9862[_0x5efc71(0xad2)](_0x4cfe04),'i');_0x5c9dac[_0x1191e5]=_0x1f4b39;}}for(const _0x48dd16 of _0x294b57){const _0x47a6bc=_0x227375[_0x5efc71(0x764)](_0x48dd16[_0x5efc71(0x3ad)]()[_0x5efc71(0xa51)]());_0x47a6bc>=0x0&&_0x47a6bc<=0x7&&_0x36716b[_0x5efc71(0x3b5)](_0x47a6bc)&&_0x36716b[_0x5efc71(0x690)](_0x47a6bc);}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xa68),_0x19dac4=>{const _0x38e713=_0x8db8d6;if(!SceneManager[_0x38e713(0x38c)]())return;VisuMZ['ConvertParams'](_0x19dac4,_0x19dac4);const _0x46d2a1=_0x19dac4[_0x38e713(0x7c5)],_0x372bf9=VisuMZ[_0x38e713(0x566)](_0x19dac4[_0x38e713(0x8f9)]);for(const _0x362cdb of _0x372bf9){if(_0x38e713(0x6e4)!=='LxcUp'){if(!_0x362cdb)continue;for(const _0x13d19c of _0x46d2a1){_0x362cdb['removeState'](_0x13d19c);}}else return _0x3aea73[_0x38e713(0x602)][_0x38e713(0x5aa)][_0x38e713(0x5fd)](this,_0x25478b);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x4d0),_0x269af1=>{const _0x258ef3=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x258ef3(0x970)])return;if(!BattleManager[_0x258ef3(0xaf6)]())return;VisuMZ[_0x258ef3(0xb24)](_0x269af1,_0x269af1);const _0x31f148=_0x269af1[_0x258ef3(0xa56)],_0x3348e8=VisuMZ['CreateActionSequenceTargets'](_0x269af1['Targets']),_0x342dfd=_0x269af1[_0x258ef3(0x44c)],_0x3be6ba=_0x269af1['Exploiter'],_0x1e01be=_0x269af1['ForceExploiter'],_0x2ad416=BattleManager[_0x258ef3(0x64d)];if(_0x31f148)for(const _0x1efd17 of _0x3348e8){if(!_0x1efd17)continue;if(_0x1efd17===user)continue;if(_0x342dfd)_0x1efd17[_0x258ef3(0x422)](![]);_0x1efd17[_0x258ef3(0xb34)](BattleManager[_0x258ef3(0x7be)],_0x2ad416);}if(_0x3be6ba&&BattleManager[_0x258ef3(0x7be)]){if(_0x258ef3(0x1c9)!==_0x258ef3(0x1c9))this[_0x258ef3(0x177)]=!![];else{if(_0x1e01be)BattleManager[_0x258ef3(0x7be)][_0x258ef3(0x422)](![]);const _0x351dbd=_0x3348e8[0x0];BattleManager[_0x258ef3(0x22a)](_0x351dbd,_0x2ad416);}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_StbExtraAction',_0x3ea491=>{const _0x5964c7=_0x8db8d6;if(!SceneManager[_0x5964c7(0x38c)]())return;if(!Imported[_0x5964c7(0x970)])return;if(!BattleManager[_0x5964c7(0xaf6)]())return;VisuMZ['ConvertParams'](_0x3ea491,_0x3ea491);const _0x3d1506=_0x3ea491['Actions'];BattleManager['_subject']&&BattleManager[_0x5964c7(0x7be)][_0x5964c7(0x93e)](_0x3d1506);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x35a19f=>{const _0x1db09d=_0x8db8d6;if(!SceneManager[_0x1db09d(0x38c)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x1db09d(0xaf6)]())return;VisuMZ[_0x1db09d(0xb24)](_0x35a19f,_0x35a19f);let _0x2d987c=_0x35a19f[_0x1db09d(0x440)];if(BattleManager[_0x1db09d(0x7be)]){BattleManager[_0x1db09d(0x7be)][_0x1db09d(0x7a0)]=BattleManager[_0x1db09d(0x7be)][_0x1db09d(0x7a0)]||[];while(_0x2d987c--){if('CyvcQ'!==_0x1db09d(0x9d2)){if(BattleManager[_0x1db09d(0x7be)][_0x1db09d(0x7a0)][_0x1db09d(0x5e0)]<=0x0)break;BattleManager['_subject'][_0x1db09d(0x7a0)][_0x1db09d(0x646)]();}else{if(_0x37978a===this[_0x1db09d(0x700)]()&&this['isImmortal']())return!![];return _0x256c89[_0x1db09d(0x602)][_0x1db09d(0x424)][_0x1db09d(0x5fd)](this,_0x432c9a);}}}}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xabc),_0x5a726e=>{const _0x28b00a=_0x8db8d6;if(!SceneManager[_0x28b00a(0x38c)]())return;if(!Imported[_0x28b00a(0x21b)])return;VisuMZ[_0x28b00a(0xb24)](_0x5a726e,_0x5a726e);const _0x314c5e=VisuMZ[_0x28b00a(0x566)](_0x5a726e['Targets']),_0x5e85e3=_0x5a726e[_0x28b00a(0x1b1)];for(const _0x48cf94 of _0x314c5e){if(!_0x48cf94)continue;if(!_0x48cf94['isActor']())continue;_0x48cf94[_0x28b00a(0x5f3)](_0x5e85e3);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xb17),_0xcc8554=>{const _0x31fc68=_0x8db8d6;if(!SceneManager[_0x31fc68(0x38c)]())return;VisuMZ[_0x31fc68(0xb24)](_0xcc8554,_0xcc8554);const _0xabfcbc=VisuMZ[_0x31fc68(0x566)](_0xcc8554['Targets']),_0x3d1261=_0xcc8554[_0x31fc68(0xb36)],_0x47b647={'textColor':ColorManager['getColor'](_0xcc8554[_0x31fc68(0x38e)]),'flashColor':_0xcc8554[_0x31fc68(0x6cb)],'flashDuration':_0xcc8554[_0x31fc68(0x14a)]};for(const _0x42d7e3 of _0xabfcbc){if(!_0x42d7e3)continue;_0x42d7e3['setupTextPopup'](_0x3d1261,_0x47b647);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x505),_0x3d9be1=>{const _0x55aa23=_0x8db8d6;if(!SceneManager[_0x55aa23(0x38c)]())return;VisuMZ[_0x55aa23(0xb24)](_0x3d9be1,_0x3d9be1);const _0x298db2=VisuMZ[_0x55aa23(0x566)](_0x3d9be1[_0x55aa23(0x8f9)]);let _0x1b5402=$gameVariables[_0x55aa23(0x56b)](_0x3d9be1[_0x55aa23(0xa25)]);Imported['VisuMZ_0_CoreEngine']&&_0x3d9be1['DigitGrouping']&&(_0x1b5402=VisuMZ[_0x55aa23(0x6de)](_0x1b5402));const _0x3c3401=String(_0x1b5402),_0x3e350b={'textColor':ColorManager['getColor'](_0x3d9be1[_0x55aa23(0x38e)]),'flashColor':_0x3d9be1[_0x55aa23(0x6cb)],'flashDuration':_0x3d9be1['FlashDuration']};for(const _0x421aa6 of _0x298db2){if(!_0x421aa6)continue;_0x421aa6[_0x55aa23(0x10a)](_0x3c3401,_0x3e350b);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Mechanics_WaitForEffect',_0x29b486=>{const _0x16ce95=_0x8db8d6;if(!SceneManager[_0x16ce95(0x38c)]())return;const _0x1d8392=$gameTemp[_0x16ce95(0x754)]();if(!_0x1d8392)return;_0x1d8392['setWaitMode'](_0x16ce95(0x827));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Motion_ClearFreezeFrame',_0x2559fa=>{const _0x397389=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x397389(0xb24)](_0x2559fa,_0x2559fa);const _0x55ec6b=VisuMZ[_0x397389(0x566)](_0x2559fa[_0x397389(0x8f9)]);for(const _0x1bc0d1 of _0x55ec6b){if(!_0x1bc0d1)continue;_0x1bc0d1[_0x397389(0xa8b)]();}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x4cf),_0x1b7419=>{const _0x1574dc=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1574dc(0xb24)](_0x1b7419,_0x1b7419);const _0x5c728f=VisuMZ[_0x1574dc(0x566)](_0x1b7419['Targets']),_0x55697a=_0x1b7419[_0x1574dc(0x6d8)][_0x1574dc(0x80e)]()['trim'](),_0x55c828=_0x1b7419['ShowWeapon'],_0x348b10=_0x1b7419['Frame'];for(const _0x1b03ee of _0x5c728f){if(!_0x1b03ee)continue;_0x1b03ee['freezeMotion'](_0x55697a,_0x55c828,_0x348b10);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x459),_0x5ba793=>{const _0x285469=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x285469(0xb24)](_0x5ba793,_0x5ba793);const _0x19ee61=VisuMZ['CreateActionSequenceTargets'](_0x5ba793[_0x285469(0x8f9)]),_0x41276a=_0x5ba793[_0x285469(0x6d8)][_0x285469(0x80e)]()[_0x285469(0xa51)](),_0x501b35=_0x5ba793['ShowWeapon'];for(const _0x12b024 of _0x19ee61){if(!_0x12b024)continue;if(_0x41276a[_0x285469(0x3ed)](/ATTACK[ ](\d+)/i))_0x12b024[_0x285469(0x3f2)](Number(RegExp['$1']));else{if(_0x41276a==='attack'){if(_0x285469(0x39d)===_0x285469(0x39d))_0x12b024[_0x285469(0xa8e)]();else{const _0x531fa2=this[_0x285469(0x306)](_0x321779)['battler']();if(!_0x531fa2)return;const _0x53b8cf=this[_0x285469(0x830)](),_0x3c99e8=this[_0x285469(0x90a)](_0x5b2bd7);let _0x2bcc15=_0x4654d7[_0x285469(0x423)](_0x3c99e8['x']+_0x3c99e8[_0x285469(0x5cb)]/0x2)+this['padding'];[_0x285469(0x69b)][_0x285469(0xa5c)](_0x53b8cf)&&(_0x2bcc15=_0x3c99e8[_0x285469(0x5cb)]/_0x53bd7b[_0x285469(0x7fb)]()[_0x285469(0x5e0)],_0x2bcc15*=_0x450dcc,_0x2bcc15+=_0x3c99e8[_0x285469(0x5cb)]/_0x10fe77['battleMembers']()[_0x285469(0x5e0)]/0x2);let _0x5b0b29=_0x58657d[_0x285469(0x423)](this[_0x285469(0x9f4)](_0x51c08f,_0x531fa2,_0x3c99e8));_0x531fa2[_0x285469(0x461)](_0x2bcc15,_0x5b0b29),this[_0x285469(0x1a1)](_0x531fa2,0x1),_0x531fa2[_0x285469(0x69a)]();}}else _0x12b024[_0x285469(0xa1d)](_0x41276a);}if(!_0x501b35)_0x12b024[_0x285469(0x342)](0x0);else{if(_0x501b35&&[_0x285469(0x5b8),_0x285469(0x123),'missle'][_0x285469(0xa5c)](_0x41276a)){}}}}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x477),_0x17be88=>{const _0x3196d7=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3196d7(0xb24)](_0x17be88,_0x17be88);const _0xb0b9ed=BattleManager[_0x3196d7(0x64d)];if(!_0xb0b9ed)return;if(!_0xb0b9ed[_0x3196d7(0xaf1)]())return;const _0x183b0e=VisuMZ[_0x3196d7(0x566)](_0x17be88['Targets']);for(const _0x5126e5 of _0x183b0e){if(!_0x5126e5)continue;_0x5126e5[_0x3196d7(0x61f)](_0xb0b9ed);}}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x4ba),_0x5a41b1=>{const _0x328fbd=_0x8db8d6;if(!SceneManager[_0x328fbd(0x38c)]())return;VisuMZ['ConvertParams'](_0x5a41b1,_0x5a41b1);const _0xb093ed=VisuMZ[_0x328fbd(0x566)](_0x5a41b1['Targets']);for(const _0x2469be of _0xb093ed){if(!_0x2469be)continue;if(!_0x2469be[_0x328fbd(0x538)]())continue;_0x2469be['battler']()[_0x328fbd(0x845)]();}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x3dc),_0x106c91=>{const _0xd257d0=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xd257d0(0xb24)](_0x106c91,_0x106c91);const _0x677be6=$gameTemp[_0xd257d0(0x754)](),_0x4912fa=_0x106c91[_0xd257d0(0x280)]*Sprite_Battler[_0xd257d0(0x770)];_0x677be6['wait'](_0x4912fa);}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x46a),_0x2bde81=>{const _0x1c2b77=_0x8db8d6;if(!SceneManager[_0x1c2b77(0x38c)]())return;VisuMZ['ConvertParams'](_0x2bde81,_0x2bde81);const _0x43cf02=$gameTemp['getLastPluginCommandInterpreter'](),_0x482f59=BattleManager[_0x1c2b77(0x64d)];if(!_0x43cf02||!_0x482f59)return;if(!_0x482f59[_0x1c2b77(0xaf1)]())return;const _0x29d73c=VisuMZ[_0x1c2b77(0x566)](_0x2bde81[_0x1c2b77(0x8f9)]);for(const _0x5ec9ef of _0x29d73c){if(_0x1c2b77(0x7d9)===_0x1c2b77(0x9c2))return _0x515d29['prototype'][_0x1c2b77(0x77f)][_0x1c2b77(0x5fd)](this);else{if(!_0x5ec9ef)continue;_0x5ec9ef[_0x1c2b77(0x1f7)](_0x482f59);}}if(_0x2bde81[_0x1c2b77(0x40f)])_0x43cf02[_0x1c2b77(0x4f2)](_0x1c2b77(0x996));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Movement_FaceDirection',_0x1adee0=>{const _0x2422d4=_0x8db8d6;if(!SceneManager[_0x2422d4(0x38c)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x1adee0,_0x1adee0);const _0xb1dd05=VisuMZ[_0x2422d4(0x566)](_0x1adee0[_0x2422d4(0x8f9)]);let _0x159f96=_0x1adee0[_0x2422d4(0x5f8)][_0x2422d4(0x3ed)](/back/i);for(const _0x1b59a4 of _0xb1dd05){if(_0x2422d4(0x94e)!==_0x2422d4(0x468)){if(!_0x1b59a4)continue;if(_0x1adee0[_0x2422d4(0x5f8)][_0x2422d4(0x3ed)](/rand/i))_0x159f96=Math[_0x2422d4(0x430)](0x2);_0x1b59a4[_0x2422d4(0x63d)](!!_0x159f96);}else _0x291606[_0x2422d4(0x602)][_0x2422d4(0x500)][_0x2422d4(0x5fd)](this,_0x3f591f),this[_0x2422d4(0x8fb)]();}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x53c),_0x2e1eb3=>{const _0x2bafaf=_0x8db8d6;if(!SceneManager[_0x2bafaf(0x38c)]())return;if(!$gameSystem[_0x2bafaf(0x6b5)]())return;VisuMZ[_0x2bafaf(0xb24)](_0x2e1eb3,_0x2e1eb3);const _0x18af6a=VisuMZ[_0x2bafaf(0x566)](_0x2e1eb3['Targets']);let _0x4ddeca=_0x2e1eb3[_0x2bafaf(0x660)];const _0x241ead=_0x2e1eb3['FaceAway'];for(const _0x238e3c of _0x18af6a){if(_0x2bafaf(0xb2b)===_0x2bafaf(0xb2b)){if(!_0x238e3c)continue;let _0x4891d5=_0x238e3c[_0x2bafaf(0x538)]()[_0x2bafaf(0x94f)],_0x1b8a53=_0x238e3c[_0x2bafaf(0x538)]()[_0x2bafaf(0x214)];if(_0x4ddeca[_0x2bafaf(0x3ed)](/home/i))_0x4891d5=_0x238e3c[_0x2bafaf(0x538)]()[_0x2bafaf(0x67c)],_0x1b8a53=_0x238e3c[_0x2bafaf(0x538)]()[_0x2bafaf(0x334)];else{if(_0x4ddeca[_0x2bafaf(0x3ed)](/center/i))_0x4891d5=Graphics['boxWidth']/0x2,_0x1b8a53=Graphics[_0x2bafaf(0x68b)]/0x2;else _0x4ddeca[_0x2bafaf(0x3ed)](/point (\d+), (\d+)/i)&&(_0x4891d5=Number(RegExp['$1']),_0x1b8a53=Number(RegExp['$2']));}_0x238e3c[_0x2bafaf(0x2ea)](Math['round'](_0x4891d5),Math['round'](_0x1b8a53),!!_0x241ead);}else{if(!_0x211892['prototype'][_0x2bafaf(0x7b5)][_0x2bafaf(0x5fd)](this,_0x13e9f2))return!![];if(!_0x29328f[_0x2bafaf(0x6da)]['checkShowHideSwitchNotetags'][_0x2bafaf(0x5fd)](this,_0x7ca683))return!![];if(!_0x26d2ed['prototype'][_0x2bafaf(0x880)][_0x2bafaf(0x5fd)](this,_0x1a344e))return!![];return![];}}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x813),_0x521659=>{const _0x28aeb0=_0x8db8d6;if(!SceneManager[_0x28aeb0(0x38c)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x521659,_0x521659);const _0x438d8d=VisuMZ[_0x28aeb0(0x566)](_0x521659[_0x28aeb0(0x9eb)]),_0x560032=VisuMZ[_0x28aeb0(0x566)](_0x521659[_0x28aeb0(0x6f8)]),_0x49694f=_0x560032[_0x28aeb0(0x9f8)](_0x5c96dd=>_0x5c96dd&&_0x5c96dd[_0x28aeb0(0x538)]()?_0x5c96dd[_0x28aeb0(0x538)]()[_0x28aeb0(0x94f)]:0x0)/(_0x560032[_0x28aeb0(0x5e0)]||0x1),_0x481c95=_0x560032[_0x28aeb0(0x9f8)](_0x59b269=>_0x59b269&&_0x59b269[_0x28aeb0(0x538)]()?_0x59b269[_0x28aeb0(0x538)]()[_0x28aeb0(0x214)]:0x0)/(_0x560032[_0x28aeb0(0x5e0)]||0x1),_0x5a6209=_0x521659[_0x28aeb0(0x515)];for(const _0x166e5c of _0x438d8d){if(!_0x166e5c)continue;_0x166e5c[_0x28aeb0(0x2ea)](Math[_0x28aeb0(0x423)](_0x49694f),Math[_0x28aeb0(0x423)](_0x481c95),!!_0x5a6209);}}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Movement_Float',_0x20eb94=>{const _0x3b7529=_0x8db8d6;if(!SceneManager[_0x3b7529(0x38c)]())return;VisuMZ[_0x3b7529(0xb24)](_0x20eb94,_0x20eb94);const _0x3283a3=$gameTemp['getLastPluginCommandInterpreter'](),_0x19d833=VisuMZ[_0x3b7529(0x566)](_0x20eb94[_0x3b7529(0x8f9)]),_0x1e3e33=_0x20eb94['Height'],_0x5cd2b7=_0x20eb94['Duration'],_0x466663=_0x20eb94['EasingType'],_0x6e231b=_0x20eb94[_0x3b7529(0x298)];if(!_0x3283a3)return;for(const _0x56dd4f of _0x19d833){if(!_0x56dd4f)continue;_0x56dd4f[_0x3b7529(0xfe)](_0x1e3e33,_0x5cd2b7,_0x466663);}if(_0x6e231b)_0x3283a3[_0x3b7529(0x4f2)](_0x3b7529(0x217));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x664),_0x2719fb=>{const _0x41179c=_0x8db8d6;if(!SceneManager[_0x41179c(0x38c)]())return;VisuMZ[_0x41179c(0xb24)](_0x2719fb,_0x2719fb);const _0x38e389=$gameTemp[_0x41179c(0x754)]();if(!_0x38e389)return;const _0x468b85=VisuMZ['CreateActionSequenceTargets'](_0x2719fb[_0x41179c(0x8f9)]);for(const _0x38d2d7 of _0x468b85){if('oBRDW'!=='oBRDW')return _0x34167c[_0x41179c(0x338)]()['slice'](0x0);else{if(!_0x38d2d7)continue;_0x38d2d7[_0x41179c(0x94c)]();}}BattleManager[_0x41179c(0x7be)]&&BattleManager[_0x41179c(0x7be)][_0x41179c(0x5b5)]();if(_0x2719fb[_0x41179c(0x40f)])_0x38e389[_0x41179c(0x4f2)](_0x41179c(0x996));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xadb),_0x33550a=>{const _0x45a927=_0x8db8d6;if(!SceneManager[_0x45a927(0x38c)]())return;VisuMZ['ConvertParams'](_0x33550a,_0x33550a);const _0x3e543c=$gameTemp['getLastPluginCommandInterpreter'](),_0x1d3f17=VisuMZ['CreateActionSequenceTargets'](_0x33550a[_0x45a927(0x8f9)]),_0x5115c9=_0x33550a[_0x45a927(0x517)],_0x47ade1=_0x33550a[_0x45a927(0x20b)],_0xd7719c=_0x33550a[_0x45a927(0x522)];if(!_0x3e543c)return;for(const _0x1397b1 of _0x1d3f17){if(!_0x1397b1)continue;_0x1397b1[_0x45a927(0x8d7)](_0x5115c9,_0x47ade1);}if(_0xd7719c)_0x3e543c[_0x45a927(0x4f2)](_0x45a927(0x6fa));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0xb3a),_0x53e9b7=>{const _0x34c4e5=_0x8db8d6;if(!SceneManager[_0x34c4e5(0x38c)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x53e9b7,_0x53e9b7);const _0x406c69=$gameTemp[_0x34c4e5(0x754)](),_0x32a24c=VisuMZ['CreateActionSequenceTargets'](_0x53e9b7[_0x34c4e5(0x8f9)]),_0x464080=_0x53e9b7[_0x34c4e5(0x92d)],_0x245d04=_0x53e9b7[_0x34c4e5(0x7c4)],_0xe40bfd=_0x53e9b7[_0x34c4e5(0xaac)],_0x21362d=_0x53e9b7[_0x34c4e5(0x20b)],_0x4409ac=_0x53e9b7[_0x34c4e5(0x1b2)],_0x240437=_0x53e9b7['EasingType'],_0x3acdf5=_0x53e9b7[_0x34c4e5(0x6d8)],_0x1aab93=_0x53e9b7[_0x34c4e5(0x40f)];if(!_0x406c69)return;for(const _0x5e0c26 of _0x32a24c){if(!_0x5e0c26)continue;let _0x23091f=_0x245d04,_0x1c8eb9=_0xe40bfd;if(_0x464080[_0x34c4e5(0x3ed)](/horz/i))_0x23091f*=_0x5e0c26[_0x34c4e5(0x367)]()?-0x1:0x1;if(_0x464080['match'](/vert/i))_0x1c8eb9*=_0x5e0c26[_0x34c4e5(0x367)]()?-0x1:0x1;_0x5e0c26[_0x34c4e5(0x53e)](_0x23091f,_0x1c8eb9,_0x21362d,_0x4409ac,_0x240437),_0x5e0c26[_0x34c4e5(0xa1d)](_0x3acdf5);}if(_0x1aab93)_0x406c69[_0x34c4e5(0x4f2)](_0x34c4e5(0x996));}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x93a),_0x73c689=>{const _0x1098f8=_0x8db8d6;if(!SceneManager[_0x1098f8(0x38c)]())return;if(!$gameSystem[_0x1098f8(0x6b5)]())return;VisuMZ['ConvertParams'](_0x73c689,_0x73c689);const _0x22353a=$gameTemp[_0x1098f8(0x754)](),_0x1534f2=VisuMZ[_0x1098f8(0x566)](_0x73c689['Targets']),_0x3d4777=_0x73c689[_0x1098f8(0x837)],_0x46a009=_0x73c689['OffsetAdjust'],_0x1d54d2=_0x73c689['OffsetX'],_0x35ce92=_0x73c689['OffsetY'],_0x3d62ee=_0x73c689['Duration'],_0x30e643=_0x73c689['FaceDirection'],_0x2c13f1=_0x73c689[_0x1098f8(0x5da)],_0x4602f3=_0x73c689[_0x1098f8(0x6d8)],_0x16bc23=_0x73c689[_0x1098f8(0x40f)];if(!_0x22353a)return;for(const _0x327f09 of _0x1534f2){if(_0x1098f8(0x475)!==_0x1098f8(0x8d4)){if(!_0x327f09)continue;let _0x4d2463=_0x327f09[_0x1098f8(0x538)]()['_baseX'],_0x399067=_0x327f09[_0x1098f8(0x538)]()[_0x1098f8(0x214)];if(_0x3d4777[_0x1098f8(0x3ed)](/home/i))_0x1098f8(0x762)===_0x1098f8(0x7ba)?_0x2432d0[_0x1098f8(0x43e)](this[_0x1098f8(0x1bd)]()['trueRandomTarget']()):(_0x4d2463=_0x327f09['battler']()[_0x1098f8(0x67c)],_0x399067=_0x327f09[_0x1098f8(0x538)]()[_0x1098f8(0x334)]);else{if(_0x3d4777[_0x1098f8(0x3ed)](/center/i)){if(_0x1098f8(0x1f1)!==_0x1098f8(0x1f1)){if(this['allowCollapse']())_0x44e60c[_0x1098f8(0x602)][_0x1098f8(0x2a4)]['call'](this);}else _0x4d2463=Graphics[_0x1098f8(0x3ef)]/0x2,_0x399067=Graphics['boxHeight']/0x2;}else{if(_0x3d4777['match'](/point (\d+), (\d+)/i)){if('xuuzK'===_0x1098f8(0x182))_0x4d2463=Number(RegExp['$1']),_0x399067=Number(RegExp['$2']);else return!![];}}}if(_0x46a009[_0x1098f8(0x3ed)](/none/i)){if(_0x1098f8(0xaf9)!=='WrSRH'){if(this[_0x1098f8(0x5f5)]===_0x6af18c)return;this[_0x1098f8(0x450)](),this['finalizeScale']();}else _0x4d2463+=_0x1d54d2,_0x399067+=_0x35ce92;}else{if(_0x46a009['match'](/horz/i)&&_0x46a009[_0x1098f8(0x3ed)](/vert/i)){if(_0x1098f8(0x2e5)!==_0x1098f8(0x120))_0x4d2463+=_0x327f09[_0x1098f8(0x367)]()?-_0x1d54d2:_0x1d54d2,_0x399067+=_0x327f09[_0x1098f8(0x367)]()?-_0x35ce92:_0x35ce92;else return this[_0x1098f8(0x159)][_0x1098f8(0x646)]();}else{if(_0x46a009[_0x1098f8(0x3ed)](/horz/i))_0x4d2463+=_0x327f09[_0x1098f8(0x367)]()?-_0x1d54d2:_0x1d54d2,_0x399067+=_0x35ce92;else _0x46a009[_0x1098f8(0x3ed)](/vert/i)&&(_0x4d2463+=_0x1d54d2,_0x399067+=_0x327f09[_0x1098f8(0x367)]()?-_0x35ce92:_0x35ce92);}}_0x327f09['moveBattlerToPoint'](_0x4d2463,_0x399067,_0x3d62ee,_0x30e643,_0x2c13f1,-0x1),_0x327f09[_0x1098f8(0xa1d)](_0x4602f3);}else _0x314ae7['BattleCore'][_0x1098f8(0x8b4)]&&_0x4a5cf6[_0x1098f8(0x602)]['ParseArmorNotetags']['call'](this,_0x35d1c0),_0x15d41d[_0x1098f8(0x602)][_0x1098f8(0x7eb)](_0x458b77);}if(_0x16bc23)_0x22353a[_0x1098f8(0x4f2)]('battleMove');}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x158),_0x59abd8=>{const _0x5d0693=_0x8db8d6;if(!SceneManager[_0x5d0693(0x38c)]())return;if(!$gameSystem[_0x5d0693(0x6b5)]())return;VisuMZ[_0x5d0693(0xb24)](_0x59abd8,_0x59abd8);const _0x1d1740=$gameTemp[_0x5d0693(0x754)](),_0x5595b3=VisuMZ[_0x5d0693(0x566)](_0x59abd8[_0x5d0693(0x9eb)]),_0x4df3ee=VisuMZ[_0x5d0693(0x566)](_0x59abd8['Targets2']),_0x3a524c=_0x59abd8[_0x5d0693(0x8ed)];let _0x2933fa=_0x59abd8[_0x5d0693(0x4e9)];const _0x162bcc=_0x59abd8[_0x5d0693(0x64b)],_0x51a115=_0x59abd8[_0x5d0693(0x37c)],_0x2f3fb3=_0x59abd8[_0x5d0693(0x9e9)],_0x3272bb=_0x59abd8[_0x5d0693(0x20b)],_0x5657b1=_0x59abd8[_0x5d0693(0x1b2)],_0x232fff=_0x59abd8[_0x5d0693(0x5da)],_0x15ff53=_0x59abd8['MotionType'],_0x5a70d8=_0x59abd8['WaitForMovement'],_0xe7d1c6=Math[_0x5d0693(0x8e0)](..._0x4df3ee[_0x5d0693(0x9f8)](_0x4c65e8=>_0x4c65e8['battler']()[_0x5d0693(0x94f)]-_0x4c65e8[_0x5d0693(0x538)]()[_0x5d0693(0x5d3)]()/0x2)),_0x580e31=Math[_0x5d0693(0x623)](..._0x4df3ee['map'](_0x3422d2=>_0x3422d2['battler']()[_0x5d0693(0x94f)]+_0x3422d2[_0x5d0693(0x538)]()[_0x5d0693(0x5d3)]()/0x2)),_0x43b5ae=Math[_0x5d0693(0x8e0)](..._0x4df3ee[_0x5d0693(0x9f8)](_0xed3f9d=>_0xed3f9d[_0x5d0693(0x538)]()[_0x5d0693(0x214)]-_0xed3f9d['battler']()[_0x5d0693(0x3be)]())),_0x5a3786=Math['max'](..._0x4df3ee['map'](_0xb6b30a=>_0xb6b30a[_0x5d0693(0x538)]()[_0x5d0693(0x214)])),_0x190eec=_0x4df3ee[_0x5d0693(0x691)](_0x49880b=>_0x49880b[_0x5d0693(0x367)]())[_0x5d0693(0x5e0)],_0x1f0222=_0x4df3ee[_0x5d0693(0x691)](_0x3dd64f=>_0x3dd64f[_0x5d0693(0x26d)]())[_0x5d0693(0x5e0)];let _0x10a905=0x0,_0x22d28f=0x0;if(_0x3a524c[_0x5d0693(0x3ed)](/front/i))_0x10a905=_0x190eec>=_0x1f0222?_0xe7d1c6:_0x580e31;else{if(_0x3a524c[_0x5d0693(0x3ed)](/middle/i))_0x5d0693(0x352)===_0x5d0693(0x31a)?this[_0x5d0693(0x5de)]('dead'):(_0x10a905=(_0xe7d1c6+_0x580e31)/0x2,_0x2933fa=-0x1);else _0x3a524c[_0x5d0693(0x3ed)](/back/i)&&(_0x10a905=_0x190eec>=_0x1f0222?_0x580e31:_0xe7d1c6);}if(_0x3a524c['match'](/head/i)){if(_0x5d0693(0x5b7)!==_0x5d0693(0x45f))_0x22d28f=_0x43b5ae;else{const _0x262c5c=_0x5f4961[_0x5d0693(0x764)](_0x4d77dd);return _0x262c5c>=0x0?[_0x34826b[_0x262c5c+0x1]||_0x582f21]:[_0x2e09d2];}}else{if(_0x3a524c[_0x5d0693(0x3ed)](/center/i))_0x22d28f=(_0x43b5ae+_0x5a3786)/0x2;else _0x3a524c[_0x5d0693(0x3ed)](/base/i)&&('LXSpl'!==_0x5d0693(0x153)?this[_0x5d0693(0x97e)]()?this[_0x5d0693(0x293)]():_0x168e3f[_0x5d0693(0x602)]['Scene_Battle_startPartyCommandSelection'][_0x5d0693(0x5fd)](this):_0x22d28f=_0x5a3786);}if(!_0x1d1740)return;for(const _0xd32440 of _0x5595b3){if(_0x5d0693(0x9aa)===_0x5d0693(0x12d))return this[_0x5d0693(0x19c)][_0x5d0693(0x725)]===0x0&&this[_0x5d0693(0x19c)][_0x5d0693(0x5c8)]===0x0;else{if(!_0xd32440)continue;let _0x13d365=_0x10a905,_0x420d87=_0x22d28f;if(_0x162bcc[_0x5d0693(0x3ed)](/none/i)){if(_0x5d0693(0x3a7)===_0x5d0693(0x3a7))_0x13d365+=_0x51a115,_0x420d87+=_0x2f3fb3;else return this[_0x5d0693(0x7f5)]*this[_0x5d0693(0x4de)]();}else{if(_0x162bcc[_0x5d0693(0x3ed)](/horz/i)&&_0x162bcc[_0x5d0693(0x3ed)](/vert/i))_0x13d365+=_0xd32440[_0x5d0693(0x367)]()?-_0x51a115:_0x51a115,_0x420d87+=_0xd32440['isActor']()?-_0x2f3fb3:_0x2f3fb3;else{if(_0x162bcc[_0x5d0693(0x3ed)](/horz/i))_0x13d365+=_0xd32440[_0x5d0693(0x367)]()?-_0x51a115:_0x51a115,_0x420d87+=_0x2f3fb3;else _0x162bcc['match'](/vert/i)&&(_0x13d365+=_0x51a115,_0x420d87+=_0xd32440[_0x5d0693(0x367)]()?-_0x2f3fb3:_0x2f3fb3);}}_0xd32440[_0x5d0693(0x553)](_0x13d365,_0x420d87,_0x3272bb,_0x5657b1,_0x232fff,_0x2933fa),_0xd32440[_0x5d0693(0xa1d)](_0x15ff53);}}if(_0x5a70d8)_0x1d1740['setWaitMode'](_0x5d0693(0x996));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xa3e),_0x5b3a4f=>{const _0x46065f=_0x8db8d6;if(!SceneManager[_0x46065f(0x38c)]())return;VisuMZ[_0x46065f(0xb24)](_0x5b3a4f,_0x5b3a4f);const _0x1efcba=$gameTemp[_0x46065f(0x754)](),_0x19e86f=VisuMZ[_0x46065f(0x566)](_0x5b3a4f[_0x46065f(0x8f9)]),_0x175d73=_0x5b3a4f['Opacity'],_0x42b4a7=_0x5b3a4f[_0x46065f(0x20b)],_0x357485=_0x5b3a4f[_0x46065f(0x5da)],_0x338877=_0x5b3a4f[_0x46065f(0x586)];if(!_0x1efcba)return;for(const _0x19a29c of _0x19e86f){if(!_0x19a29c)continue;_0x19a29c['changeBattlerOpacity'](_0x175d73,_0x42b4a7,_0x357485);}if(_0x338877)_0x1efcba[_0x46065f(0x4f2)](_0x46065f(0x381));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x832),_0x1180a3=>{const _0x3cf1b2=_0x8db8d6;if(!SceneManager[_0x3cf1b2(0x38c)]())return;VisuMZ[_0x3cf1b2(0xb24)](_0x1180a3,_0x1180a3);const _0x530452=$gameTemp[_0x3cf1b2(0x754)](),_0x11f979=VisuMZ[_0x3cf1b2(0x566)](_0x1180a3[_0x3cf1b2(0x8f9)]),_0xe15eb5=_0x1180a3[_0x3cf1b2(0xae1)],_0x3bc286=_0x1180a3[_0x3cf1b2(0x962)],_0xc2f543=_0x1180a3[_0x3cf1b2(0x20b)],_0x4998b7=_0x1180a3[_0x3cf1b2(0x5da)],_0x5af296=_0x1180a3[_0x3cf1b2(0xb28)];if(!_0x530452)return;for(const _0x4c9b24 of _0x11f979){if(!_0x4c9b24)continue;_0x4c9b24[_0x3cf1b2(0x6c4)](_0xe15eb5,_0x3bc286,_0xc2f543,_0x4998b7);}if(_0x5af296)_0x530452[_0x3cf1b2(0x4f2)](_0x3cf1b2(0x3a5));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Movement_Skew',_0x25a153=>{const _0x1635c2=_0x8db8d6;if(!SceneManager[_0x1635c2(0x38c)]())return;VisuMZ[_0x1635c2(0xb24)](_0x25a153,_0x25a153);const _0x2ccfda=$gameTemp[_0x1635c2(0x754)](),_0x3c9445=VisuMZ[_0x1635c2(0x566)](_0x25a153[_0x1635c2(0x8f9)]),_0x32f236=_0x25a153[_0x1635c2(0x3ac)],_0x12de39=_0x25a153[_0x1635c2(0x45e)],_0x3f5b82=_0x25a153[_0x1635c2(0x20b)],_0x547ad4=_0x25a153['EasingType'],_0x5195c9=_0x25a153[_0x1635c2(0x132)];if(!_0x2ccfda)return;for(const _0x3dfed1 of _0x3c9445){if(!_0x3dfed1)continue;_0x3dfed1[_0x1635c2(0x7cf)](_0x32f236,_0x12de39,_0x3f5b82,_0x547ad4);}if(_0x5195c9)_0x2ccfda[_0x1635c2(0x4f2)](_0x1635c2(0x494));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x366),_0x22c91e=>{const _0x2fb5ba=_0x8db8d6;if(!SceneManager[_0x2fb5ba(0x38c)]())return;VisuMZ[_0x2fb5ba(0xb24)](_0x22c91e,_0x22c91e);const _0xde8001=$gameTemp['getLastPluginCommandInterpreter'](),_0x32c7c2=VisuMZ[_0x2fb5ba(0x566)](_0x22c91e[_0x2fb5ba(0x8f9)]),_0x1f1095=_0x22c91e[_0x2fb5ba(0x416)],_0x1982d6=_0x22c91e[_0x2fb5ba(0x20b)],_0x1afef2=_0x22c91e[_0x2fb5ba(0x5da)],_0xbc4930=_0x22c91e['RevertAngle'],_0x4da9ae=_0x22c91e[_0x2fb5ba(0xac0)];if(!_0xde8001)return;for(const _0x1192f3 of _0x32c7c2){if(!_0x1192f3)continue;_0x1192f3[_0x2fb5ba(0x300)](_0x1f1095,_0x1982d6,_0x1afef2,_0xbc4930);}if(_0x4da9ae)_0xde8001[_0x2fb5ba(0x4f2)](_0x2fb5ba(0x9e6));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0xab5),_0x456a17=>{const _0x41e9dd=_0x8db8d6;if(!SceneManager[_0x41e9dd(0x38c)]())return;const _0x5b3a4b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5b3a4b)return;_0x5b3a4b[_0x41e9dd(0x4f2)](_0x41e9dd(0x217));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Movement_WaitForJump',_0x4ac1e0=>{const _0x757c7f=_0x8db8d6;if(!SceneManager[_0x757c7f(0x38c)]())return;const _0x9edd63=$gameTemp[_0x757c7f(0x754)]();if(!_0x9edd63)return;_0x9edd63[_0x757c7f(0x4f2)](_0x757c7f(0x6fa));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x7f8),_0xbef087=>{const _0x291579=_0x8db8d6;if(!SceneManager[_0x291579(0x38c)]())return;const _0x408faf=$gameTemp[_0x291579(0x754)]();if(!_0x408faf)return;_0x408faf[_0x291579(0x4f2)]('battleMove');}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x16b),_0x32adb8=>{const _0x576a73=_0x8db8d6;if(!SceneManager[_0x576a73(0x38c)]())return;const _0x50b08a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x50b08a)return;_0x50b08a[_0x576a73(0x4f2)]('battleOpacity');}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],'ActSeq_Movement_WaitForScale',_0x17a2e3=>{const _0x761cd8=_0x8db8d6;if(!SceneManager[_0x761cd8(0x38c)]())return;const _0x3e5c73=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3e5c73)return;_0x3e5c73[_0x761cd8(0x4f2)](_0x761cd8(0x3a5));}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x90b),_0x3bd8bb=>{const _0x554f6d=_0x8db8d6;if(!SceneManager[_0x554f6d(0x38c)]())return;const _0x37cf20=$gameTemp[_0x554f6d(0x754)]();if(!_0x37cf20)return;_0x37cf20[_0x554f6d(0x4f2)](_0x554f6d(0x494));}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x41f),_0x122a68=>{const _0xa897bb=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;const _0x2179eb=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2179eb)return;_0x2179eb[_0xa897bb(0x4f2)](_0xa897bb(0x9e6));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x20d),_0x547911=>{const _0x490e40=_0x8db8d6;if(!SceneManager[_0x490e40(0x38c)]())return;if(!Imported[_0x490e40(0x278)])return;VisuMZ[_0x490e40(0xb24)](_0x547911,_0x547911);const _0x4229c9=$gameTemp[_0x490e40(0x754)](),_0x4a2cfe=_0x547911['WaitForProjectile'];if(!_0x4229c9)return;const _0x4ce696=BattleManager[_0x490e40(0x485)];if(!_0x4ce696)return;_0x4ce696['createActionSequenceProjectile'](_0x547911);if(_0x4a2cfe)_0x4229c9[_0x490e40(0x4f2)]('battleProjectiles');}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x29f),_0x26ec67=>{const _0x1cf7f0=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1cf7f0(0x278)])return;VisuMZ[_0x1cf7f0(0xb24)](_0x26ec67,_0x26ec67);const _0x27009b=$gameTemp['getLastPluginCommandInterpreter'](),_0x2c31ba=_0x26ec67[_0x1cf7f0(0x49e)];if(!_0x27009b)return;const _0x29ee39=BattleManager[_0x1cf7f0(0x485)];if(!_0x29ee39)return;_0x29ee39['createActionSequenceProjectile'](_0x26ec67);if(_0x2c31ba)_0x27009b['setWaitMode']('battleProjectiles');}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x7cd),_0x1d906a=>{const _0x11ed64=_0x8db8d6;if(!SceneManager[_0x11ed64(0x38c)]())return;if(!Imported[_0x11ed64(0x278)])return;VisuMZ[_0x11ed64(0xb24)](_0x1d906a,_0x1d906a);const _0x2f7eca=$gameTemp['getLastPluginCommandInterpreter'](),_0x572096=_0x1d906a['WaitForProjectile'];if(!_0x2f7eca)return;const _0x452872=BattleManager[_0x11ed64(0x485)];if(!_0x452872)return;_0x452872[_0x11ed64(0x4c2)](_0x1d906a);if(_0x572096)_0x2f7eca[_0x11ed64(0x4f2)](_0x11ed64(0x66f));}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x891),_0x1876fd=>{const _0x508655=_0x8db8d6;if(!SceneManager[_0x508655(0x38c)]())return;if(!Imported[_0x508655(0xaa5)])return;VisuMZ[_0x508655(0xb24)](_0x1876fd,_0x1876fd);const _0x4a39b9=$gameTemp[_0x508655(0x754)](),_0x3df84a=_0x1876fd[_0x508655(0x132)];if(!_0x4a39b9)return;$gameScreen['setBattleSkew'](_0x1876fd[_0x508655(0x3ac)],_0x1876fd[_0x508655(0x45e)],_0x1876fd[_0x508655(0x20b)],_0x1876fd[_0x508655(0x5da)]);if(_0x3df84a)_0x4a39b9[_0x508655(0x4f2)](_0x508655(0x7f4));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x521),_0x55be9f=>{const _0x47805f=_0x8db8d6;if(!SceneManager[_0x47805f(0x38c)]())return;if(!Imported[_0x47805f(0xaa5)])return;VisuMZ[_0x47805f(0xb24)](_0x55be9f,_0x55be9f);const _0x3e172b=$gameTemp[_0x47805f(0x754)](),_0xe71730=_0x55be9f[_0x47805f(0x132)];if(!_0x3e172b)return;$gameScreen[_0x47805f(0x90d)](0x0,0x0,_0x55be9f[_0x47805f(0x20b)],_0x55be9f[_0x47805f(0x5da)]);if(_0xe71730)_0x3e172b['setWaitMode'](_0x47805f(0x7f4));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x39b),_0x4d4ff9=>{const _0x29ca42=_0x8db8d6;if(!SceneManager[_0x29ca42(0x38c)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3980d0=$gameTemp[_0x29ca42(0x754)]();if(!_0x3980d0)return;_0x3980d0[_0x29ca42(0x4f2)](_0x29ca42(0x7f4));}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x7de),_0x43ce16=>{const _0x5a1ef7=_0x8db8d6;if(!SceneManager[_0x5a1ef7(0x38c)]())return;VisuMZ['ConvertParams'](_0x43ce16,_0x43ce16);const _0x5bb762=$gameTemp[_0x5a1ef7(0x754)](),_0x16b46d=_0x43ce16[_0x5a1ef7(0x823)],_0x508c6c=_0x43ce16[_0x5a1ef7(0xab6)];if(!_0x5bb762)return;BattleManager[_0x5a1ef7(0x782)]=_0x16b46d,BattleManager[_0x5a1ef7(0x7e4)]=BattleManager[_0x5a1ef7(0x67a)]?BattleManager[_0x5a1ef7(0x67a)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x5a1ef7(0x7e4)]&&_0x508c6c[_0x5a1ef7(0x3ad)]()[_0x5a1ef7(0xa51)]()!==_0x5a1ef7(0x612)&&(_0x5a1ef7(0x662)!=='yGWRt'?_0x5bb762[_0x5a1ef7(0x869)]([_0x508c6c]):(this[_0x5a1ef7(0x861)]=this['_shadowScaleX']??0x1,this[_0x5a1ef7(0x2c6)]=this[_0x5a1ef7(0x2c6)]??0x1,this[_0x5a1ef7(0x20f)][_0x5a1ef7(0x728)]['x']=this[_0x5a1ef7(0x329)][_0x5a1ef7(0x728)]['x']*this['_shadowScaleX'],this[_0x5a1ef7(0x20f)][_0x5a1ef7(0x728)]['y']=this[_0x5a1ef7(0x329)][_0x5a1ef7(0x728)]['y']*this[_0x5a1ef7(0x2c6)]));}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x31b),_0x4a8734=>{const _0x6d55f0=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x6d55f0(0xb24)](_0x4a8734,_0x4a8734);const _0x568498=$gameTemp[_0x6d55f0(0x754)](),_0x54df6a=_0x4a8734[_0x6d55f0(0xab6)];if(!_0x568498)return;BattleManager[_0x6d55f0(0x782)]++,BattleManager[_0x6d55f0(0x7e4)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null,BattleManager[_0x6d55f0(0x7e4)]&&_0x54df6a[_0x6d55f0(0x3ad)]()[_0x6d55f0(0xa51)]()!=='UNTITLED'&&_0x568498[_0x6d55f0(0x869)]([_0x54df6a]);}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x973),_0x4cadaa=>{const _0xb848ff=_0x8db8d6;if(!SceneManager[_0xb848ff(0x38c)]())return;VisuMZ[_0xb848ff(0xb24)](_0x4cadaa,_0x4cadaa);const _0x34a1e9=$gameTemp[_0xb848ff(0x754)](),_0x4ce8d1=_0x4cadaa[_0xb848ff(0xab6)];if(!_0x34a1e9)return;BattleManager[_0xb848ff(0x782)]--,BattleManager[_0xb848ff(0x7e4)]=BattleManager['_allTargets'][BattleManager[_0xb848ff(0x782)]]||null,BattleManager['_target']&&_0x4ce8d1[_0xb848ff(0x3ad)]()[_0xb848ff(0xa51)]()!==_0xb848ff(0x612)&&_0x34a1e9[_0xb848ff(0x869)]([_0x4ce8d1]);}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],'ActSeq_Target_RandTarget',_0xa530e9=>{const _0x209916=_0x8db8d6;if(!SceneManager[_0x209916(0x38c)]())return;VisuMZ['ConvertParams'](_0xa530e9,_0xa530e9);const _0x28cf0d=$gameTemp[_0x209916(0x754)](),_0x3f5166=_0xa530e9[_0x209916(0x916)],_0x5d6f60=_0xa530e9[_0x209916(0xab6)];if(!_0x28cf0d)return;const _0x5bcf71=BattleManager[_0x209916(0x782)];for(;;){if(_0x209916(0x913)!==_0x209916(0x7ec)){BattleManager[_0x209916(0x782)]=Math[_0x209916(0x430)](BattleManager[_0x209916(0x67a)][_0x209916(0x5e0)]);if(!_0x3f5166)break;if(BattleManager['_targetIndex']!==_0x5bcf71)break;if(BattleManager[_0x209916(0x67a)][_0x209916(0x5e0)]<=0x1){if('tfkZD'!==_0x209916(0x5e1)){BattleManager['_targetIndex']=0x0;break;}else this[_0x209916(0x967)]=(this[_0x209916(0x967)]*(_0x24b46e-0x1)+this[_0x209916(0x9b7)])/_0x3cb315;}}else{if(this[_0x209916(0x5f5)]===_0x281a26&&!_0x11af37[_0x209916(0x991)]())return;}}BattleManager[_0x209916(0x7e4)]=BattleManager[_0x209916(0x67a)][BattleManager['_targetIndex']]||null,BattleManager[_0x209916(0x7e4)]&&_0x5d6f60['toUpperCase']()[_0x209916(0xa51)]()!==_0x209916(0x612)&&_0x28cf0d[_0x209916(0x869)]([_0x5d6f60]);}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x43d),_0x2028c8=>{const _0x590c96=_0x8db8d6;if(!SceneManager[_0x590c96(0x38c)]())return;VisuMZ[_0x590c96(0xb24)](_0x2028c8,_0x2028c8);const _0x220262=VisuMZ[_0x590c96(0x566)](_0x2028c8[_0x590c96(0x8f9)]);for(const _0x31ac40 of _0x220262){if(_0x590c96(0x266)===_0x590c96(0x266)){if(!_0x31ac40)continue;if(!_0x31ac40[_0x590c96(0x367)]())continue;_0x31ac40[_0x590c96(0x54c)]();}else _0x151c1d[_0x590c96(0x73a)]['SmoothImage']=![];}}),PluginManager['registerCommand'](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0xaaf),_0x28bb3e=>{const _0x279964=_0x8db8d6;if(!SceneManager[_0x279964(0x38c)]())return;VisuMZ[_0x279964(0xb24)](_0x28bb3e,_0x28bb3e);const _0x1870dd=$gameTemp[_0x279964(0x754)]();let _0x120cb1=![];const _0x441282=_0x28bb3e[_0x279964(0xab6)],_0x4adc10=VisuMZ[_0x279964(0x566)](_0x28bb3e['Targets']);for(const _0x48883a of _0x4adc10){if(_0x279964(0x802)===_0x279964(0x1d4))this[_0x279964(0x9b7)]=0x0,this[_0x279964(0x967)]=0x0;else{if(!_0x48883a)continue;if(!_0x48883a[_0x279964(0x367)]())continue;_0x48883a[_0x279964(0x9d8)]();if(_0x48883a[_0x279964(0x449)]()['length']>0x0){if(_0x279964(0x201)!==_0x279964(0x4fb))_0x120cb1=!![];else{this[_0x279964(0x1af)]=0x14,this['_borderPortraitSprite'][_0x279964(0x86a)]=_0x255e06;_0x51e21c[_0x279964(0xa4a)][_0x279964(0x19e)]()?(this[_0x279964(0x38f)]['x']=0x0,this[_0x279964(0x8ea)]=_0x469429[_0x279964(0x2f7)](_0x27cbb3['width']/0x2)):(this[_0x279964(0x38f)]['x']=this[_0x279964(0x5cb)],this['_borderPortraitTargetX']=this[_0x279964(0x5cb)]*0x3/0x4);this[_0x279964(0x38f)][_0x279964(0x83f)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x279964(0x7f5)];const _0x3d1ef7=_0x2c4404['actor']();_0x3d1ef7&&(this[_0x279964(0x8ea)]+=_0x3d1ef7[_0x279964(0xa61)](),this[_0x279964(0x38f)]['y']+=_0x3d1ef7['getBattlePortraitOffsetY']());}}else _0x279964(0x6ac)===_0x279964(0x1a3)?_0x5f427c['_scene'][_0x279964(0x8bd)]():_0x48883a[_0x279964(0x54c)]();}}if(_0x120cb1&&_0x441282[_0x279964(0x3ad)]()['trim']()!==_0x279964(0x612)){if(_0x279964(0x9f9)===_0x279964(0x388)){if(this[_0x279964(0xb42)]!==_0x160e6f)return this['_svBattlerData'];return this[_0x279964(0x16c)](),this['_svBattlerData'];}else _0x1870dd[_0x279964(0x869)]([_0x441282]);}}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x2ba),_0x448167=>{const _0x420565=_0x8db8d6;if(!SceneManager[_0x420565(0x38c)]())return;VisuMZ[_0x420565(0xb24)](_0x448167,_0x448167);let _0xec9edf=_0x448167[_0x420565(0x130)];_0xec9edf--,_0xec9edf=Math[_0x420565(0x623)](_0xec9edf,0x0);const _0xa4fd9f=VisuMZ[_0x420565(0x566)](_0x448167[_0x420565(0x8f9)]);for(const _0x2ad9d6 of _0xa4fd9f){if('qxrak'!==_0x420565(0x33f)){if(!_0x2ad9d6)continue;if(!_0x2ad9d6['isActor']())continue;_0x2ad9d6['setActiveWeaponSlot'](_0xec9edf);}else _0x11095b['prototype'][_0x420565(0x471)][_0x420565(0x5fd)](this),this['requestMotion']('evade');}}),PluginManager[_0x8db8d6(0x537)](pluginData['name'],_0x8db8d6(0x5e3),_0x24599a=>{const _0x38759a=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x38759a(0xb24)](_0x24599a,_0x24599a);const _0x1d8b80=$gameTemp[_0x38759a(0x754)](),_0xd7c958=_0x24599a[_0x38759a(0x3c4)];if(!_0x1d8b80)return;$gameScreen[_0x38759a(0x708)](_0x24599a[_0x38759a(0x68d)],_0x24599a['Duration'],_0x24599a[_0x38759a(0x5da)]);if(_0xd7c958)_0x1d8b80['setWaitMode']('battleZoom');}),PluginManager[_0x8db8d6(0x537)](pluginData[_0x8db8d6(0x7fd)],_0x8db8d6(0x85e),_0x6dde10=>{const _0x55ba0c=_0x8db8d6;if(!SceneManager[_0x55ba0c(0x38c)]())return;if(!Imported[_0x55ba0c(0xaa5)])return;VisuMZ['ConvertParams'](_0x6dde10,_0x6dde10);const _0x21b2f5=$gameTemp[_0x55ba0c(0x754)](),_0x1aa398=_0x6dde10[_0x55ba0c(0x3c4)];if(!_0x21b2f5)return;$gameScreen[_0x55ba0c(0x708)](0x1,_0x6dde10[_0x55ba0c(0x20b)],_0x6dde10[_0x55ba0c(0x5da)]);if(_0x1aa398)_0x21b2f5[_0x55ba0c(0x4f2)]('battleZoom');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Zoom_WaitForZoom',_0x3bb524=>{const _0x2685d3=_0x8db8d6;if(!SceneManager[_0x2685d3(0x38c)]())return;if(!Imported[_0x2685d3(0xaa5)])return;const _0x3447b7=$gameTemp[_0x2685d3(0x754)]();if(!_0x3447b7)return;_0x3447b7[_0x2685d3(0x4f2)](_0x2685d3(0x5ff));}),VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xafd)]=Scene_Boot['prototype'][_0x8db8d6(0x990)],Scene_Boot[_0x8db8d6(0x6da)][_0x8db8d6(0x990)]=function(){const _0xad6b19=_0x8db8d6;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0xad6b19(0x463)](),this[_0xad6b19(0x229)](),this[_0xad6b19(0x406)](),VisuMZ['BattleCore'][_0xad6b19(0xafd)]['call'](this),this[_0xad6b19(0x562)](),this[_0xad6b19(0xa40)](),this[_0xad6b19(0x919)]();},Scene_Boot[_0x8db8d6(0x6da)][_0x8db8d6(0x562)]=function(){const _0x32c13a=_0x8db8d6;if(VisuMZ[_0x32c13a(0x233)])return;this[_0x32c13a(0x934)](),this[_0x32c13a(0x197)](),this[_0x32c13a(0x749)]();},Scene_Boot[_0x8db8d6(0x6da)][_0x8db8d6(0x185)]=function(){const _0x3a19ae=_0x8db8d6,_0x4e7670=$dataSystem[_0x3a19ae(0x106)][_0x3a19ae(0x5e0)];for(let _0x4a7a71=0x0;_0x4a7a71<_0x4e7670;_0x4a7a71++){const _0x14db90=$dataSystem[_0x3a19ae(0x610)][_0x4a7a71];if(_0x14db90)continue;$dataSystem[_0x3a19ae(0x610)][_0x4a7a71]=JsonEx['makeDeepCopy']($dataSystem['attackMotions'][0x0]);}},Scene_Boot['prototype'][_0x8db8d6(0x463)]=function(){const _0x394798=_0x8db8d6,_0x500e86=VisuMZ[_0x394798(0x602)]['Settings'];_0x500e86[_0x394798(0x409)]['PopupPosition']===undefined&&(_0x500e86[_0x394798(0x409)][_0x394798(0x634)]=_0x394798(0x918)),_0x500e86[_0x394798(0x73a)][_0x394798(0x7e1)]===undefined&&(_0x500e86[_0x394798(0x73a)][_0x394798(0x7e1)]=![]),_0x500e86['Enemy'][_0x394798(0x7e1)]===undefined&&(_0x500e86[_0x394798(0x8fe)][_0x394798(0x7e1)]=!![]),_0x500e86[_0x394798(0x73a)][_0x394798(0xa3b)]===undefined&&(_0x500e86[_0x394798(0x73a)][_0x394798(0xa3b)]=![]),_0x500e86[_0x394798(0x73a)][_0x394798(0x398)]===undefined&&(_0x394798(0x167)==='fsFob'?_0x107c02+=_0x39733d(_0x34dfae['$1']):_0x500e86[_0x394798(0x73a)][_0x394798(0x398)]=!![]);},VisuMZ[_0x8db8d6(0x75e)]={},Scene_Boot['prototype'][_0x8db8d6(0x229)]=function(){const _0x3922a6=_0x8db8d6;for(const _0x33a556 of VisuMZ['BattleCore'][_0x3922a6(0x466)][_0x3922a6(0x409)][_0x3922a6(0x696)]){if('HvriN'===_0x3922a6(0x4a6)){if(!_0x33a556)continue;const _0x2bae55=_0x33a556[_0x3922a6(0x256)][_0x3922a6(0x3ad)]()['trim']();VisuMZ[_0x3922a6(0x75e)][_0x2bae55]=_0x33a556;}else{const _0x636349=_0x578b3c[_0x3922a6(0x538)]();this[_0x3922a6(0x43e)]('performJump',[_0x35e823],_0x13e473,_0x2b91b7),this[_0x3922a6(0x43e)](_0x3922a6(0x216),_0x1de3b5,_0x636349['_homeX'],_0x636349[_0x3922a6(0x334)],_0x41edc9,![],'Linear'),this['push']('requestMotion',[_0x19b996],_0x3922a6(0x605)),this[_0x3922a6(0x43e)](_0x3922a6(0x200)),this[_0x3922a6(0x43e)](_0x3922a6(0xa1d),[_0x3982f4],_0x3922a6(0x8d2));}}},VisuMZ['BattleCore'][_0x8db8d6(0x812)]={},Scene_Boot[_0x8db8d6(0x6da)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x64fd99=_0x8db8d6,_0x2ab41c=VisuMZ[_0x64fd99(0x602)][_0x64fd99(0x812)],_0x47dac1=_0x64fd99(0xa47),_0x2d0cea=[[_0x64fd99(0xff),_0x64fd99(0x78e)],[_0x64fd99(0x145),_0x64fd99(0x103)]],_0x3991bf=[[_0x64fd99(0x99c),_0x64fd99(0xa9f)],[_0x64fd99(0x546),_0x64fd99(0x46f)]],_0x431a41=[['',''],['AsUser',_0x64fd99(0xaa4)],[_0x64fd99(0x402),_0x64fd99(0x40c)]];for(const _0x68ba98 of _0x3991bf){for(const _0x11db29 of _0x431a41){if(_0x64fd99(0x87d)!==_0x64fd99(0x87d)){this[_0x64fd99(0x358)][_0x64fd99(0xa8c)](_0x2103ad);if(_0x421356===this[_0x64fd99(0x7be)])return;const _0x4a630a=_0x29f0de['makeDeepCopy'](_0x1eb18e['currentAction']());this['_forcedBattlers'][_0x64fd99(0x43e)]([_0x1ef173,_0x4a630a]);}else for(const _0x151162 of _0x2d0cea){const _0x4cc68e=_0x68ba98[0x0]['format'](_0x151162[0x0],_0x11db29[0x0]),_0x34025a=_0x68ba98[0x1][_0x64fd99(0xad2)](_0x151162[0x1],_0x11db29[0x1])['trim'](),_0x50e81b=new RegExp(_0x47dac1[_0x64fd99(0xad2)](_0x34025a),'i');_0x2ab41c[_0x4cc68e]=_0x50e81b;}}}const _0x20fcde=[[_0x64fd99(0xb07),_0x64fd99(0x617)],[_0x64fd99(0x340),'JS\x20%1END\x20ACTION']];for(const _0x1cb8db of _0x20fcde){if(_0x64fd99(0x3ca)===_0x64fd99(0x3ca))for(const _0xca6ec1 of _0x2d0cea){if('XPJlI'==='dyfAh')this[_0x64fd99(0x5de)](_0x64fd99(0x3fe));else{const _0x37dbb2=_0x1cb8db[0x0][_0x64fd99(0xad2)](_0xca6ec1[0x0]),_0x561c8d=_0x1cb8db[0x1][_0x64fd99(0xad2)](_0xca6ec1[0x1]),_0x1a561f=new RegExp(_0x47dac1['format'](_0x561c8d),'i');_0x2ab41c[_0x37dbb2]=_0x1a561f;}}else _0x5b0947['BattleCore'][_0x64fd99(0x196)](_0x1a7e9e,_0x8a51dd);}const _0x565270=[[_0x64fd99(0x5d4),_0x64fd99(0xb40)],['%1EndBattleJS',_0x64fd99(0xa98)],[_0x64fd99(0x3e6),_0x64fd99(0x1bc)],[_0x64fd99(0x50c),_0x64fd99(0x8d3)],['EscapeSuccessJS','JS\x20ESCAPE\x20SUCCESS'],[_0x64fd99(0x480),'JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x64fd99(0x58e)],[_0x64fd99(0x3aa),_0x64fd99(0xa2f)],[_0x64fd99(0x83c),'JS\x20%1REGENERATE']];for(const _0x579950 of _0x565270){for(const _0x3c7d1f of _0x2d0cea){if('aErWm'!==_0x64fd99(0x57d)){if(_0x18b94f[_0x64fd99(0x3bc)]())return;if(!_0x29d3df)return;if(!_0x1d1016[_0x64fd99(0x222)]())return;_0x2da564[_0x64fd99(0x602)][_0x64fd99(0x7d7)][_0x64fd99(0x5fd)](this);}else{const _0x2c767b=_0x579950[0x0][_0x64fd99(0xad2)](_0x3c7d1f[0x0]),_0x28e1bd=_0x579950[0x1][_0x64fd99(0xad2)](_0x3c7d1f[0x1]),_0x891393=new RegExp(_0x47dac1[_0x64fd99(0xad2)](_0x28e1bd),'i');_0x2ab41c[_0x2c767b]=_0x891393;}}}},Scene_Boot[_0x8db8d6(0x6da)][_0x8db8d6(0x934)]=function(){const _0x8e4da3=_0x8db8d6,_0x20d28a=$dataSkills[_0x8e4da3(0x668)]($dataItems);for(const _0x5392ce of _0x20d28a){if(!_0x5392ce)continue;VisuMZ[_0x8e4da3(0x602)][_0x8e4da3(0x42f)](_0x5392ce);}},Scene_Boot[_0x8db8d6(0x6da)][_0x8db8d6(0x197)]=function(){const _0x4e5405=_0x8db8d6,_0x530079=$dataActors[_0x4e5405(0x668)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x267612 of _0x530079){if(!_0x267612)continue;VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x267612);}},Scene_Boot[_0x8db8d6(0x6da)][_0x8db8d6(0xa40)]=function(){const _0x1dfba3=_0x8db8d6,_0x538d6d=VisuMZ[_0x1dfba3(0x602)]['Settings'][_0x1dfba3(0x1e8)]['BaseTroopIDs'],_0x82f136=[];for(const _0x3917df of _0x538d6d){if(_0x1dfba3(0x5cc)===_0x1dfba3(0x5cc)){const _0x4ae52a=$dataTroops[_0x3917df];if(_0x4ae52a)_0x82f136[_0x1dfba3(0x43e)](JsonEx['makeDeepCopy'](_0x4ae52a));}else{if(!_0x12427d[_0x1dfba3(0x38c)]())return;_0x47a38f['ConvertParams'](_0x135698,_0x31deb6),_0x83a709[_0x1dfba3(0xa4a)]['setVisibleUI'](_0x4341a2['ShowHide']);}}for(const _0x2d694d of $dataTroops){if(_0x1dfba3(0x5b4)===_0x1dfba3(0x776))this[_0x1dfba3(0x43e)](_0x1dfba3(0xa81),_0x16f93a,_0x15bc2);else{if(!_0x2d694d)continue;for(const _0x29c6e8 of _0x82f136){if(_0x29c6e8['id']===_0x2d694d['id'])continue;_0x2d694d[_0x1dfba3(0x82f)]=_0x2d694d[_0x1dfba3(0x82f)][_0x1dfba3(0x668)](_0x29c6e8[_0x1dfba3(0x82f)]);}}}},Scene_Boot[_0x8db8d6(0x6da)]['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x64097d=_0x8db8d6,_0x28af9e=VisuMZ[_0x64097d(0x602)][_0x64097d(0x466)][_0x64097d(0x1e8)];if(_0x28af9e[_0x64097d(0xa66)]>0x0&&$dataCommonEvents[_0x28af9e['BattleStartEvent']]){if('Nwaau'!==_0x64097d(0x8de)){const _0x3c8b86=$dataCommonEvents[_0x28af9e[_0x64097d(0xa66)]],_0x4bf719=_0x3c8b86[_0x64097d(0x69b)][_0x64097d(0x5e0)]-0x2,_0x3eb0b2=_0x3c8b86[_0x64097d(0x69b)][_0x4bf719];if(_0x3eb0b2[_0x64097d(0x92c)]!==0xe6){const _0x446a94={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5911f0=_0x3c8b86['list'][_0x64097d(0x6f0)]();_0x3c8b86[_0x64097d(0x69b)][_0x64097d(0x4a1)](_0x446a94),_0x3c8b86[_0x64097d(0x69b)][_0x64097d(0x4a1)](_0x5911f0);}}else return _0x363a9e[_0x64097d(0x43e)](...this[_0x64097d(0x1bd)]()[_0x64097d(0x338)]()[_0x64097d(0x691)](_0x56a8a6=>_0x56a8a6!==this['subject']())),this[_0x64097d(0x15b)](_0xe4fa4f);}},Scene_Boot[_0x8db8d6(0x6da)][_0x8db8d6(0x749)]=function(){const _0x26e112=_0x8db8d6,_0x56bc79=$dataSkills['concat']($dataItems);for(const _0x51e27a of _0x56bc79){if(!_0x51e27a)continue;VisuMZ[_0x26e112(0x602)]['Parse_Notetags_Targets'](_0x51e27a);}},VisuMZ['BattleCore'][_0x8db8d6(0x34e)]=VisuMZ[_0x8db8d6(0x34e)],VisuMZ[_0x8db8d6(0x34e)]=function(_0x5c6f6a){const _0x12f048=_0x8db8d6;VisuMZ[_0x12f048(0x602)]['ParseActorNotetags']&&VisuMZ['BattleCore'][_0x12f048(0x34e)][_0x12f048(0x5fd)](this,_0x5c6f6a),VisuMZ[_0x12f048(0x602)][_0x12f048(0x7eb)](_0x5c6f6a);},VisuMZ['BattleCore'][_0x8db8d6(0xa09)]=VisuMZ[_0x8db8d6(0xa09)],VisuMZ[_0x8db8d6(0xa09)]=function(_0x2dfc2b){const _0xbc5931=_0x8db8d6;VisuMZ[_0xbc5931(0x602)][_0xbc5931(0xa09)]&&VisuMZ[_0xbc5931(0x602)][_0xbc5931(0xa09)]['call'](this,_0x2dfc2b),VisuMZ[_0xbc5931(0x602)][_0xbc5931(0x7eb)](_0x2dfc2b);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x4db)]=VisuMZ['ParseSkillNotetags'],VisuMZ[_0x8db8d6(0x4db)]=function(_0x584755){const _0xfc786=_0x8db8d6;VisuMZ[_0xfc786(0x602)]['ParseSkillNotetags']&&VisuMZ['BattleCore'][_0xfc786(0x4db)]['call'](this,_0x584755),VisuMZ[_0xfc786(0x602)]['Parse_Notetags_Action'](_0x584755),VisuMZ['BattleCore'][_0xfc786(0x96b)](_0x584755);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x487)]=VisuMZ[_0x8db8d6(0x487)],VisuMZ[_0x8db8d6(0x487)]=function(_0x16d9da){const _0x485b95=_0x8db8d6;if(VisuMZ[_0x485b95(0x602)][_0x485b95(0x487)]){if(_0x485b95(0x6e0)!==_0x485b95(0x900))VisuMZ[_0x485b95(0x602)][_0x485b95(0x487)][_0x485b95(0x5fd)](this,_0x16d9da);else{const _0x2e4cda=_0xdf0261[_0x485b95(0x367)]()?_0x53f616[_0x485b95(0x7f3)]:_0xa64c1c[_0x485b95(0x160)];_0x2e4cda&&_0x35ce49[_0x485b95(0x602)]['Settings'][_0x485b95(0x817)]['ShowAddedState']&&(this[_0x485b95(0x43e)](_0x485b95(0xa83)),this[_0x485b95(0x43e)](_0x485b95(0x16d)),this[_0x485b95(0x43e)](_0x485b95(0x1d0),_0x2e4cda[_0x485b95(0xad2)](_0x4c190e[_0x485b95(0x7fd)]())),this['push'](_0x485b95(0x66d))),_0x10c62e['id']===_0x5b009f['deathStateId']()&&this[_0x485b95(0x43e)](_0x485b95(0x79f),_0x55bff3);}}VisuMZ['BattleCore'][_0x485b95(0x42f)](_0x16d9da),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x16d9da);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xae9)]=VisuMZ[_0x8db8d6(0xae9)],VisuMZ[_0x8db8d6(0xae9)]=function(_0x5b357a){const _0x35a37f=_0x8db8d6;VisuMZ[_0x35a37f(0x602)][_0x35a37f(0xae9)]&&VisuMZ[_0x35a37f(0x602)][_0x35a37f(0xae9)][_0x35a37f(0x5fd)](this,_0x5b357a),VisuMZ[_0x35a37f(0x602)][_0x35a37f(0x7eb)](_0x5b357a);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x8b4)]=VisuMZ[_0x8db8d6(0x8b4)],VisuMZ[_0x8db8d6(0x8b4)]=function(_0x17fb04){const _0x570869=_0x8db8d6;VisuMZ['BattleCore'][_0x570869(0x8b4)]&&VisuMZ[_0x570869(0x602)]['ParseArmorNotetags'][_0x570869(0x5fd)](this,_0x17fb04),VisuMZ[_0x570869(0x602)][_0x570869(0x7eb)](_0x17fb04);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x29a)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x8db8d6(0x29a)]=function(_0x59148a){const _0x531031=_0x8db8d6;if(VisuMZ['BattleCore']['ParseEnemyNotetags']){if(_0x531031(0x241)!=='UIdeK'){if(this[_0x531031(0x491)])return this[_0x531031(0x491)];return this[_0x531031(0x491)]=_0x21d18d['_scene'][_0x531031(0x830)](),this[_0x531031(0x491)];}else VisuMZ[_0x531031(0x602)][_0x531031(0x29a)][_0x531031(0x5fd)](this,_0x59148a);}VisuMZ[_0x531031(0x602)][_0x531031(0x7eb)](_0x59148a);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x333)]=VisuMZ['ParseStateNotetags'],VisuMZ['ParseStateNotetags']=function(_0xf22a12){const _0x8e187c=_0x8db8d6;if(VisuMZ[_0x8e187c(0x602)][_0x8e187c(0x333)]){if(_0x8e187c(0x8df)!==_0x8e187c(0x8df)){if(!_0x3d366b[_0x8e187c(0x6b5)]()&&this[_0x8e187c(0x5f5)]===_0x22f43d){const _0x2f4e70=_0x4c9089[_0x8e187c(0x6da)][_0x8e187c(0x830)]();['default',_0x8e187c(0x69b),'portrait',_0x8e187c(0x816)][_0x8e187c(0xa5c)](_0x2f4e70)&&(this[_0x8e187c(0x83f)]=0x0);}}else VisuMZ[_0x8e187c(0x602)][_0x8e187c(0x333)][_0x8e187c(0x5fd)](this,_0xf22a12);}VisuMZ[_0x8e187c(0x602)][_0x8e187c(0x7eb)](_0xf22a12);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x42f)]=function(_0x42f4cd){const _0x1d15f8=_0x8db8d6,_0x4347aa=[_0x1d15f8(0x4bd),_0x1d15f8(0x9d5),_0x1d15f8(0x584),_0x1d15f8(0x49d),'PreStartActionJS',_0x1d15f8(0x4f5),_0x1d15f8(0x2df),'PostEndActionJS'];for(const _0x4b668f of _0x4347aa){VisuMZ[_0x1d15f8(0x602)][_0x1d15f8(0x196)](_0x42f4cd,_0x4b668f);}const _0x2b0166=_0x42f4cd['note'];_0x2b0166[_0x1d15f8(0x3ed)](/<ALWAYS CRITICAL/i)&&(_0x42f4cd['damage']['critical']=!![]),_0x2b0166[_0x1d15f8(0x3ed)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x42f4cd[_0x1d15f8(0x8c0)]=Math[_0x1d15f8(0x623)](0x1,Number(RegExp['$1']))),_0x2b0166[_0x1d15f8(0x3ed)](/<TARGET:[ ](.*)>/i)&&('XIJDe'!==_0x1d15f8(0x544)?_0x42f4cd[_0x1d15f8(0xab2)]=String(RegExp['$1'])['toUpperCase']()[_0x1d15f8(0xa51)]():this['startMotion']('walk'));},VisuMZ['BattleCore'][_0x8db8d6(0x7eb)]=function(_0x43e202){const _0x263fbd=_0x8db8d6,_0x4fe08a=[_0x263fbd(0x540),'PostApplyAsUserJS','PreDamageAsUserJS',_0x263fbd(0x78a),_0x263fbd(0x1df),_0x263fbd(0x726),_0x263fbd(0x407),_0x263fbd(0x7f9),_0x263fbd(0x7da),_0x263fbd(0x4f5),_0x263fbd(0x2df),_0x263fbd(0x5e2),'PreStartBattleJS',_0x263fbd(0x6c9),_0x263fbd(0x940),'PostEndBattleJS',_0x263fbd(0x3e6),_0x263fbd(0x50c),_0x263fbd(0x4d2),_0x263fbd(0x480),'PreStartTurnJS','PostStartTurnJS',_0x263fbd(0xa8d),'PostEndTurnJS',_0x263fbd(0x6e8),_0x263fbd(0x9bd)];for(const _0x40bfcc of _0x4fe08a){_0x263fbd(0x22c)!==_0x263fbd(0x22c)?_0x444ae5=_0x263fbd(0x174):VisuMZ['BattleCore'][_0x263fbd(0x196)](_0x43e202,_0x40bfcc);}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x96b)]=function(_0x1e7b21){const _0xd4747d=_0x8db8d6,_0x15082f=_0x1e7b21[_0xd4747d(0x44e)];if(_0x15082f['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x1702fd=String(RegExp['$1']),_0x4f1273=VisuMZ[_0xd4747d(0x602)][_0xd4747d(0x7c1)](_0x1e7b21,_0xd4747d(0x8f9));VisuMZ[_0xd4747d(0x602)][_0xd4747d(0x531)](_0x1702fd,_0x4f1273);}if(_0x15082f['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x2c510a=String(RegExp['$1']),_0x2b0a16=VisuMZ['BattleCore'][_0xd4747d(0x7c1)](_0x1e7b21,_0xd4747d(0x74d));VisuMZ['BattleCore'][_0xd4747d(0x524)](_0x2c510a,_0x2b0a16);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x196)]=function(_0x265505,_0x54c4eb){const _0x453f4a=_0x8db8d6,_0x24cece=_0x265505[_0x453f4a(0x44e)];if(_0x24cece[_0x453f4a(0x3ed)](VisuMZ[_0x453f4a(0x602)][_0x453f4a(0x812)][_0x54c4eb])){const _0x3d7d4d=RegExp['$1'],_0x1c332c=_0x453f4a(0xadc)[_0x453f4a(0xad2)](_0x3d7d4d),_0x389d25=VisuMZ['BattleCore'][_0x453f4a(0x7c1)](_0x265505,_0x54c4eb);VisuMZ[_0x453f4a(0x602)]['JS'][_0x389d25]=new Function(_0x1c332c);}},VisuMZ['BattleCore']['createKeyJS']=function(_0x3d2614,_0x443261){const _0x1402d6=_0x8db8d6;let _0x40418b='';if($dataActors[_0x1402d6(0xa5c)](_0x3d2614))_0x40418b=_0x1402d6(0x9d0)['format'](_0x3d2614['id'],_0x443261);if($dataClasses[_0x1402d6(0xa5c)](_0x3d2614))_0x40418b=_0x1402d6(0x98f)[_0x1402d6(0xad2)](_0x3d2614['id'],_0x443261);if($dataSkills[_0x1402d6(0xa5c)](_0x3d2614))_0x40418b=_0x1402d6(0x80f)[_0x1402d6(0xad2)](_0x3d2614['id'],_0x443261);if($dataItems[_0x1402d6(0xa5c)](_0x3d2614))_0x40418b=_0x1402d6(0xac1)[_0x1402d6(0xad2)](_0x3d2614['id'],_0x443261);if($dataWeapons['includes'](_0x3d2614))_0x40418b='Weapon-%1-%2'['format'](_0x3d2614['id'],_0x443261);if($dataArmors['includes'](_0x3d2614))_0x40418b=_0x1402d6(0x7e9)[_0x1402d6(0xad2)](_0x3d2614['id'],_0x443261);if($dataEnemies[_0x1402d6(0xa5c)](_0x3d2614))_0x40418b=_0x1402d6(0xac4)['format'](_0x3d2614['id'],_0x443261);if($dataStates[_0x1402d6(0xa5c)](_0x3d2614))_0x40418b=_0x1402d6(0x3a8)[_0x1402d6(0xad2)](_0x3d2614['id'],_0x443261);return _0x40418b;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x531)]=function(_0x1de7e2,_0x491f7f){const _0x85e9c3=_0x8db8d6,_0x22fb43=_0x85e9c3(0x56e)['format'](_0x1de7e2);VisuMZ[_0x85e9c3(0x602)]['JS'][_0x491f7f]=new Function(_0x22fb43);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x524)]=function(_0x259b64,_0x28a59d){const _0xde514b=_0x8db8d6,_0x49c926=_0xde514b(0xac5)[_0xde514b(0xad2)](_0x259b64);VisuMZ['BattleCore']['JS'][_0x28a59d]=new Function(_0x49c926);},TextManager[_0x8db8d6(0x734)]=VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x466)]['PartyCmd'][_0x8db8d6(0x777)],TextManager[_0x8db8d6(0x6e6)]=VisuMZ['BattleCore'][_0x8db8d6(0x466)][_0x8db8d6(0x91f)]['StartName'],TextManager[_0x8db8d6(0x290)]=VisuMZ[_0x8db8d6(0x602)]['Settings'][_0x8db8d6(0x91f)]['StyleName'],TextManager[_0x8db8d6(0x403)]=VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x466)][_0x8db8d6(0x5d8)][_0x8db8d6(0x256)],ColorManager['getColor']=function(_0x3c7515){const _0x31a290=_0x8db8d6;return _0x3c7515=String(_0x3c7515),_0x3c7515[_0x31a290(0x3ed)](/#(.*)/i)?_0x31a290(0x45b)[_0x31a290(0xad2)](String(RegExp['$1'])):this[_0x31a290(0x858)](Number(_0x3c7515));},DataManager[_0x8db8d6(0x433)]=function(_0x30dd57){const _0x1cd224=_0x8db8d6;if(_0x30dd57['note'][_0x1cd224(0x3ed)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x3fbb29=String(RegExp['$1'])[_0x1cd224(0x3ad)]()[_0x1cd224(0xa51)]();if(_0x3fbb29===_0x1cd224(0x893))return _0x1cd224(0x893);if(VisuMZ[_0x1cd224(0x75e)][_0x3fbb29])return _0x3fbb29;}const _0x56b1b9=VisuMZ[_0x1cd224(0x602)][_0x1cd224(0x466)][_0x1cd224(0x409)][_0x1cd224(0x9d4)][_0x1cd224(0x3ad)]()[_0x1cd224(0xa51)]();if(VisuMZ['DamageStyles'][_0x56b1b9])return _0x56b1b9;return _0x1cd224(0x893);},DataManager['getStypeIdWithName']=function(_0x39090f){const _0x9b1f6a=_0x8db8d6;_0x39090f=_0x39090f[_0x9b1f6a(0x3ad)]()[_0x9b1f6a(0xa51)](),this[_0x9b1f6a(0x910)]=this[_0x9b1f6a(0x910)]||{};if(this[_0x9b1f6a(0x910)][_0x39090f])return this[_0x9b1f6a(0x910)][_0x39090f];for(let _0x23a399=0x1;_0x23a399<0x64;_0x23a399++){if(_0x9b1f6a(0x21e)!==_0x9b1f6a(0x39c)){if(!$dataSystem[_0x9b1f6a(0x71f)][_0x23a399])continue;let _0x2d1c77=$dataSystem[_0x9b1f6a(0x71f)][_0x23a399][_0x9b1f6a(0x3ad)]()[_0x9b1f6a(0xa51)]();_0x2d1c77=_0x2d1c77['replace'](/\x1I\[(\d+)\]/gi,''),_0x2d1c77=_0x2d1c77['replace'](/\\I\[(\d+)\]/gi,''),this[_0x9b1f6a(0x910)][_0x2d1c77]=_0x23a399;}else _0x18e1d9[_0x9b1f6a(0x26a)]=!![];}return this['_stypeIDs'][_0x39090f]||0x0;},DataManager['getSkillIdWithName']=function(_0xee22a8){const _0x5c66cf=_0x8db8d6;_0xee22a8=_0xee22a8[_0x5c66cf(0x3ad)]()['trim'](),this['_skillIDs']=this[_0x5c66cf(0x76d)]||{};if(this[_0x5c66cf(0x76d)][_0xee22a8])return this[_0x5c66cf(0x76d)][_0xee22a8];for(const _0x63946a of $dataSkills){if('oQCWE'===_0x5c66cf(0x4d5))this[_0x5c66cf(0x4c1)][_0x5c66cf(0x60e)]();else{if(!_0x63946a)continue;this['_skillIDs'][_0x63946a[_0x5c66cf(0x7fd)][_0x5c66cf(0x3ad)]()[_0x5c66cf(0xa51)]()]=_0x63946a['id'];}}return this[_0x5c66cf(0x76d)][_0xee22a8]||0x0;},DataManager[_0x8db8d6(0x473)]=function(_0x24d4b1){const _0xd2a193=_0x8db8d6;_0x24d4b1=_0x24d4b1['toUpperCase']()[_0xd2a193(0xa51)](),this[_0xd2a193(0x12e)]=this[_0xd2a193(0x12e)]||{};if(this['_enemyIDs'][_0x24d4b1])return this[_0xd2a193(0x12e)][_0x24d4b1];for(const _0x3f56eb of $dataEnemies){if(_0xd2a193(0x608)!==_0xd2a193(0x608)){if(!_0x495060[_0xd2a193(0x602)]['Settings']['Actor'][_0xd2a193(0xa3b)])return;const _0x86021c=_0x1c7b8d[_0xd2a193(0x7be)];if(_0x86021c){if(_0x86021c[_0xd2a193(0x367)]()&&!_0x125687['isSideView']())return;const _0x4c2c0c=_0x86021c[_0xd2a193(0x538)]();if(_0x4c2c0c&&_0x86021c[_0xd2a193(0x367)]())this[_0xd2a193(0x7d3)][_0xd2a193(0x9b0)](_0x4c2c0c);}}else{if(!_0x3f56eb)continue;this[_0xd2a193(0x12e)][_0x3f56eb['name'][_0xd2a193(0x3ad)]()['trim']()]=_0x3f56eb['id'];}}return this[_0xd2a193(0x12e)][_0x24d4b1]||0x0;},DataManager['getWtypeIdWithName']=function(_0x39b11e){const _0x45d99d=_0x8db8d6;_0x39b11e=_0x39b11e[_0x45d99d(0x3ad)]()[_0x45d99d(0xa51)](),this[_0x45d99d(0x22e)]=this['_wtypeIDs']||{};if(this['_wtypeIDs'][_0x39b11e])return this['_wtypeIDs'][_0x39b11e];for(let _0x46bf13=0x1;_0x46bf13<0x64;_0x46bf13++){if(!$dataSystem[_0x45d99d(0x106)][_0x46bf13])continue;let _0x2a7e7a=$dataSystem[_0x45d99d(0x106)][_0x46bf13]['toUpperCase']()['trim']();_0x2a7e7a=_0x2a7e7a[_0x45d99d(0x929)](/\x1I\[(\d+)\]/gi,''),_0x2a7e7a=_0x2a7e7a[_0x45d99d(0x929)](/\\I\[(\d+)\]/gi,''),this[_0x45d99d(0x22e)][_0x2a7e7a]=_0x46bf13;}return this[_0x45d99d(0x22e)]['BARE\x20HANDS']=0x0,this['_wtypeIDs'][_0x39b11e]||0x0;},DataManager[_0x8db8d6(0x380)]=function(_0x5c57ed){const _0x29f509=_0x8db8d6,_0x6728c=_0x29f509(0x539);let _0x6f8e83=_0x5c57ed[_0x29f509(0x3a1)],_0x5a7368=_0x5c57ed[_0x29f509(0x7fd)];const _0x22bd5d=_0x5c57ed[_0x29f509(0x44e)];return _0x22bd5d['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x6f8e83=Number(RegExp['$1'])),_0x22bd5d['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x5a7368=String(RegExp['$1'])),_0x6728c[_0x29f509(0xad2)](_0x6f8e83,_0x5a7368);},DataManager[_0x8db8d6(0x3f6)]=function(_0x194ad2){const _0xa212af=_0x8db8d6;if(_0x194ad2[_0xa212af(0x44e)][_0xa212af(0x3ed)](/<COMMAND TEXT: (.*)>/i)){if(_0xa212af(0x4ea)!==_0xa212af(0x4ea))_0x1892e3[_0xa212af(0x22f)]=_0x168496[_0xa212af(0x58b)](_0x5a1ed6['$1']);else return String(RegExp['$1']);}else return _0x194ad2[_0xa212af(0x7fd)];},DataManager[_0x8db8d6(0xae8)]=function(_0x13330a){const _0x5692ba=_0x8db8d6;if(_0x13330a[_0x5692ba(0x44e)][_0x5692ba(0x3ed)](/<COMMAND ICON: (\d+)>/i))return Number(RegExp['$1']);else{if('tucSz'!==_0x5692ba(0x50e))return _0x13330a[_0x5692ba(0x3a1)];else _0x21fe10['BattleCore']['Scene_Battle_startEnemySelection'][_0x5692ba(0x5fd)](this),this[_0x5692ba(0x6eb)][_0x5692ba(0x966)](),this[_0x5692ba(0x58f)]();}},DataManager[_0x8db8d6(0x835)]=function(_0x3f2eb6){const _0x370f37=_0x8db8d6,_0x36d031=$dataEnemies[_0x3f2eb6];if(_0x36d031){if(_0x36d031['note'][_0x370f37(0x3ed)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x370f37(0x8c6)!==_0x370f37(0x8c6)){_0x12f2d9=_0x20e8da[_0x370f37(0x602)]['JS'][_0x124a3e]['call'](this,this[_0x370f37(0x4b1)](),_0x5a176d,_0xa4ea41,_0x41964a);if(_0xdbdf6f)_0xc22b2c=_0x4aeba5;}else{const _0x128fe8=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x370f37(0xa8c)](''),_0x487157=this['processRandomizedData'](_0x128fe8);_0x3f2eb6=this[_0x370f37(0x473)](_0x487157)||_0x3f2eb6,_0x3f2eb6=DataManager['swapEnemyIDs'](_0x3f2eb6);}}}return _0x3f2eb6;},DataManager['processRandomizedData']=function(_0x24bb00){const _0x1a51cd=_0x8db8d6;let _0x53fcf3=0x0;const _0x235395={};for(const _0x4fe40b of _0x24bb00){if(_0x4fe40b[_0x1a51cd(0x3ed)](/(.*):[ ](\d+)/i)){const _0x50a89e=String(RegExp['$1'])['trim'](),_0x1d4425=Number(RegExp['$2']);_0x235395[_0x50a89e]=_0x1d4425,_0x53fcf3+=_0x1d4425;}else{if(_0x4fe40b['match'](/(.*):[ ](\d+\.?\d+)/i)){if(_0x1a51cd(0x3a2)===_0x1a51cd(0x512))_0x1d3641['BattleCore']['Sprite_Actor_updateShadow'][_0x1a51cd(0x5fd)](this),this[_0x1a51cd(0x567)]();else{const _0x2d1d17=String(RegExp['$1'])[_0x1a51cd(0xa51)](),_0x5a8892=Number(RegExp['$2']);_0x235395[_0x2d1d17]=_0x5a8892,_0x53fcf3+=_0x5a8892;}}else _0x4fe40b!==''&&(_0x235395[_0x4fe40b]=0x1,_0x53fcf3++);}}if(_0x53fcf3<=0x0)return'';let _0x2a7993=Math[_0x1a51cd(0x11c)]()*_0x53fcf3;for(const _0x2988ed in _0x235395){_0x2a7993-=_0x235395[_0x2988ed];if(_0x2a7993<=0x0)return _0x2988ed;}return'';},DataManager[_0x8db8d6(0x65a)]=function(_0x11d925){const _0x1074db=_0x8db8d6;if(!_0x11d925)return![];if(!VisuMZ['BattleCore'][_0x1074db(0x466)][_0x1074db(0x965)][_0x1074db(0x9ed)])return![];if(_0x11d925[_0x1074db(0x44e)][_0x1074db(0x3ed)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x11d925[_0x1074db(0x44e)][_0x1074db(0x3ed)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x3977fa of _0x11d925['effects']){if(!_0x3977fa)continue;if(_0x3977fa[_0x1074db(0x92c)]===Game_Action[_0x1074db(0x371)])return!![];}return![];},DataManager[_0x8db8d6(0x49b)]=function(_0x13c553){const _0x477374=_0x8db8d6,_0x2ff254=$dataTroops[_0x13c553];if(!_0x2ff254)return'';let _0x580716='';_0x580716+=_0x2ff254[_0x477374(0x7fd)];for(const _0xd38760 of _0x2ff254[_0x477374(0x82f)]){if(_0x477374(0x536)!==_0x477374(0x43b))for(const _0x129774 of _0xd38760['list']){_0x477374(0x248)!==_0x477374(0x248)?_0x7a2df8['stepForward']():[0x6c,0x198][_0x477374(0xa5c)](_0x129774[_0x477374(0x92c)])&&(_0x477374(0x783)===_0x477374(0xafc)?(this[_0x477374(0xae5)](_0x477374(0xa4f),_0x1b385d,0x0,!![]),_0x9b3b4c['BattleCore'][_0x477374(0x3c1)]['call'](this,_0x45802b),this[_0x477374(0xae5)](_0x477374(0x8ff),_0x39f074,this[_0x477374(0x8e5)]||0x0,!![]),this[_0x477374(0x4da)](_0x5d11fd)):(_0x580716+='\x0a',_0x580716+=_0x129774[_0x477374(0x5a4)][0x0]));}else this[_0x477374(0xfc)]();}return _0x580716;},ConfigManager[_0x8db8d6(0xb27)]=ConfigManager[_0x8db8d6(0xb27)]??![],ConfigManager[_0x8db8d6(0x1c7)]=ConfigManager[_0x8db8d6(0x1c7)]??![],ConfigManager[_0x8db8d6(0x403)]=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x139)]=ConfigManager[_0x8db8d6(0x5af)],ConfigManager['makeData']=function(){const _0x58d585=_0x8db8d6,_0x4ab0af=VisuMZ[_0x58d585(0x602)]['ConfigManager_makeData'][_0x58d585(0x5fd)](this);return _0x4ab0af['autoBattleAtStart']=this[_0x58d585(0xb27)],_0x4ab0af[_0x58d585(0x1c7)]=this['autoBattleUseSkills'],_0x4ab0af[_0x58d585(0x403)]=this[_0x58d585(0x403)],_0x4ab0af;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x9ec)]=ConfigManager['applyData'],ConfigManager[_0x8db8d6(0x105)]=function(_0x2004ed){const _0x14faed=_0x8db8d6;VisuMZ[_0x14faed(0x602)][_0x14faed(0x9ec)]['call'](this,_0x2004ed);_0x14faed(0xb27)in _0x2004ed?this[_0x14faed(0xb27)]=_0x2004ed[_0x14faed(0xb27)]:this[_0x14faed(0xb27)]=![];if(_0x14faed(0x1c7)in _0x2004ed)this[_0x14faed(0x1c7)]=_0x2004ed[_0x14faed(0x1c7)];else{if(_0x14faed(0x5ea)!==_0x14faed(0x5ea)){if(this['isTpb']())this[_0x14faed(0x884)]=_0x14faed(0xae0);else this[_0x14faed(0x9da)][_0x14faed(0x5e0)]>0x0?this[_0x14faed(0x884)]=_0x14faed(0xae0):this[_0x14faed(0x53f)]();}else this[_0x14faed(0x1c7)]=![];}if('visualHpGauge'in _0x2004ed){if(_0x14faed(0x2b6)===_0x14faed(0x2b6))this['visualHpGauge']=_0x2004ed[_0x14faed(0x403)];else{_0x132692=_0x2c74d9||'',_0x704ad7=_0x206888||'';_0xc3001e===''&&_0x321677===''&&(_0x177a33=this[_0x14faed(0x78f)][_0x14faed(0x271)](),_0x58dc3b=this['_back2Sprite']['battleback2Name']());const _0x5078c2=_0x1637b9['loadBattleback1'](_0x14c9e5),_0x4f0e23=_0x5d770c[_0x14faed(0x3c9)](_0x6a33c9);_0x5078c2[_0x14faed(0x851)](this[_0x14faed(0xa19)][_0x14faed(0x998)](this,this[_0x14faed(0x78f)],this[_0x14faed(0x86d)],_0x5078c2,_0x4f0e23));}}else this[_0x14faed(0x403)]=!![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x9db)]=BattleManager[_0x8db8d6(0x13d)],BattleManager[_0x8db8d6(0x13d)]=function(){const _0x561766=_0x8db8d6;VisuMZ[_0x561766(0x602)][_0x561766(0x9db)][_0x561766(0x5fd)](this),this[_0x561766(0x9da)]=[];},BattleManager[_0x8db8d6(0x4aa)]=function(){const _0x2a831f=_0x8db8d6;if(!SceneManager[_0x2a831f(0x38c)]())return;const _0x2f50ea=SceneManager[_0x2a831f(0xa4a)][_0x2a831f(0x98e)];if(_0x2f50ea)_0x2f50ea[_0x2a831f(0x85d)]();},BattleManager[_0x8db8d6(0x250)]=function(){const _0x36f90f=_0x8db8d6;if(BattleManager[_0x36f90f(0x2f8)]())return _0x36f90f(0x9df);return'DTB';},BattleManager[_0x8db8d6(0x575)]=function(_0x115c64){const _0x360806=_0x8db8d6;return _0x115c64=_0x115c64[_0x360806(0x3ad)]()['trim'](),this[_0x360806(0x250)]()===_0x115c64;},BattleManager[_0x8db8d6(0x5ad)]=function(){const _0x5eccad=_0x8db8d6;return this[_0x5eccad(0x575)]('DTB');},BattleManager[_0x8db8d6(0x89b)]=function(){return this['isDTB']();},BattleManager[_0x8db8d6(0x55c)]=function(){const _0x4b2257=_0x8db8d6;return!this[_0x4b2257(0x89b)]();},BattleManager[_0x8db8d6(0x9a5)]=function(){const _0x20bbac=_0x8db8d6;return!this[_0x20bbac(0x89b)]()&&!this[_0x20bbac(0x55c)]();},BattleManager[_0x8db8d6(0x393)]=function(_0xd80504){const _0x14b085=_0x8db8d6;$gameParty[_0x14b085(0x393)](_0xd80504),$gameTroop['processBattleCoreJS'](_0xd80504);},VisuMZ[_0x8db8d6(0x602)]['BattleManager_startBattle']=BattleManager['startBattle'],BattleManager[_0x8db8d6(0x681)]=function(){const _0x277b86=_0x8db8d6;this[_0x277b86(0x6ce)]=![],this[_0x277b86(0x4e0)]=ConfigManager['autoBattleAtStart'],this['processBattleCoreJS'](_0x277b86(0x9e1)),VisuMZ['BattleCore']['BattleManager_startBattle'][_0x277b86(0x5fd)](this),this[_0x277b86(0x393)](_0x277b86(0x6c9));},BattleManager['processPostBattleCommonEvents']=function(_0x1e010d){const _0x21e918=_0x8db8d6,_0x1b33c6=VisuMZ[_0x21e918(0x602)][_0x21e918(0x466)][_0x21e918(0x1e8)];_0x1b33c6['BattleEndEvent']&&VisuMZ[_0x21e918(0x602)]['CheckMapBattleEventValid'](_0x1b33c6[_0x21e918(0x88a)])&&(_0x21e918(0x5e4)!==_0x21e918(0x391)?$gameTemp[_0x21e918(0x2a3)](_0x1b33c6[_0x21e918(0x88a)]):this[_0x21e918(0x327)]=null);const _0x20986e=_0x21e918(0x683)[_0x21e918(0xad2)](_0x1e010d);_0x1b33c6[_0x20986e]&&VisuMZ[_0x21e918(0x602)][_0x21e918(0x9c0)](_0x1b33c6[_0x20986e])&&$gameTemp[_0x21e918(0x2a3)](_0x1b33c6[_0x20986e]);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x9bf)]=BattleManager[_0x8db8d6(0x834)],BattleManager['processVictory']=function(){const _0x5ddc5c=_0x8db8d6;this[_0x5ddc5c(0x393)](_0x5ddc5c(0x3e6)),VisuMZ[_0x5ddc5c(0x602)][_0x5ddc5c(0x9bf)]['call'](this),this[_0x5ddc5c(0x335)](_0x5ddc5c(0x465));},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x113)]=BattleManager[_0x8db8d6(0x234)],BattleManager[_0x8db8d6(0x234)]=function(){const _0x13ef47=_0x8db8d6;this[_0x13ef47(0x393)]('BattleDefeatJS'),VisuMZ[_0x13ef47(0x602)][_0x13ef47(0x113)][_0x13ef47(0x5fd)](this),this[_0x13ef47(0x335)](_0x13ef47(0x95b));},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1e2)]=BattleManager[_0x8db8d6(0x7f2)],BattleManager[_0x8db8d6(0x7f2)]=function(_0x3fdb05){const _0xd857d9=_0x8db8d6;this[_0xd857d9(0x6ce)]=!![],this['_autoBattle']=![],this[_0xd857d9(0x393)](_0xd857d9(0x940)),VisuMZ[_0xd857d9(0x602)]['BattleManager_endBattle'][_0xd857d9(0x5fd)](this,_0x3fdb05),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ['BattleCore']['BattleManager_startTurn']=BattleManager[_0x8db8d6(0x350)],BattleManager[_0x8db8d6(0x350)]=function(){const _0x1d7977=_0x8db8d6;if(this[_0x1d7977(0x89b)]())this[_0x1d7977(0x393)](_0x1d7977(0x39e));VisuMZ['BattleCore']['BattleManager_startTurn']['call'](this);if(this['isTurnBased']())this[_0x1d7977(0x393)](_0x1d7977(0xaf3));},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x815)]=BattleManager[_0x8db8d6(0x8bf)],BattleManager[_0x8db8d6(0x8bf)]=function(){const _0xe306b3=_0x8db8d6,_0x22b9e1=this['_subject'][_0xe306b3(0x7bc)]();if(_0x22b9e1)_0x22b9e1[_0xe306b3(0x5eb)](_0xe306b3(0x7da));VisuMZ['BattleCore'][_0xe306b3(0x815)]['call'](this);if(_0x22b9e1)_0x22b9e1[_0xe306b3(0x5eb)](_0xe306b3(0x4f5));},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x59f)]=BattleManager[_0x8db8d6(0x86e)],BattleManager[_0x8db8d6(0x86e)]=function(){const _0x4f0c43=_0x8db8d6,_0x1f72d4=this[_0x4f0c43(0x64d)];if(_0x1f72d4){if(_0x4f0c43(0x600)==='ZHRjP'){if(_0x27bcce[_0x4f0c43(0x4e0)])return![];return _0x2a1154[_0x4f0c43(0x602)][_0x4f0c43(0x466)][_0x4f0c43(0x8fe)][_0x4f0c43(0x420)];}else _0x1f72d4['actionBattleCoreJS']('PreEndActionJS');}VisuMZ[_0x4f0c43(0x602)][_0x4f0c43(0x59f)][_0x4f0c43(0x5fd)](this);if(_0x1f72d4){if(_0x4f0c43(0x356)!==_0x4f0c43(0x927))_0x1f72d4[_0x4f0c43(0x5eb)](_0x4f0c43(0x5e2));else{const _0x371d85=new _0x3765e0();_0x371d85['bitmap']=_0xdf1a74[_0x4f0c43(0x8c4)](_0x2b8d81['StatusWindowAttachmentBack']),_0x371d85['x']=_0x471681[_0x4f0c43(0x786)]||0x0,_0x371d85['y']=_0x106b05[_0x4f0c43(0x742)]||0x0,this[_0x4f0c43(0x8f0)](_0x371d85),this[_0x4f0c43(0x6b1)]=_0x371d85;}}this['refreshBattlerMotions'](this[_0x4f0c43(0x412)]());},BattleManager[_0x8db8d6(0x7fa)]=function(_0x19b771){const _0x137b9d=_0x8db8d6;for(const _0x5c3243 of _0x19b771){if(_0x137b9d(0x4dc)==='uKMGj')return _0x137b9d(0xa95);else{if(!_0x5c3243)continue;if(!_0x5c3243[_0x137b9d(0x538)]())continue;_0x5c3243['battler']()[_0x137b9d(0x845)]();}}},BattleManager[_0x8db8d6(0x8f4)]=function(){const _0x53bff9=_0x8db8d6;!this[_0x53bff9(0x307)]['isBusy']()&&this[_0x53bff9(0x86e)]();},Game_Battler['prototype'][_0x8db8d6(0x939)]=function(){const _0x249244=_0x8db8d6;this['clearResult']();if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0x249244(0x104)==='RTAyw'){const _0x5e37eb=VisuMZ[_0x249244(0xb04)]['Settings'][_0x249244(0x7c5)];_0x5e37eb&&_0x5e37eb[_0x249244(0x31c)]===![]&&('zBtnk'===_0x249244(0x680)?(this[_0x249244(0xa20)]=this['applyEasing'](this[_0x249244(0xa20)],this[_0x249244(0x592)],_0x3c9fd5,_0x1e9c4f,_0x53b7f7),this['_growY']=this[_0x249244(0x240)](this[_0x249244(0x73d)],this['_targetGrowY'],_0x1d51fc,_0x498d86,_0x313951)):this[_0x249244(0x1d3)](0x1));}else _0x4ebf65[_0x249244(0x5cb)]=_0x12361d(_0x20b30e['$1']),_0x4d0356[_0x249244(0x7f5)]=_0x3f5080(_0x2647c5['$2']);}else this[_0x249244(0x1d3)](0x1);this[_0x249244(0x94a)]();},BattleManager[_0x8db8d6(0xa75)]=function(){const _0x51add4=_0x8db8d6;this['_escapeRatio']=VisuMZ['BattleCore'][_0x51add4(0x466)]['Mechanics'][_0x51add4(0x23c)][_0x51add4(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x8c8)]=BattleManager[_0x8db8d6(0x308)],BattleManager[_0x8db8d6(0x308)]=function(){const _0x40bf3e=_0x8db8d6;this[_0x40bf3e(0x393)]('EscapeSuccessJS'),BattleManager[_0x40bf3e(0x485)][_0x40bf3e(0xa58)](),VisuMZ[_0x40bf3e(0x602)][_0x40bf3e(0x8c8)][_0x40bf3e(0x5fd)](this),this[_0x40bf3e(0x335)](_0x40bf3e(0x8fc));},VisuMZ[_0x8db8d6(0x602)]['BattleManager_onEscapeFailure']=BattleManager[_0x8db8d6(0xaa8)],BattleManager[_0x8db8d6(0xaa8)]=function(){const _0x185292=_0x8db8d6;this[_0x185292(0x393)](_0x185292(0x480));const _0x454650=this[_0x185292(0x246)];VisuMZ[_0x185292(0x602)][_0x185292(0x1a4)][_0x185292(0x5fd)](this),this['_escapeRatio']=_0x454650+VisuMZ[_0x185292(0x602)][_0x185292(0x466)][_0x185292(0x1e8)][_0x185292(0x33c)][_0x185292(0x5fd)](this),this[_0x185292(0x335)](_0x185292(0x803));},BattleManager[_0x8db8d6(0x2cd)]=function(){const _0x2935f7=_0x8db8d6;let _0x4ac725=![];if(this[_0x2935f7(0xae3)]())for(const _0x346d36 of $gameTroop[_0x2935f7(0x7b1)]()){this[_0x2935f7(0x307)][_0x2935f7(0x43e)]('addText',TextManager[_0x2935f7(0xa79)][_0x2935f7(0xad2)](_0x346d36)),this[_0x2935f7(0x307)][_0x2935f7(0x43e)]('wait'),_0x4ac725=!![];}if(this[_0x2935f7(0x2e1)])this[_0x2935f7(0x307)][_0x2935f7(0x43e)]('addText',TextManager[_0x2935f7(0x748)][_0x2935f7(0xad2)]($gameParty[_0x2935f7(0x7fd)]())),this[_0x2935f7(0x307)][_0x2935f7(0x43e)](_0x2935f7(0x66d));else{if(this[_0x2935f7(0x3e4)]){if(_0x2935f7(0x3c6)!==_0x2935f7(0x3a4))this['_logWindow'][_0x2935f7(0x43e)](_0x2935f7(0x1d0),TextManager[_0x2935f7(0x258)][_0x2935f7(0xad2)]($gameParty[_0x2935f7(0x7fd)]())),this[_0x2935f7(0x307)]['push'](_0x2935f7(0x66d));else{const _0x45b926=_0x26dad6['_actionInputIndex'];_0x22bfe4[_0x2935f7(0x7a0)][_0x45b926]=new _0xd26590(_0x328652);}}}_0x4ac725&&(this[_0x2935f7(0x307)][_0x2935f7(0x43e)](_0x2935f7(0x66d)),this[_0x2935f7(0x307)][_0x2935f7(0x43e)]('clear')),this[_0x2935f7(0x2f8)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x2935f7(0x6ef)]=![]);},BattleManager[_0x8db8d6(0xae3)]=function(){const _0x337066=_0x8db8d6;if(BattleManager[_0x337066(0x4e0)])return![];return VisuMZ[_0x337066(0x602)][_0x337066(0x466)][_0x337066(0x8fe)][_0x337066(0x420)];},VisuMZ[_0x8db8d6(0x602)]['BattleManager_startInput']=BattleManager[_0x8db8d6(0x53f)],BattleManager[_0x8db8d6(0x53f)]=function(){const _0x44bbdc=_0x8db8d6;VisuMZ['BattleCore'][_0x44bbdc(0x850)]['call'](this),this['isDTB']()&&this[_0x44bbdc(0x36d)]()&&!this[_0x44bbdc(0x3e4)]&&$gameParty[_0x44bbdc(0x126)]()&&this[_0x44bbdc(0xa32)]();},BattleManager[_0x8db8d6(0x36d)]=function(){const _0x18063d=_0x8db8d6;return VisuMZ['BattleCore'][_0x18063d(0x466)][_0x18063d(0x956)][_0x18063d(0x425)];},BattleManager['checkTpbInputOpen']=function(){const _0x58bb49=_0x8db8d6;this['isPartyTpbInputtable']()&&this[_0x58bb49(0xa32)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xb3c)]=Scene_Battle['prototype'][_0x8db8d6(0x7a5)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x7a5)]=function(){const _0x18710e=_0x8db8d6;VisuMZ[_0x18710e(0x602)][_0x18710e(0xb3c)][_0x18710e(0x5fd)](this),BattleManager[_0x18710e(0x2f8)]()&&BattleManager[_0x18710e(0x6ef)]&&('IvhYd'===_0x18710e(0x820)?(this[_0x18710e(0x20f)]=new _0x4ef786(),this['_shadowSprite'][_0x18710e(0x86a)]=_0x4c8b3d[_0x18710e(0x8c4)](_0x18710e(0x6dc)),this[_0x18710e(0x20f)]['bitmap']['smooth']=_0x26d776[_0x18710e(0x602)][_0x18710e(0x466)][_0x18710e(0x73a)][_0x18710e(0x7e1)],this[_0x18710e(0x20f)]['anchor']['x']=0.5,this[_0x18710e(0x20f)][_0x18710e(0x347)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x18710e(0x20f)][_0x18710e(0x344)]=![],this['addChild'](this[_0x18710e(0x20f)])):(BattleManager[_0x18710e(0x6ef)]=![],this[_0x18710e(0x47c)]()));},BattleManager[_0x8db8d6(0xa6e)]=function(_0x54d95d,_0x3f62e8){const _0x554721=_0x8db8d6;this['_action']['_reflectionTarget']=_0x3f62e8,this[_0x554721(0x307)][_0x554721(0x2af)](_0x3f62e8),this[_0x554721(0x307)]['displayReflectionPlayBack'](_0x54d95d,this[_0x554721(0x64d)]),this[_0x554721(0x64d)]['apply'](_0x54d95d),this[_0x554721(0x307)][_0x554721(0x7c7)](_0x54d95d,_0x54d95d);},VisuMZ['BattleCore'][_0x8db8d6(0x3c3)]=BattleManager[_0x8db8d6(0x3ea)],BattleManager[_0x8db8d6(0x3ea)]=function(){const _0x37bd5d=_0x8db8d6;VisuMZ[_0x37bd5d(0x602)][_0x37bd5d(0x3c3)]['call'](this),this[_0x37bd5d(0x358)]=this[_0x37bd5d(0x358)][_0x37bd5d(0x691)](_0x2c5648=>_0x2c5648&&_0x2c5648[_0x37bd5d(0x38b)]());},VisuMZ['BattleCore'][_0x8db8d6(0x620)]=BattleManager['updatePhase'],BattleManager['updatePhase']=function(_0x47fef4){const _0x283f0b=_0x8db8d6;if(this[_0x283f0b(0x884)]===_0x283f0b(0x20e))this[_0x283f0b(0x887)]();else this[_0x283f0b(0x884)]==='forceAction'?'OzREq'===_0x283f0b(0x62c)?this[_0x283f0b(0x561)]():(_0x10f8a1&&_0x5676c4[_0x283f0b(0x367)]()&&_0x164aac['clearActiveWeaponSlot'](),this[_0x283f0b(0x8fb)]()):'exGwv'!==_0x283f0b(0x2c7)?VisuMZ[_0x283f0b(0x602)]['BattleManager_updatePhase']['call'](this,_0x47fef4):_0x46490b=_0x2e7342;},BattleManager[_0x8db8d6(0x25e)]=function(){const _0x2fc929=_0x8db8d6;this[_0x2fc929(0x67a)]=this[_0x2fc929(0x9b3)][_0x2fc929(0x7e0)](0x0),this[_0x2fc929(0x782)]=0x0,this[_0x2fc929(0x7e4)]=this[_0x2fc929(0x67a)][0x0]||null,this['_phase']='custom';},BattleManager[_0x8db8d6(0x887)]=function(){const _0x41584d=_0x8db8d6;!this[_0x41584d(0x496)]()&&!this['_logWindow']['isBusy']()&&(this['_phase']=_0x41584d(0x626));},BattleManager['forceAction']=function(_0x3bd764){const _0x591393=_0x8db8d6;this[_0x591393(0x358)][_0x591393(0xa8c)](_0x3bd764);if(_0x3bd764===this[_0x591393(0x7be)])return;const _0x4debdc=JsonEx[_0x591393(0x885)](_0x3bd764[_0x591393(0x7bc)]());this['_forcedBattlers'][_0x591393(0x43e)]([_0x3bd764,_0x4debdc]);},BattleManager[_0x8db8d6(0x221)]=function(){},BattleManager[_0x8db8d6(0x53d)]=function(){const _0x457bb0=_0x8db8d6;if(this[_0x457bb0(0x2f8)]())this[_0x457bb0(0x884)]=_0x457bb0(0xae0);else{if(this[_0x457bb0(0x9da)]['length']>0x0){if('jECRP'===_0x457bb0(0x551))return _0x11e51f['friendsUnit']()[_0x457bb0(0x5a7)]();else this[_0x457bb0(0x884)]=_0x457bb0(0xae0);}else{if('wcshg'===_0x457bb0(0x77c))this[_0x457bb0(0x53f)]();else{if(!_0x32e861['isSceneBattle']())return;const _0x459421=_0x398b0[_0x457bb0(0x307)];_0x459421[_0x457bb0(0x750)]();}}}},BattleManager[_0x8db8d6(0xa64)]=function(){const _0x21622d=_0x8db8d6,_0x4cd48c=this[_0x21622d(0x7be)];_0x4cd48c&&this['isTpb']()&&_0x4cd48c[_0x21622d(0x7aa)](_0x21622d(0xa1e));for(;;){if(_0x21622d(0x6ff)===_0x21622d(0x6ff)){const _0x237a2b=this[_0x21622d(0x702)]();if(!_0x237a2b)return null;if(_0x237a2b[_0x21622d(0x829)]()&&_0x237a2b['isAlive']())return _0x237a2b;}else this[_0x21622d(0xa1d)](_0x21622d(0x123));}},BattleManager[_0x8db8d6(0x702)]=function(){const _0x572877=_0x8db8d6;if(this[_0x572877(0x9da)][_0x572877(0x5e0)]>0x0){const _0x5d6ca1=this[_0x572877(0x9da)][_0x572877(0x646)](),_0x3a6107=_0x5d6ca1[0x0];return _0x3a6107[_0x572877(0x7a0)]=_0x3a6107[_0x572877(0x7a0)]||[],_0x3a6107[_0x572877(0x7a0)][0x0]=_0x5d6ca1[0x1],_0x3a6107;}else return this['_actionBattlers']['shift']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1a7)]=Game_Battler['prototype'][_0x8db8d6(0xa1c)],Game_Battler[_0x8db8d6(0x6da)]['forceAction']=function(_0x53f148,_0x5abe44){const _0x55e6c0=_0x8db8d6;VisuMZ[_0x55e6c0(0x602)][_0x55e6c0(0x1a7)][_0x55e6c0(0x5fd)](this,_0x53f148,_0x5abe44),this[_0x55e6c0(0x7a0)][this[_0x55e6c0(0x7a0)]['length']-0x1][_0x55e6c0(0x5a3)]=!![];},Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x2b4)]=function(_0x284696){const _0x1670e8=_0x8db8d6;return this[_0x1670e8(0x968)](_0x284696[0x0],_0x284696[0x1],_0x374c6a=>{const _0x2f192e=_0x1670e8;if(_0x2f192e(0x911)===_0x2f192e(0x8af)){if(!(_0x34c8d5[_0x2f192e(0x602)][_0x2f192e(0x466)][_0x2f192e(0x41d)][_0x2f192e(0x554)]??!![]))return;const _0x234eb8=this[_0x2f192e(0x51d)](_0x3100c7);if(!['attack',_0x2f192e(0x9a9),_0x2f192e(0x97d)][_0x2f192e(0xa5c)](_0x234eb8))return;const _0x277953=this[_0x2f192e(0x385)](_0x176796);let _0x50ddc7=null;if(_0x234eb8===_0x2f192e(0x180))_0x50ddc7=_0x8ec5d5[this[_0x2f192e(0x88f)][_0x2f192e(0xa21)]()];else _0x234eb8===_0x2f192e(0x9a9)?_0x50ddc7=_0x38dd12[this[_0x2f192e(0x88f)][_0x2f192e(0x295)]()]:_0x50ddc7=_0x9271bb[this[_0x2f192e(0x671)][_0x447764][_0x2f192e(0x30f)]];this[_0x2f192e(0x143)](this[_0x2f192e(0x88f)],_0x50ddc7,_0x277953['x'],_0x277953['y'],_0x277953[_0x2f192e(0x5cb)]);}else!_0x374c6a['isDeathStateAffected']()&&(_0x374c6a[_0x2f192e(0xa1c)](_0x284696[0x2],_0x284696[0x3]),BattleManager[_0x2f192e(0xa1c)](_0x374c6a));}),!![];},VisuMZ['BattleCore']['Game_Battler_makeSpeed']=Game_Battler['prototype'][_0x8db8d6(0xaa7)],Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xaa7)]=function(){const _0x11d6ac=_0x8db8d6;VisuMZ[_0x11d6ac(0x602)][_0x11d6ac(0xaaa)][_0x11d6ac(0x5fd)](this),this[_0x11d6ac(0x7a0)][_0x11d6ac(0x5e0)]<=0x0&&(this[_0x11d6ac(0xb35)]=Number['MIN_SAFE_INTEGER']);},VisuMZ[_0x8db8d6(0x602)]['BattleManager_selectNextCommand']=BattleManager['selectNextCommand'],BattleManager[_0x8db8d6(0xa32)]=function(){const _0x1ef373=_0x8db8d6;this['isTpb']()?this[_0x1ef373(0x615)]():_0x1ef373(0x557)!==_0x1ef373(0x557)?this['drawItemStyleIconText'](_0x1234a7):VisuMZ['BattleCore'][_0x1ef373(0x1ec)][_0x1ef373(0x5fd)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x4f78f8=_0x8db8d6;if(this[_0x4f78f8(0x232)]){if('FCLTR'===_0x4f78f8(0x9ff)){if(this[_0x4f78f8(0x232)][_0x4f78f8(0xa32)]())return;this[_0x4f78f8(0x1c4)](),this['checkTpbInputClose'](),!this[_0x4f78f8(0x7be)]&&!this[_0x4f78f8(0x232)]&&SceneManager[_0x4f78f8(0xa4a)][_0x4f78f8(0x8bd)]();}else{_0x315f75=_0x57a3e7||0x1,_0x2859f4--;const _0x3149ff=this[_0x4f78f8(0x449)]();return _0x3149ff[_0x570e6c]?_0x3149ff[_0x18ec0a][_0x4f78f8(0x35f)]:0x0;}}else!this[_0x4f78f8(0x7be)]&&(_0x4f78f8(0xb14)===_0x4f78f8(0x7bf)?(this[_0x4f78f8(0xa7b)](),_0xa0e677['BattleCore'][_0x4f78f8(0x84c)][_0x4f78f8(0x5fd)](this)):this[_0x4f78f8(0x2bf)]());},BattleManager[_0x8db8d6(0x37a)]=function(){const _0x356b9e=_0x8db8d6;(!this[_0x356b9e(0x1cd)]()||this['needsActorInputCancel']())&&(_0x356b9e(0x57c)!==_0x356b9e(0x57c)?_0x2890c7['motionIdle']=_0x561086(_0x51fda['$1'])[_0x356b9e(0x80e)]()[_0x356b9e(0xa51)]():(this[_0x356b9e(0x327)]&&(!$gameParty['battleMembers']()[_0x356b9e(0xa5c)](this[_0x356b9e(0x327)])&&(this[_0x356b9e(0x327)]=null)),!this[_0x356b9e(0x327)]?(this[_0x356b9e(0x499)](),this[_0x356b9e(0x232)]=null,this[_0x356b9e(0x457)]=![]):_0x356b9e(0x771)===_0x356b9e(0x771)?this[_0x356b9e(0x7d8)]():this['padding']=0x0));},BattleManager['revertTpbCachedActor']=function(){const _0x2ebfd6=_0x8db8d6;if(!$gameParty[_0x2ebfd6(0x7fb)]()[_0x2ebfd6(0xa5c)](this['_tpbSceneChangeCacheActor'])){if(_0x2ebfd6(0x236)===_0x2ebfd6(0x877)){_0x126cf2[_0x2ebfd6(0x6da)][_0x2ebfd6(0x61f)][_0x2ebfd6(0x5fd)](this,_0x2e1d95);if(this['hasSvBattler']())this[_0x2ebfd6(0x346)](_0x4a9b82);}else this[_0x2ebfd6(0x327)]=null;}if(this[_0x2ebfd6(0x327)]){if(_0x2ebfd6(0x7fe)!==_0x2ebfd6(0x7fe)){if(!_0x121d31[_0x2ebfd6(0x38c)]())return;_0x42c6d5[_0x2ebfd6(0xb24)](_0x1f5323,_0x1bdfa8);const _0x3a5112=_0xe37db0[_0x2ebfd6(0x64d)],_0x27e767={'arPenRate':_0x5b3a15[_0x2ebfd6(0x6ad)],'arPenFlat':_0x57b9a4['ArPenFlat'],'arRedRate':_0x1c49cc[_0x2ebfd6(0x3cb)],'arRedFlat':_0x52fde2[_0x2ebfd6(0x908)]};_0x3a5112[_0x2ebfd6(0x4eb)]=_0x27e767;}else this[_0x2ebfd6(0x232)]=this[_0x2ebfd6(0x327)],this['_currentActor'][_0x2ebfd6(0x5ae)]=_0x2ebfd6(0x2a1),this['_inputting']=!![],this[_0x2ebfd6(0x327)]=null;}else this[_0x2ebfd6(0x499)](),this['_currentActor']=null,this[_0x2ebfd6(0x457)]=![];},VisuMZ['BattleCore'][_0x8db8d6(0x555)]=BattleManager[_0x8db8d6(0x1f4)],BattleManager[_0x8db8d6(0x1f4)]=function(){const _0x41ca35=_0x8db8d6;if(this[_0x41ca35(0x884)]==='custom'){if('aWRFC'===_0x41ca35(0x23d)){this[_0x41ca35(0x38f)][_0x41ca35(0x86a)]=_0x769292[_0x41ca35(0x390)];return;}else return this[_0x41ca35(0x8eb)]();}else return VisuMZ[_0x41ca35(0x602)][_0x41ca35(0x555)][_0x41ca35(0x5fd)](this);},BattleManager[_0x8db8d6(0x8eb)]=function(){const _0x13930c=_0x8db8d6;return this[_0x13930c(0x508)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x915)]=BattleManager['cancelActorInput'],BattleManager['cancelActorInput']=function(){const _0x410a09=_0x8db8d6;this[_0x410a09(0x2f8)]()&&this['_phase']===_0x410a09(0x84d)&&(this[_0x410a09(0x232)]=null),VisuMZ[_0x410a09(0x602)]['BattleManager_cancelActorInput'][_0x410a09(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x54b)]=BattleManager[_0x8db8d6(0x59c)],BattleManager[_0x8db8d6(0x59c)]=function(){const _0xf25f70=_0x8db8d6,_0x4e9a09=this[_0xf25f70(0x232)];if(_0x4e9a09&&!_0x4e9a09[_0xf25f70(0x59c)]()){if(_0xf25f70(0xa41)===_0xf25f70(0xa41)){const _0x20ced7=_0x4e9a09[_0xf25f70(0xacb)];_0x4e9a09[_0xf25f70(0x7a0)][_0x20ced7]=new Game_Action(_0x4e9a09);}else _0x47c7fc--;}return VisuMZ[_0xf25f70(0x602)][_0xf25f70(0x54b)][_0xf25f70(0x5fd)](this);},SceneManager['isSceneBattle']=function(){const _0x4a48a6=_0x8db8d6;return this['_scene']&&this[_0x4a48a6(0xa4a)][_0x4a48a6(0x5f5)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x1b6aea=_0x8db8d6;return Spriteset_Battle['prototype'][_0x1b6aea(0x320)]();},SceneManager[_0x8db8d6(0x3bc)]=function(){const _0x23fea8=_0x8db8d6;if(SceneManager[_0x23fea8(0xb31)](Scene_Options))return!![];return![];},SceneManager[_0x8db8d6(0x781)]=function(){const _0x388ca4=_0x8db8d6;if(SceneManager[_0x388ca4(0x595)](Scene_Options))return!![];return![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1ab)]=Game_Temp[_0x8db8d6(0x6da)][_0x8db8d6(0x2d5)],Game_Temp[_0x8db8d6(0x6da)][_0x8db8d6(0x2d5)]=function(_0x5701e6,_0x2a2d3f,_0xb1cc12){const _0x44b11c=_0x8db8d6;_0x5701e6=_0x5701e6['filter']((_0xcaf6e0,_0x46cb80,_0x3d5293)=>_0x3d5293[_0x44b11c(0x764)](_0xcaf6e0)===_0x46cb80),SceneManager['isSceneBattle']()&&SceneManager[_0x44b11c(0x2b5)]()&&(_0xb1cc12=!_0xb1cc12),VisuMZ[_0x44b11c(0x602)][_0x44b11c(0x1ab)]['call'](this,_0x5701e6,_0x2a2d3f,_0xb1cc12),SceneManager[_0x44b11c(0x38c)]()&&BattleManager[_0x44b11c(0x485)][_0x44b11c(0x738)]();},Game_Temp['prototype'][_0x8db8d6(0x415)]=function(_0x479807){const _0x1a8f88=_0x8db8d6;this[_0x1a8f88(0x186)]=_0x479807;},Game_Temp['prototype']['getLastPluginCommandInterpreter']=function(){const _0x1514a5=_0x8db8d6;return this[_0x1514a5(0x186)];},Game_Temp[_0x8db8d6(0x6da)][_0x8db8d6(0x165)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x8db8d6(0x6da)]['applyForcedGameTroopSettingsBattleCore']=function(_0x41d635){const _0x55fc47=_0x8db8d6;if($gameMap&&$dataMap&&$dataMap[_0x55fc47(0x44e)]){if(_0x55fc47(0x9ea)!==_0x55fc47(0x912))this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x55fc47(0x44e)]);else{if(!this[_0x55fc47(0x276)]())return;const _0x454dad=this[_0x55fc47(0x1f8)](),_0xeb7222=_0x518a09['BattleCore']['Settings'][_0x55fc47(0x956)][_0x55fc47(0x8a4)],_0x130613=_0x454dad==='text'?_0x333075[_0x55fc47(0x734)]:_0x55fc47(0x539)[_0x55fc47(0xad2)](_0xeb7222,_0x334622[_0x55fc47(0x734)]),_0x509321=this['isAutoBattleCommandEnabled']();this[_0x55fc47(0x878)](_0x130613,_0x55fc47(0x734),_0x509321);}}const _0x17df43=$dataTroops[_0x41d635];if(_0x17df43){let _0x549b2a=DataManager[_0x55fc47(0x49b)](_0x17df43['id']);this[_0x55fc47(0x3d1)](_0x549b2a);}},Game_Temp[_0x8db8d6(0x6da)][_0x8db8d6(0x3d1)]=function(_0x15bc37){const _0x3148f7=_0x8db8d6;if(!_0x15bc37)return;if(_0x15bc37['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x4348ca=String(RegExp['$1']);if(_0x4348ca['match'](/DEFAULT/i)){if(_0x3148f7(0x995)===_0x3148f7(0xa1f))return![];else this[_0x3148f7(0x49f)]=_0x3148f7(0x9e5);}else{if(_0x4348ca['match'](/LIST/i)){if('bhYbu'!==_0x3148f7(0x6ab)){const _0x54d2ed=_0x539969(_0x31c752['$1'])[_0x3148f7(0x3ad)]()[_0x3148f7(0xa51)]();return _0x54d2ed;}else this[_0x3148f7(0x49f)]=_0x3148f7(0x69b);}else{if(_0x4348ca['match'](/XP/i))this[_0x3148f7(0x49f)]='xp';else{if(_0x4348ca[_0x3148f7(0x3ed)](/PORTRAIT/i))this[_0x3148f7(0x49f)]=_0x3148f7(0x9af);else{if(_0x4348ca[_0x3148f7(0x3ed)](/BORDER/i))this[_0x3148f7(0x49f)]=_0x3148f7(0x816);else{if(_0x4348ca[_0x3148f7(0x3ed)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x3148f7(0x4f7)])this[_0x3148f7(0x49f)]='sideview_ui';else{if(_0x3148f7(0x931)==='YxmGJ')this['_forcedBattleLayout']='default';else{if(this[_0x3148f7(0xb0f)]===_0x588534)this[_0x3148f7(0x478)]();return this['_battlePortrait'];}}}}}}}}}},VisuMZ[_0x8db8d6(0x602)]['Game_System_initialize']=Game_System['prototype'][_0x8db8d6(0x3f1)],Game_System[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)]=function(){const _0x49fbeb=_0x8db8d6;VisuMZ['BattleCore'][_0x49fbeb(0x481)]['call'](this),this[_0x49fbeb(0x859)]();},Game_System['prototype'][_0x8db8d6(0x859)]=function(){const _0x449560=_0x8db8d6;this[_0x449560(0x1e7)]=this[_0x449560(0x1e7)]||[];},Game_System[_0x8db8d6(0x6da)][_0x8db8d6(0x1e1)]=function(){const _0x9548f5=_0x8db8d6;if(this['_defeatedEnemies']===undefined)this[_0x9548f5(0x859)]();return this[_0x9548f5(0x1e7)];},Game_System['prototype'][_0x8db8d6(0x6aa)]=function(_0x3eb74a){const _0x287340=_0x8db8d6;if(this[_0x287340(0x1e7)]===undefined)this['initBattleCore']();if(!_0x3eb74a)return;if(this[_0x287340(0x1e7)][_0x287340(0xa5c)](_0x3eb74a))return;this[_0x287340(0x1e7)][_0x287340(0x43e)](_0x3eb74a),this[_0x287340(0x1e7)][_0x287340(0x5ab)]((_0x4855dd,_0x37a654)=>_0x4855dd-_0x37a654);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x71d)]=Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x2ce)],Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x2ce)]=function(_0x45dcdb){const _0x1615b7=_0x8db8d6,_0x19da40=this['isAlive'](),_0x3d0a6f=this[_0x1615b7(0x529)]();VisuMZ['BattleCore'][_0x1615b7(0x71d)][_0x1615b7(0x5fd)](this,_0x45dcdb),this[_0x1615b7(0x26d)]()&&_0x19da40&&this[_0x1615b7(0x20a)]()&&('qwJKO'!==_0x1615b7(0x304)?this[_0x1615b7(0x884)]=_0x1615b7(0xae0):(this['_visualHpGauge_JustDied']=!this[_0x1615b7(0x81b)](),$gameSystem[_0x1615b7(0x6aa)](this[_0x1615b7(0x30e)]()))),SceneManager[_0x1615b7(0x38c)]()&&_0x3d0a6f!==this[_0x1615b7(0x529)]()&&('VHAcx'===_0x1615b7(0x534)?(_0x54be74[_0x1615b7(0x602)]['Sprite_StateIcon_updateFrame'][_0x1615b7(0x5fd)](this),this[_0x1615b7(0x83f)]=this[_0x1615b7(0xa06)]>0x0?0xff:0x0):this['battler']()&&this[_0x1615b7(0x538)]()[_0x1615b7(0x845)]());},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x81b)]=function(){const _0x8d838c=_0x8db8d6;return $gameSystem[_0x8d838c(0x1e1)]()['includes'](this[_0x8d838c(0x109)]);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x76f)]=Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x798)],Game_BattlerBase['prototype'][_0x8db8d6(0x798)]=function(_0x7e6cbc){const _0x22907d=_0x8db8d6;VisuMZ[_0x22907d(0x602)][_0x22907d(0x76f)][_0x22907d(0x5fd)](this,_0x7e6cbc),this[_0x22907d(0x26d)]()&&_0x7e6cbc===this[_0x22907d(0x700)]()&&this['isAlive']()&&(_0x22907d(0x4c4)==='Qkfly'?(_0x53542c[_0x22907d(0x602)]['Scene_Battle_createPartyCommandWindow'][_0x22907d(0x5fd)](this),this[_0x22907d(0x4b3)]()):this['_visualHpGauge_JustDied']=![]),!this[_0x22907d(0x5d2)]&&!this[_0x22907d(0x77e)]&&SceneManager[_0x22907d(0x38c)]()&&this[_0x22907d(0x74c)]();},VisuMZ['BattleCore'][_0x8db8d6(0x794)]=Game_Action['prototype'][_0x8db8d6(0x750)],Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x750)]=function(){const _0x4b2ad2=_0x8db8d6;VisuMZ[_0x4b2ad2(0x602)][_0x4b2ad2(0x794)]['call'](this),this[_0x4b2ad2(0x4eb)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4b2ad2(0x5fe)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']='default';},Game_Action[_0x8db8d6(0x6da)]['makeDamageValue']=function(_0x35d444,_0x460a0d){const _0x56dc05=_0x8db8d6;return VisuMZ[_0x56dc05(0x602)][_0x56dc05(0x466)][_0x56dc05(0x409)]['OverallFormulaJS'][_0x56dc05(0x5fd)](this,_0x35d444,_0x460a0d);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x355)]=function(_0x46e89a,_0x39469e){const _0x3bd4a4=_0x8db8d6;return VisuMZ[_0x3bd4a4(0x602)]['Settings']['Damage']['VarianceFormulaJS']['call'](this,_0x46e89a,_0x39469e);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0xac3)]=function(_0x2bee42,_0x25dfde){const _0x5ac9d1=_0x8db8d6;return VisuMZ[_0x5ac9d1(0x602)][_0x5ac9d1(0x466)][_0x5ac9d1(0x409)][_0x5ac9d1(0x957)][_0x5ac9d1(0x5fd)](this,_0x2bee42,_0x25dfde);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x71c)]=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x244)],Game_Action['prototype'][_0x8db8d6(0x244)]=function(_0xbfa08b){const _0x2b4f1e=_0x8db8d6,_0xc835fe=this[_0x2b4f1e(0xaf1)]()[_0x2b4f1e(0x44e)];if(_0xc835fe['match'](/<ALWAYS HIT>/i)){if(_0x2b4f1e(0x2d2)!==_0x2b4f1e(0xb1f))return 0x1;else{let _0x103dd0=_0x2b4f1e(0x585);if(this[_0x2b4f1e(0x2ed)](_0x103dd0))return this[_0x2b4f1e(0x370)][_0x103dd0];return this[_0x2b4f1e(0x370)][_0x103dd0]=this[_0x2b4f1e(0x977)](this[_0x2b4f1e(0x6cf)]()),this[_0x2b4f1e(0x370)][_0x103dd0];}}else{if(_0xc835fe[_0x2b4f1e(0x3ed)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if('XTIzM'!==_0x2b4f1e(0x100)){let _0x513063=VisuMZ[_0x2b4f1e(0x602)][_0x2b4f1e(0x71c)][_0x2b4f1e(0x5fd)](this,_0xbfa08b);return _0x513063=this[_0x2b4f1e(0x5fe)][_0x2b4f1e(0x7a2)]*_0x513063+this[_0x2b4f1e(0x5fe)][_0x2b4f1e(0x7a1)],_0x513063;}else this[_0x2b4f1e(0x370)][_0x2b4f1e(0x97f)]=_0x24dff9['prototype'][_0x2b4f1e(0x8a2)][_0x2b4f1e(0x5fd)](this);}}},Game_Action[_0x8db8d6(0x6da)]['itemCri']=function(_0x21ec36){const _0x5b5f08=_0x8db8d6;if(!this[_0x5b5f08(0xaf1)]()[_0x5b5f08(0x1ea)][_0x5b5f08(0x47d)])return 0x0;let _0x36889f=VisuMZ['BattleCore'][_0x5b5f08(0x466)][_0x5b5f08(0x409)][_0x5b5f08(0x4a3)][_0x5b5f08(0x5fd)](this,_0x21ec36);return _0x36889f=this[_0x5b5f08(0x5fe)][_0x5b5f08(0x9fd)]*_0x36889f+this['_multipliers'][_0x5b5f08(0x36c)],_0x36889f;},Game_Action['prototype']['applyCritical']=function(_0x3d6fc8){const _0x2e9085=_0x8db8d6;return _0x3d6fc8=VisuMZ['BattleCore'][_0x2e9085(0x466)][_0x2e9085(0x409)][_0x2e9085(0x27c)][_0x2e9085(0x5fd)](this,_0x3d6fc8),_0x3d6fc8=this['_multipliers'][_0x2e9085(0x2b0)]*_0x3d6fc8+this[_0x2e9085(0x5fe)][_0x2e9085(0x482)],_0x3d6fc8;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x7ca)]=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x8d0)],Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x8d0)]=function(_0x3212fc){const _0x24f732=_0x8db8d6;if(this['_customDamageFormula']!==_0x24f732(0x9e5)){if(_0x24f732(0x2d4)!==_0x24f732(0x2d4))this[_0x24f732(0x5de)]('wait');else return this[_0x24f732(0xa7a)](_0x3212fc);}else return DataManager[_0x24f732(0x433)](this[_0x24f732(0xaf1)]())==='MANUAL'?VisuMZ['BattleCore'][_0x24f732(0x7ca)]['call'](this,_0x3212fc):this[_0x24f732(0x525)](_0x3212fc);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x882)]=function(_0x1c0498){this['_customDamageFormula']=_0x1c0498;},Game_Action['prototype']['customDamageFormula']=function(_0x52b2c5){const _0x350d81=_0x8db8d6,_0x32e17f=this[_0x350d81(0xaf1)](),_0x416fd1=_0x32e17f[_0x350d81(0x1ea)]['formula'];_0x32e17f[_0x350d81(0x1ea)][_0x350d81(0x694)]=this[_0x350d81(0x4fe)];let _0x5a439a=VisuMZ[_0x350d81(0x602)]['Game_Action_evalDamageFormula'][_0x350d81(0x5fd)](this,_0x52b2c5);return _0x32e17f['damage'][_0x350d81(0x694)]=_0x416fd1,_0x5a439a;},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x8c3)]=function(){const _0x3463bf=_0x8db8d6;if(this[_0x3463bf(0xaf1)]()[_0x3463bf(0x44e)][_0x3463bf(0x3ed)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x182852=String(RegExp['$1'])[_0x3463bf(0x3ad)]()[_0x3463bf(0xa51)]();return _0x182852;}return _0x3463bf(0x893);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x525)]=function(_0x359a7f){const _0x2fcacb=_0x8db8d6,_0x58c621=DataManager[_0x2fcacb(0x433)](this[_0x2fcacb(0xaf1)]()),_0x1556bb=VisuMZ[_0x2fcacb(0x75e)][_0x58c621];try{return _0x1556bb[_0x2fcacb(0x4dd)][_0x2fcacb(0x5fd)](this,_0x359a7f);}catch(_0x36f05f){if($gameTemp[_0x2fcacb(0x6c6)]())console[_0x2fcacb(0x27b)](_0x36f05f);return VisuMZ[_0x2fcacb(0x602)]['Game_Action_evalDamageFormula'][_0x2fcacb(0x5fd)](this);}},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0xb22)]=function(_0x2f6154,_0x467d17){const _0x2fcf09=_0x8db8d6;if(this[_0x2fcf09(0x6ae)]())return _0x467d17;const _0x143fa4=this['subject'](),_0x2ac2bb=_0x2f6154;let _0x1c9167=[],_0x1f9df2=[];_0x1c9167[_0x2fcf09(0x43e)](this[_0x2fcf09(0x4eb)][_0x2fcf09(0x52f)],this['_armorPenetration'][_0x2fcf09(0x37e)]),_0x1f9df2[_0x2fcf09(0x43e)](this[_0x2fcf09(0x4eb)][_0x2fcf09(0x321)],this[_0x2fcf09(0x4eb)][_0x2fcf09(0x161)]);const _0x337d26=this[_0x2fcf09(0xa63)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x159e41=this[_0x2fcf09(0xa63)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3324e8=this[_0x2fcf09(0xa63)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0xd10d43=this[_0x2fcf09(0xa63)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x1c9167=_0x1c9167[_0x2fcf09(0x668)](_0x2ac2bb[_0x2fcf09(0x1f3)]()[_0x2fcf09(0x9f8)](_0x19bab7=>_0x19bab7&&_0x19bab7[_0x2fcf09(0x44e)][_0x2fcf09(0x3ed)](_0x337d26)?Number(RegExp['$1']):0x0)),_0x1f9df2=_0x1f9df2[_0x2fcf09(0x668)](_0x2ac2bb[_0x2fcf09(0x1f3)]()[_0x2fcf09(0x9f8)](_0x29d406=>_0x29d406&&_0x29d406[_0x2fcf09(0x44e)][_0x2fcf09(0x3ed)](_0x159e41)?Number(RegExp['$1'])/0x64:0x0)),_0x1c9167=_0x1c9167['concat'](_0x143fa4[_0x2fcf09(0x1f3)]()[_0x2fcf09(0x9f8)](_0x538c4e=>_0x538c4e&&_0x538c4e[_0x2fcf09(0x44e)][_0x2fcf09(0x3ed)](_0x3324e8)?Number(RegExp['$1']):0x0)),_0x1f9df2=_0x1f9df2[_0x2fcf09(0x668)](_0x143fa4[_0x2fcf09(0x1f3)]()['map'](_0x2c7e5f=>_0x2c7e5f&&_0x2c7e5f[_0x2fcf09(0x44e)]['match'](_0xd10d43)?Number(RegExp['$1'])/0x64:0x0));this[_0x2fcf09(0xaf1)]()[_0x2fcf09(0x44e)]['match'](_0x3324e8)&&(_0x2fcf09(0x3a3)!==_0x2fcf09(0x3a3)?_0x2c2f62[_0x2fcf09(0x43e)](_0x1e968b[_0x2fcf09(0x281)]()):_0x1c9167[_0x2fcf09(0x43e)](Number(RegExp['$1'])));this['item']()[_0x2fcf09(0x44e)]['match'](_0xd10d43)&&_0x1f9df2[_0x2fcf09(0x43e)](Number(RegExp['$1']));_0x467d17=_0x1c9167[_0x2fcf09(0x65f)]((_0x2d726b,_0xedf7ee)=>_0x2d726b-_0xedf7ee,_0x467d17);if(_0x467d17>0x0){if(_0x2fcf09(0xb29)===_0x2fcf09(0x9a8))return _0x234424[_0x2fcf09(0x602)][_0x2fcf09(0x466)][_0x2fcf09(0x41d)]['BattleCmdList'];else _0x467d17=_0x1f9df2[_0x2fcf09(0x65f)]((_0x5184ec,_0x282020)=>_0x5184ec*(0x1-_0x282020),_0x467d17);}return _0x467d17;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa0c)]=Game_Action['prototype'][_0x8db8d6(0x15c)],Game_Action['prototype'][_0x8db8d6(0x15c)]=function(_0x4441d0,_0xbac755){const _0x296055=_0x8db8d6;_0xbac755=_0xbac755*this[_0x296055(0x5fe)][_0x296055(0xa3c)],_0xbac755+=this['_multipliers'][_0x296055(0x209)]*(_0xbac755>=0x0?0x1:-0x1),_0xbac755=this[_0x296055(0xae5)]('PreDamage%1JS',_0x4441d0,_0xbac755,![]),_0xbac755=this['applyDamageCaps'](_0xbac755),_0xbac755=Math[_0x296055(0x423)](_0xbac755),this['_executedValue']=_0xbac755,this[_0x296055(0x61b)]=this[_0x296055(0x61b)]||0x0,this[_0x296055(0x61b)]+=_0xbac755,VisuMZ[_0x296055(0x602)][_0x296055(0xa0c)][_0x296055(0x5fd)](this,_0x4441d0,_0xbac755),this[_0x296055(0xae5)]('PostDamage%1JS',_0x4441d0,_0xbac755,!![]);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x543)]=function(_0x4d95f6){const _0x216567=_0x8db8d6;if(this[_0x216567(0xa9d)]())return _0x4d95f6;return _0x4d95f6=this[_0x216567(0x789)](_0x4d95f6),_0x4d95f6=this[_0x216567(0x7df)](_0x4d95f6),_0x4d95f6;},Game_Action['prototype']['isBypassDamageCap']=function(){const _0x38a4a9=_0x8db8d6,_0x2cef81=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x38a4a9(0x44e)][_0x38a4a9(0x3ed)](_0x2cef81))return!![];if(this[_0x38a4a9(0x4b1)]()[_0x38a4a9(0x1f3)]()['some'](_0x413f01=>_0x413f01&&_0x413f01[_0x38a4a9(0x44e)][_0x38a4a9(0x3ed)](_0x2cef81)))return!![];return!VisuMZ[_0x38a4a9(0x602)][_0x38a4a9(0x466)][_0x38a4a9(0x409)]['EnableDamageCap'];},Game_Action['prototype']['applySoftDamageCap']=function(_0x3d04e0){const _0x35e0ee=_0x8db8d6;if(!VisuMZ[_0x35e0ee(0x602)][_0x35e0ee(0x466)][_0x35e0ee(0x409)]['EnableSoftCap'])return _0x3d04e0;const _0x46bcbf=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x35e0ee(0xaf1)]()[_0x35e0ee(0x44e)][_0x35e0ee(0x3ed)](_0x46bcbf))return!![];if(this[_0x35e0ee(0x4b1)]()[_0x35e0ee(0x1f3)]()[_0x35e0ee(0xa0a)](_0xf20103=>_0xf20103&&_0xf20103[_0x35e0ee(0x44e)][_0x35e0ee(0x3ed)](_0x46bcbf)))return!![];const _0x524e10=_0x3d04e0<0x0?-0x1:0x1;_0x3d04e0=Math[_0x35e0ee(0x78b)](_0x3d04e0);let _0x31f1e3=this[_0x35e0ee(0x4b1)]()[_0x35e0ee(0x5c3)]();this['item']()['note'][_0x35e0ee(0x3ed)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x31f1e3+=Number(RegExp['$1'])/0x64);_0x31f1e3=_0x31f1e3['clamp'](0.01,0x1);const _0x1f392c=this['getHardDamageCap'](),_0x4cf43c=_0x31f1e3*_0x1f392c;if(_0x3d04e0>_0x4cf43c&&_0x1f392c>_0x4cf43c){if('PKvfx'==='PKvfx'){_0x3d04e0-=_0x4cf43c;const _0x103904=VisuMZ[_0x35e0ee(0x602)][_0x35e0ee(0x466)]['Damage'][_0x35e0ee(0x514)],_0x11524c=Math[_0x35e0ee(0x623)](0x1-_0x3d04e0/((_0x1f392c-_0x4cf43c)*_0x103904+_0x3d04e0),0.01);_0x3d04e0*=_0x11524c,_0x3d04e0+=_0x4cf43c;}else{if(this[_0x35e0ee(0x847)]<=0x0)return;const _0x112697=this['_opacityDuration'],_0x40106d=this['_opacityWholeDuration'],_0x784e4c=this['_opacityEasing'];_0x5e0295[_0x35e0ee(0x730)]?this[_0x35e0ee(0x83f)]=this['applyEasing'](this[_0x35e0ee(0x83f)],this[_0x35e0ee(0x52e)],_0x112697,_0x40106d,_0x784e4c):this[_0x35e0ee(0x83f)]=(this['opacity']*(_0x112697-0x1)+this[_0x35e0ee(0x52e)])/_0x112697;this[_0x35e0ee(0x847)]--;if(this['_opacityDuration']<=0x0)this[_0x35e0ee(0x846)]();}}return _0x3d04e0*_0x524e10;},Game_Action['prototype'][_0x8db8d6(0x55b)]=function(){const _0x4f47a7=_0x8db8d6;return this[_0x4f47a7(0xaf1)]()['note'][_0x4f47a7(0x3ed)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x4f47a7(0x4b1)]()[_0x4f47a7(0x98d)]();},Game_Action[_0x8db8d6(0x6da)]['applyHardDamageCap']=function(_0x27cb64){const _0x15ac7d=_0x8db8d6;let _0x20bbd9=this[_0x15ac7d(0x55b)]();return _0x27cb64[_0x15ac7d(0x96e)](-_0x20bbd9,_0x20bbd9);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x3c1)]=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x552)],Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x552)]=function(_0xcbef8a){const _0x1ae612=_0x8db8d6;this[_0x1ae612(0xae5)](_0x1ae612(0xa4f),_0xcbef8a,0x0,!![]),VisuMZ[_0x1ae612(0x602)]['Game_Action_apply'][_0x1ae612(0x5fd)](this,_0xcbef8a),this[_0x1ae612(0xae5)]('PostApply%1JS',_0xcbef8a,this[_0x1ae612(0x8e5)]||0x0,!![]),this[_0x1ae612(0x4da)](_0xcbef8a);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0xae5)]=function(_0x40774f,_0x3254c2,_0xddd1e9,_0x3f5b55){const _0x229234=_0x8db8d6;if(this[_0x229234(0x77e)]||this[_0x229234(0x5d2)])return;_0xddd1e9=_0xddd1e9||0x0;const _0x2cc69a=_0xddd1e9,_0x1052c5=VisuMZ[_0x229234(0x602)][_0x229234(0x466)][_0x229234(0x1e8)],_0x1c59cc=_0x40774f['format']('');if(_0x1052c5[_0x1c59cc]){if(_0x229234(0x5a5)!==_0x229234(0x5a5)){if(!this[_0x229234(0x320)]())return;this[_0x229234(0x7d3)][_0x229234(0x728)]['x']=-0x1,this[_0x229234(0x7d3)]['x']=this[_0x229234(0x556)][_0x229234(0x5cb)],this[_0x229234(0x856)][_0x229234(0x728)]['x']=-0x1,this[_0x229234(0x856)]['x']=this[_0x229234(0x556)][_0x229234(0x5cb)],this['_damageContainer'][_0x229234(0x728)]['x']=-0x1,this[_0x229234(0xa71)]['x']=this[_0x229234(0x556)]['x']+this[_0x229234(0x556)][_0x229234(0x5cb)];}else{_0xddd1e9=_0x1052c5[_0x1c59cc]['call'](this,_0xddd1e9,_0x3254c2);if(_0x3f5b55)_0xddd1e9=_0x2cc69a;}}let _0x304cdc=VisuMZ['BattleCore']['createKeyJS'](this[_0x229234(0xaf1)](),_0x40774f[_0x229234(0xad2)](''));if(VisuMZ[_0x229234(0x602)]['JS'][_0x304cdc]){_0xddd1e9=VisuMZ['BattleCore']['JS'][_0x304cdc][_0x229234(0x5fd)](this,this['subject'](),_0x3254c2,this['item'](),_0xddd1e9);if(_0x3f5b55)_0xddd1e9=_0x2cc69a;}for(const _0x2e0b5f of this[_0x229234(0x4b1)]()[_0x229234(0x1f3)]()){if(!_0x2e0b5f)continue;_0x304cdc=VisuMZ['BattleCore'][_0x229234(0x7c1)](_0x2e0b5f,_0x40774f[_0x229234(0xad2)]('AsUser'));if(VisuMZ['BattleCore']['JS'][_0x304cdc]){if(_0x229234(0x969)!=='NAhpj'){_0xddd1e9=VisuMZ[_0x229234(0x602)]['JS'][_0x304cdc]['call'](this,this[_0x229234(0x4b1)](),_0x3254c2,_0x2e0b5f,_0xddd1e9);if(_0x3f5b55)_0xddd1e9=_0x2cc69a;}else{if(!this[_0x229234(0xaf1)]())return _0x2fe4b9;const _0x81063c=this[_0x229234(0xaf1)]()[_0x229234(0x44e)];return _0x81063c['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x5ae5a8[_0x229234(0xa8c)](this[_0x229234(0x4b1)]()),_0x2bdc6f;}}}for(const _0xdce8e1 of _0x3254c2[_0x229234(0x1f3)]()){if(_0x229234(0x2f1)!==_0x229234(0x2f1)){if(!_0x2447c8[_0x229234(0x38c)]())return;_0x2cec33[_0x229234(0xb24)](_0x41e436,_0x4f462e);const _0x88eb01=_0xe4ea79[_0x229234(0x754)](),_0x597dc8=_0x2471b2[_0x229234(0x280)]*_0x30f1e5[_0x229234(0x770)];_0x88eb01[_0x229234(0x66d)](_0x597dc8);}else{if(!_0xdce8e1)continue;_0x304cdc=VisuMZ['BattleCore']['createKeyJS'](_0xdce8e1,_0x40774f[_0x229234(0xad2)](_0x229234(0x402)));if(VisuMZ[_0x229234(0x602)]['JS'][_0x304cdc]){if('wUABZ'!==_0x229234(0x988))_0x4dc0bf[_0x229234(0x602)]['createJS'](_0x4711c2,_0x14c674);else{_0xddd1e9=VisuMZ['BattleCore']['JS'][_0x304cdc][_0x229234(0x5fd)](this,this[_0x229234(0x4b1)](),_0x3254c2,_0xdce8e1,_0xddd1e9);if(_0x3f5b55)_0xddd1e9=_0x2cc69a;}}}}return _0xddd1e9;},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x5eb)]=function(_0x163e2b){const _0x151f5e=_0x8db8d6,_0x2dacd3=this[_0x151f5e(0x61b)]||0x0,_0x26bc3c=VisuMZ[_0x151f5e(0x602)][_0x151f5e(0x466)][_0x151f5e(0x1e8)],_0x516bf2=_0x163e2b[_0x151f5e(0xad2)]('');if(_0x26bc3c[_0x516bf2]){if('QZwtO'===_0x151f5e(0xaab))_0x26bc3c[_0x516bf2][_0x151f5e(0x5fd)](this,_0x2dacd3);else{this[_0x151f5e(0x86a)]['clear']();const _0x66a773=this[_0x151f5e(0x141)]();!_0x43dbbc(_0x66a773)&&this[_0x151f5e(0x2f3)]();}}let _0x4cb1d4=VisuMZ[_0x151f5e(0x602)][_0x151f5e(0x7c1)](this[_0x151f5e(0xaf1)](),_0x163e2b);VisuMZ[_0x151f5e(0x602)]['JS'][_0x4cb1d4]&&(_0x151f5e(0x46c)===_0x151f5e(0x32e)?this[_0x151f5e(0x43e)]('showAnimation',_0x10cdcb,[_0x45b405[_0x151f5e(0x7be)]],-0x1):VisuMZ['BattleCore']['JS'][_0x4cb1d4]['call'](this,this[_0x151f5e(0x4b1)](),this[_0x151f5e(0x4b1)](),this[_0x151f5e(0xaf1)](),_0x2dacd3));for(const _0x4dd20d of this['subject']()[_0x151f5e(0x1f3)]()){if(_0x151f5e(0x824)===_0x151f5e(0x635))return this[_0x151f5e(0x367)]&&this[_0x151f5e(0x367)]()?_0x5b4891[_0x151f5e(0x602)][_0x151f5e(0x466)][_0x151f5e(0x73a)][_0x151f5e(0x831)]:_0x384e82['BattleCore']['Settings'][_0x151f5e(0x8fe)][_0x151f5e(0x831)];else{if(!_0x4dd20d)continue;_0x4cb1d4=VisuMZ[_0x151f5e(0x602)][_0x151f5e(0x7c1)](_0x4dd20d,_0x163e2b);if(VisuMZ[_0x151f5e(0x602)]['JS'][_0x4cb1d4]){if(_0x151f5e(0x542)!=='cRwkL'){_0x3b9a84[_0x151f5e(0x6da)][_0x151f5e(0xa4e)][_0x151f5e(0x5fd)](this);const _0x1cf964=this[_0x151f5e(0x830)]();_0x1cf964===_0x151f5e(0x816)&&this[_0x151f5e(0xfc)]();}else VisuMZ[_0x151f5e(0x602)]['JS'][_0x4cb1d4]['call'](this,this[_0x151f5e(0x4b1)](),this[_0x151f5e(0x4b1)](),_0x4dd20d,_0x2dacd3);}}}},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x44d)]=function(){const _0x21e77b=_0x8db8d6;return VisuMZ[_0x21e77b(0x602)]['Settings']['Mechanics'][_0x21e77b(0x27a)][_0x21e77b(0x5fd)](this);},Game_Action['prototype'][_0x8db8d6(0x82c)]=function(){const _0x3e844f=_0x8db8d6;return VisuMZ['BattleCore']['Settings'][_0x3e844f(0x1e8)][_0x3e844f(0x3d4)];},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x8b1)]=function(){const _0x1268e8=_0x8db8d6;return this[_0x1268e8(0xaf1)]()[_0x1268e8(0x44e)]['match'](/<JS TARGETS>/i);},Game_Action['prototype'][_0x8db8d6(0x40b)]=function(){const _0x30efe2=_0x8db8d6;if(!this[_0x30efe2(0x6b6)]&&this[_0x30efe2(0x4b1)]()['isConfused']())return![];if(this[_0x30efe2(0x8b1)]())return!![];return typeof this[_0x30efe2(0xaf1)]()[_0x30efe2(0xab2)]===_0x30efe2(0x3b9);},VisuMZ[_0x8db8d6(0x602)]['Game_Action_isForOpponent']=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x448)],Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x448)]=function(){const _0x32ade0=_0x8db8d6;return this[_0x32ade0(0x40b)]()&&!this[_0x32ade0(0x8b1)]()?this[_0x32ade0(0x903)]():VisuMZ[_0x32ade0(0x602)][_0x32ade0(0x945)][_0x32ade0(0x5fd)](this);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x903)]=function(){const _0x5aeede=_0x8db8d6,_0x362d2b=this[_0x5aeede(0xaf1)]()[_0x5aeede(0xab2)];return _0x362d2b[_0x5aeede(0x3ed)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x133)]=Game_Action[_0x8db8d6(0x6da)]['isForFriend'],Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x12b)]=function(){const _0x2de912=_0x8db8d6;if(this[_0x2de912(0x40b)]()&&!this[_0x2de912(0x8b1)]())return this[_0x2de912(0x34d)]();else{if(_0x2de912(0x7cc)==='ZnzKY')_0x27ea59[_0x2de912(0x602)][_0x2de912(0x976)]['call'](this,_0x2ec5b0),_0x26fc8c[_0x2de912(0x4aa)]();else return VisuMZ['BattleCore'][_0x2de912(0x133)][_0x2de912(0x5fd)](this);}},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x34d)]=function(){const _0x4c7c92=_0x8db8d6,_0x2c8e14=this[_0x4c7c92(0xaf1)]()[_0x4c7c92(0xab2)];return _0x2c8e14[_0x4c7c92(0x3ed)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x3df)]=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x502)],Game_Action['prototype'][_0x8db8d6(0x502)]=function(){const _0x9a78db=_0x8db8d6;return this[_0x9a78db(0x40b)]()&&!this[_0x9a78db(0x8b1)]()?this['isForRandomBattleCore']():VisuMZ[_0x9a78db(0x602)]['Game_Action_isForRandom'][_0x9a78db(0x5fd)](this);},Game_Action[_0x8db8d6(0x6da)]['isForRandomBattleCore']=function(){const _0x341dc9=_0x8db8d6,_0xd1b877=this[_0x341dc9(0xaf1)]()[_0x341dc9(0xab2)];return _0xd1b877[_0x341dc9(0x3ed)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x91a)]=Game_Action['prototype'][_0x8db8d6(0x2a9)],Game_Action[_0x8db8d6(0x6da)]['needsSelection']=function(){const _0x1c6f88=_0x8db8d6;return this[_0x1c6f88(0x40b)]()&&!this[_0x1c6f88(0x8b1)]()?this['needsSelectionBattleCore']():VisuMZ[_0x1c6f88(0x602)]['Game_Action_needsSelection']['call'](this);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x8c7)]=function(){const _0x599881=_0x8db8d6,_0xdb1aae=this[_0x599881(0xaf1)]()[_0x599881(0xab2)];if(_0xdb1aae[_0x599881(0x3ed)](/RANDOM/i))return![];if(_0xdb1aae[_0x599881(0x3ed)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0xdb1aae['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x599881(0x91a)]['call'](this);},VisuMZ[_0x8db8d6(0x602)]['Game_Action_makeTargets']=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x95c)],Game_Action['prototype'][_0x8db8d6(0x95c)]=function(){const _0x459c90=_0x8db8d6;let _0x47c6ed=[];return this[_0x459c90(0x40b)]()?_0x47c6ed=this[_0x459c90(0x2c5)]():_0x47c6ed=VisuMZ[_0x459c90(0x602)][_0x459c90(0x299)][_0x459c90(0x5fd)](this),_0x47c6ed=this['applyTargetFilters'](_0x47c6ed),_0x47c6ed;},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x2c5)]=function(){const _0xe36c4b=_0x8db8d6;let _0x5d5dd8=[];const _0x26dae4=String(this['item']()[_0xe36c4b(0xab2)]),_0x4ca580=VisuMZ[_0xe36c4b(0x602)][_0xe36c4b(0x7c1)](this['item'](),_0xe36c4b(0x8f9));if(VisuMZ['BattleCore']['JS'][_0x4ca580]){_0x5d5dd8=VisuMZ['BattleCore'][_0xe36c4b(0x299)][_0xe36c4b(0x5fd)](this);const _0x4c0171=VisuMZ['BattleCore'][_0xe36c4b(0x7c1)](this[_0xe36c4b(0xaf1)](),_0xe36c4b(0x8f9));return _0x5d5dd8=VisuMZ[_0xe36c4b(0x602)]['JS'][_0x4c0171]['call'](this,this[_0xe36c4b(0x4b1)](),_0x5d5dd8),this[_0xe36c4b(0x15b)](_0x5d5dd8);}if(_0x26dae4[_0xe36c4b(0x3ed)](/(\d+) RANDOM ANY/i)){if(_0xe36c4b(0x92a)===_0xe36c4b(0x5ef)){if(_0x18e45f[_0xe36c4b(0xa85)]()['angleDuration']>0x0)return!![];this[_0xe36c4b(0x190)]='';}else{let _0x8cf22=Number(RegExp['$1']);while(_0x8cf22--){const _0x46ee88=Math[_0xe36c4b(0x430)](0x2)===0x0?this[_0xe36c4b(0x296)]():this[_0xe36c4b(0x1bd)]();_0x5d5dd8[_0xe36c4b(0x43e)](_0x46ee88['trueRandomTarget']());}return this[_0xe36c4b(0x15b)](_0x5d5dd8);}}if(_0x26dae4[_0xe36c4b(0x3ed)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x18178e=Number(RegExp['$1']);while(_0x18178e--){_0x5d5dd8['push'](this[_0xe36c4b(0x296)]()[_0xe36c4b(0x281)]());}return this['repeatTargets'](_0x5d5dd8);}if(_0x26dae4['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x39708c=Number(RegExp['$1']);while(_0x39708c--){_0x5d5dd8[_0xe36c4b(0x43e)](this[_0xe36c4b(0x1bd)]()['trueRandomTarget']());}return this['repeatTargets'](_0x5d5dd8);}if(_0x26dae4[_0xe36c4b(0x3ed)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5d5dd8[_0xe36c4b(0x43e)](...this[_0xe36c4b(0x1bd)]()[_0xe36c4b(0x338)]()[_0xe36c4b(0x691)](_0x1f04fd=>_0x1f04fd!==this['subject']())),this[_0xe36c4b(0x15b)](_0x5d5dd8);return VisuMZ[_0xe36c4b(0x602)][_0xe36c4b(0x299)][_0xe36c4b(0x5fd)](this);},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x549)]=function(_0x145262){const _0x4542b8=_0x8db8d6,_0xc9c67=[];for(let _0x42b525=0x0;_0x42b525<this['numTargets']();_0x42b525++){if('HKdzg'!==_0x4542b8(0x492)){if(!this[_0x4542b8(0x6cf)]())return;_0x341a6a['isBattleFlipped']()?this['x']=_0x1dd218['boxWidth']-this['enemy']()[_0x4542b8(0x538)]()[_0x4542b8(0x94f)]:this['x']=this['enemy']()[_0x4542b8(0x538)]()[_0x4542b8(0x94f)];this['x']-=_0x329884[_0x4542b8(0x423)](this['width']/0x2),this['y']=this[_0x4542b8(0x6cf)]()[_0x4542b8(0x538)]()['_baseY']-_0x24f5c0[_0x4542b8(0x423)](this[_0x4542b8(0x8ca)]()*1.5);const _0x22c6b9=_0x4d287d[_0x4542b8(0x602)][_0x4542b8(0x466)]['Enemy'];this['x']+=_0x22c6b9['NameOffsetX']||0x0,this['y']+=_0x22c6b9[_0x4542b8(0x2b3)]||0x0;}else _0xc9c67[_0x4542b8(0x43e)](_0x145262['trueRandomTarget']());}return _0xc9c67;},Game_Action['prototype'][_0x8db8d6(0x583)]=function(_0x42ffa0){const _0x58e6dc=_0x8db8d6;if(!this['item']())return _0x42ffa0;const _0x5b89ac=this['item']()['note'];return _0x5b89ac[_0x58e6dc(0x3ed)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&('sAUSD'===_0x58e6dc(0x21d)?_0x42ffa0[_0x58e6dc(0xa8c)](this[_0x58e6dc(0x4b1)]()):_0x380155[_0x58e6dc(0x602)][_0x58e6dc(0xa15)][_0x58e6dc(0x5fd)](this,_0x11be28)),_0x42ffa0;},VisuMZ[_0x8db8d6(0x602)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x4c3)],Game_Action['prototype'][_0x8db8d6(0x4c3)]=function(_0x54211a,_0xa72a74){const _0x33c78c=_0x8db8d6,_0x101879=_0x54211a['isImmortal']();this[_0x33c78c(0x4b1)]()[_0x33c78c(0x2c8)]()[_0x33c78c(0xa5c)](_0x54211a[_0x33c78c(0x700)]())&&(_0x33c78c(0x6f2)!==_0x33c78c(0x6f2)?(this[_0x33c78c(0x8d9)]=!this[_0x33c78c(0x9ce)][_0x33c78c(0x8e7)](),!this[_0x33c78c(0x8d9)]&&(this['opacity']=0x0)):_0x54211a['setImmortal'](![])),VisuMZ[_0x33c78c(0x602)]['Game_Action_itemEffectAddAttackState'][_0x33c78c(0x5fd)](this,_0x54211a,_0xa72a74),_0x54211a[_0x33c78c(0x44a)](_0x101879);},VisuMZ[_0x8db8d6(0x602)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x8db8d6(0x6da)]['itemEffectAddNormalState'],Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x2cf)]=function(_0x391c02,_0x511600){const _0x19a85e=_0x8db8d6,_0xc2fef2=_0x391c02[_0x19a85e(0x70e)]();_0x511600['dataId']===_0x391c02[_0x19a85e(0x700)]()&&_0x391c02[_0x19a85e(0x44a)](![]),VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState'][_0x19a85e(0x5fd)](this,_0x391c02,_0x511600),_0x391c02[_0x19a85e(0x44a)](_0xc2fef2);},VisuMZ[_0x8db8d6(0x602)]['Game_Action_applyGlobal']=Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x359)],Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x359)]=function(){const _0x1b9e02=_0x8db8d6;VisuMZ['BattleCore'][_0x1b9e02(0x814)][_0x1b9e02(0x5fd)](this),this['applyGlobalCommonEventNotetags'](),this['resetResultSwitches']();},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x7ef)]=function(){const _0xc76ec1=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;const _0x2e2077=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x4aa83e=this[_0xc76ec1(0xaf1)]()[_0xc76ec1(0x44e)][_0xc76ec1(0x3ed)](_0x2e2077);if(_0x4aa83e)for(const _0x4b45cc of _0x4aa83e){if(!_0x4b45cc)continue;_0x4b45cc[_0xc76ec1(0x3ed)](_0x2e2077);const _0x851b10=String(RegExp['$1'])['split'](',')[_0xc76ec1(0x9f8)](_0x508911=>String(_0x508911)['trim']()),_0x3777da=_0x851b10[_0xc76ec1(0x9f8)](_0x4eee23=>DataManager[_0xc76ec1(0x560)](_0x4eee23));for(const _0x33f0a1 of _0x3777da){const _0x291638=$dataCommonEvents[_0x33f0a1];_0x291638&&$gameTemp[_0xc76ec1(0x2a3)](_0x33f0a1);}}},DataManager[_0x8db8d6(0x560)]=function(_0x309595){const _0xaac64a=_0x8db8d6;_0x309595=_0x309595['toUpperCase']()[_0xaac64a(0xa51)](),this[_0xaac64a(0x9d7)]=this['_commonEventIDs']||{};if(this[_0xaac64a(0x9d7)][_0x309595])return this[_0xaac64a(0x9d7)][_0x309595];for(const _0x187657 of $dataCommonEvents){if(!_0x187657)continue;let _0x3d70e9=_0x187657[_0xaac64a(0x7fd)];_0x3d70e9=_0x3d70e9[_0xaac64a(0x929)](/\x1I\[(\d+)\]/gi,''),_0x3d70e9=_0x3d70e9[_0xaac64a(0x929)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x3d70e9['toUpperCase']()[_0xaac64a(0xa51)]()]=_0x187657['id'];}return this['_commonEventIDs'][_0x309595]||0x0;},Game_Action['prototype'][_0x8db8d6(0x1d1)]=function(){const _0xe5f80c=_0x8db8d6;if(!SceneManager[_0xe5f80c(0x38c)]())return;const _0xd59c03=VisuMZ[_0xe5f80c(0x602)][_0xe5f80c(0x466)][_0xe5f80c(0x1e8)];_0xd59c03[_0xe5f80c(0x751)]&&$gameSwitches[_0xe5f80c(0x4c5)](_0xd59c03[_0xe5f80c(0x751)],![]),_0xd59c03['SwitchMissEvade']&&$gameSwitches[_0xe5f80c(0x4c5)](_0xd59c03['SwitchMissEvade'],![]),_0xd59c03[_0xe5f80c(0x22d)]&&('kvQBK'!==_0xe5f80c(0x1c5)?$gameVariables[_0xe5f80c(0x4c5)](_0xd59c03[_0xe5f80c(0x22d)],0x0):_0x2d032d[_0xe5f80c(0x602)][_0xe5f80c(0x36e)][_0xe5f80c(0x5fd)](this)),_0xd59c03[_0xe5f80c(0xa6d)]&&('Pkyyk'==='Pkyyk'?$gameVariables[_0xe5f80c(0x4c5)](_0xd59c03[_0xe5f80c(0xa6d)],0x0):_0x3d3370[_0xe5f80c(0x602)]['Scene_Battle_commandFight'][_0xe5f80c(0x5fd)](this));},Game_Action[_0x8db8d6(0x6da)][_0x8db8d6(0x4da)]=function(_0x4719b4){const _0x32332e=_0x8db8d6;if(!SceneManager[_0x32332e(0x38c)]())return;if(!_0x4719b4)return;const _0x58aedd=_0x4719b4[_0x32332e(0x57a)](),_0x3e8079=VisuMZ[_0x32332e(0x602)][_0x32332e(0x466)]['Mechanics'];_0x3e8079[_0x32332e(0x751)]&&_0x58aedd[_0x32332e(0x47d)]&&$gameSwitches[_0x32332e(0x4c5)](_0x3e8079['SwitchCritical'],!![]);_0x3e8079['SwitchMissEvade']&&(_0x58aedd[_0x32332e(0x3f7)]||_0x58aedd['evaded'])&&$gameSwitches[_0x32332e(0x4c5)](_0x3e8079[_0x32332e(0x157)],!![]);if(_0x3e8079[_0x32332e(0x22d)]){let _0x2293f8=$gameVariables[_0x32332e(0x56b)](_0x3e8079[_0x32332e(0x22d)]);_0x58aedd[_0x32332e(0x3b7)]>0x0&&(_0x2293f8+=Math['abs'](_0x58aedd['hpDamage'])),$gameVariables[_0x32332e(0x4c5)](_0x3e8079['VariableDmg'],_0x2293f8);}if(_0x3e8079[_0x32332e(0xa6d)]){if('gSjXn'!==_0x32332e(0x410)){let _0x477f67=$gameVariables[_0x32332e(0x56b)](_0x3e8079[_0x32332e(0xa6d)]);_0x58aedd[_0x32332e(0x3b7)]<0x0&&(_0x32332e(0x31d)!==_0x32332e(0x6ee)?_0x477f67+=Math[_0x32332e(0x78b)](_0x58aedd[_0x32332e(0x3b7)]):this['initialize'](...arguments)),$gameVariables[_0x32332e(0x4c5)](_0x3e8079[_0x32332e(0xa6d)],_0x477f67);}else return _0x208d68[_0x32332e(0x724)]-_0xc7ec19[_0x32332e(0x724)];}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x60d)]=Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x13d)],Game_BattlerBase['prototype']['initMembers']=function(){const _0x5f5c18=_0x8db8d6;VisuMZ[_0x5f5c18(0x602)][_0x5f5c18(0x60d)][_0x5f5c18(0x5fd)](this),this[_0x5f5c18(0x5a2)]();},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x5a2)]=function(){const _0x3446f4=_0x8db8d6;this[_0x3446f4(0xb09)]=![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x618)]=Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x548)],Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x548)]=function(){const _0x145243=_0x8db8d6;this[_0x145243(0x370)]={},VisuMZ[_0x145243(0x602)][_0x145243(0x618)][_0x145243(0x5fd)](this);},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x2ed)]=function(_0x516ea5){const _0x5e8ea3=_0x8db8d6;return this['_cache']=this['_cache']||{},this[_0x5e8ea3(0x370)][_0x516ea5]!==undefined;},Game_BattlerBase[_0x8db8d6(0x6da)]['hardDamageCap']=function(){const _0xeb7916=_0x8db8d6;if(this['_cache'][_0xeb7916(0x98d)]!==undefined)return this[_0xeb7916(0x370)][_0xeb7916(0x98d)];const _0x3d46c1=/<DAMAGE CAP:[ ](\d+)>/i,_0x4e17aa=this[_0xeb7916(0x1f3)]()[_0xeb7916(0x9f8)](_0x19a509=>_0x19a509&&_0x19a509[_0xeb7916(0x44e)]['match'](_0x3d46c1)?Number(RegExp['$1']):0x0);let _0x2d6b05=_0x4e17aa[_0xeb7916(0x5e0)]>0x0?Math[_0xeb7916(0x623)](..._0x4e17aa):0x0;if(_0x2d6b05<=0x0)_0x2d6b05=VisuMZ[_0xeb7916(0x602)][_0xeb7916(0x466)][_0xeb7916(0x409)][_0xeb7916(0x2f5)];return this[_0xeb7916(0x370)][_0xeb7916(0x98d)]=_0x2d6b05,this['_cache'][_0xeb7916(0x98d)];},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x5c3)]=function(){const _0x3220a5=_0x8db8d6;if(this[_0x3220a5(0x370)][_0x3220a5(0x114)]!==undefined)return this['_cache']['softDamageCap'];let _0x3b622b=VisuMZ[_0x3220a5(0x602)][_0x3220a5(0x466)][_0x3220a5(0x409)][_0x3220a5(0xa9b)];const _0x4c2d13=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4533ff=this['traitObjects']()[_0x3220a5(0x9f8)](_0x3178d0=>_0x3178d0&&_0x3178d0['note'][_0x3220a5(0x3ed)](_0x4c2d13)?Number(RegExp['$1'])/0x64:0x0);return _0x3b622b=_0x4533ff[_0x3220a5(0x65f)]((_0x3ed3f7,_0x3adfe0)=>_0x3ed3f7+_0x3adfe0,_0x3b622b),this['_cache']['softDamageCap']=_0x3b622b,this[_0x3220a5(0x370)][_0x3220a5(0x114)]['clamp'](0.01,0x1);},VisuMZ['BattleCore'][_0x8db8d6(0x2c2)]=Game_BattlerBase['prototype'][_0x8db8d6(0x202)],Game_BattlerBase['prototype'][_0x8db8d6(0x202)]=function(){const _0x2e0c87=_0x8db8d6;VisuMZ[_0x2e0c87(0x602)][_0x2e0c87(0x2c2)][_0x2e0c87(0x5fd)](this),SceneManager[_0x2e0c87(0x38c)]()&&this[_0x2e0c87(0xa1d)](_0x2e0c87(0x7a7));},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x538)]=function(){const _0x366c20=_0x8db8d6;if(!SceneManager[_0x366c20(0x38c)]())return null;if(!SceneManager['_scene'][_0x366c20(0x485)])return null;return SceneManager['_scene'][_0x366c20(0x485)][_0x366c20(0x9dd)](this);},Game_BattlerBase[_0x8db8d6(0x6da)]['svBattlerAnchorX']=function(){const _0x1d1531=_0x8db8d6;return VisuMZ['BattleCore'][_0x1d1531(0x466)][_0x1d1531(0x73a)][_0x1d1531(0x203)];},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x9f5)]=function(){const _0x346ec0=_0x8db8d6;return VisuMZ[_0x346ec0(0x602)]['Settings'][_0x346ec0(0x73a)][_0x346ec0(0xb3e)];},Game_BattlerBase[_0x8db8d6(0x6da)]['svBattlerShadowVisible']=function(){const _0x22db6f=_0x8db8d6;return this[_0x22db6f(0x367)]&&this[_0x22db6f(0x367)]()?VisuMZ[_0x22db6f(0x602)][_0x22db6f(0x466)][_0x22db6f(0x73a)][_0x22db6f(0x831)]:VisuMZ[_0x22db6f(0x602)][_0x22db6f(0x466)][_0x22db6f(0x8fe)][_0x22db6f(0x831)];},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x14c)]=function(){return!![];},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x585)]=function(){return 0x0;},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x277)]=function(){return 0x0;},Game_BattlerBase['prototype']['createBattleUIOffsetX']=function(_0x320c59){const _0x3c8a9e=_0x8db8d6;if(!_0x320c59)return 0x0;let _0x135ec2=0x0;const _0x46ac31=_0x320c59['note'];if(_0x46ac31[_0x3c8a9e(0x3ed)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x3c8a9e(0x72e)!=='MtOLR')_0x135ec2+=Number(RegExp['$1']);else{const _0x351e86=this['commandStyle'](),_0x1ee783=_0x5f05c6[_0x3c8a9e(0x602)][_0x3c8a9e(0x466)][_0x3c8a9e(0x956)]['CmdIconEscape'],_0x506b19=_0x351e86==='text'?_0xace8f0['escape']:_0x3c8a9e(0x539)[_0x3c8a9e(0xad2)](_0x1ee783,_0x117ff3['escape']),_0x5d02b8=this['isEscapeCommandEnabled']();this[_0x3c8a9e(0x878)](_0x506b19,_0x3c8a9e(0xa44),_0x5d02b8);}}return _0x46ac31[_0x3c8a9e(0x3ed)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3c8a9e(0x1ac)!==_0x3c8a9e(0x1bf)?_0x135ec2+=Number(RegExp['$1']):this['_lastPluginCommandInterpreter']=_0x531e1d),_0x135ec2;},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x2a5)]=function(_0x5f1b24){const _0x3a15c3=_0x8db8d6;if(!_0x5f1b24)return 0x0;let _0x263b22=0x0;const _0xf3cf65=_0x5f1b24['note'];_0xf3cf65[_0x3a15c3(0x3ed)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x3a15c3(0x8a8)!=='ZlqII'?(this['_cache'][_0x3a15c3(0x97f)]=_0x473e4a(_0x3ef335['$1']),this[_0x3a15c3(0x370)]['svAnchorY']=_0x36c296(_0x3d4858['$2'])):_0x263b22+=Number(RegExp['$1']));if(_0xf3cf65[_0x3a15c3(0x3ed)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x3a15c3(0x4ee)===_0x3a15c3(0x4ee))_0x263b22+=Number(RegExp['$2']);else return;}return _0x263b22;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x424)]=Game_BattlerBase['prototype'][_0x8db8d6(0xab9)],Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0xab9)]=function(_0x45e2a9){const _0x56ad80=_0x8db8d6;if(_0x45e2a9===this[_0x56ad80(0x700)]()&&this[_0x56ad80(0x70e)]())return!![];return VisuMZ[_0x56ad80(0x602)][_0x56ad80(0x424)][_0x56ad80(0x5fd)](this,_0x45e2a9);},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x70e)]=function(){const _0x431a1d=_0x8db8d6;return this[_0x431a1d(0xb09)];},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x44a)]=function(_0x48f10c){const _0x26004f=_0x8db8d6;_0x48f10c?this[_0x26004f(0x6d3)]():_0x26004f(0x6e9)!==_0x26004f(0x6e9)?_0x4dbfb6[_0x26004f(0x602)][_0x26004f(0x743)]['call'](this):this[_0x26004f(0x35d)]();},Game_BattlerBase['prototype'][_0x8db8d6(0x6d3)]=function(){if(this['isDead']())return;this['_immortal']=!![];},Game_BattlerBase['prototype'][_0x8db8d6(0x35d)]=function(){const _0x275545=_0x8db8d6,_0x3fa14b=this['isAlive']();this[_0x275545(0xb09)]=![],this[_0x275545(0x548)](),this[_0x275545(0x20a)]()&&_0x3fa14b&&(this[_0x275545(0x79f)](),this[_0x275545(0x74c)]());},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1cc)]=Game_BattlerBase[_0x8db8d6(0x6da)]['canAttack'],Game_BattlerBase[_0x8db8d6(0x6da)]['canAttack']=function(){const _0x57ae87=_0x8db8d6;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x57ae87(0x602)][_0x57ae87(0x1cc)][_0x57ae87(0x5fd)](this);},Game_BattlerBase['prototype'][_0x8db8d6(0x2b7)]=function(){const _0x2a93e2=_0x8db8d6;for(const _0x5942af of this['traitObjects']()){if(_0x2a93e2(0x8dd)===_0x2a93e2(0x34b)){const _0x413f22=this[_0x2a93e2(0x449)](),_0x19e846=_0x413f22[0x0]?_0x413f22[0x0][_0x2a93e2(0x22f)]:0x0;return _0x354013[_0x2a93e2(0x610)][_0x19e846];}else{if(!_0x5942af)continue;if(_0x5942af[_0x2a93e2(0x44e)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x19a)]=Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x4ed)],Game_BattlerBase[_0x8db8d6(0x6da)]['canGuard']=function(){const _0x34b4ce=_0x8db8d6;if(!this[_0x34b4ce(0x7b2)]())return![];return VisuMZ[_0x34b4ce(0x602)][_0x34b4ce(0x19a)]['call'](this);},Game_BattlerBase[_0x8db8d6(0x6da)]['canGuardBattleCore']=function(){const _0x2d76d8=_0x8db8d6;for(const _0x2d1735 of this[_0x2d76d8(0x1f3)]()){if(_0x2d76d8(0x498)!==_0x2d76d8(0xa74)){if(!_0x2d1735)continue;if(_0x2d1735[_0x2d76d8(0x44e)][_0x2d76d8(0x3ed)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else{const _0x2e3f6e=_0x404675['BattleCore'][_0x2d76d8(0x466)][_0x2d76d8(0xa31)],_0x50d8d0=_0x2cb5c3['prototype'][_0x2d76d8(0x73b)](),_0x21ef3d=_0x188001['boxWidth']-(_0x2e3f6e['CommandWidth']||0xc0),_0x920adb=this['windowAreaHeight']()+_0x50d8d0,_0x263939=this[_0x2d76d8(0x19e)]()?0x0:_0x5580ce[_0x2d76d8(0x3ef)]-_0x21ef3d,_0x2bee2f=_0x2d9869['boxHeight']-_0x920adb+_0x50d8d0;return new _0x5a625d(_0x263939,_0x2bee2f,_0x21ef3d,_0x920adb);}}return!![];},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x3e9)]=function(){const _0x1d1655=_0x8db8d6;for(const _0x1b2b29 of this['traitObjects']()){if(_0x1d1655(0xa73)===_0x1d1655(0x70f)){const _0x58c614=_0x2c4fb7['BattleCore'][_0x1d1655(0x466)][_0x1d1655(0x409)],_0x161020=new _0xbe502a();_0x161020[_0x1d1655(0x736)]=_0x58c614['PopupDuration'],this[_0x1d1655(0x590)](_0x161020),_0x161020[_0x1d1655(0x88c)](this[_0x1d1655(0x980)]),_0x161020['setupBattleCore'](this[_0x1d1655(0x980)]),this['addDamageSprite'](_0x161020);}else{if(!_0x1b2b29)continue;if(_0x1b2b29['note']['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},VisuMZ['BattleCore'][_0x8db8d6(0x12f)]=Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x1de)],Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x1de)]=function(){const _0x1f615b=_0x8db8d6;if(SceneManager[_0x1f615b(0x38c)]()&&$gameTroop[_0x1f615b(0x243)]()<=0x0)return;if(SceneManager['isSceneBattle']()&&BattleManager[_0x1f615b(0x2f8)]()&&this['_lastRegenFrameCount']===Graphics['frameCount'])return;this[_0x1f615b(0x4b0)]=Graphics[_0x1f615b(0x8bc)],this[_0x1f615b(0x393)](_0x1f615b(0x6e8)),VisuMZ['BattleCore'][_0x1f615b(0x12f)][_0x1f615b(0x5fd)](this),this['regenerateAllBattleCore'](),this[_0x1f615b(0x393)](_0x1f615b(0x9bd));},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x4ab)]=function(){const _0x361ec8=_0x8db8d6;if(SceneManager[_0x361ec8(0x38c)]())for(const _0x40b49a of this[_0x361ec8(0x1f3)]()){if(_0x361ec8(0x944)!==_0x361ec8(0x682)){if(!_0x40b49a)continue;this['onRegeneratePlayStateAnimation'](_0x40b49a);}else this['_methods'][_0x361ec8(0x43e)](_0x8daab);}},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x989)]=function(_0x32b24e){const _0x5151ac=_0x8db8d6;if(!Imported[_0x5151ac(0x730)])return;if(!SceneManager[_0x5151ac(0x38c)]())return;if(this[_0x5151ac(0x20a)]())return;if(this[_0x5151ac(0x8e7)]())return;if(_0x32b24e[_0x5151ac(0x44e)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x2386fd=Number(RegExp['$1']);$gameTemp[_0x5151ac(0x8e1)]([this],_0x2386fd,![],![]);}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x917)]=Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x947)],Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x947)]=function(){const _0x463eef=_0x8db8d6;this[_0x463eef(0x393)](_0x463eef(0x39e)),VisuMZ['BattleCore'][_0x463eef(0x917)][_0x463eef(0x5fd)](this),this[_0x463eef(0x393)](_0x463eef(0xaf3));},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x5e6)]=Game_Battler['prototype'][_0x8db8d6(0xb25)],Game_Battler[_0x8db8d6(0x6da)]['onTurnEnd']=function(){const _0x44b226=_0x8db8d6;this[_0x44b226(0x393)]('PreEndTurnJS'),VisuMZ['BattleCore']['Game_Battler_onTurnEnd'][_0x44b226(0x5fd)](this),this[_0x44b226(0x393)](_0x44b226(0x67e));},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x393)]=function(_0x4281d6){const _0x25a4ca=_0x8db8d6;if(this['_tempBattler']||this[_0x25a4ca(0x5d2)])return;const _0x95ba61=VisuMZ[_0x25a4ca(0x602)][_0x25a4ca(0x466)]['Mechanics'];if(_0x95ba61[_0x4281d6])_0x95ba61[_0x4281d6]['call'](this);for(const _0x4e98a1 of this[_0x25a4ca(0x1f3)]()){if(!_0x4e98a1)continue;key=VisuMZ[_0x25a4ca(0x602)][_0x25a4ca(0x7c1)](_0x4e98a1,_0x4281d6);if(VisuMZ[_0x25a4ca(0x602)]['JS'][key]){if(_0x25a4ca(0x879)===_0x25a4ca(0x437)){let _0x3c959f=this['getHardDamageCap']();return _0x3723da['clamp'](-_0x3c959f,_0x3c959f);}else VisuMZ[_0x25a4ca(0x602)]['JS'][key]['call'](this,this,this,_0x4e98a1,0x0);}}},Game_Battler[_0x8db8d6(0x6da)]['chantStyle']=function(){const _0x223f35=_0x8db8d6;return VisuMZ['BattleCore']['Settings']['Actor'][_0x223f35(0x2b8)]||![];},Game_Battler[_0x8db8d6(0x6da)]['isChanting']=function(){const _0x536818=_0x8db8d6;if(this[_0x536818(0xa2c)]()){if(this[_0x536818(0x6f7)]()){if(this[_0x536818(0x7a0)][_0x536818(0xa0a)](_0x2116c6=>_0x2116c6[_0x536818(0xaf1)]()&&_0x2116c6['isMagical']()))return!![];}else{if(this[_0x536818(0x7a0)][_0x536818(0xa0a)](_0x52b79a=>_0x52b79a[_0x536818(0xaf1)]()&&_0x52b79a[_0x536818(0x936)]())){if(_0x536818(0x122)===_0x536818(0x752))_0x5515d3[_0x536818(0x4c6)]=![];else return!![];}}}if(BattleManager['isTpb']()&&this[_0x536818(0x5ae)]===_0x536818(0x1e9)){if(_0x536818(0x57e)===_0x536818(0x389)){_0x45e31b[_0x536818(0x602)][_0x536818(0x7a9)][_0x536818(0x5fd)](this,_0x2434c2);if(!_0x32674['isGuard']()){const _0x1be809=this[_0x536818(0x538)]();_0x1be809&&_0x1be809[_0x536818(0x6f6)]();}this['setBattlerFlip'](![]);}else{if(this[_0x536818(0x6f7)]())return this[_0x536818(0x7bc)]()&&this[_0x536818(0x7bc)]()['item']()&&this['currentAction']()[_0x536818(0x60f)]();else{if(_0x536818(0x665)!=='IpfMX'){_0x54ccdb['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x1e4101=_0x56613d(_0x8dc4db['$1']),_0x53814a=_0x2b154a(_0x1b0900['$2']),_0x91cdb=_0x53814a===0x1?this[_0x536818(0x902)]:this['_regionBattleback2'],_0x5b3eae=_0x4e732c(_0xe8bad5['$3']);_0x91cdb[_0x1e4101]=_0x5b3eae;}else return this['currentAction']()&&this[_0x536818(0x7bc)]()['item']()&&this['currentAction']()[_0x536818(0x936)]();}}}return![];},Game_Battler['prototype'][_0x8db8d6(0x604)]=function(){const _0x584397=_0x8db8d6;if(BattleManager[_0x584397(0x2f8)]()&&this[_0x584397(0x5ae)]==='casting')return this[_0x584397(0x6f7)]()?this[_0x584397(0x7bc)]()&&this[_0x584397(0x7bc)]()[_0x584397(0xaf1)]()&&!this[_0x584397(0x7bc)]()[_0x584397(0x60f)]():this[_0x584397(0x7bc)]()&&this['currentAction']()[_0x584397(0xaf1)]()&&!this[_0x584397(0x7bc)]()['isMagicSkill']();return![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa2d)]=Game_Battler[_0x8db8d6(0x6da)]['clearDamagePopup'],Game_Battler['prototype'][_0x8db8d6(0xb2f)]=function(){const _0x296d48=_0x8db8d6;VisuMZ[_0x296d48(0x602)][_0x296d48(0xa2d)][_0x296d48(0x5fd)](this),this[_0x296d48(0x159)]=[];},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x2dd)]=function(){const _0x282e81=_0x8db8d6;if(!this[_0x282e81(0x159)])this['clearDamagePopup']();return this[_0x282e81(0x159)][_0x282e81(0x5e0)]>0x0;},Game_Battler['prototype'][_0x8db8d6(0x35c)]=function(){const _0xda0305=_0x8db8d6;if(!SceneManager[_0xda0305(0x38c)]())return;if(!this['_damagePopupArray'])this[_0xda0305(0xb2f)]();this[_0xda0305(0x8b9)]();const _0x4ceb70=this[_0xda0305(0x538)]();if(_0x4ceb70)_0x4ceb70[_0xda0305(0x303)]();},Game_Battler['prototype'][_0x8db8d6(0x8b9)]=function(){const _0x27bb82=_0x8db8d6,_0x2a9052=this[_0x27bb82(0x57a)]();if(_0x2a9052[_0x27bb82(0x3f7)]||_0x2a9052[_0x27bb82(0x4a7)]){if(_0x27bb82(0x52c)===_0x27bb82(0xa4d))return this['svBattlerData']()[_0x27bb82(0x7fd)];else{const _0x89dc14=JsonEx['makeDeepCopy'](_0x2a9052);_0x89dc14[_0x27bb82(0x4af)]=![],_0x89dc14[_0x27bb82(0x710)]=0x0,this['_damagePopupArray'][_0x27bb82(0x43e)](_0x89dc14);}}if(_0x2a9052[_0x27bb82(0x4af)]){if('suhbg'!==_0x27bb82(0xac2)){const _0x2d7b19=JsonEx[_0x27bb82(0x885)](_0x2a9052);_0x2d7b19['missed']=![],_0x2d7b19[_0x27bb82(0x4a7)]=![],_0x2d7b19['mpDamage']=0x0,this[_0x27bb82(0x159)]['push'](_0x2d7b19);}else this['drawTextEx'](_0x349604,_0x88ee01['x']+_0x5297e1[_0x27bb82(0x5cb)]-_0x136981,_0x13499e['y'],_0x19c496);}if(_0x2a9052[_0x27bb82(0x710)]!==0x0){if(_0x27bb82(0x3cc)===_0x27bb82(0x7d4)){if(!this[_0x27bb82(0x804)]()&&_0x49de3a['_autoBattle'])return!![];return _0x5efe83[_0x27bb82(0x6da)][_0x27bb82(0x7e3)][_0x27bb82(0x5fd)](this);}else{const _0x1eb09f=JsonEx[_0x27bb82(0x885)](_0x2a9052);_0x1eb09f[_0x27bb82(0x3f7)]=![],_0x1eb09f['evaded']=![],_0x1eb09f['hpAffected']=![],this[_0x27bb82(0x159)][_0x27bb82(0x43e)](_0x1eb09f);}}},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x27e)]=function(){const _0x6722a6=_0x8db8d6;if(!this['_damagePopupArray'])this[_0x6722a6(0xb2f)]();if(VisuMZ['BattleCore']['Settings'][_0x6722a6(0x409)][_0x6722a6(0x2d6)]){if('YkNkF'!==_0x6722a6(0x336)){this[_0x6722a6(0x5cb)]=_0xb25f73['width'],this[_0x6722a6(0x7f5)]=_0x320d2f[_0x6722a6(0x7f5)];const _0x2063f1=this[_0x6722a6(0x5cb)]/this['bitmap'][_0x6722a6(0x5cb)],_0x44c21e=this[_0x6722a6(0x7f5)]/this['bitmap'][_0x6722a6(0x7f5)],_0x34142a=_0xef45bd[_0x6722a6(0x623)](_0x2063f1,_0x44c21e);this['scale']['x']=_0x34142a,this[_0x6722a6(0x728)]['y']=_0x34142a,this['x']=(_0xd76baa[_0x6722a6(0x5cb)]-this[_0x6722a6(0x5cb)])/0x2,this['y']=_0x670151[_0x6722a6(0x7f5)]-this['height'];}else return this[_0x6722a6(0x159)][_0x6722a6(0x646)]();}else return this[_0x6722a6(0x159)][_0x6722a6(0x6f0)]();},Game_Battler[_0x8db8d6(0x6da)]['setupTextPopup']=function(_0x58d54d,_0xf4d4c3){const _0x3e6459=_0x8db8d6;if(!SceneManager[_0x3e6459(0x38c)]())return;if(!this[_0x3e6459(0x538)]())return;if(_0x58d54d[_0x3e6459(0x5e0)]<=0x0)return;_0xf4d4c3=_0xf4d4c3||{},_0xf4d4c3['textColor']=_0xf4d4c3[_0x3e6459(0x858)]||_0x3e6459(0x5f7),_0xf4d4c3[_0x3e6459(0x7b6)]=_0xf4d4c3[_0x3e6459(0x7b6)]||[0x0,0x0,0x0,0x0],_0xf4d4c3['flashDuration']=_0xf4d4c3[_0x3e6459(0x1c8)]||0x0,this['battler']()[_0x3e6459(0x10a)](_0x58d54d,_0xf4d4c3);},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x9e4)]=function(_0x517284,_0x2f2152,_0x5b9697){const _0x451221=_0x8db8d6;if(!SceneManager[_0x451221(0x38c)]())return;if(!this[_0x451221(0x538)]())return;if(_0x2f2152[_0x451221(0x5e0)]<=0x0)return;_0x5b9697=_0x5b9697||{},_0x5b9697['textColor']=_0x5b9697[_0x451221(0x858)]||_0x451221(0x5f7),_0x5b9697[_0x451221(0x7b6)]=_0x5b9697[_0x451221(0x7b6)]||[0x0,0x0,0x0,0x0],_0x5b9697[_0x451221(0x1c8)]=_0x5b9697['flashDuration']||0x0,this['battler']()[_0x451221(0x9e4)](_0x517284,_0x2f2152,_0x5b9697);},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x7d5)]=function(){const _0x41bd5a=_0x8db8d6;if(this['isHidden']())return![];if(this[_0x41bd5a(0xb02)]()&&this[_0x41bd5a(0x38b)]())return!![];if(this[_0x41bd5a(0x26d)]()&&this['hasSvBattler']()){if(this[_0x41bd5a(0x20a)]()&&this[_0x41bd5a(0x7b8)]())return![];}else{if(this[_0x41bd5a(0x20a)]()){if(_0x41bd5a(0x744)===_0x41bd5a(0xaa3))this[_0x41bd5a(0x1a9)]['splice'](_0x4fcccc,0x0,_0x5270c8);else return![];}}return!![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x62d)]=Game_Battler[_0x8db8d6(0x6da)]['clearMotion'],Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x3d7)]=function(){const _0x19f097=_0x8db8d6;VisuMZ[_0x19f097(0x602)]['Game_Battler_clearMotion'][_0x19f097(0x5fd)](this),this[_0x19f097(0xa8b)]();},Game_Battler[_0x8db8d6(0x6da)]['canBattlerMove']=function(){return!![];},Game_Battler['prototype'][_0x8db8d6(0x3b4)]=function(){return![];},VisuMZ[_0x8db8d6(0x602)]['Game_Battler_onBattleStart']=Game_Battler['prototype'][_0x8db8d6(0x9f0)],Game_Battler['prototype'][_0x8db8d6(0x9f0)]=function(_0x46fa1c){const _0x369226=_0x8db8d6;VisuMZ[_0x369226(0x602)][_0x369226(0x474)][_0x369226(0x5fd)](this,_0x46fa1c),this['onBattleStartBattleCore'](_0x46fa1c);},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x1fd)]=function(_0x21869e){const _0x2a69dc=_0x8db8d6;this[_0x2a69dc(0x63d)](![]);},VisuMZ[_0x8db8d6(0x602)]['Game_Battler_performActionStart']=Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x1f7)],Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x1f7)]=function(_0x4d0206){const _0x4bb32f=_0x8db8d6;VisuMZ[_0x4bb32f(0x602)][_0x4bb32f(0x7a9)]['call'](this,_0x4d0206);if(!_0x4d0206[_0x4bb32f(0x4ff)]()){if(_0x4bb32f(0x675)===_0x4bb32f(0x675)){const _0x5d945f=this[_0x4bb32f(0x538)]();_0x5d945f&&_0x5d945f['stepForward']();}else{if(this[_0x4bb32f(0x713)][_0x4bb32f(0x213)])this[_0x4bb32f(0x36b)]=(this[_0x4bb32f(0x36b)]+0x1)%0x4;else this['_pattern']<0x2?this[_0x4bb32f(0x36b)]++:this[_0x4bb32f(0x845)]();this[_0x4bb32f(0xb10)]=0x0;}}this[_0x4bb32f(0x63d)](![]);},Game_Battler[_0x8db8d6(0x6da)]['performActionEndMembers']=function(){const _0x31d83a=_0x8db8d6,_0x2684e4=this[_0x31d83a(0x82e)];this['_flinched']=![];if(BattleManager[_0x31d83a(0x508)]()&&this[_0x31d83a(0xac6)]()){const _0x50d8ea=this[_0x31d83a(0x538)]();if(_0x50d8ea&&_0x2684e4)_0x50d8ea['stepForward']();return;}const _0x32c327=this[_0x31d83a(0x538)]();if(_0x32c327)_0x32c327[_0x31d83a(0x8b3)]();this[_0x31d83a(0x63d)](![]),this[_0x31d83a(0x74c)]();},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x346)]=function(_0x525ee7){const _0x3bd010=_0x8db8d6;if(_0x525ee7[_0x3bd010(0xa97)]()){if(_0x3bd010(0x79a)!==_0x3bd010(0x79a))return[_0x3bd010(0x180),_0x3bd010(0x9a9),_0x3bd010(0x97d)]['includes'](this[_0x3bd010(0x426)][_0x3bd010(0x1a0)]());else this[_0x3bd010(0xa8e)]();}else{if(_0x525ee7[_0x3bd010(0x4ff)]())this['requestMotion'](_0x3bd010(0x9a9));else{if(_0x525ee7[_0x3bd010(0x60f)]()){if('LviSg'===_0x3bd010(0x33d))return this[_0x3bd010(0xaf1)]()[_0x3bd010(0x44e)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?_0xf4922c(_0x2d74ad['$1']):this[_0x3bd010(0x4b1)]()['hardDamageCap']();else this[_0x3bd010(0xa1d)]('spell');}else{if(_0x525ee7[_0x3bd010(0x54a)]())_0x525ee7[_0x3bd010(0xaf1)]()['damage'][_0x3bd010(0x28e)]>0x0?this[_0x3bd010(0xa8e)]():_0x3bd010(0x35a)===_0x3bd010(0x35a)?this[_0x3bd010(0xa1d)](_0x3bd010(0x938)):this[_0x3bd010(0x68a)](_0x88ac9e,'tp',_0x31adc6+0x88*0x2+(_0x711843[_0x3bd010(0x624)]||0x0),_0x47519a+(_0x404ca1['TpGaugeOffsetY']||0x0));else{if(_0x525ee7[_0x3bd010(0x6ca)]()){if(_0x3bd010(0x8c5)===_0x3bd010(0x8c5))this['requestMotion'](_0x3bd010(0xaf1));else{const _0x3cfb34=_0x4ae319[_0x3bd010(0x44e)];if(_0x3cfb34['match'](_0x520dcd[_0x3bd010(0x602)][_0x3bd010(0x812)][_0x291b2e])){const _0x3d3954=_0x18ed36['$1'],_0x479d27=_0x3bd010(0xadc)[_0x3bd010(0xad2)](_0x3d3954),_0x4e646a=_0x322e5c['BattleCore'][_0x3bd010(0x7c1)](_0x7e11cd,_0x4e99fa);_0x35cf0b[_0x3bd010(0x602)]['JS'][_0x4e646a]=new _0x1809eb(_0x479d27);}}}}}}}},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xa26)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x260)]=function(){const _0x29f8d1=_0x8db8d6,_0xba941c=this[_0x29f8d1(0xa26)]();return _0xba941c?_0xba941c[_0x29f8d1(0x8e8)]:0x0;},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x51f)]=function(_0x4b1dea){const _0x205f2a=_0x8db8d6;if(!$gameSystem[_0x205f2a(0x6b5)]())return;const _0x41fcbd=this[_0x205f2a(0x538)](),_0x275abc=_0x4b1dea['battler']();if(!_0x41fcbd||!_0x275abc)return;const _0x550a37=_0x275abc[_0x205f2a(0x94f)],_0x382994=_0x275abc[_0x205f2a(0x214)];this[_0x205f2a(0x553)](_0x550a37,_0x382994,0x0,![],'Linear',-0x1),_0x41fcbd[_0x205f2a(0x245)]();const _0x3b687f=VisuMZ[_0x205f2a(0x602)]['Settings']['ActionSequence'];let _0x42c88a=(_0x275abc[_0x205f2a(0x5cb)]+_0x41fcbd[_0x205f2a(0x5cb)])/0x2;_0x42c88a*=this['isActor']()?0x1:-0x1;let _0x760424=_0x3b687f[_0x205f2a(0x175)]*(this[_0x205f2a(0x367)]()?0x1:-0x1);_0x4b1dea['moveBattlerDistance'](_0x42c88a,_0x760424,0x0,![],'Linear'),_0x275abc[_0x205f2a(0x245)]();},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xa1d)]=function(_0x3eb755){const _0x275c7e=_0x8db8d6;if(SceneManager[_0x275c7e(0x38c)]()){if(_0x275c7e(0xa52)===_0x275c7e(0xa52)){const _0xc1a2b6=this[_0x275c7e(0x538)]();_0xc1a2b6&&(_0xc1a2b6['forceMotion'](_0x3eb755),[_0x275c7e(0x123),_0x275c7e(0x5b8),_0x275c7e(0x483)][_0x275c7e(0xa5c)](_0x3eb755)&&('elTSI'!==_0x275c7e(0x92b)?this[_0x275c7e(0x3dd)]():this['drawTextEx'](_0x5674e6,_0x172619['x'],_0x118aa8['y'],_0x14c0fe)));}else this[_0x275c7e(0x438)]=0x8;}this[_0x275c7e(0xa8b)]();},Game_Battler[_0x8db8d6(0x6da)]['performWeaponAnimation']=function(){},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x342)]=function(_0x4d8a85){const _0xc03463=_0x8db8d6;if(SceneManager[_0xc03463(0x38c)]()){const _0x4acc1d=this['battler']();if(_0x4acc1d)_0x4acc1d[_0xc03463(0x7c8)](_0x4d8a85);}},Game_Battler['prototype'][_0x8db8d6(0x6c0)]=function(){const _0x1dd05c=_0x8db8d6;if(SceneManager[_0x1dd05c(0x38c)]()){const _0x2eef9f=this['getAttackWeaponAnimationId']();this[_0x1dd05c(0x342)](_0x2eef9f);}},Game_Battler[_0x8db8d6(0x6da)]['performCastAnimation']=function(_0x29ddb8,_0x3ffcb8){const _0x586dce=_0x8db8d6;if(!_0x29ddb8)return;if(!_0x29ddb8[_0x586dce(0xaf1)]())return;if(_0x29ddb8[_0x586dce(0xa97)]())return;if(_0x29ddb8[_0x586dce(0x4ff)]())return;if(_0x29ddb8['isItem']())return;let _0x103045=0x0;const _0x5eb7ea=VisuMZ[_0x586dce(0x602)][_0x586dce(0x466)]['ActionSequence'],_0x3cebb4=_0x29ddb8['item']()['note'];if(_0x3cebb4[_0x586dce(0x3ed)](/<CAST ANIMATION: (\d+)>/i))_0x103045=Number(RegExp['$1']);else{if(_0x3cebb4[_0x586dce(0x3ed)](/<NO CAST ANIMATION>/i))return;else{if(_0x29ddb8[_0x586dce(0x6ae)]())_0x103045=_0x5eb7ea[_0x586dce(0x5ba)];else{if(_0x29ddb8[_0x586dce(0xa63)]()){if(_0x586dce(0x4e4)===_0x586dce(0x4e4))_0x103045=_0x5eb7ea[_0x586dce(0x946)];else return _0x586dce(0x45b)['format'](_0x358f07(_0x4e6a09['$1']));}else _0x29ddb8[_0x586dce(0x60f)]()&&(_0x103045=_0x5eb7ea[_0x586dce(0x7f7)]);}}}_0x103045>0x0&&$gameTemp[_0x586dce(0x2d5)]([this],_0x103045,!!_0x3ffcb8);},Game_Battler['prototype'][_0x8db8d6(0xa07)]=function(){const _0x15935a=_0x8db8d6;SoundManager[_0x15935a(0x138)]();let _0x495768=VisuMZ[_0x15935a(0x602)][_0x15935a(0x466)][_0x15935a(0x965)]['ReflectAnimation'];_0x495768>0x0&&$gameTemp['requestAnimation']([this],_0x495768);},VisuMZ[_0x8db8d6(0x602)]['Game_Battler_performDamage']=Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x3b1)],Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x3b1)]=function(){const _0x485035=_0x8db8d6;VisuMZ[_0x485035(0x602)]['Game_Battler_performDamage'][_0x485035(0x5fd)](this),this['performFlinch']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x5c2)]=Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x6e7)],Game_Battler[_0x8db8d6(0x6da)]['performMiss']=function(){const _0x7f2c53=_0x8db8d6;VisuMZ[_0x7f2c53(0x602)][_0x7f2c53(0x5c2)][_0x7f2c53(0x5fd)](this),this['performFlinch']();},VisuMZ[_0x8db8d6(0x602)]['Game_Battler_performEvasion']=Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x349)],Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x349)]=function(){const _0x19adbc=_0x8db8d6;VisuMZ['BattleCore'][_0x19adbc(0xa67)]['call'](this),this['performFlinch']();},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x447)]=function(){const _0x537819=_0x8db8d6;if(!$gameSystem[_0x537819(0x6b5)]())return;if(this[_0x537819(0x82e)])return;this['_flinched']=!![];const _0x5ba59e=this[_0x537819(0x538)]();if(_0x5ba59e)_0x5ba59e[_0x537819(0x674)]();},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x74c)]=function(){const _0x5da9cd=_0x8db8d6;if(this[_0x5da9cd(0x20a)]()&&this[_0x5da9cd(0x3ce)]!==_0x5da9cd(0x7a7)){this[_0x5da9cd(0xa1d)]('dead');return;}if(this[_0x5da9cd(0x20a)]()&&this['_motionType']===_0x5da9cd(0x7a7))return;if(!!this['_freezeMotionData'])return;if(this[_0x5da9cd(0x26d)]()){if(_0x5da9cd(0x384)===_0x5da9cd(0x384)){if(!this[_0x5da9cd(0x4f4)]()&&this!==BattleManager['_subject']){if(this['battler']())this[_0x5da9cd(0x538)]()[_0x5da9cd(0x845)]();}this[_0x5da9cd(0xa8b)]();return;}else{const _0x5d8f03=_0x416489[_0x5da9cd(0xa6a)]('['+_0x39c9de['$1'][_0x5da9cd(0x3ed)](/\d+/g)+']');for(const _0x4264b4 of _0x5d8f03){if(_0x3fdaa0[_0x5da9cd(0x56b)](_0x4264b4))return!![];}return![];}}if(this['_motionType']===_0x5da9cd(0xb30))return;if(this[_0x5da9cd(0x3ce)]===_0x5da9cd(0xa44)&&!BattleManager[_0x5da9cd(0xac6)]())return;if(this[_0x5da9cd(0x3ce)]==='guard'&&!BattleManager[_0x5da9cd(0xac6)]())return;this[_0x5da9cd(0x3d7)]();if(this['battler']()&&BattleManager[_0x5da9cd(0xac6)]()){if(_0x5da9cd(0xa03)!=='Agfbg')_0x376bb7=_0x4a9aa9['x']+_0x450952[_0x5da9cd(0x587)]+0x8;else{this['battler']()[_0x5da9cd(0x845)](),this[_0x5da9cd(0xa8b)]();return;}}},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x4f4)]=function(){const _0x4cec64=_0x8db8d6;if(!this['hasSvBattler']())return![];const _0xbf7b2e=this['battler']();if(!_0xbf7b2e)return![];const _0x2fa8f2=_0xbf7b2e[_0x4cec64(0x85c)];if(!_0x2fa8f2)return![];const _0x4c8422=_0x2fa8f2[_0x4cec64(0x713)];return _0x4c8422&&!_0x4c8422[_0x4cec64(0x213)];},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x41a)]=function(){const _0x1b99fe=_0x8db8d6;return this[_0x1b99fe(0x434)];},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x63d)]=function(_0x4f5fd4){const _0xe2f127=_0x8db8d6;if(!$gameSystem[_0xe2f127(0x6b5)]())return;this[_0xe2f127(0x434)]=_0x4f5fd4;const _0x192c10=this[_0xe2f127(0x538)]();if(_0x192c10)_0x192c10[_0xe2f127(0xaea)]();},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x2ea)]=function(_0x121b12,_0x6f4c9b,_0x2c62f2){const _0x5e3d81=_0x8db8d6;if(!$gameSystem[_0x5e3d81(0x6b5)]())return;const _0x3db293=this['battler']();if(!_0x3db293)return;if(_0x121b12===_0x3db293[_0x5e3d81(0x94f)])return;let _0x33e783=![];if(this['isActor']()){if(_0x121b12>_0x3db293[_0x5e3d81(0x94f)])_0x33e783=!![];if(_0x121b12<_0x3db293['_baseX'])_0x33e783=![];}else{if(this['isEnemy']()){if(_0x121b12>_0x3db293[_0x5e3d81(0x94f)])_0x33e783=![];if(_0x121b12<_0x3db293[_0x5e3d81(0x94f)])_0x33e783=!![];}};this[_0x5e3d81(0x63d)](_0x2c62f2?!_0x33e783:_0x33e783),_0x3db293[_0x5e3d81(0xaea)]();},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x53e)]=function(_0x175863,_0x17a92b,_0x361f22,_0x3cda8b,_0x444400){const _0x384423=_0x8db8d6;if(!$gameSystem['isSideView']())return;const _0x586386=this[_0x384423(0x538)]();if(!_0x586386)return;if(_0x3cda8b)this[_0x384423(0x2ea)](_0x175863+_0x586386[_0x384423(0x94f)],_0x17a92b+_0x586386[_0x384423(0x214)],![]);_0x175863+=_0x586386['_baseX']-_0x586386[_0x384423(0x67c)],_0x17a92b+=_0x586386[_0x384423(0x214)]-_0x586386[_0x384423(0x334)],_0x586386[_0x384423(0x520)](_0x175863,_0x17a92b,_0x361f22);if(Imported[_0x384423(0x730)])_0x586386['setMoveEasingType'](_0x444400||_0x384423(0xa13));},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x553)]=function(_0x5e8529,_0x88bcbc,_0x3e8863,_0x4e8498,_0x35d74c,_0xabbd26){const _0x25178a=_0x8db8d6;if(!$gameSystem[_0x25178a(0x6b5)]())return;const _0x2a064e=this[_0x25178a(0x538)]();if(!_0x2a064e)return;_0xabbd26=_0xabbd26||0x0;if(_0xabbd26>0x0){if(_0x25178a(0x5bf)===_0x25178a(0xaf2))return this[_0x25178a(0x5ad)]();else{if(_0x2a064e['_baseX']>_0x5e8529)_0x5e8529+=_0x2a064e['width']/0x2+_0xabbd26;if(_0x2a064e[_0x25178a(0x94f)]<_0x5e8529)_0x5e8529-=_0x2a064e[_0x25178a(0x5cb)]/0x2+_0xabbd26;}}if(_0x4e8498)this[_0x25178a(0x2ea)](_0x5e8529,_0x88bcbc,![]);_0x5e8529-=_0x2a064e[_0x25178a(0x67c)],_0x88bcbc-=_0x2a064e['_homeY'],_0x2a064e[_0x25178a(0x520)](_0x5e8529,_0x88bcbc,_0x3e8863);if(Imported[_0x25178a(0x730)])_0x2a064e[_0x25178a(0x688)](_0x35d74c||_0x25178a(0xa13));},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xfe)]=function(_0x39cb7e,_0x236ff9,_0x2ac6e0){const _0x2a91b3=_0x8db8d6;if(!$gameSystem[_0x2a91b3(0x6b5)]())return;const _0x75a7bb=this[_0x2a91b3(0x538)]();if(!_0x75a7bb)return;_0x75a7bb[_0x2a91b3(0x77d)](_0x39cb7e,_0x236ff9,_0x2ac6e0);},Game_Battler['prototype']['jumpBattler']=function(_0x22d29c,_0x297233){const _0x3a29e9=_0x8db8d6;if(!$gameSystem[_0x3a29e9(0x6b5)]())return;const _0x3429a5=this['battler']();if(!_0x3429a5)return;_0x3429a5[_0x3a29e9(0x192)](_0x22d29c,_0x297233);},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x300)]=function(_0x3feb47,_0x225934,_0x2d5f7d,_0x4b8c2f){const _0x4c8468=_0x8db8d6;if(!$gameSystem[_0x4c8468(0x6b5)]())return;const _0xa117fc=this[_0x4c8468(0x538)]();if(!_0xa117fc)return;_0xa117fc[_0x4c8468(0x5e5)](_0x3feb47,_0x225934,_0x2d5f7d,_0x4b8c2f);},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x7cf)]=function(_0x596bab,_0x49a322,_0x31d8b3,_0x32cda9){const _0x382bec=_0x8db8d6;if(!$gameSystem[_0x382bec(0x6b5)]())return;const _0x118963=this[_0x382bec(0x538)]();if(!_0x118963)return;this[_0x382bec(0x367)]()&&(_0x596bab*=-0x1,_0x49a322*=-0x1),_0x118963['startSkew'](_0x596bab,_0x49a322,_0x31d8b3,_0x32cda9);},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x6c4)]=function(_0x37e6a0,_0x4a9f2f,_0x23ff12,_0x3fd435){const _0x14164c=_0x8db8d6;if(!$gameSystem[_0x14164c(0x6b5)]())return;const _0x99ca07=this[_0x14164c(0x538)]();if(!_0x99ca07)return;_0x99ca07['startGrow'](_0x37e6a0,_0x4a9f2f,_0x23ff12,_0x3fd435);},Game_Battler[_0x8db8d6(0x6da)]['changeBattlerOpacity']=function(_0x39e18d,_0x2f4d0c,_0x11aaf6){const _0x2bf4cd=_0x8db8d6;if(!$gameSystem[_0x2bf4cd(0x6b5)]())return;const _0x356a2f=this[_0x2bf4cd(0x538)]();if(!_0x356a2f)return;_0x356a2f['startOpacity'](_0x39e18d,_0x2f4d0c,_0x11aaf6);},Game_Battler['prototype'][_0x8db8d6(0xa8b)]=function(){const _0x57d342=_0x8db8d6,_0x147610=!!this[_0x57d342(0x992)];this[_0x57d342(0x992)]=undefined,_0x147610&&('FArTQ'!=='FArTQ'?_0x48c28b[_0x57d342(0x86a)]=_0x595189:(this['requestMotionRefresh'](),this['clearFreezeMotionForWeapons']()));},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xb20)]=function(){const _0x55bdcb=_0x8db8d6;if(!SceneManager['isSceneBattle']())return;const _0x4adc1=this['battler']();if(!_0x4adc1)return;let _0x2107c7=this[_0x55bdcb(0x367)]()?_0x4adc1[_0x55bdcb(0x4f0)]:_0x4adc1[_0x55bdcb(0x85c)]['_weaponSprite'];_0x2107c7&&_0x2107c7[_0x55bdcb(0x88c)](0x0);},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x633)]=function(_0x28e4f8,_0x2d583a,_0x109da6){const _0x16ed51=_0x8db8d6;if(this['isEnemy']()&&!this[_0x16ed51(0x991)]())return;let _0x15ea04=0x0,_0x13af0d=0x0;_0x28e4f8[_0x16ed51(0x3ed)](/ATTACK[ ](\d+)/i)&&(_0x13af0d=Number(RegExp['$1']),_0x13af0d--);if(this['isActor']()){const _0x4db6d0=this[_0x16ed51(0x449)]();_0x15ea04=_0x4db6d0[_0x13af0d]?_0x4db6d0[_0x13af0d][_0x16ed51(0x22f)]:0x0;}else this[_0x16ed51(0x26d)]()&&('eDOLx'===_0x16ed51(0x716)?(_0x1555c8=_0x46545c(_0x31ffcd['$1']),_0x923cc0=_0x17ceab(_0x200a90['$2'])):_0x15ea04=this[_0x16ed51(0x7a6)]()[_0x16ed51(0x22f)]||0x0);const _0xce28f7=$dataSystem['attackMotions'][_0x15ea04];_0x28e4f8['match'](/attack/i)&&(_0x28e4f8=['thrust',_0x16ed51(0x123),'missile'][_0xce28f7[_0x16ed51(0x28e)]]||_0x16ed51(0x123)),this[_0x16ed51(0x992)]={'motionType':_0x28e4f8,'weaponImageId':_0x2d583a?_0xce28f7[_0x16ed51(0x8e8)]:0x0,'pattern':_0x109da6};},Game_Battler[_0x8db8d6(0x6da)]['isFriendly']=function(_0x43d520){const _0x1f8e5b=_0x8db8d6;if(!_0x43d520)return![];return _0x43d520['friendsUnit']()===this[_0x1f8e5b(0x1bd)]();},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x148)]=function(_0x394dd7){const _0x16a5de=_0x8db8d6;if(!_0x394dd7)return![];return _0x394dd7[_0x16a5de(0x296)]()===this['friendsUnit']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x82d)]=Game_Actor[_0x8db8d6(0x6da)]['setup'],Game_Actor[_0x8db8d6(0x6da)]['setup']=function(_0x1fdfdc){const _0x57d352=_0x8db8d6;VisuMZ[_0x57d352(0x602)]['Game_Actor_setup']['call'](this,_0x1fdfdc),this[_0x57d352(0x478)]();},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x478)]=function(){const _0x659b0b=_0x8db8d6;this[_0x659b0b(0xb0f)]='',this[_0x659b0b(0x306)]()&&this[_0x659b0b(0x306)]()[_0x659b0b(0x44e)][_0x659b0b(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x24d)]=function(){const _0x4890c8=_0x8db8d6;if(this[_0x4890c8(0x9a6)]()!==''){if(_0x4890c8(0x5b3)!==_0x4890c8(0x5b3)){const _0x50bc9f=this[_0x4890c8(0x57a)]();if(_0x50bc9f[_0x4890c8(0x3f7)]||_0x50bc9f[_0x4890c8(0x4a7)]){const _0x5eda17=_0x2f6cb2['makeDeepCopy'](_0x50bc9f);_0x5eda17[_0x4890c8(0x4af)]=![],_0x5eda17['mpDamage']=0x0,this[_0x4890c8(0x159)][_0x4890c8(0x43e)](_0x5eda17);}if(_0x50bc9f[_0x4890c8(0x4af)]){const _0x151a4e=_0xd1454c[_0x4890c8(0x885)](_0x50bc9f);_0x151a4e[_0x4890c8(0x3f7)]=![],_0x151a4e[_0x4890c8(0x4a7)]=![],_0x151a4e[_0x4890c8(0x710)]=0x0,this['_damagePopupArray'][_0x4890c8(0x43e)](_0x151a4e);}if(_0x50bc9f[_0x4890c8(0x710)]!==0x0){const _0xbf1477=_0x22160b[_0x4890c8(0x885)](_0x50bc9f);_0xbf1477['missed']=![],_0xbf1477['evaded']=![],_0xbf1477[_0x4890c8(0x4af)]=![],this[_0x4890c8(0x159)]['push'](_0xbf1477);}}else return this[_0x4890c8(0x9a6)]();}else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x4890c8(0x3bb)]()!=='')return this[_0x4890c8(0x3bb)]();}return'';},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x9a6)]=function(){const _0x5b2508=_0x8db8d6;if(this[_0x5b2508(0xb0f)]===undefined)this[_0x5b2508(0x478)]();return this[_0x5b2508(0xb0f)];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x8aa)]=function(_0x24b1b4){const _0x24e370=_0x8db8d6;if(this[_0x24e370(0xb0f)]===undefined)this['initBattlePortrait']();this[_0x24e370(0xb0f)]=_0x24b1b4;if(SceneManager[_0x24e370(0x38c)]()&&$gameParty[_0x24e370(0x7fb)]()[_0x24e370(0xa5c)](this)){const _0x2038ff=SceneManager[_0x24e370(0xa4a)]['_statusWindow'];if(_0x2038ff)_0x2038ff['refreshActorPortrait'](this);}},Game_Actor['prototype'][_0x8db8d6(0x8d5)]=function(){return!![];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x7e3)]=function(){const _0x12d0d8=_0x8db8d6;if(!this['isConfused']()&&BattleManager[_0x12d0d8(0x4e0)])return!![];return Game_Battler[_0x12d0d8(0x6da)]['isAutoBattle'][_0x12d0d8(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xb12)]=Game_Actor['prototype'][_0x8db8d6(0x74f)],Game_Actor[_0x8db8d6(0x6da)]['makeActionList']=function(){const _0x57f6f6=_0x8db8d6;if(BattleManager[_0x57f6f6(0x4e0)]&&!ConfigManager['autoBattleUseSkills'])return this[_0x57f6f6(0xab0)]();else{if('grwLx'===_0x57f6f6(0x796))this[_0x57f6f6(0x370)][_0x57f6f6(0x5df)]=![];else{return VisuMZ[_0x57f6f6(0x602)]['Game_Actor_makeActionList'][_0x57f6f6(0x5fd)](this);;}}},Game_Actor['prototype'][_0x8db8d6(0xab0)]=function(){const _0x1ccd59=_0x8db8d6,_0x35da76=[],_0x18a161=new Game_Action(this);return _0x18a161[_0x1ccd59(0x6f5)](),_0x35da76[_0x1ccd59(0x43e)](_0x18a161),_0x35da76;},Game_Actor['prototype']['battleCommands']=function(){const _0x24dfbe=_0x8db8d6;if(this[_0x24dfbe(0x2e0)]()[_0x24dfbe(0x44e)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x24dfbe(0x677)!==_0x24dfbe(0x677))_0x261403[_0x24dfbe(0x2a3)](_0x41b798[_0x5e0742]);else return String(RegExp['$1'])[_0x24dfbe(0x9b4)](/[\r\n]+/);}else return VisuMZ[_0x24dfbe(0x602)][_0x24dfbe(0x466)][_0x24dfbe(0x41d)][_0x24dfbe(0x127)];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x8a2)]=function(){const _0xb97874=_0x8db8d6;if(this[_0xb97874(0x370)]['svAnchorX']!==undefined)return this[_0xb97874(0x370)]['svAnchorX'];return this[_0xb97874(0x306)]()[_0xb97874(0x44e)][_0xb97874(0x3ed)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xb97874(0x370)][_0xb97874(0x97f)]=eval(RegExp['$1']),this[_0xb97874(0x370)][_0xb97874(0x173)]=eval(RegExp['$2'])):this[_0xb97874(0x370)][_0xb97874(0x97f)]=Game_Battler[_0xb97874(0x6da)]['svBattlerAnchorX'][_0xb97874(0x5fd)](this),this[_0xb97874(0x370)][_0xb97874(0x97f)];},Game_Actor['prototype'][_0x8db8d6(0x9f5)]=function(){const _0x390d7b=_0x8db8d6;if(this[_0x390d7b(0x370)]['svAnchorY']!==undefined)return this[_0x390d7b(0x370)][_0x390d7b(0x173)];return this[_0x390d7b(0x306)]()[_0x390d7b(0x44e)][_0x390d7b(0x3ed)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x390d7b(0xa0e)!==_0x390d7b(0xa0e)?this[_0x390d7b(0xa1d)](_0x390d7b(0x938)):(this[_0x390d7b(0x370)]['svAnchorX']=eval(RegExp['$1']),this[_0x390d7b(0x370)][_0x390d7b(0x173)]=eval(RegExp['$2'])):_0x390d7b(0xad5)!==_0x390d7b(0x16a)?this[_0x390d7b(0x370)]['svAnchorY']=Game_Battler[_0x390d7b(0x6da)][_0x390d7b(0x9f5)][_0x390d7b(0x5fd)](this):_0x277da5=_0x16139a[_0x390d7b(0x7f7)],this[_0x390d7b(0x370)][_0x390d7b(0x173)];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0xab1)]=function(){const _0xd3512b=_0x8db8d6;if(this['_cache']['svShadow']!==undefined)return this[_0xd3512b(0x370)][_0xd3512b(0x5df)];if(this['actor']()[_0xd3512b(0x44e)][_0xd3512b(0x3ed)](/<SIDEVIEW SHOW SHADOW>/i))this[_0xd3512b(0x370)][_0xd3512b(0x5df)]=!![];else this[_0xd3512b(0x306)]()[_0xd3512b(0x44e)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?_0xd3512b(0x486)===_0xd3512b(0x486)?this['_cache'][_0xd3512b(0x5df)]=![]:(_0x40c18f[_0xd3512b(0x602)][_0xd3512b(0x3e5)][_0xd3512b(0x5fd)](this,_0x232106),this['createCommandNameWindow'](_0x3d3272)):this['_cache'][_0xd3512b(0x5df)]=Game_Battler[_0xd3512b(0x6da)]['svBattlerShadowVisible']['call'](this);return this[_0xd3512b(0x370)][_0xd3512b(0x5df)];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x14c)]=function(){const _0x3345b4=_0x8db8d6;return VisuMZ[_0x3345b4(0x602)]['Settings'][_0x3345b4(0x73a)]['SmoothImage'];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x3dd)]=function(){const _0x3dcd0b=_0x8db8d6,_0x494f13=this[_0x3dcd0b(0x449)](),_0x43242b=_0x494f13[0x0]?_0x494f13[0x0]['wtypeId']:0x0,_0x4f562f=$dataSystem[_0x3dcd0b(0x610)][_0x43242b];_0x4f562f&&this['startWeaponAnimation'](_0x4f562f[_0x3dcd0b(0x8e8)]);},Game_Actor['prototype'][_0x8db8d6(0x61f)]=function(_0x4ab43d){const _0x4124db=_0x8db8d6;Game_Battler[_0x4124db(0x6da)]['performAction'][_0x4124db(0x5fd)](this,_0x4ab43d),this[_0x4124db(0x346)](_0x4ab43d);},Game_Actor['prototype']['getAttackMotion']=function(){const _0x567a32=_0x8db8d6,_0x562209=this[_0x567a32(0x449)](),_0x101a8a=_0x562209[0x0]?_0x562209[0x0][_0x567a32(0x22f)]:0x0;return $dataSystem['attackMotions'][_0x101a8a];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x135)]=function(_0x1a16a1){const _0x3cea5f=_0x8db8d6;_0x1a16a1=_0x1a16a1||0x1,_0x1a16a1--;const _0x3c9a2a=this[_0x3cea5f(0x449)]();return _0x3c9a2a[_0x1a16a1]?_0x3c9a2a[_0x1a16a1][_0x3cea5f(0x35f)]:0x0;},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x761)]=function(_0x405fbc){const _0x47532a=_0x8db8d6;_0x405fbc=_0x405fbc||0x1,_0x405fbc--;const _0x5e536e=this[_0x47532a(0x449)](),_0x18959b=_0x5e536e[_0x405fbc]?_0x5e536e[_0x405fbc][_0x47532a(0x22f)]:0x0;return $dataSystem[_0x47532a(0x610)][_0x18959b];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x3f2)]=function(_0x57ee31){const _0x5386ce=_0x8db8d6;_0x57ee31=_0x57ee31||0x1,_0x57ee31--;const _0x4b6d21=this[_0x5386ce(0x449)](),_0x1d4356=_0x4b6d21[_0x57ee31]?_0x4b6d21[_0x57ee31][_0x5386ce(0x22f)]:0x0,_0x59ef80=$dataSystem[_0x5386ce(0x610)][_0x1d4356];if(_0x59ef80){if(_0x59ef80[_0x5386ce(0x28e)]===0x0)this['requestMotion'](_0x5386ce(0x5b8));else{if(_0x59ef80[_0x5386ce(0x28e)]===0x1)this['requestMotion']('swing');else _0x59ef80[_0x5386ce(0x28e)]===0x2&&this['requestMotion']('missile');}this['startWeaponAnimation'](_0x59ef80[_0x5386ce(0x8e8)]);}},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x91b)]=function(_0x54fc70){const _0x22b034=_0x8db8d6;this[_0x22b034(0xa1b)]=_0x54fc70||0x0;},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x9d8)]=function(){const _0x462a55=_0x8db8d6;this[_0x462a55(0xa1b)]=this[_0x462a55(0xa1b)]||0x0,this[_0x462a55(0xa1b)]++;},Game_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x54c)]=function(){this['_activeWeaponSlot']=undefined;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1ff)]=Game_Actor['prototype'][_0x8db8d6(0xac7)],Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0xac7)]=function(){const _0x49d7e8=_0x8db8d6;let _0x53522d=VisuMZ[_0x49d7e8(0x602)][_0x49d7e8(0x1ff)][_0x49d7e8(0x5fd)](this);if(this['_tempEquipCheck'])return _0x53522d;if(this[_0x49d7e8(0xa1b)]!==undefined){if('ywnQB'!=='hgNwP'){this['_tempEquipCheck']=!![];const _0x3119c5=this[_0x49d7e8(0x62e)]();for(let _0x16d404=0x0;_0x16d404<_0x3119c5[_0x49d7e8(0x5e0)];_0x16d404++){_0x49d7e8(0xafb)!=='nnHwB'?_0x3119c5[_0x16d404]===0x1&&this[_0x49d7e8(0xa1b)]!==_0x16d404&&(_0x53522d[_0x16d404]=null):(_0xb8ff7e[_0x49d7e8(0x602)][_0x49d7e8(0x883)][_0x49d7e8(0x5fd)](this),this[_0x49d7e8(0x8fb)]());}this[_0x49d7e8(0x545)]=undefined;}else this[_0x49d7e8(0x322)]();}return _0x53522d;},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x48e)]=function(_0x5a9528){const _0x39fc7e=_0x8db8d6;if(_0x5a9528[_0x39fc7e(0x367)]()){if(_0x39fc7e(0x90f)===_0x39fc7e(0x90f))return _0x5a9528['weapons']()['length']||0x1;else{if(!_0x51d6b3['isSideView']())return;const _0x1f508d=this[_0x39fc7e(0x538)]();if(!_0x1f508d)return;if(_0x1dc445)this[_0x39fc7e(0x2ea)](_0x386bb9+_0x1f508d[_0x39fc7e(0x94f)],_0x5240dd+_0x1f508d['_baseY'],![]);_0x5eeffe+=_0x1f508d[_0x39fc7e(0x94f)]-_0x1f508d[_0x39fc7e(0x67c)],_0x15d7bf+=_0x1f508d[_0x39fc7e(0x214)]-_0x1f508d['_homeY'],_0x1f508d['startMove'](_0x59cee1,_0x4ab2ba,_0x50e3cc);if(_0x1ad6d8[_0x39fc7e(0x730)])_0x1f508d['setMoveEasingType'](_0x524a77||_0x39fc7e(0xa13));}}else{if(_0x39fc7e(0x949)==='pSrpx')_0x40959d[_0x39fc7e(0x86a)]=_0x33f81f,_0x57d782[_0x39fc7e(0x86a)]=_0x7c8a9a,_0x14b62a[_0x39fc7e(0xa82)](),_0x1741d2['adjustPosition']();else return 0x1;}},Window_BattleLog['prototype'][_0x8db8d6(0xa81)]=function(_0x286c0b,_0x536149){const _0x74b14e=_0x8db8d6;_0x286c0b&&_0x286c0b[_0x74b14e(0x367)]()&&(_0x74b14e(0x993)===_0x74b14e(0x51e)?(this[_0x74b14e(0x43e)](_0x74b14e(0x6c3),[_0x1c04d0],_0xc901f2,_0x6211af),this[_0x74b14e(0x43e)](_0x74b14e(0x58d),_0x179e3c,_0x83e6bc,_0x74b14e(0xb05),_0x496712,!![],'Linear',!![]),this[_0x74b14e(0x43e)](_0x74b14e(0xa1d),[_0x507222],_0x74b14e(0x8d2)),this[_0x74b14e(0x43e)]('waitForMovement')):_0x286c0b['setActiveWeaponSlot'](_0x536149)),this['callNextMethod']();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x790)]=function(_0x5b10cf){const _0x22e2ef=_0x8db8d6;_0x5b10cf&&_0x5b10cf[_0x22e2ef(0x367)]()&&_0x5b10cf[_0x22e2ef(0x54c)](),this[_0x22e2ef(0x8fb)]();},Game_Actor[_0x8db8d6(0x6da)]['battleUIOffsetX']=function(){const _0x2ea3b=_0x8db8d6;let _0x5d919b=_0x2ea3b(0x585);if(this['checkCacheKey'](_0x5d919b))return this['_cache'][_0x5d919b];return this['_cache'][_0x5d919b]=this['createBattleUIOffsetX'](this[_0x2ea3b(0x306)]()),this['_cache'][_0x5d919b];},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x277)]=function(){const _0xf85aff=_0x8db8d6;let _0x38918b='battleUIOffsetY';if(this[_0xf85aff(0x2ed)](_0x38918b))return this[_0xf85aff(0x370)][_0x38918b];return this['_cache'][_0x38918b]=this[_0xf85aff(0x2a5)](this[_0xf85aff(0x306)]()),this[_0xf85aff(0x370)][_0x38918b];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x32b)]=Game_Enemy['prototype']['setup'],Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x88c)]=function(_0x4a3d06,_0x16cdc1,_0x3274cc){const _0x32afc1=_0x8db8d6;_0x4a3d06=DataManager[_0x32afc1(0x835)](_0x4a3d06),VisuMZ[_0x32afc1(0x602)]['Game_Enemy_setup'][_0x32afc1(0x5fd)](this,_0x4a3d06,_0x16cdc1,_0x3274cc);Imported[_0x32afc1(0x9b1)]&&this[_0x32afc1(0x819)]();this[_0x32afc1(0x7dd)](),this[_0x32afc1(0x16c)]();if(Imported[_0x32afc1(0x9b1)]){if(_0x32afc1(0x516)!==_0x32afc1(0x516))return![];else this['recoverAll']();}},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x7dd)]=function(){const _0x8159b1=_0x8db8d6,_0x37f0d0=VisuMZ['BattleCore'][_0x8159b1(0x466)][_0x8159b1(0x8fe)];this[_0x8159b1(0x76b)]=_0x37f0d0[_0x8159b1(0x66a)],this[_0x8159b1(0xb42)]={};},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x16c)]=function(){const _0x2fdd07=_0x8db8d6,_0x494548=VisuMZ[_0x2fdd07(0x602)][_0x2fdd07(0x466)][_0x2fdd07(0x8fe)],_0x4c6172=this[_0x2fdd07(0x6cf)]()[_0x2fdd07(0x44e)];this[_0x2fdd07(0xb42)]={'name':'','wtypeId':_0x494548['WtypeId'],'collapse':_0x494548['AllowCollapse'],'motionIdle':_0x494548[_0x2fdd07(0x156)],'width':_0x494548[_0x2fdd07(0x6f9)]||0x40,'height':_0x494548[_0x2fdd07(0x517)]||0x40,'anchorX':_0x494548[_0x2fdd07(0x203)]||0x0,'anchorY':_0x494548[_0x2fdd07(0xb3e)]||0x0,'shadow':_0x494548[_0x2fdd07(0x831)]};_0x4c6172['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x2fdd07(0x76b)]=Number(RegExp['$1']));const _0xf9383f=this[_0x2fdd07(0xb42)];if(_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x2fdd07(0xb1e)!==_0x2fdd07(0x68c))_0xf9383f[_0x2fdd07(0x7fd)]=String(RegExp['$1']);else{const _0x3b3c65=_0x62a8db[_0x2fdd07(0x764)](_0xaee12e['toUpperCase']()[_0x2fdd07(0xa51)]());_0x3b3c65>=0x0&&_0x3b3c65<=0x7&&_0x12705f[_0x2fdd07(0x607)](_0x3b3c65)&&_0x3d762a[_0x2fdd07(0x690)](_0x3b3c65);}}else{if(_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x2fdd07(0x2c1)===_0x2fdd07(0x2c1)){const _0xfbb5a=String(RegExp['$1'])[_0x2fdd07(0x9b4)](/[\r\n]+/)[_0x2fdd07(0xa8c)]('');_0xf9383f[_0x2fdd07(0x7fd)]=DataManager[_0x2fdd07(0x4bf)](_0xfbb5a);}else this[_0x2fdd07(0x862)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x2fdd07(0x862)][_0x2fdd07(0x728)]['y']=0x1/(this['scale']['y']||0.001);}}_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0xf9383f[_0x2fdd07(0x1c6)]=eval(RegExp['$1']),_0xf9383f[_0x2fdd07(0x7a3)]=eval(RegExp['$2']));if(_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW COLLAPSE>/i)){if('uyUJX'!==_0x2fdd07(0x6fd))_0xf9383f[_0x2fdd07(0x26a)]=!![];else{const _0x3790f7=_0x5de734(_0x1a1f1c['$1']);return[_0x4fb87c[_0x2fdd07(0x296)]()[_0x2fdd07(0xa8f)]()[_0x3790f7]];}}else _0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0xf9383f[_0x2fdd07(0x26a)]=![]);if(_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x2fdd07(0x928)!==_0x2fdd07(0x66b))_0xf9383f[_0x2fdd07(0x4c6)]=!![];else return this[_0x2fdd07(0x40b)]()&&!this[_0x2fdd07(0x8b1)]()?this[_0x2fdd07(0x903)]():_0x34aaac[_0x2fdd07(0x602)][_0x2fdd07(0x945)][_0x2fdd07(0x5fd)](this);}else _0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0xf9383f[_0x2fdd07(0x4c6)]=![]);if(_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0xf9383f[_0x2fdd07(0x137)]=String(RegExp['$1'])[_0x2fdd07(0x80e)]()[_0x2fdd07(0xa51)]();else{if(_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x2fdd07(0x1ca)==='zrUQI'){const _0x3a649d=String(RegExp['$1'])[_0x2fdd07(0x9b4)](/[\r\n]+/)[_0x2fdd07(0xa8c)]('');_0xf9383f[_0x2fdd07(0x137)]=DataManager[_0x2fdd07(0x4bf)](_0x3a649d);}else _0x100c02=_0x1f1b16[_0x2fdd07(0x623)](_0x573884,_0x51e784);}}_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0xf9383f[_0x2fdd07(0x5cb)]=Number(RegExp['$1']),_0xf9383f[_0x2fdd07(0x7f5)]=Number(RegExp['$2']));if(_0x4c6172['match'](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0x2fdd07(0x13b)===_0x2fdd07(0x176)){const _0x39b8f7=_0x26bb45[_0x2fdd07(0x602)][_0x2fdd07(0x466)][_0x2fdd07(0xa31)];_0x39b8f7[_0x2fdd07(0x625)]?this[_0x2fdd07(0x23e)]=_0x35cf0c['loadSystem'](_0x39b8f7[_0x2fdd07(0x625)]):_0x4b3e52['prototype']['loadWindowskin'][_0x2fdd07(0x5fd)](this);}else _0xf9383f[_0x2fdd07(0x22f)]=DataManager['getWtypeIdWithName'](RegExp['$1']);}else{if(_0x4c6172[_0x2fdd07(0x3ed)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x23a9f0=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x2fdd07(0xa8c)](''),_0x5d0c47=DataManager[_0x2fdd07(0x4bf)](_0x23a9f0);_0xf9383f[_0x2fdd07(0x22f)]=DataManager[_0x2fdd07(0x58b)](_0x5d0c47);}}if(Imported[_0x2fdd07(0x9b1)]){if(_0x2fdd07(0x9b8)!=='Xxznv')_0x1bfabc['BattleCore'][_0x2fdd07(0x7ea)][_0x2fdd07(0x5fd)](this),this[_0x2fdd07(0xa6f)]&&(this[_0x2fdd07(0xa6f)]=_0x1fd157,_0x102d8e[_0x2fdd07(0xa4a)][_0x2fdd07(0x5f4)]());else{const _0x1fd2e2=this[_0x2fdd07(0xa8a)]();for(const _0x2532ae of _0x1fd2e2){const _0x1686d7=this[_0x2fdd07(0x154)](_0x2532ae)[_0x2fdd07(0x256)][_0x2fdd07(0x3ad)]()[_0x2fdd07(0xa51)](),_0x2df67d=_0x2532ae[_0x2fdd07(0x3ad)]()[_0x2fdd07(0xa51)]();if(_0x4c6172[_0x2fdd07(0x3ed)](VisuMZ[_0x2fdd07(0x59a)]['RegExp'][_0x2fdd07(0x91c)[_0x2fdd07(0xad2)](_0x2df67d,_0x1686d7)])){if('dTUiY'!==_0x2fdd07(0x9e3))return this['battlerSprites']()['some'](_0x5b2d71=>_0x5b2d71[_0x2fdd07(0x914)]());else _0xf9383f['name']=String(RegExp['$1']);}else{if(_0x4c6172[_0x2fdd07(0x3ed)](VisuMZ[_0x2fdd07(0x59a)][_0x2fdd07(0x812)][_0x2fdd07(0xa5a)['format'](_0x2df67d,_0x1686d7)])){if(_0x2fdd07(0x43c)!=='sJupj'){const _0x570965=String(RegExp['$1'])[_0x2fdd07(0x9b4)](/[\r\n]+/)[_0x2fdd07(0xa8c)]('');_0xf9383f[_0x2fdd07(0x7fd)]=DataManager[_0x2fdd07(0x4bf)](_0x570965);}else this[_0x2fdd07(0x43e)](_0x2fdd07(0x471),_0x2a7247);}}if(_0x4c6172[_0x2fdd07(0x3ed)](VisuMZ[_0x2fdd07(0x59a)][_0x2fdd07(0x812)][_0x2fdd07(0x45a)[_0x2fdd07(0xad2)](_0x2df67d,_0x1686d7)]))_0xf9383f[_0x2fdd07(0x22f)]=DataManager[_0x2fdd07(0x58b)](RegExp['$1']);else{if(_0x4c6172['match'](VisuMZ['ElementStatusCore'][_0x2fdd07(0x812)][_0x2fdd07(0x8ce)['format'](_0x2df67d,_0x1686d7)])){if(_0x2fdd07(0x239)!==_0x2fdd07(0x239))return this[_0x2fdd07(0x6c5)]>0x0;else{const _0x361631=String(RegExp['$1'])[_0x2fdd07(0x9b4)](/[\r\n]+/)['remove'](''),_0x59b2a2=DataManager[_0x2fdd07(0x4bf)](_0x361631);_0xf9383f[_0x2fdd07(0x22f)]=DataManager[_0x2fdd07(0x58b)](_0x59b2a2);}}}if(_0x4c6172[_0x2fdd07(0x3ed)](VisuMZ[_0x2fdd07(0x59a)]['RegExp']['SvMotionIdleSolo-%1-%2'[_0x2fdd07(0xad2)](_0x2df67d,_0x1686d7)]))_0xf9383f['motionIdle']=String(RegExp['$1'])[_0x2fdd07(0x80e)]()[_0x2fdd07(0xa51)]();else{if(_0x4c6172[_0x2fdd07(0x3ed)](VisuMZ[_0x2fdd07(0x59a)]['RegExp'][_0x2fdd07(0x119)[_0x2fdd07(0xad2)](_0x2df67d,_0x1686d7)])){const _0x1be6d9=String(RegExp['$1'])[_0x2fdd07(0x9b4)](/[\r\n]+/)[_0x2fdd07(0xa8c)]('');_0xf9383f['motionIdle']=DataManager[_0x2fdd07(0x4bf)](_0x1be6d9);}}}}}},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x7bb)]=function(){const _0x27ac29=_0x8db8d6;return this[_0x27ac29(0x76b)]||0x0;},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x8a6)]=function(){const _0x5ec808=_0x8db8d6;return this[_0x5ec808(0x7bb)]();},Game_Enemy[_0x8db8d6(0x6da)]['attackAnimationIdSlot']=function(_0x19fb67){const _0x2ec53b=_0x8db8d6;return this[_0x2ec53b(0x7bb)]();},Game_Enemy['prototype'][_0x8db8d6(0x3d5)]=function(){const _0x274e07=_0x8db8d6;if(this[_0x274e07(0x6cf)]()[_0x274e07(0x44e)][_0x274e07(0x3ed)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x274e07(0x3d5)][_0x274e07(0x5fd)](this);},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x3b4)]=function(){const _0x10ad7a=_0x8db8d6;if(this[_0x10ad7a(0x6cf)]()[_0x10ad7a(0x44e)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x8db8d6(0x6da)]['skills']=function(){const _0x541477=_0x8db8d6,_0x482c23=[];for(const _0x4a27d6 of this[_0x541477(0x6cf)]()[_0x541477(0x7a8)]){if(_0x541477(0x3fb)!=='jNSxc'){const _0x4022ee=$dataSkills[_0x4a27d6[_0x541477(0x715)]];if(_0x4022ee&&!_0x482c23[_0x541477(0xa5c)](_0x4022ee))_0x482c23[_0x541477(0x43e)](_0x4022ee);}else{if(_0x219b42[_0x541477(0x485)][_0x541477(0x975)]())return!![];this[_0x541477(0x190)]='';}}return _0x482c23;},Game_Enemy['prototype'][_0x8db8d6(0x585)]=function(){const _0x55f760=_0x8db8d6;let _0xe7a95a=_0x55f760(0x585);if(this[_0x55f760(0x2ed)](_0xe7a95a))return this[_0x55f760(0x370)][_0xe7a95a];return this[_0x55f760(0x370)][_0xe7a95a]=this[_0x55f760(0x977)](this['enemy']()),this['_cache'][_0xe7a95a];},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x277)]=function(){const _0x42ba0c=_0x8db8d6;let _0x5f0cbb='battleUIOffsetY';if(this[_0x42ba0c(0x2ed)](_0x5f0cbb))return this[_0x42ba0c(0x370)][_0x5f0cbb];return this[_0x42ba0c(0x370)][_0x5f0cbb]=this[_0x42ba0c(0x2a5)](this[_0x42ba0c(0x6cf)]()),this[_0x42ba0c(0x370)][_0x5f0cbb];},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x7a6)]=function(){const _0x9b618f=_0x8db8d6;if(this['_svBattlerData']!==undefined)return this[_0x9b618f(0xb42)];return this['setupBattleCoreData'](),this[_0x9b618f(0xb42)];},Game_Enemy[_0x8db8d6(0x6da)]['hasSvBattler']=function(){const _0x4988dd=_0x8db8d6;return this[_0x4988dd(0x7a6)]()[_0x4988dd(0x7fd)]!=='';},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x3d2)]=function(){const _0x52f7eb=_0x8db8d6;return this[_0x52f7eb(0x7a6)]()['name'];},Game_Enemy['prototype'][_0x8db8d6(0x14c)]=function(){const _0x49538b=_0x8db8d6;return this[_0x49538b(0x991)]()?VisuMZ[_0x49538b(0x602)][_0x49538b(0x466)]['Actor']['SmoothImage']:VisuMZ[_0x49538b(0x602)][_0x49538b(0x466)][_0x49538b(0x8fe)][_0x49538b(0x7e1)];},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x61f)]=function(_0x4e1cec){const _0x416752=_0x8db8d6;Game_Battler[_0x416752(0x6da)][_0x416752(0x61f)][_0x416752(0x5fd)](this,_0x4e1cec);if(this[_0x416752(0x991)]())this['performActionMotions'](_0x4e1cec);},Game_Enemy[_0x8db8d6(0x6da)]['performAttack']=function(){const _0x3e2711=_0x8db8d6,_0x9bc6e6=this['svBattlerData']()[_0x3e2711(0x22f)]||0x0,_0x336d15=$dataSystem[_0x3e2711(0x610)][_0x9bc6e6];if(_0x336d15){if(_0x336d15[_0x3e2711(0x28e)]===0x0){if(_0x3e2711(0x4f9)!==_0x3e2711(0x4f9))return _0x304527[_0x3e2711(0x602)][_0x3e2711(0x466)][_0x3e2711(0x817)]['MaxLines'];else this[_0x3e2711(0xa1d)](_0x3e2711(0x5b8));}else{if(_0x336d15[_0x3e2711(0x28e)]===0x1)this[_0x3e2711(0xa1d)](_0x3e2711(0x123));else _0x336d15[_0x3e2711(0x28e)]===0x2&&this[_0x3e2711(0xa1d)]('missile');}}},Game_Enemy[_0x8db8d6(0x6da)]['performWeaponAnimation']=function(){const _0x698318=_0x8db8d6,_0x155872=this['svBattlerData']()[_0x698318(0x22f)]||0x0,_0x10b11e=$dataSystem['attackMotions'][_0x155872];_0x10b11e&&this[_0x698318(0x342)](_0x10b11e[_0x698318(0x8e8)]);},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0xa26)]=function(){const _0x3ddcca=_0x8db8d6,_0x16e23f=this['svBattlerData']()[_0x3ddcca(0x22f)]||0x0;return $dataSystem[_0x3ddcca(0x610)][_0x16e23f];},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x761)]=function(_0x31de62){const _0x13d444=_0x8db8d6;return this[_0x13d444(0xa26)]();},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x3b1)]=function(){const _0x8822a=_0x8db8d6;Game_Battler[_0x8822a(0x6da)][_0x8822a(0x3b1)][_0x8822a(0x5fd)](this),this[_0x8822a(0x8d5)]()&&this[_0x8822a(0x991)]()&&this[_0x8822a(0xa1d)](_0x8822a(0x1ea)),SoundManager['playEnemyDamage']();},Game_Enemy['prototype'][_0x8db8d6(0x349)]=function(){const _0x24a2c7=_0x8db8d6;Game_Battler[_0x24a2c7(0x6da)][_0x24a2c7(0x349)][_0x24a2c7(0x5fd)](this),this[_0x24a2c7(0xa1d)](_0x24a2c7(0x605));},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x471)]=function(){const _0x458f55=_0x8db8d6;Game_Battler[_0x458f55(0x6da)][_0x458f55(0x471)][_0x458f55(0x5fd)](this),this[_0x458f55(0xa1d)](_0x458f55(0x605));},Game_Enemy[_0x8db8d6(0x6da)]['performCounter']=function(){const _0x1534cf=_0x8db8d6;Game_Battler[_0x1534cf(0x6da)][_0x1534cf(0x647)][_0x1534cf(0x5fd)](this),this['performAttack']();},Game_Enemy[_0x8db8d6(0x6da)]['allowCollapse']=function(){const _0x50100f=_0x8db8d6;if(this[_0x50100f(0x991)]()){if(this[_0x50100f(0x6ea)]()>=0x1)return!![];return this[_0x50100f(0x7a6)]()[_0x50100f(0x26a)];}else return!![];},Game_Enemy['prototype'][_0x8db8d6(0x8a2)]=function(){const _0x53013a=_0x8db8d6;return this['svBattlerData']()[_0x53013a(0x1c6)];},Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x9f5)]=function(){const _0x9a3634=_0x8db8d6;return this[_0x9a3634(0x7a6)]()[_0x9a3634(0x7a3)];},Game_Enemy['prototype'][_0x8db8d6(0xab1)]=function(){const _0x431597=_0x8db8d6;return this[_0x431597(0x7a6)]()['shadow'];},VisuMZ[_0x8db8d6(0x602)]['Game_Enemy_transform']=Game_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x1bb)],Game_Enemy['prototype']['transform']=function(_0x5eb3e3){const _0x42ae3d=_0x8db8d6;VisuMZ[_0x42ae3d(0x602)]['Game_Enemy_transform'][_0x42ae3d(0x5fd)](this,_0x5eb3e3),this[_0x42ae3d(0x7dd)](),this['setupBattleCoreData']();const _0x4bb805=this[_0x42ae3d(0x538)]();if(_0x4bb805)_0x4bb805[_0x42ae3d(0x630)](this);},Game_Unit[_0x8db8d6(0x6da)][_0x8db8d6(0x393)]=function(_0x1d0c20){const _0x3cda7b=_0x8db8d6;for(const _0x21ca8e of this[_0x3cda7b(0xa8f)]()){if('qwcRU'===_0x3cda7b(0x81f)){const _0x336cda=this['item']()['scope'];return _0x336cda[_0x3cda7b(0x3ed)](/(?:RAND|RANDOM)/i);}else{if(_0x21ca8e)_0x21ca8e[_0x3cda7b(0x393)](_0x1d0c20);}}},Game_Unit[_0x8db8d6(0x6da)][_0x8db8d6(0x281)]=function(){const _0x270f15=_0x8db8d6,_0x3876a2=this[_0x270f15(0x338)]();return _0x3876a2[Math[_0x270f15(0x430)](_0x3876a2['length'])];},VisuMZ[_0x8db8d6(0x602)]['Game_Party_addActor']=Game_Party[_0x8db8d6(0x6da)]['addActor'],Game_Party[_0x8db8d6(0x6da)][_0x8db8d6(0x8b6)]=function(_0x382a68){const _0x364aa8=_0x8db8d6;VisuMZ[_0x364aa8(0x602)][_0x364aa8(0xb2d)][_0x364aa8(0x5fd)](this,_0x382a68),BattleManager[_0x364aa8(0x4aa)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x976)]=Game_Party[_0x8db8d6(0x6da)]['removeActor'],Game_Party[_0x8db8d6(0x6da)][_0x8db8d6(0xa3f)]=function(_0x303f11){const _0x5115d6=_0x8db8d6;VisuMZ[_0x5115d6(0x602)]['Game_Party_removeActor']['call'](this,_0x303f11),BattleManager['refreshStatusWindow']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x897)]=Game_Troop[_0x8db8d6(0x6da)][_0x8db8d6(0x88c)],Game_Troop['prototype'][_0x8db8d6(0x88c)]=function(_0x18256d){const _0x199fe5=_0x8db8d6;$gameTemp[_0x199fe5(0x165)](),$gameTemp[_0x199fe5(0x5fa)](_0x18256d),VisuMZ[_0x199fe5(0x602)][_0x199fe5(0x897)][_0x199fe5(0x5fd)](this,_0x18256d);},VisuMZ['BattleCore']['Game_Troop_expTotal']=Game_Troop[_0x8db8d6(0x6da)][_0x8db8d6(0x652)],Game_Troop['prototype']['expTotal']=function(){const _0x3fe453=_0x8db8d6;let _0x398a54=VisuMZ['BattleCore']['Game_Troop_expTotal'][_0x3fe453(0x5fd)](this);return this[_0x3fe453(0x33b)]&&('Jszjk'==='RsFwK'?this[_0x3fe453(0x9b0)](this[_0x3fe453(0x70d)]):_0x398a54*=this[_0x3fe453(0x33b)]()),Math[_0x3fe453(0x2f7)](_0x398a54);},Game_Troop['prototype'][_0x8db8d6(0x33b)]=function(){return 0x1;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x9ae)]=Game_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x3b6)],Game_Map['prototype']['setupBattleback']=function(){const _0x502ba7=_0x8db8d6;VisuMZ['BattleCore'][_0x502ba7(0x9ae)]['call'](this),this[_0x502ba7(0x3cd)]();},Game_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x3cd)]=function(){const _0x474f43=_0x8db8d6;this[_0x474f43(0x902)]={},this[_0x474f43(0x901)]={};if(!$dataMap)return;const _0x4bb311=$dataMap['note'];if(!_0x4bb311)return;const _0x39186a=_0x4bb311[_0x474f43(0x3ed)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x39186a)for(const _0x2d95fe of _0x39186a){if(_0x474f43(0x952)!==_0x474f43(0x909)){_0x2d95fe[_0x474f43(0x3ed)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x216dab=Number(RegExp['$1']),_0x286a8d=Number(RegExp['$2']),_0x4304f5=_0x286a8d===0x1?this[_0x474f43(0x902)]:this[_0x474f43(0x901)],_0x16a765=String(RegExp['$3']);_0x4304f5[_0x216dab]=_0x16a765;}else _0x1ca3a6=(_0x7073ae+_0xb60095)/0x2,_0x189e28=-0x1;}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x801)]=Game_Map['prototype'][_0x8db8d6(0x271)],Game_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x271)]=function(){const _0x51d7f5=_0x8db8d6;if(!BattleManager[_0x51d7f5(0x378)]()){const _0x40102d=$gamePlayer[_0x51d7f5(0x331)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x51d7f5(0x902)]&&this[_0x51d7f5(0x902)][_0x40102d])return this[_0x51d7f5(0x902)][_0x40102d];}return VisuMZ[_0x51d7f5(0x602)][_0x51d7f5(0x801)][_0x51d7f5(0x5fd)](this);},VisuMZ['BattleCore']['Game_Map_battleback2Name']=Game_Map[_0x8db8d6(0x6da)]['battleback2Name'],Game_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x253)]=function(){const _0x8fe65a=_0x8db8d6;if(!BattleManager[_0x8fe65a(0x378)]()){if(_0x8fe65a(0x442)!==_0x8fe65a(0x442)){if(_0x5333c8==='victory')this[_0x8fe65a(0x3ae)]=!![];if(this[_0x8fe65a(0x980)]&&this['_battler'][_0x8fe65a(0x20a)]()){this[_0x8fe65a(0x713)]=_0x256bf9['MOTIONS'][_0x8fe65a(0x7a7)];return;}const _0x3accbe=_0x12cb06[_0x8fe65a(0x51a)][_0x5460a2];this[_0x8fe65a(0x713)]=_0x3accbe,this['_motionCount']=0x0,this['_pattern']=0x0;}else{const _0x6851db=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x8fe65a(0x902)]&&this[_0x8fe65a(0x901)][_0x6851db])return _0x8fe65a(0x28b)===_0x8fe65a(0x519)?_0x14f30b[_0x8fe65a(0x602)][_0x8fe65a(0x466)][_0x8fe65a(0x8fe)][_0x8fe65a(0x18f)]:this[_0x8fe65a(0x901)][_0x6851db];}}return VisuMZ[_0x8fe65a(0x602)][_0x8fe65a(0x1f9)]['call'](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x19b)]=Game_Map['prototype'][_0x8db8d6(0x855)],Game_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x855)]=function(){const _0x24da65=_0x8db8d6;let _0x443658=JsonEx['makeDeepCopy'](VisuMZ[_0x24da65(0x602)]['Game_Map_encounterList'][_0x24da65(0x5fd)](this));return VisuMZ[_0x24da65(0x602)]['ShuffleArray'](_0x443658);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x643)]=function(_0x3a4bf3){const _0x12e80e=_0x8db8d6;var _0x58332d,_0x2e1e98,_0x332189;for(_0x332189=_0x3a4bf3[_0x12e80e(0x5e0)]-0x1;_0x332189>0x0;_0x332189--){_0x58332d=Math[_0x12e80e(0x1f5)](Math[_0x12e80e(0x11c)]()*(_0x332189+0x1)),_0x2e1e98=_0x3a4bf3[_0x332189],_0x3a4bf3[_0x332189]=_0x3a4bf3[_0x58332d],_0x3a4bf3[_0x58332d]=_0x2e1e98;}return _0x3a4bf3;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1c1)]=Game_Interpreter['prototype'][_0x8db8d6(0x894)],Game_Interpreter[_0x8db8d6(0x6da)]['command357']=function(_0x272324){const _0x483ba5=_0x8db8d6;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x483ba5(0x602)][_0x483ba5(0x1c1)][_0x483ba5(0x5fd)](this,_0x272324);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x963)]=Game_Interpreter[_0x8db8d6(0x6da)]['updateWaitMode'],Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x6c1)]=function(){const _0x338eb2=_0x8db8d6;if(SceneManager[_0x338eb2(0x38c)]())switch(this['_waitMode']){case'battleAngle':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x338eb2(0xa85)]()[_0x338eb2(0x5cd)]>0x0)return!![];this[_0x338eb2(0x190)]='';}break;case _0x338eb2(0x4b4):if(BattleManager[_0x338eb2(0x485)][_0x338eb2(0x697)]())return!![];this['_waitMode']='';break;case'battleCamera':if(Imported[_0x338eb2(0xaa5)]){if(_0x338eb2(0x852)!==_0x338eb2(0x9cf)){if($gameScreen[_0x338eb2(0xa85)]()[_0x338eb2(0x74e)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x338eb2(0x224)]>0x0)return!![];this['_waitMode']='';}else{if(this[_0x338eb2(0x6ea)]()>=0x1)return!![];return this[_0x338eb2(0x7a6)]()[_0x338eb2(0x26a)];}}break;case _0x338eb2(0x827):if(BattleManager[_0x338eb2(0x485)][_0x338eb2(0x44b)]())return!![];this[_0x338eb2(0x190)]='';break;case _0x338eb2(0x217):if(BattleManager['_spriteset'][_0x338eb2(0x6ba)]())return!![];this[_0x338eb2(0x190)]='';break;case _0x338eb2(0x6fa):if(BattleManager[_0x338eb2(0x485)][_0x338eb2(0xa2a)]())return!![];this[_0x338eb2(0x190)]='';break;case _0x338eb2(0x316):if(BattleManager[_0x338eb2(0x307)]['isBusy']())return!![];this[_0x338eb2(0x190)]='';break;case _0x338eb2(0x996):if(BattleManager[_0x338eb2(0x485)][_0x338eb2(0x8ba)]())return!![];this[_0x338eb2(0x190)]='';break;case _0x338eb2(0x381):if(BattleManager[_0x338eb2(0x485)][_0x338eb2(0xa30)]())return!![];this[_0x338eb2(0x190)]='';break;case _0x338eb2(0x3a5):if(BattleManager['_spriteset'][_0x338eb2(0x20c)]())return!![];this['_waitMode']='';break;case _0x338eb2(0x494):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0x338eb2(0x190)]='';break;case'battleProjectiles':if(Imported[_0x338eb2(0x278)]){if(_0x338eb2(0xaee)===_0x338eb2(0x740))return![];else{if(BattleManager[_0x338eb2(0x485)]['isAnyProjectilePresent']())return!![];this[_0x338eb2(0x190)]='';}}break;case _0x338eb2(0x7f4):if(Imported[_0x338eb2(0xaa5)]){if($gameScreen[_0x338eb2(0xa85)]()[_0x338eb2(0x5b0)]>0x0)return!![];this[_0x338eb2(0x190)]='';}break;case'battleSpin':if(BattleManager[_0x338eb2(0x485)][_0x338eb2(0xa2e)]())return!![];this[_0x338eb2(0x190)]='';break;case'battleZoom':if(Imported[_0x338eb2(0xaa5)]){if(_0x338eb2(0x164)!==_0x338eb2(0x5e7)){if($gameScreen[_0x338eb2(0xa85)]()['zoomDuration']>0x0)return!![];this[_0x338eb2(0x190)]='';}else this[_0x338eb2(0x70d)]&&this[_0x338eb2(0x9b0)](this[_0x338eb2(0x70d)]);}break;}return VisuMZ[_0x338eb2(0x602)][_0x338eb2(0x963)][_0x338eb2(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x5aa)]=Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x67f)],Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x67f)]=function(_0x316d5b){const _0x301819=_0x8db8d6;if(!$gameParty[_0x301819(0x731)]()){if(_0x301819(0x2c3)!=='xjxDJ')return this[_0x301819(0x205)](_0x316d5b);else this[_0x301819(0x884)]='action';}else{if('yOKrj'!==_0x301819(0x1dd))this[_0x301819(0x1d3)](0x1);else return VisuMZ[_0x301819(0x602)][_0x301819(0x5aa)][_0x301819(0x5fd)](this,_0x316d5b);}},Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x69c)]=function(_0x45baf5){const _0x37c478=_0x8db8d6;return VisuMZ[_0x37c478(0x602)]['Game_Interpreter_command301']['call'](this,_0x45baf5),BattleManager[_0x37c478(0x3b2)](_0x534d61=>{const _0x5aab2e=_0x37c478;_0x5aab2e(0x5e9)===_0x5aab2e(0x5e9)?this[_0x5aab2e(0x994)][this[_0x5aab2e(0x25a)]]=_0x534d61:_0x17f24a[_0x5aab2e(0x602)]['BattleManager_selectNextCommand'][_0x5aab2e(0x5fd)](this);}),!![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x9c0)]=function(_0x182af2){const _0x515e10=_0x8db8d6,_0x2ed83d=$dataCommonEvents[_0x182af2];if(!_0x2ed83d)return![];if(_0x2ed83d[_0x515e10(0x69b)][_0x515e10(0x5e0)]<=0x1)return![];return!![];},Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x205)]=function(_0x25a307){const _0x2d4ee4=_0x8db8d6,_0x1b4053=VisuMZ[_0x2d4ee4(0x602)][_0x2d4ee4(0x466)][_0x2d4ee4(0x1e8)],_0x463cb9=_0x1b4053[_0x2d4ee4(0xa66)],_0x2cb95f=$dataCommonEvents[_0x463cb9];if(_0x2cb95f&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x463cb9)){if('dfePf'===_0x2d4ee4(0xabd))return this[_0x2d4ee4(0x434)];else{const _0x4d3165=this[_0x2d4ee4(0x288)]()?this[_0x2d4ee4(0x60c)]:0x0,_0x438702=_0x2cb95f[_0x2d4ee4(0x69b)];this['setupChild'](_0x438702,_0x4d3165),this['_list']=JsonEx[_0x2d4ee4(0x885)](this[_0x2d4ee4(0x671)]);const _0xc3b179={'code':0xbc3,'indent':this[_0x2d4ee4(0x25a)],'parameters':JsonEx[_0x2d4ee4(0x885)](_0x25a307)};return this['_list'][_0x2d4ee4(0x5bc)](this[_0x2d4ee4(0x6d5)]+0x1,0x0,_0xc3b179),!![];}}else{if(_0x2d4ee4(0xa93)===_0x2d4ee4(0xb26)){if(!_0x217c34['isSceneBattle']())return;const _0x52b963=_0x138e58['getLastPluginCommandInterpreter']();if(!_0x52b963)return;_0x52b963[_0x2d4ee4(0x4f2)](_0x2d4ee4(0x494));}else return VisuMZ[_0x2d4ee4(0x602)][_0x2d4ee4(0x5aa)]['call'](this,_0x25a307);}},VisuMZ[_0x8db8d6(0x602)]['BattleManager_onEncounter']=BattleManager['onEncounter'],BattleManager[_0x8db8d6(0x1b3)]=function(){const _0x1b8871=_0x8db8d6;VisuMZ[_0x1b8871(0x602)][_0x1b8871(0x252)][_0x1b8871(0x5fd)](this),this[_0x1b8871(0x144)]();},BattleManager[_0x8db8d6(0x144)]=function(){const _0x44c16d=_0x8db8d6,_0x27c809=VisuMZ[_0x44c16d(0x602)][_0x44c16d(0x466)][_0x44c16d(0x1e8)],_0x39a019=_0x27c809[_0x44c16d(0xa66)];_0x39a019&&VisuMZ[_0x44c16d(0x602)]['CheckMapBattleEventValid'](_0x39a019)&&(this[_0x44c16d(0xa96)]=!![],$gameTemp[_0x44c16d(0x2a3)](_0x27c809[_0x44c16d(0xa66)]),$gameMap['updateInterpreter'](),$gameMap[_0x44c16d(0x5d6)][_0x44c16d(0xa6f)]=!![]),_0x27c809[_0x44c16d(0x404)]>0x0&&(this[_0x44c16d(0x50a)]=!![]);},VisuMZ['BattleCore'][_0x8db8d6(0x4b7)]=Scene_Map['prototype']['updateCallMenu'],Scene_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x2b9)]=function(){const _0xa7c87f=_0x8db8d6;if(BattleManager[_0xa7c87f(0xa96)])return;VisuMZ['BattleCore'][_0xa7c87f(0x4b7)][_0xa7c87f(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1be)]=Scene_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x3f5)],Scene_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x3f5)]=function(){const _0x5b47d1=_0x8db8d6;BattleManager['_battleCoreBattleStartEvent']?'pNlXQ'!=='pNlXQ'?_0x29eb87=(_0x664585+_0x3f4ba8)/0x2:this['battleCorePreBattleCommonEvent']():_0x5b47d1(0x2ab)!==_0x5b47d1(0x2ab)?this[_0x5b47d1(0xae6)]['setup'](this['_battler']):VisuMZ[_0x5b47d1(0x602)][_0x5b47d1(0x1be)][_0x5b47d1(0x5fd)](this);},Scene_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x215)]=function(){const _0x11d0a9=_0x8db8d6;this[_0x11d0a9(0x56f)]=!![];},VisuMZ['BattleCore'][_0x8db8d6(0x5c0)]=SceneManager['isSceneChanging'],SceneManager[_0x8db8d6(0x65e)]=function(){const _0x274d69=_0x8db8d6;if(BattleManager[_0x274d69(0xa96)])return![];return VisuMZ[_0x274d69(0x602)][_0x274d69(0x5c0)][_0x274d69(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x7ea)]=Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x4e2)],Game_Interpreter['prototype'][_0x8db8d6(0x4e2)]=function(){const _0x851256=_0x8db8d6;VisuMZ[_0x851256(0x602)][_0x851256(0x7ea)]['call'](this),this[_0x851256(0xa6f)]&&('nnkYB'!=='nnkYB'?_0x413b31[_0x851256(0x6da)][_0x851256(0x4e2)][_0x851256(0x5fd)](this):(this[_0x851256(0xa6f)]=undefined,SceneManager[_0x851256(0xa4a)]['battleCoreResumeLaunchBattle']()));},Scene_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x5f4)]=function(){const _0x1a719b=_0x8db8d6;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x1a719b(0x4c9)]=!![],this[_0x1a719b(0x24e)]();},VisuMZ['BattleCore'][_0x8db8d6(0x527)]=Scene_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)],Scene_Map[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)]=function(){const _0x9a55ae=_0x8db8d6;VisuMZ['BattleCore'][_0x9a55ae(0x527)]['call'](this),BattleManager['_battleCoreBattleResumeAfter']&&(this[_0x9a55ae(0x56f)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x8db8d6(0x602)]['Scene_Map_initialize']=Scene_Map['prototype'][_0x8db8d6(0x3f1)],Scene_Map[_0x8db8d6(0x6da)]['initialize']=function(){const _0x10f7a6=_0x8db8d6;VisuMZ[_0x10f7a6(0x602)][_0x10f7a6(0x8ee)]['call'](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x311)]=Scene_ItemBase[_0x8db8d6(0x6da)][_0x8db8d6(0xa4c)],Scene_ItemBase[_0x8db8d6(0x6da)][_0x8db8d6(0xa4c)]=function(){const _0x59f06b=_0x8db8d6;VisuMZ[_0x59f06b(0x602)][_0x59f06b(0x311)]['call'](this),this['item']()[_0x59f06b(0x44e)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x59f06b(0x854)]=[]),DataManager[_0x59f06b(0x65a)](this['item']())&&($gameTemp[_0x59f06b(0x854)]=[]);},VisuMZ['BattleCore']['Scene_Options_maxCommands']=Scene_Options[_0x8db8d6(0x6da)][_0x8db8d6(0x37f)],Scene_Options[_0x8db8d6(0x6da)]['maxCommands']=function(){const _0x134e02=_0x8db8d6;let _0x21e0b3=VisuMZ['BattleCore'][_0x134e02(0x732)][_0x134e02(0x5fd)](this);const _0x2de9bc=VisuMZ[_0x134e02(0x602)][_0x134e02(0x466)];if(_0x2de9bc[_0x134e02(0x91f)][_0x134e02(0x720)]&&_0x2de9bc[_0x134e02(0x91f)][_0x134e02(0x9a3)])_0x21e0b3+=0x2;if(_0x2de9bc[_0x134e02(0x5d8)][_0x134e02(0x720)]&&_0x2de9bc[_0x134e02(0x5d8)][_0x134e02(0x9a3)])_0x21e0b3+=0x1;return _0x21e0b3;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x87a)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x75f)],Scene_Battle[_0x8db8d6(0x6da)]['start']=function(){const _0x4dc7ca=_0x8db8d6;SceneManager[_0x4dc7ca(0x3bc)]()?(Scene_Message['prototype'][_0x4dc7ca(0x75f)][_0x4dc7ca(0x5fd)](this),this['_spriteset']&&this[_0x4dc7ca(0x485)][_0x4dc7ca(0x2fb)](),BattleManager[_0x4dc7ca(0x327)]&&(_0x4dc7ca(0x80d)===_0x4dc7ca(0x80d)?BattleManager['revertTpbCachedActor']():_0x375027[_0x4dc7ca(0x73a)][_0x4dc7ca(0x398)]=!![])):VisuMZ['BattleCore']['Scene_Battle_start'][_0x4dc7ca(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)]['Scene_Battle_stop']=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x24e)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x24e)]=function(){const _0x5de643=_0x8db8d6;SceneManager[_0x5de643(0x781)]()?Scene_Message[_0x5de643(0x6da)][_0x5de643(0x24e)]['call'](this):VisuMZ['BattleCore']['Scene_Battle_stop'][_0x5de643(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x743)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x4e2)],Scene_Battle[_0x8db8d6(0x6da)]['terminate']=function(){const _0x27f59c=_0x8db8d6;SceneManager[_0x27f59c(0x781)]()?Scene_Message[_0x27f59c(0x6da)]['terminate'][_0x27f59c(0x5fd)](this):VisuMZ[_0x27f59c(0x602)][_0x27f59c(0x743)][_0x27f59c(0x5fd)](this);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x19e)]=function(){const _0x17f8ca=_0x8db8d6;if(ConfigManager[_0x17f8ca(0x572)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x17f8ca(0xaa0)];else{if(this[_0x17f8ca(0x830)]()==='border')return![];else{return Scene_Message['prototype'][_0x17f8ca(0x19e)][_0x17f8ca(0x5fd)](this);;}}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa69)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x142)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x142)]=function(){const _0x9c792b=_0x8db8d6;this[_0x9c792b(0x24f)](),VisuMZ[_0x9c792b(0x602)][_0x9c792b(0xa69)]['call'](this),this[_0x9c792b(0x7c6)]();},VisuMZ[_0x8db8d6(0x602)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x361)],Scene_Battle[_0x8db8d6(0x6da)]['createCancelButton']=function(){const _0x132212=_0x8db8d6;VisuMZ[_0x132212(0x602)][_0x132212(0x3ba)][_0x132212(0x5fd)](this),this[_0x132212(0x830)]()==='border'&&this[_0x132212(0x226)]();},Scene_Battle[_0x8db8d6(0x6da)]['setVisibleUI']=function(_0x5ec4fc){const _0x4423c6=_0x8db8d6;_0x5ec4fc?(this[_0x4423c6(0x373)]['x']=(Graphics['width']-Graphics[_0x4423c6(0x3ef)])/0x2,this['_windowLayer']['y']=(Graphics[_0x4423c6(0x7f5)]-Graphics[_0x4423c6(0x68b)])/0x2):(this[_0x4423c6(0x373)]['x']=Graphics['width']*0xa,this[_0x4423c6(0x373)]['y']=Graphics[_0x4423c6(0x7f5)]*0xa);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x15e)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xa32)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xa32)]=function(){const _0x1c0083=_0x8db8d6,_0x2709bd=BattleManager[_0x1c0083(0x306)]();VisuMZ[_0x1c0083(0x602)][_0x1c0083(0x15e)][_0x1c0083(0x5fd)](this);if(_0x2709bd){if(_0x2709bd===BattleManager[_0x1c0083(0x306)]())return;if(_0x2709bd===BattleManager[_0x1c0083(0x7be)])return;if(_0x2709bd['battler']())_0x2709bd['battler']()[_0x1c0083(0x8b3)]();}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x81a)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x1dc)],Scene_Battle['prototype'][_0x8db8d6(0x1dc)]=function(){const _0x560bb3=_0x8db8d6,_0x59efaa=BattleManager[_0x560bb3(0x306)]();if(_0x59efaa&&_0x59efaa['battler'])_0x59efaa[_0x560bb3(0x538)]()[_0x560bb3(0x8b3)]();VisuMZ[_0x560bb3(0x602)]['Scene_Battle_selectPreviousCommand']['call'](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x597)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xaf5)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xaf5)]=function(){const _0x80ea2f=_0x8db8d6;if(VisuMZ[_0x80ea2f(0x602)][_0x80ea2f(0x466)][_0x80ea2f(0x817)][_0x80ea2f(0x85f)])return _0x80ea2f(0x955)===_0x80ea2f(0x43f)?this[_0x80ea2f(0x599)]():VisuMZ[_0x80ea2f(0x602)][_0x80ea2f(0x466)][_0x80ea2f(0x817)][_0x80ea2f(0x85f)][_0x80ea2f(0x5fd)](this);return VisuMZ['BattleCore']['Scene_Battle_logWindowRect'][_0x80ea2f(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle['prototype']['createPartyCommandWindow'],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x2a8)]=function(){const _0x3392a1=_0x8db8d6;VisuMZ[_0x3392a1(0x602)][_0x3392a1(0xaa9)][_0x3392a1(0x5fd)](this),this[_0x3392a1(0x4b3)]();},Scene_Battle[_0x8db8d6(0x6da)]['createPartyCommandWindowBattleCore']=function(){const _0x3a0467=_0x8db8d6,_0x3437b1=this[_0x3a0467(0x28a)];_0x3437b1[_0x3a0467(0x86f)](_0x3a0467(0x734),this[_0x3a0467(0xaa1)]['bind'](this)),_0x3437b1[_0x3a0467(0x86f)](_0x3a0467(0x9c1),this['commandOptions'][_0x3a0467(0x998)](this));const _0x378480=this[_0x3a0467(0x830)]();switch(_0x378480){case'xp':case _0x3a0467(0x9af):return this[_0x3a0467(0x28a)][_0x3a0467(0x218)](0x1);break;}},Scene_Battle['prototype'][_0x8db8d6(0xaa1)]=function(){const _0x4cdd5d=_0x8db8d6;BattleManager[_0x4cdd5d(0x4e0)]=!![],$gameParty['makeActions'](),this[_0x4cdd5d(0xa32)](),BattleManager[_0x4cdd5d(0x2f8)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x87f)]=function(){const _0x8dd44f=_0x8db8d6;this[_0x8dd44f(0xa70)]()?(this[_0x8dd44f(0x4a9)]=!![],this['_logWindow']['push'](_0x8dd44f(0x1d0),VisuMZ[_0x8dd44f(0x602)][_0x8dd44f(0x466)][_0x8dd44f(0x956)][_0x8dd44f(0x3e1)])):'ecnXC'===_0x8dd44f(0xaba)?this[_0x8dd44f(0x4d7)]():this[_0x8dd44f(0x3f1)](...arguments);},Scene_Battle['prototype'][_0x8db8d6(0xa70)]=function(){const _0x39218e=_0x8db8d6;return BattleManager[_0x39218e(0x508)]();},Scene_Battle[_0x8db8d6(0x6da)]['callOptions']=function(){const _0x479d9b=_0x8db8d6;this[_0x479d9b(0x4a9)]=![],this['_spriteset'][_0x479d9b(0x2fb)](),this[_0x479d9b(0x373)][_0x479d9b(0x344)]=![];if(BattleManager[_0x479d9b(0x378)]())_0x479d9b(0x171)==='VkJMc'?($dataSystem[_0x479d9b(0x271)]||$dataSystem['battleback2Name'])&&SceneManager[_0x479d9b(0x5cf)]():(_0x3c74c5['BattleCore'][_0x479d9b(0x474)][_0x479d9b(0x5fd)](this,_0xd3329),this[_0x479d9b(0x1fd)](_0x148101));else{if($gameMap['battleback1Name']()||$gameMap[_0x479d9b(0x253)]()){if(_0x479d9b(0x5d5)!=='KCMhN')return _0x406d32['iconIndex'];else SceneManager[_0x479d9b(0x5cf)]();}}SceneManager['push'](Scene_Options),BattleManager[_0x479d9b(0x2f8)]()&&(BattleManager[_0x479d9b(0x327)]=BattleManager[_0x479d9b(0x306)]());},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x9c5)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x8bd)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x8bd)]=function(){const _0xa39a7d=_0x8db8d6;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess'][_0xa39a7d(0x5fd)](this);if(this[_0xa39a7d(0x4a9)]&&!BattleManager['_subject'])this['callOptions']();},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x7c6)]=function(){const _0xd445ca=_0x8db8d6,_0x4a6c24=this[_0xd445ca(0x46b)]();this[_0xd445ca(0x860)]=new Window_AutoBattleCancel(_0x4a6c24),this[_0xd445ca(0x860)][_0xd445ca(0x24c)](),this['addChild'](this['_autoBattleWindow']);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x46b)]=function(){const _0x1dc86e=_0x8db8d6;return VisuMZ['BattleCore'][_0x1dc86e(0x466)]['AutoBattle'][_0x1dc86e(0x3c2)]['call'](this);},Scene_Battle['prototype']['isPartyCommandWindowDisabled']=function(){const _0x1ad9a5=_0x8db8d6;return VisuMZ[_0x1ad9a5(0x602)][_0x1ad9a5(0x466)][_0x1ad9a5(0x956)][_0x1ad9a5(0x5dd)];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x36e)]=Scene_Battle['prototype'][_0x8db8d6(0x960)],Scene_Battle[_0x8db8d6(0x6da)]['startPartyCommandSelection']=function(){const _0x195ceb=_0x8db8d6;this[_0x195ceb(0x97e)]()?this[_0x195ceb(0x293)]():VisuMZ[_0x195ceb(0x602)][_0x195ceb(0x36e)][_0x195ceb(0x5fd)](this);},Scene_Battle['prototype']['onDisabledPartyCommandSelection']=function(){const _0x12ec59=_0x8db8d6;if(BattleManager[_0x12ec59(0x5ad)]()){if(_0x12ec59(0x7f0)===_0x12ec59(0x2ff))return _0xaa244e['prototype'][_0x12ec59(0xa38)]['call'](this);else this[_0x12ec59(0xa32)]();}else BattleManager[_0x12ec59(0x2f8)]()&&VisuMZ[_0x12ec59(0x602)][_0x12ec59(0x36e)][_0x12ec59(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x701)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x573)],Scene_Battle['prototype']['commandFight']=function(){const _0x4a3f51=_0x8db8d6;if(BattleManager['isTpb']()){if(_0x4a3f51(0x124)===_0x4a3f51(0x24a)){if(_0x13e879[_0x4a3f51(0x3ed)](/(.*):[ ](\d+)/i)){const _0x3a4159=_0x39e054(_0x4c04a2['$1'])[_0x4a3f51(0xa51)](),_0x4484f9=_0x46db31(_0x393b5d['$2']);_0x2312ed[_0x3a4159]=_0x4484f9,_0x3e2156+=_0x4484f9;}else{if(_0x21de1b[_0x4a3f51(0x3ed)](/(.*):[ ](\d+\.?\d+)/i)){const _0x12e9a2=_0x5131fa(_0x5c42a2['$1'])[_0x4a3f51(0xa51)](),_0x2f5b36=_0xfbeeba(_0x2e1719['$2']);_0x34545d[_0x12e9a2]=_0x2f5b36,_0xc91988+=_0x2f5b36;}else _0x19d215!==''&&(_0x2968e2[_0x28475e]=0x1,_0x362680++);}}else this[_0x4a3f51(0x2f6)](),this[_0x4a3f51(0x7a5)]();}else VisuMZ[_0x4a3f51(0x602)]['Scene_Battle_commandFight'][_0x4a3f51(0x5fd)](this);},Scene_Battle['prototype'][_0x8db8d6(0x2f6)]=function(){const _0x2d33d6=_0x8db8d6;if(!VisuMZ[_0x2d33d6(0x602)][_0x2d33d6(0x30d)])return;if(Imported[_0x2d33d6(0x9bb)]&&BattleManager['isCTB']())return;const _0x505121=$gameParty[_0x2d33d6(0x338)]()[_0x2d33d6(0x691)](_0x4fae4e=>_0x4fae4e['isTpbCharged']()&&_0x4fae4e[_0x2d33d6(0x126)]());BattleManager[_0x2d33d6(0x232)]=_0x505121[0x0]||null,BattleManager[_0x2d33d6(0x232)]&&BattleManager[_0x2d33d6(0x232)][_0x2d33d6(0x7aa)](_0x2d33d6(0x870));},VisuMZ['BattleCore'][_0x8db8d6(0x5dc)]=Scene_Battle['prototype'][_0x8db8d6(0x275)],Scene_Battle[_0x8db8d6(0x6da)]['createActorCommandWindow']=function(){const _0x3ea54f=_0x8db8d6;VisuMZ[_0x3ea54f(0x602)]['Scene_Battle_createActorCommandWindow'][_0x3ea54f(0x5fd)](this),this[_0x3ea54f(0x657)]();},Scene_Battle['prototype'][_0x8db8d6(0x657)]=function(){const _0x2901b5=_0x8db8d6,_0x1d2c11=this[_0x2901b5(0x426)];_0x1d2c11[_0x2901b5(0x86f)]('escape',this[_0x2901b5(0x254)][_0x2901b5(0x998)](this)),_0x1d2c11[_0x2901b5(0x86f)](_0x2901b5(0x734),this[_0x2901b5(0xaff)]['bind'](this)),_0x1d2c11[_0x2901b5(0x86f)](_0x2901b5(0x97d),this[_0x2901b5(0x1ef)][_0x2901b5(0x998)](this));if(BattleManager[_0x2901b5(0x2f8)]()){if(this[_0x2901b5(0x97e)]()){if('EVRCD'===_0x2901b5(0x7ce)){if(this[_0x2901b5(0x370)][_0x2901b5(0x98d)]!==_0x41d619)return this['_cache'][_0x2901b5(0x98d)];const _0x86eb65=/<DAMAGE CAP:[ ](\d+)>/i,_0x45efed=this[_0x2901b5(0x1f3)]()[_0x2901b5(0x9f8)](_0x1205ab=>_0x1205ab&&_0x1205ab[_0x2901b5(0x44e)][_0x2901b5(0x3ed)](_0x86eb65)?_0x489792(_0x100a5e['$1']):0x0);let _0x29fa48=_0x45efed[_0x2901b5(0x5e0)]>0x0?_0xbaa224[_0x2901b5(0x623)](..._0x45efed):0x0;if(_0x29fa48<=0x0)_0x29fa48=_0x26b310[_0x2901b5(0x602)][_0x2901b5(0x466)][_0x2901b5(0x409)]['DefaultHardCap'];return this[_0x2901b5(0x370)][_0x2901b5(0x98d)]=_0x29fa48,this[_0x2901b5(0x370)][_0x2901b5(0x98d)];}else delete _0x1d2c11[_0x2901b5(0x666)]['cancel'];}else{if('EEQZn'==='EEQZn')_0x1d2c11[_0x2901b5(0x86f)](_0x2901b5(0x107),this[_0x2901b5(0x47c)][_0x2901b5(0x998)](this));else{const _0x6d417f=this[_0x2901b5(0x9da)][_0x2901b5(0x646)](),_0x5d36a4=_0x6d417f[0x0];return _0x5d36a4[_0x2901b5(0x7a0)]=_0x5d36a4[_0x2901b5(0x7a0)]||[],_0x5d36a4[_0x2901b5(0x7a0)][0x0]=_0x6d417f[0x1],_0x5d36a4;}}}},Scene_Battle[_0x8db8d6(0x6da)]['actorCommandEscape']=function(){const _0x5b79d5=_0x8db8d6;this[_0x5b79d5(0x13a)]();},Scene_Battle['prototype'][_0x8db8d6(0xaff)]=function(){const _0x414259=_0x8db8d6;BattleManager[_0x414259(0x306)]()[_0x414259(0x5d0)](),BattleManager[_0x414259(0x1c4)](),BattleManager[_0x414259(0x2bf)](),this[_0x414259(0x1cb)]();},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x1ef)]=function(){const _0x415467=_0x8db8d6,_0xbc9c83=BattleManager[_0x415467(0x59c)]();_0xbc9c83[_0x415467(0x319)](this[_0x415467(0x426)][_0x415467(0x82b)]()),this[_0x415467(0x96c)]();},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x47c)]=function(){const _0x74aa0a=_0x8db8d6;if(this[_0x74aa0a(0x365)]())this[_0x74aa0a(0x493)]();else{if('jWoMb'!==_0x74aa0a(0xb19)){if(!_0x4c73f3[_0x74aa0a(0x38c)]())return;_0x2bbfb2[_0x74aa0a(0xb24)](_0x585afc,_0x11a357);const _0x4835dd=_0x175413[_0x74aa0a(0x64d)];if(!_0x4835dd)return;let _0x37ae6c=_0xfd2a0f[_0x74aa0a(0x4dd)];_0x4835dd['setCustomDamageFormula'](_0x37ae6c);}else this[_0x74aa0a(0x6ec)]();}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x30d)]=![],Scene_Battle[_0x8db8d6(0x6da)]['tpbActorSwitchConditionsMet']=function(){const _0x51ae4d=_0x8db8d6;if(Imported[_0x51ae4d(0x9bb)]&&BattleManager[_0x51ae4d(0xacc)]()){if(_0x51ae4d(0x6e2)!=='hOvyI')return![];else{if(!_0x3e7209[_0x51ae4d(0x38c)]())return;if(!_0x30a418[_0x51ae4d(0xaa5)])return;_0x4d59f7[_0x51ae4d(0xb24)](_0x598aae,_0x338749);const _0x2a4a4e=_0x3738c8[_0x51ae4d(0x754)](),_0x50aeb1=_0x57a3a3['WaitForAngle'];if(!_0x2a4a4e)return;_0x1eea52['setBattleAngle'](0x0,_0x20115e[_0x51ae4d(0x20b)],_0x2d1bab[_0x51ae4d(0x5da)]);if(_0x50aeb1)_0x2a4a4e[_0x51ae4d(0x4f2)](_0x51ae4d(0x2e8));}}else{if(!VisuMZ[_0x51ae4d(0x602)][_0x51ae4d(0x30d)])return![];const _0x5301d5=$gameParty[_0x51ae4d(0x338)]()[_0x51ae4d(0x691)](_0x478bab=>_0x478bab[_0x51ae4d(0xad7)]()&&_0x478bab['canInput']());return _0x5301d5[_0x51ae4d(0x5e0)]>0x0&&BattleManager[_0x51ae4d(0x306)]()!==_0x5301d5[_0x5301d5['length']-0x1];}},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x493)]=function(){const _0x14e5de=_0x8db8d6,_0x1fa391=BattleManager[_0x14e5de(0x306)](),_0x33f1da=_0x1fa391[_0x14e5de(0x538)]();if(_0x33f1da)_0x33f1da['stepBack']();const _0x2f3abe=$gameParty[_0x14e5de(0x338)]()['filter'](_0x37a5af=>_0x37a5af[_0x14e5de(0xad7)]()&&_0x37a5af['canInput']()),_0x1f35d0=_0x2f3abe[_0x14e5de(0x764)](_0x1fa391),_0x3b57b6=_0x2f3abe[_0x1f35d0+0x1];BattleManager[_0x14e5de(0x232)]=_0x3b57b6||null;if(_0x3b57b6)_0x3b57b6[_0x14e5de(0x7aa)](_0x14e5de(0x870));_0x1fa391[_0x14e5de(0x7aa)](_0x14e5de(0xa1e)),this['changeInputWindow']();},Scene_Battle['prototype'][_0x8db8d6(0x6ec)]=function(){const _0x4bfe2a=_0x8db8d6;this[_0x4bfe2a(0x28a)]['setup'](),this[_0x4bfe2a(0x426)][_0x4bfe2a(0xae4)]();if(!VisuMZ['BattleCore'][_0x4bfe2a(0x30d)])return;if(Imported[_0x4bfe2a(0x9bb)]&&BattleManager['isCTB']())return;if(BattleManager[_0x4bfe2a(0x232)]){if('IMtZD'===_0x4bfe2a(0x3a9)){if(this[_0x4bfe2a(0x19c)])this[_0x4bfe2a(0x19c)][_0x4bfe2a(0x520)](_0x71cd04,_0x1d1089,_0x4401ee);}else{BattleManager['_currentActor'][_0x4bfe2a(0x7aa)](_0x4bfe2a(0xa1e));const _0x22636b=BattleManager[_0x4bfe2a(0x232)][_0x4bfe2a(0x538)]();if(_0x22636b)_0x22636b[_0x4bfe2a(0x8b3)]();}}BattleManager[_0x4bfe2a(0x232)]=null;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x678)]=Scene_Battle['prototype'][_0x8db8d6(0x9a4)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x9a4)]=function(){const _0x97612b=_0x8db8d6;VisuMZ[_0x97612b(0x602)][_0x97612b(0x678)][_0x97612b(0x5fd)](this),this[_0x97612b(0x3e0)]();},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x3e0)]=function(){const _0x408bcb=_0x8db8d6;this['_actorCommandWindow']['setHelpWindow'](this[_0x408bcb(0x30a)]),this[_0x408bcb(0x28a)]['setHelpWindow'](this[_0x408bcb(0x30a)]);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x830)]=function(){const _0x4de06e=_0x8db8d6;if($gameTemp[_0x4de06e(0x49f)]!==undefined){if(_0x4de06e(0x187)==='BvPdX')return $gameTemp[_0x4de06e(0x49f)];else{const _0x5030d4=_0x5a3db1[_0x4de06e(0x602)][_0x4de06e(0x466)][_0x4de06e(0x965)],_0x386c68=_0x5030d4[_0x4de06e(0x40d)],_0x8b17f0=_0x5030d4[_0x4de06e(0x175)],_0x41d0f8=_0x5030d4[_0x4de06e(0x339)];this[_0x4de06e(0x520)](-_0x386c68,-_0x8b17f0,_0x41d0f8);}}if(this[_0x4de06e(0x491)])return this[_0x4de06e(0x491)];return this['_battleLayoutStyle']=VisuMZ[_0x4de06e(0x602)][_0x4de06e(0x466)][_0x4de06e(0xa31)][_0x4de06e(0xa22)][_0x4de06e(0x80e)]()[_0x4de06e(0xa51)](),this[_0x4de06e(0x491)]==='sideview_ui'&&!Imported[_0x4de06e(0x4f7)]&&(this['_battleLayoutStyle']='default'),this['_battleLayoutStyle'];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x189)]=Scene_Battle['prototype'][_0x8db8d6(0x890)],Scene_Battle[_0x8db8d6(0x6da)]['windowAreaHeight']=function(){const _0x4fbfa5=_0x8db8d6,_0x240486=this[_0x4fbfa5(0x830)]();switch(_0x240486){case _0x4fbfa5(0x69b):return this[_0x4fbfa5(0x868)](Math[_0x4fbfa5(0x623)](0x1,$gameParty[_0x4fbfa5(0xb2e)]()),!![]);break;default:return VisuMZ[_0x4fbfa5(0x602)]['Scene_Battle_windowAreaHeight']['call'](this);break;}},VisuMZ['BattleCore'][_0x8db8d6(0x2cb)]=Scene_Battle['prototype'][_0x8db8d6(0x840)],Scene_Battle['prototype'][_0x8db8d6(0x840)]=function(){const _0xcf2692=_0x8db8d6,_0x39bede=this['battleLayoutStyle']();switch(_0x39bede){case _0xcf2692(0x816):return this['helpWindowRectBorderStyle']();break;case _0xcf2692(0x9e5):case _0xcf2692(0x69b):case'xp':case'portrait':default:return VisuMZ[_0xcf2692(0x602)][_0xcf2692(0x2cb)][_0xcf2692(0x5fd)](this);break;}},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xaec)]=function(){const _0x1a0396=_0x8db8d6,_0x1be399=this[_0x1a0396(0x830)]();switch(_0x1be399){case'xp':case _0x1a0396(0x9af):return this[_0x1a0396(0x42b)]();break;case _0x1a0396(0x816):return this[_0x1a0396(0x871)]();break;case'default':case'list':default:return this[_0x1a0396(0x85b)]();break;}},VisuMZ[_0x8db8d6(0x602)]['Scene_Battle_partyCommandWindowRect']=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xb00)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xb00)]=function(){const _0x550146=_0x8db8d6,_0x584908=this[_0x550146(0x830)]();switch(_0x584908){case'xp':case'portrait':return this[_0x550146(0xb01)]();break;case _0x550146(0x816):return this['partyCommandWindowRectBorderStyle']();case _0x550146(0x9e5):case _0x550146(0x69b):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x533)]=function(){const _0xdbb88a=_0x8db8d6,_0xf3c048=VisuMZ['BattleCore']['Settings'][_0xdbb88a(0xa31)],_0x4c4246=_0xf3c048[_0xdbb88a(0x8be)]||0xc0,_0x1a1fa5=this[_0xdbb88a(0x890)](),_0x1134f7=this[_0xdbb88a(0x19e)]()?Graphics['boxWidth']-_0x4c4246:0x0,_0x53c900=Graphics[_0xdbb88a(0x68b)]-_0x1a1fa5;return new Rectangle(_0x1134f7,_0x53c900,_0x4c4246,_0x1a1fa5);},Scene_Battle['prototype'][_0x8db8d6(0xb44)]=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x5c6)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x2e2)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x2e2)]=function(){const _0x2c0d83=_0x8db8d6,_0x3fb293=this[_0x2c0d83(0x830)]();switch(_0x3fb293){case'xp':case _0x2c0d83(0x9af):case _0x2c0d83(0x816):break;case _0x2c0d83(0x9e5):case _0x2c0d83(0x69b):default:VisuMZ[_0x2c0d83(0x602)]['Scene_Battle_updateStatusWindowPosition'][_0x2c0d83(0x5fd)](this);break;}},VisuMZ['BattleCore'][_0x8db8d6(0x935)]=Scene_Battle['prototype'][_0x8db8d6(0x6a7)],Scene_Battle[_0x8db8d6(0x6da)]['startActorSelection']=function(){const _0x252700=_0x8db8d6;VisuMZ[_0x252700(0x602)][_0x252700(0x935)][_0x252700(0x5fd)](this),this[_0x252700(0x58f)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x80c)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x353)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x353)]=function(){const _0x16f6b0=_0x8db8d6;VisuMZ['BattleCore'][_0x16f6b0(0x80c)][_0x16f6b0(0x5fd)](this),this[_0x16f6b0(0x6eb)]['autoSelect'](),this[_0x16f6b0(0x58f)]();},Scene_Battle['prototype'][_0x8db8d6(0x58f)]=function(){const _0x580ea1=_0x8db8d6,_0x14fc29=this[_0x580ea1(0x830)]();if(['xp',_0x580ea1(0x9af),_0x580ea1(0x816)][_0x580ea1(0xa5c)](_0x14fc29)){if(_0x580ea1(0x9e2)!=='fOWSQ')this[_0x580ea1(0x426)][_0x580ea1(0xae4)]();else{this['contents']['clear']();const _0x1075c3=_0x1131b6['BattleCore'][_0x580ea1(0x466)]['AutoBattle'][_0x580ea1(0x6a4)],_0x3aad10=_0x1075c3[_0x580ea1(0xad2)](this['okButtonText'](),this[_0x580ea1(0x712)]()),_0x1c6320=this[_0x580ea1(0x1fc)](_0x3aad10)[_0x580ea1(0x5cb)],_0x238ed0=_0x58e6b1['floor']((this[_0x580ea1(0x8a0)]-_0x1c6320)/0x2);this[_0x580ea1(0x822)](_0x3aad10,_0x238ed0,0x0,_0x1c6320);}}(_0x14fc29===_0x580ea1(0x816)||this[_0x580ea1(0x53b)]())&&(this[_0x580ea1(0xb18)][_0x580ea1(0xae4)](),this[_0x580ea1(0x357)][_0x580ea1(0xae4)]());},VisuMZ[_0x8db8d6(0x602)]['Scene_Battle_onActorOk']=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x3e3)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x3e3)]=function(){const _0x18d780=_0x8db8d6;VisuMZ[_0x18d780(0x602)][_0x18d780(0x97c)][_0x18d780(0x5fd)](this),this[_0x18d780(0x2ca)]();},Scene_Battle['prototype'][_0x8db8d6(0xa17)]=function(){const _0x5d7e88=_0x8db8d6;return[_0x5d7e88(0x180),_0x5d7e88(0x9a9),'singleSkill'][_0x5d7e88(0xa5c)](this[_0x5d7e88(0x426)]['currentSymbol']());},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa72)]=Scene_Battle[_0x8db8d6(0x6da)]['onActorCancel'],Scene_Battle['prototype']['onActorCancel']=function(){const _0x89948a=_0x8db8d6;this[_0x89948a(0xa17)]()?(this['_statusWindow'][_0x89948a(0x69a)](),this[_0x89948a(0x896)][_0x89948a(0x24c)](),this[_0x89948a(0x426)][_0x89948a(0xa4e)]()):VisuMZ[_0x89948a(0x602)][_0x89948a(0xa72)]['call'](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x958)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x838)],Scene_Battle[_0x8db8d6(0x6da)]['onEnemyOk']=function(){const _0x4aacb1=_0x8db8d6;VisuMZ[_0x4aacb1(0x602)][_0x4aacb1(0x958)]['call'](this),this[_0x4aacb1(0x2ca)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1f6)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x876)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x876)]=function(){const _0x5a31dc=_0x8db8d6;if(this['isNonSubmenuCancel']()){if(_0x5a31dc(0x2be)!==_0x5a31dc(0xad0))this[_0x5a31dc(0x98e)][_0x5a31dc(0x69a)](),this[_0x5a31dc(0x6eb)]['hide'](),this[_0x5a31dc(0x426)]['activate']();else return _0x30a5bf[_0x5a31dc(0x602)]['Game_Action_evalDamageFormula'][_0x5a31dc(0x5fd)](this,_0x67749f);}else VisuMZ[_0x5a31dc(0x602)][_0x5a31dc(0x1f6)][_0x5a31dc(0x5fd)](this);this[_0x5a31dc(0x18e)]();},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x2ca)]=function(){const _0x2a5108=_0x8db8d6,_0x1548c0=this[_0x2a5108(0x830)]();if(_0x1548c0==='border'||this[_0x2a5108(0x53b)]()){this['_skillWindow'][_0x2a5108(0x53a)]();this[_0x2a5108(0xb18)][_0x2a5108(0x121)]&&(_0x2a5108(0x571)!==_0x2a5108(0xb1b)?this[_0x2a5108(0xb18)][_0x2a5108(0x69a)]():_0x29e6a9['requestMotion'](_0x3a198c));this[_0x2a5108(0x357)][_0x2a5108(0x53a)]();if(this[_0x2a5108(0x357)][_0x2a5108(0x121)]){if(_0x2a5108(0x9f2)!==_0x2a5108(0x9f2))return this[_0x2a5108(0x902)][_0x24ec40];else this['_itemWindow'][_0x2a5108(0x69a)]();}}},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x18e)]=function(){const _0x4d300e=_0x8db8d6,_0x324ef2=this[_0x4d300e(0x830)]();['xp',_0x4d300e(0x9af),_0x4d300e(0x816)]['includes'](_0x324ef2)&&this['_actorCommandWindow'][_0x4d300e(0x53a)](),this[_0x4d300e(0x2ca)]();},Scene_Battle['prototype'][_0x8db8d6(0x85b)]=function(){const _0x41a603=_0x8db8d6,_0x2c4146=VisuMZ[_0x41a603(0x602)]['Settings'][_0x41a603(0xa31)],_0x255b2e=Window_BattleStatus[_0x41a603(0x6da)]['extraHeight'](),_0x13b148=Graphics[_0x41a603(0x3ef)]-(_0x2c4146[_0x41a603(0x8be)]||0xc0),_0x1513a2=this[_0x41a603(0x890)]()+_0x255b2e,_0x220ad9=this['isRightInputMode']()?0x0:Graphics[_0x41a603(0x3ef)]-_0x13b148,_0x5abe7f=Graphics[_0x41a603(0x68b)]-_0x1513a2+_0x255b2e;return new Rectangle(_0x220ad9,_0x5abe7f,_0x13b148,_0x1513a2);},Scene_Battle[_0x8db8d6(0x6da)]['statusWindowRectXPStyle']=function(){const _0x5b2378=_0x8db8d6,_0x54df12=Window_BattleStatus['prototype'][_0x5b2378(0x73b)](),_0x388264=Graphics['boxWidth'],_0x51c730=this[_0x5b2378(0x890)]()+_0x54df12,_0x4d0b54=0x0,_0x3f91b0=Graphics['boxHeight']-_0x51c730+_0x54df12;return new Rectangle(_0x4d0b54,_0x3f91b0,_0x388264,_0x51c730);},Scene_Battle[_0x8db8d6(0x6da)]['partyCommandWindowRectXPStyle']=function(){const _0x87688=_0x8db8d6,_0x4af013=Graphics[_0x87688(0x3ef)]/0x2,_0x33c938=this[_0x87688(0x868)](VisuMZ[_0x87688(0x602)]['Settings'][_0x87688(0xa31)][_0x87688(0x4b8)],!![]),_0x1852c3=Math[_0x87688(0x423)]((Graphics[_0x87688(0x3ef)]-_0x4af013)/0x2),_0x4eaf88=Graphics[_0x87688(0x68b)]-_0x33c938-this[_0x87688(0x42b)]()[_0x87688(0x7f5)];return new Rectangle(_0x1852c3,_0x4eaf88,_0x4af013,_0x33c938);},Scene_Battle[_0x8db8d6(0x6da)]['helpWindowRectBorderStyle']=function(){const _0x25e096=_0x8db8d6,_0x16eced=Graphics[_0x25e096(0x5cb)],_0x5d2719=Math[_0x25e096(0x423)]((Graphics[_0x25e096(0x3ef)]-_0x16eced)/0x2),_0x49c57a=this['helpAreaHeight'](),_0x1b3d96=(Graphics[_0x25e096(0x7f5)]-Graphics[_0x25e096(0x68b)])/-0x2;return new Rectangle(_0x5d2719,_0x1b3d96,_0x16eced,_0x49c57a);},Scene_Battle[_0x8db8d6(0x6da)]['statusWindowRectBorderStyle']=function(){const _0x171b3a=_0x8db8d6,_0xb3e5ad=Graphics['width'],_0x1894e3=Math['round']((Graphics[_0x171b3a(0x3ef)]-_0xb3e5ad)/0x2),_0x3d2ff6=this[_0x171b3a(0x868)](0x4,!![]),_0x404cfc=Graphics['boxHeight']-_0x3d2ff6+(Graphics['height']-Graphics[_0x171b3a(0x68b)])/0x2;return new Rectangle(_0x1894e3,_0x404cfc,_0xb3e5ad,_0x3d2ff6);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x29c)]=function(){const _0x3b028d=_0x8db8d6,_0x29dcbd=Math['floor'](Graphics['width']/0x3),_0x178c57=this[_0x3b028d(0x19e)]()?(Graphics[_0x3b028d(0x5cb)]+Graphics['boxWidth'])/0x2-_0x29dcbd:(Graphics['width']-Graphics[_0x3b028d(0x3ef)])/-0x2,_0x2eaafe=this[_0x3b028d(0x1e5)](),_0x2dbdce=_0x2eaafe['y']+_0x2eaafe['height'],_0x4a147d=this['statusWindowRectBorderStyle'](),_0x26aa1a=_0x4a147d['y']-_0x2dbdce;return new Rectangle(_0x178c57,_0x2dbdce,_0x29dcbd,_0x26aa1a);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xa3a)]=function(){const _0x3a7039=_0x8db8d6,_0x353b47=Math['ceil'](Graphics[_0x3a7039(0x5cb)]/0x3),_0x3b6935=Math[_0x3a7039(0x423)]((Graphics[_0x3a7039(0x3ef)]-_0x353b47)/0x2),_0x59fe0f=this[_0x3a7039(0x29c)](),_0x5ef27d=_0x59fe0f['y'],_0x5dd91e=_0x59fe0f['height'];return new Rectangle(_0x3b6935,_0x5ef27d,_0x353b47,_0x5dd91e);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x226)]=function(){const _0x2753ad=_0x8db8d6;this['_cancelButton']['y']=this['_helpWindow']['y']+this[_0x2753ad(0x30a)][_0x2753ad(0x7f5)];if(this[_0x2753ad(0x19e)]()){if(this[_0x2753ad(0x830)]()==='border'){if(_0x2753ad(0x318)===_0x2753ad(0x318))this[_0x2753ad(0x629)]['x']=0x8;else{if(!_0x2464e7[_0x2753ad(0x38c)]())return;_0x756d07['ConvertParams'](_0x23a7aa,_0x2dad45);const _0x598d0e=_0x19e614[_0x2753ad(0x754)](),_0x3de8da=_0x1ca9a7[_0x2753ad(0x7be)],_0x456446=_0xdc5c85[_0x2753ad(0x566)](_0xa46e64[_0x2753ad(0x8f9)]),_0x34f808=_0xb9b29[_0x2753ad(0x849)],_0x2f41d7=_0x5977f5[_0x2753ad(0x307)];if(!_0x598d0e||!_0x3de8da)return;const _0x1750f=_0x3de8da['attackAnimationId1']();_0x1df298[_0x2753ad(0x2d5)](_0x456446,_0x1750f,_0x34f808),_0x59bbe3[_0x2753ad(0xa7e)]&&_0x598d0e[_0x2753ad(0x4f2)]('battleAnimation');}}else{if(_0x2753ad(0x63c)!==_0x2753ad(0x510))this['_cancelButton']['x']=-this['_cancelButton'][_0x2753ad(0x5cb)]-0x4;else{const _0x19b6e3=this['_battler']&&this[_0x2753ad(0x980)][_0x2753ad(0x41a)]();this[_0x2753ad(0x986)]=(_0x19b6e3?-0x1:0x1)*_0xa79021['abs'](this[_0x2753ad(0x728)]['x']);}}}else this[_0x2753ad(0x629)]['x']=Graphics[_0x2753ad(0x5cb)]-(Graphics[_0x2753ad(0x5cb)]-Graphics[_0x2753ad(0x3ef)])/0x2-this[_0x2753ad(0x629)][_0x2753ad(0x5cb)]-0x4;},VisuMZ[_0x8db8d6(0x602)]['Scene_Battle_skillWindowRect']=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x593)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x593)]=function(){const _0x9450d9=_0x8db8d6;if(this[_0x9450d9(0x830)]()===_0x9450d9(0x816))return this[_0x9450d9(0xa3a)]();else{if(this[_0x9450d9(0x53b)]())return'imdGw'===_0x9450d9(0x7b0)?_0x9e7b87[_0x9450d9(0x602)][_0x9450d9(0x555)][_0x9450d9(0x5fd)](this):this[_0x9450d9(0x811)]();else{if(_0x9450d9(0x564)===_0x9450d9(0x564))return VisuMZ[_0x9450d9(0x602)][_0x9450d9(0x8a5)][_0x9450d9(0x5fd)](this);else{if(!_0x2e1d23)return;if(!this[_0x9450d9(0x843)])return;this[_0x9450d9(0x843)][_0x9450d9(0x347)]['x']=this[_0x9450d9(0x88f)][_0x9450d9(0x8a2)](),this[_0x9450d9(0x843)]['anchor']['y']=this[_0x9450d9(0x88f)]['svBattlerAnchorY'](),this[_0x9450d9(0x9be)]();}}}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x454)]=Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x866)],Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x866)]=function(){const _0xc62047=_0x8db8d6;if(this['battleLayoutStyle']()==='border'){if('mtaMQ'===_0xc62047(0x83d))return this[_0xc62047(0xa3a)]();else this['_hpGaugeSprite'][_0xc62047(0x344)]=![];}else{if(this[_0xc62047(0x53b)]()){if('ejnrD'==='MUPrg')this[_0xc62047(0x538)]()['refreshMotion']();else return this[_0xc62047(0x811)]();}else return VisuMZ[_0xc62047(0x602)][_0xc62047(0x454)][_0xc62047(0x5fd)](this);}},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x53b)]=function(){const _0x1cb8f2=_0x8db8d6;return VisuMZ[_0x1cb8f2(0x602)][_0x1cb8f2(0x466)][_0x1cb8f2(0xa31)][_0x1cb8f2(0x102)];},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x811)]=function(){const _0x4cf282=_0x8db8d6,_0x348462=Sprite_Button[_0x4cf282(0x6da)][_0x4cf282(0xa10)]()*0x2+0x4;let _0x393ad2=Graphics[_0x4cf282(0x3ef)]-_0x348462;if(Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x4cf282(0x29b)]()){if('SizDk'==='bSatQ'){let _0x42a647=-0x10,_0x474574=this[_0x4cf282(0x7f5)]*0.5;const _0x56a05f=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x43f88f=this[_0x4cf282(0x980)][_0x4cf282(0x1f3)]()['map'](_0x5e53f9=>_0x5e53f9&&_0x5e53f9[_0x4cf282(0x44e)]['match'](_0x56a05f)?_0xadfe73(_0x4ee013['$1']):0x0),_0x57102d=this[_0x4cf282(0x980)][_0x4cf282(0x1f3)]()[_0x4cf282(0x9f8)](_0x1cf9ce=>_0x1cf9ce&&_0x1cf9ce['note']['match'](_0x56a05f)?_0x3d37da(_0x2712f5['$2']):0x0);_0x42a647=_0x43f88f[_0x4cf282(0x65f)]((_0x4049cc,_0x2b96d7)=>_0x4049cc+_0x2b96d7,_0x42a647),_0x474574=_0x57102d[_0x4cf282(0x65f)]((_0x11bb0f,_0x2269b4)=>_0x11bb0f+_0x2269b4,_0x474574),this[_0x4cf282(0x4f0)]['x']=_0x42a647,this[_0x4cf282(0x4f0)]['y']=_0x474574,this[_0x4cf282(0x4f0)][_0x4cf282(0x2fb)]();}else _0x393ad2+=_0x348462;}const _0xf32b79=this[_0x4cf282(0x8e3)](),_0x2db089=Graphics['boxHeight']-_0xf32b79-this['statusWindowRect']()[_0x4cf282(0x7f5)]+Window_BattleStatus[_0x4cf282(0x6da)][_0x4cf282(0x73b)](),_0x1b7de9=0x0;return new Rectangle(_0x1b7de9,_0xf32b79,_0x393ad2,_0x2db089);},Scene_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x24f)]=function(){const _0x2cd7a8=_0x8db8d6;if(!VisuMZ[_0x2cd7a8(0x602)][_0x2cd7a8(0x466)][_0x2cd7a8(0x8fe)][_0x2cd7a8(0x6b0)])return;this[_0x2cd7a8(0x999)]=new Sprite(),this[_0x2cd7a8(0x999)]['x']=this[_0x2cd7a8(0x373)]['x'],this[_0x2cd7a8(0x999)]['y']=this['_windowLayer']['y'];const _0x8983eb=this[_0x2cd7a8(0x8c2)]['indexOf'](this[_0x2cd7a8(0x373)]);this[_0x2cd7a8(0x1a1)](this['_enemyNameContainer'],_0x8983eb);for(let _0x2d7c66=0x0;_0x2d7c66<0x8;_0x2d7c66++){const _0x5e9b77=new Window_EnemyName(_0x2d7c66);this['_enemyNameContainer'][_0x2cd7a8(0x9b0)](_0x5e9b77);}},Sprite_Battler[_0x8db8d6(0x770)]=VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x466)][_0x8db8d6(0x73a)][_0x8db8d6(0x21a)],VisuMZ['BattleCore']['Sprite_Battler_initMembers']=Sprite_Battler['prototype']['initMembers'],Sprite_Battler['prototype'][_0x8db8d6(0x13d)]=function(){const _0x3c5d98=_0x8db8d6;VisuMZ[_0x3c5d98(0x602)][_0x3c5d98(0x432)][_0x3c5d98(0x5fd)](this),this[_0x3c5d98(0x5a2)]();if(this[_0x3c5d98(0x5f5)]===Sprite_Enemy)this[_0x3c5d98(0x5bd)]();this[_0x3c5d98(0xa5b)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x5a2)]=function(){const _0x147594=_0x8db8d6;this['_baseX']=0x0,this[_0x147594(0x214)]=0x0,this[_0x147594(0x4c0)]=0x0,this[_0x147594(0x427)]=0x0,this['_floatDuration']=0x0,this[_0x147594(0x718)]=0x0,this[_0x147594(0x47f)]=_0x147594(0xa13),this[_0x147594(0x8fa)]=0x0,this[_0x147594(0x7c0)]=0x0,this[_0x147594(0xa91)]=0x0,this[_0x147594(0xa80)]=0x0,this[_0x147594(0x52e)]=0xff,this[_0x147594(0x847)]=0x0,this[_0x147594(0x74a)]=0x0,this[_0x147594(0x616)]=_0x147594(0xa13),this[_0x147594(0x967)]=0x0,this['_targetAngle']=0x0,this[_0x147594(0x6c5)]=0x0,this['_angleWholeDuration']=0x0,this[_0x147594(0x42e)]=_0x147594(0xa13),this[_0x147594(0x177)]=!![],this[_0x147594(0x45c)]=0x0,this[_0x147594(0xa7f)]=0x0,this[_0x147594(0x9a1)]=0x0,this[_0x147594(0x38a)]=0x0,this[_0x147594(0xa29)]=0x0,this[_0x147594(0x9f6)]=0x0,this[_0x147594(0x591)]=_0x147594(0xa13),this[_0x147594(0xa20)]=0x1,this[_0x147594(0x73d)]=0x1,this[_0x147594(0x592)]=0x1,this[_0x147594(0x4e5)]=0x1,this[_0x147594(0x73e)]=0x0,this['_growWholeDuration']=0x0,this['_growEasing']=_0x147594(0xa13),this[_0x147594(0x986)]=0x1;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x5bd)]=function(){const _0xf6c36b=_0x8db8d6;this[_0xf6c36b(0x20f)]=new Sprite(),this[_0xf6c36b(0x20f)][_0xf6c36b(0x86a)]=ImageManager['loadSystem'](_0xf6c36b(0x6dc)),this[_0xf6c36b(0x20f)][_0xf6c36b(0x86a)][_0xf6c36b(0x269)]=VisuMZ[_0xf6c36b(0x602)]['Settings']['Actor'][_0xf6c36b(0x7e1)],this[_0xf6c36b(0x20f)][_0xf6c36b(0x347)]['x']=0.5,this[_0xf6c36b(0x20f)][_0xf6c36b(0x347)]['y']=0.5,this[_0xf6c36b(0x20f)]['y']=-0x2,this[_0xf6c36b(0x20f)][_0xf6c36b(0x344)]=![],this[_0xf6c36b(0x9b0)](this['_shadowSprite']);},Sprite_Battler['prototype'][_0x8db8d6(0xa5b)]=function(){const _0xbb18c5=_0x8db8d6;this[_0xbb18c5(0x329)]=new Sprite(),this[_0xbb18c5(0x329)][_0xbb18c5(0x347)]['x']=0.5,this[_0xbb18c5(0x329)][_0xbb18c5(0x347)]['y']=0.5,this[_0xbb18c5(0x9b0)](this[_0xbb18c5(0x329)]);},Sprite_Battler['prototype'][_0x8db8d6(0x703)]=function(){const _0xf36ce5=_0x8db8d6;if(!this[_0xf36ce5(0x329)])return;if(this['_shadowSprite']){const _0x3cc113=this['getChildIndex'](this[_0xf36ce5(0x329)]);this[_0xf36ce5(0x1a1)](this['_shadowSprite'],_0x3cc113),this[_0xf36ce5(0x9be)]();}this['_svBattlerSprite']&&this[_0xf36ce5(0x329)][_0xf36ce5(0x9b0)](this[_0xf36ce5(0x85c)]),this[_0xf36ce5(0x4f0)]&&this[_0xf36ce5(0x329)][_0xf36ce5(0x9b0)](this[_0xf36ce5(0x4f0)]),this[_0xf36ce5(0x843)]&&this[_0xf36ce5(0x329)][_0xf36ce5(0x9b0)](this[_0xf36ce5(0x843)]),this[_0xf36ce5(0x1a5)]&&('DTNcb'!==_0xf36ce5(0xb3b)?this[_0xf36ce5(0x329)][_0xf36ce5(0x9b0)](this['_dragonbonesSpriteContainer']):this[_0xf36ce5(0x819)]());},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x9be)]=function(){const _0x4088e5=_0x8db8d6;if(!this[_0x4088e5(0x20f)])return;if(this[_0x4088e5(0x980)]&&this[_0x4088e5(0x980)][_0x4088e5(0xab1)]()){const _0x4782b6=this[_0x4088e5(0x20f)][_0x4088e5(0x86a)];this['_shadowSprite']['setFrame'](0x0,0x0,_0x4782b6[_0x4088e5(0x5cb)],_0x4782b6[_0x4088e5(0x7f5)]);}else{if(_0x4088e5(0x198)!=='kAdPc'){if(this['_dimmerSprite']){const _0x5a695c=this['_dimmerSprite'][_0x4088e5(0x86a)],_0x4c2279=this[_0x4088e5(0x5cb)]-0x8,_0xd750bc=this[_0x4088e5(0x7f5)],_0x30221e=this[_0x4088e5(0x438)],_0x472057=_0x20706d[_0x4088e5(0x184)](),_0x46fa19=_0x530667['dimColor2']();this[_0x4088e5(0x627)]['x']=0x4,_0x5a695c[_0x4088e5(0x95e)](_0x4c2279,_0xd750bc),_0x5a695c[_0x4088e5(0x766)](0x0,0x0,_0x4c2279,_0x30221e,_0x46fa19,_0x472057,!![]),_0x5a695c[_0x4088e5(0x74b)](0x0,_0x30221e,_0x4c2279,_0xd750bc-_0x30221e*0x2,_0x472057),_0x5a695c[_0x4088e5(0x766)](0x0,_0xd750bc-_0x30221e,_0x4c2279,_0x30221e,_0x472057,_0x46fa19,!![]),this['_dimmerSprite'][_0x4088e5(0x128)](0x0,0x0,_0x4c2279,_0xd750bc);}}else this[_0x4088e5(0x20f)][_0x4088e5(0x128)](0x0,0x0,0x0,0x0);}},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xa89)]=function(){const _0x48293b=_0x8db8d6;if(SceneManager[_0x48293b(0x38c)]())return SceneManager[_0x48293b(0xa4a)][_0x48293b(0x485)]['_damageContainer'];else{if('USWuM'===_0x48293b(0xb1a))_0x53bb24['BattleCore'][_0x48293b(0x9f3)][_0x48293b(0x5fd)](this,_0x5cbf83,_0x30924e),this[_0x48293b(0x8fb)]();else return this[_0x48293b(0x19c)];}},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x10a)]=function(_0x3a740c,_0x4756e6){const _0x3c171f=_0x8db8d6;if(!this['_battler'][_0x3c171f(0x8d5)]())return;const _0x939e06=VisuMZ[_0x3c171f(0x602)][_0x3c171f(0x466)][_0x3c171f(0x409)],_0x2d4e2a=new Sprite_Damage();_0x2d4e2a[_0x3c171f(0x736)]=_0x939e06[_0x3c171f(0x29e)],this[_0x3c171f(0x590)](_0x2d4e2a),_0x2d4e2a[_0x3c171f(0x10a)](_0x3a740c,_0x4756e6),this[_0x3c171f(0x150)](_0x2d4e2a);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x9e4)]=function(_0xb9a8fd,_0x21020c,_0x217584){const _0x2375b7=_0x8db8d6;if(!this[_0x2375b7(0x980)][_0x2375b7(0x8d5)]())return;const _0x50280d=VisuMZ[_0x2375b7(0x602)][_0x2375b7(0x466)]['Damage'],_0x3f5c2d=new Sprite_Damage();_0x3f5c2d[_0x2375b7(0x736)]=_0x50280d[_0x2375b7(0x29e)],this[_0x2375b7(0x590)](_0x3f5c2d),_0x3f5c2d[_0x2375b7(0x9e4)](_0xb9a8fd,_0x21020c,_0x217584),this[_0x2375b7(0x150)](_0x3f5c2d);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x303)]=function(){const _0x2a9c9a=_0x8db8d6;if(!this[_0x2a9c9a(0x980)][_0x2a9c9a(0x2dd)]())return;while(this[_0x2a9c9a(0x980)][_0x2a9c9a(0x2dd)]()){this['_battler']['isSpriteVisible']()&&this[_0x2a9c9a(0x639)]();}this[_0x2a9c9a(0x980)][_0x2a9c9a(0xb2f)](),this[_0x2a9c9a(0x980)]['clearResult']();},Sprite_Battler[_0x8db8d6(0x6da)]['createDamageSprite']=function(){const _0x318a10=_0x8db8d6,_0x3a1c41=VisuMZ[_0x318a10(0x602)][_0x318a10(0x466)]['Damage'],_0x2946be=new Sprite_Damage();_0x2946be[_0x318a10(0x736)]=_0x3a1c41[_0x318a10(0x29e)],this[_0x318a10(0x590)](_0x2946be),_0x2946be['setup'](this[_0x318a10(0x980)]),_0x2946be[_0x318a10(0x21c)](this[_0x318a10(0x980)]),this[_0x318a10(0x150)](_0x2946be);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x150)]=function(_0x2d1b6d){const _0x49b8a0=_0x8db8d6;this['_damages'][_0x49b8a0(0x43e)](_0x2d1b6d);if(this[_0x49b8a0(0x651)]())SceneManager[_0x49b8a0(0xa4a)][_0x49b8a0(0x98e)][_0x49b8a0(0x150)](_0x2d1b6d,this[_0x49b8a0(0x980)]);else{if(_0x49b8a0(0x4e3)!==_0x49b8a0(0x4e3))_0x47fdcd['command119']([_0xbd9cc3]);else{this['damageContainer']()[_0x49b8a0(0x9b0)](_0x2d1b6d);if(SceneManager['isBattleFlipped']())_0x2d1b6d[_0x49b8a0(0x728)]['x']=-0x1;}}},Sprite_Battler['prototype']['isShownOnBattlePortrait']=function(){const _0x3158d1=_0x8db8d6;return!$gameSystem['isSideView']()&&this['_battler']&&this[_0x3158d1(0x980)][_0x3158d1(0x367)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x590)]=function(_0x2171dd){const _0x2c554d=_0x8db8d6;this[_0x2c554d(0x7af)](_0x2171dd,!![]);const _0x8aef12=VisuMZ[_0x2c554d(0x602)][_0x2c554d(0x466)][_0x2c554d(0x409)],_0x791944=SceneManager[_0x2c554d(0x2b5)]()?-0x1:0x1;if(_0x8aef12[_0x2c554d(0x2d6)])for(const _0x4bc6dc of this[_0x2c554d(0xb2c)]){_0x4bc6dc['x']+=_0x8aef12['PopupShiftX']*_0x791944,_0x4bc6dc['y']+=_0x8aef12[_0x2c554d(0x3d0)];}else{const _0x2d8abc=this[_0x2c554d(0xb2c)][this[_0x2c554d(0xb2c)][_0x2c554d(0x5e0)]-0x1];_0x2d8abc&&(_0x2c554d(0x3b3)!=='wjDWC'?this['tpbActorSwitchConditionsMet']()?this[_0x2c554d(0x493)]():this[_0x2c554d(0x6ec)]():(_0x2171dd['x']=_0x2d8abc['x']+_0x8aef12[_0x2c554d(0xb0e)]*_0x791944,_0x2171dd['y']=_0x2d8abc['y']+_0x8aef12[_0x2c554d(0x3d0)]));}},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x7af)]=function(_0x4684f2,_0x4732a2){const _0x3cd3a7=_0x8db8d6,_0x14b23d=SceneManager[_0x3cd3a7(0x2b5)]()?-0x1:0x1;let _0x33e39f=this['_baseX'];_0x33e39f+=this['extraPositionX']();let _0x5a392b=this[_0x3cd3a7(0x214)];const _0x4324c8=this['_distortionSprite'][_0x3cd3a7(0x728)]['y'];_0x5a392b+=this[_0x3cd3a7(0x72d)]();const _0x878c98=SceneManager[_0x3cd3a7(0xa4a)]['_statusWindow'];if(_0x878c98&&this[_0x3cd3a7(0x19c)]===_0x878c98){if('BCoIK'==='BCoIK'){_0x33e39f+=_0x878c98['x']-this[_0x3cd3a7(0x77f)]();const _0x1c5d42=_0x878c98[_0x3cd3a7(0x8ca)]()*0x3/0x4;_0x5a392b=_0x878c98['y']+_0x1c5d42,_0x5a392b=Math[_0x3cd3a7(0x8e0)](_0x5a392b,_0x878c98['y']+this['y']-this[_0x3cd3a7(0x7f5)]+_0x1c5d42);}else return _0x2f3436[_0x3cd3a7(0x108)](_0x3cd3a7(0x107));}_0x4684f2['x']=Math[_0x3cd3a7(0x423)](_0x33e39f+this['damageOffsetX']()*_0x14b23d),_0x4684f2['y']=Math[_0x3cd3a7(0x423)](_0x5a392b+this['damageOffsetY']());},VisuMZ[_0x8db8d6(0x602)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x77f)],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x77f)]=function(){const _0x6ca8e=_0x8db8d6;let _0x46cbfc=VisuMZ[_0x6ca8e(0x602)][_0x6ca8e(0x637)][_0x6ca8e(0x5fd)](this),_0x4e3f91=VisuMZ[_0x6ca8e(0x602)][_0x6ca8e(0x466)][_0x6ca8e(0x409)][_0x6ca8e(0x1d8)]||0x0;return Math[_0x6ca8e(0x423)](_0x46cbfc+_0x4e3f91);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x904)]=Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x867)],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x867)]=function(){const _0x3517fd=_0x8db8d6;let _0x2b4bb6=VisuMZ[_0x3517fd(0x602)][_0x3517fd(0x904)][_0x3517fd(0x5fd)](this);switch(VisuMZ[_0x3517fd(0x602)]['Settings'][_0x3517fd(0x409)][_0x3517fd(0x634)]){case _0x3517fd(0x5db):_0x2b4bb6-=this['height']*this[_0x3517fd(0x728)]['y'];break;case'center':_0x2b4bb6-=this[_0x3517fd(0x7f5)]*this[_0x3517fd(0x728)]['y']*0.5;break;}let _0x1c6b2d=VisuMZ['BattleCore'][_0x3517fd(0x466)][_0x3517fd(0x409)][_0x3517fd(0x8db)]||0x0;return Math[_0x3517fd(0x423)](_0x2b4bb6+_0x1c6b2d);},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x77f)]=function(){const _0xa2a49=_0x8db8d6;return Sprite_Battler[_0xa2a49(0x6da)][_0xa2a49(0x77f)][_0xa2a49(0x5fd)](this);},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x867)]=function(){const _0x56e2cd=_0x8db8d6;return Sprite_Battler[_0x56e2cd(0x6da)][_0x56e2cd(0x867)][_0x56e2cd(0x5fd)](this);},Sprite_Battler[_0x8db8d6(0x6da)]['destroyDamageSprite']=function(_0x2400cd){const _0x1eb869=_0x8db8d6;if(this[_0x1eb869(0x651)]())SceneManager[_0x1eb869(0xa4a)][_0x1eb869(0x98e)][_0x1eb869(0x4bc)](_0x2400cd);else{if(_0x1eb869(0x59d)===_0x1eb869(0x987)){if(this[_0x1eb869(0x830)]()!==_0x1eb869(0x9af))return;this[_0x1eb869(0x2de)](_0x4406cf[_0x1eb869(0x79e)]());}else this['damageContainer']()[_0x1eb869(0x4f1)](_0x2400cd),this[_0x1eb869(0xb2c)][_0x1eb869(0xa8c)](_0x2400cd),_0x2400cd['destroy']();}},VisuMZ[_0x8db8d6(0x602)]['Sprite_Battler_setHome']=Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x461)],Sprite_Battler[_0x8db8d6(0x6da)]['setHome']=function(_0x2fa936,_0x178db2){const _0x213e6a=_0x8db8d6,_0x1039b7=VisuMZ[_0x213e6a(0x602)]['Settings'];if(this[_0x213e6a(0x5f5)]===Sprite_Actor)_0x213e6a(0x63a)===_0x213e6a(0xa6c)?(_0x532168[_0x213e6a(0x9dc)](_0x3a1937),['swing',_0x213e6a(0x5b8),_0x213e6a(0x483)][_0x213e6a(0xa5c)](_0x3f622b)&&this[_0x213e6a(0x3dd)]()):(_0x2fa936+=_0x1039b7['Actor'][_0x213e6a(0x37c)]||0x0,_0x178db2+=_0x1039b7[_0x213e6a(0x73a)][_0x213e6a(0x9e9)]||0x0);else{if(this['constructor']===Sprite_Enemy){if(_0x213e6a(0x9c4)!==_0x213e6a(0xab3))_0x2fa936+=_0x1039b7[_0x213e6a(0x8fe)][_0x213e6a(0x37c)]||0x0,_0x178db2+=_0x1039b7[_0x213e6a(0x8fe)]['OffsetY']||0x0;else{const _0x4af199=this[_0x213e6a(0x9c7)](_0x2bd416);this[_0x213e6a(0x445)](_0x1ab65e,_0x4af199['x'],_0x4af199['y'],_0x4af199[_0x213e6a(0x5cb)],_0x4af199['height']);}}}VisuMZ['BattleCore'][_0x213e6a(0x695)][_0x213e6a(0x5fd)](this,_0x2fa936,_0x178db2);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x125)]=Sprite_Battler[_0x8db8d6(0x6da)]['update'],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)]=function(){const _0x4e0466=_0x8db8d6;VisuMZ[_0x4e0466(0x602)][_0x4e0466(0x125)]['call'](this),!this['_battler']&&this[_0x4e0466(0x5be)]&&(_0x4e0466(0x94d)!=='WvWmA'?_0x368a56+=_0x211db7(_0x716c25['$1'])/0x64:this[_0x4e0466(0x5be)][_0x4e0466(0x344)]=![]);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x354)]=Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x488)],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x488)]=function(){const _0x499c49=_0x8db8d6;this[_0x499c49(0xa9c)](),this[_0x499c49(0x439)](),this['updateSpin'](),this[_0x499c49(0xaea)](),this[_0x499c49(0x8d8)](),VisuMZ[_0x499c49(0x602)][_0x499c49(0x354)][_0x499c49(0x5fd)](this);if(this[_0x499c49(0x5f5)]===Sprite_Enemy)this[_0x499c49(0x93d)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x83b)]=Sprite_Battler[_0x8db8d6(0x6da)]['updatePosition'],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x245)]=function(){const _0x1b4c82=_0x8db8d6;VisuMZ[_0x1b4c82(0x602)][_0x1b4c82(0x83b)][_0x1b4c82(0x5fd)](this),this[_0x1b4c82(0x79b)](),this[_0x1b4c82(0x382)]();},Sprite_Battler[_0x8db8d6(0x6da)]['updatePositionBattleCore']=function(){const _0x46cc58=_0x8db8d6;this[_0x46cc58(0x94f)]=this['x'],this['_baseY']=this['y'],this[_0x46cc58(0x745)](),this['updateJump'](),this['x']+=this[_0x46cc58(0x6c7)](),this['y']+=this[_0x46cc58(0x72d)](),this['y']+=this[_0x46cc58(0x833)](),this['x']=Math[_0x46cc58(0x1f5)](this['x']),this['y']=Math[_0x46cc58(0x1f5)](this['y']);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x6c7)]=function(){let _0x4723c5=0x0;return _0x4723c5;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x72d)]=function(){const _0x1401d7=_0x8db8d6;let _0x2ae972=0x0;return this[_0x1401d7(0x980)]&&!this['_battler'][_0x1401d7(0x3b4)]()&&(_0x2ae972-=this[_0x1401d7(0x4c0)],_0x2ae972-=this[_0x1401d7(0x8fa)]),_0x2ae972;},Sprite_Battler['prototype'][_0x8db8d6(0x833)]=function(){const _0xbdc830=_0x8db8d6;let _0x416b79=0x0;if(this[_0xbdc830(0x329)]&&this[_0xbdc830(0x5f5)]!==Sprite_SvEnemy){if('vLjGC'==='vLjGC'){const _0x70ab59=this['_distortionSprite'][_0xbdc830(0x728)]['y'];_0x416b79-=(_0x70ab59-0x1)*this[_0xbdc830(0x7f5)];}else{if(this[_0xbdc830(0x306)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x1496b2(_0xdfa34a['$1']);else{if(this[_0xbdc830(0x306)]()[_0xbdc830(0x44e)][_0xbdc830(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x54cdb8(_0x476f3c['$2']);}return 0x0;}}return _0x416b79;},Sprite_Battler[_0x8db8d6(0x6da)]['updateFlip']=function(){const _0x35020c=_0x8db8d6,_0x94bff8=this[_0x35020c(0x980)]&&this[_0x35020c(0x980)][_0x35020c(0x41a)]();this[_0x35020c(0x986)]=(_0x94bff8?-0x1:0x1)*Math[_0x35020c(0x78b)](this['scale']['x']);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x77d)]=function(_0x287a8c,_0x45dc7a,_0x2dd4fd){const _0x35d256=_0x8db8d6;if(!this[_0x35d256(0x222)]())return;if(this[_0x35d256(0x427)]===_0x287a8c)return;this['_targetFloatHeight']=_0x287a8c,this[_0x35d256(0x57f)]=_0x45dc7a,this['_floatWholeDuration']=_0x45dc7a,this[_0x35d256(0x47f)]=_0x2dd4fd||_0x35d256(0xa13);if(_0x45dc7a<=0x0)this['_floatHeight']=_0x287a8c;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x745)]=function(){const _0x2df1dc=_0x8db8d6;if(this[_0x2df1dc(0x57f)]<=0x0)return;const _0x2e625c=this['_floatDuration'],_0x44621d=this[_0x2df1dc(0x718)],_0x1d7757=this['_floatEasing'];if(Imported[_0x2df1dc(0x730)])this[_0x2df1dc(0x4c0)]=this['applyEasing'](this['_floatHeight'],this[_0x2df1dc(0x427)],_0x2e625c,_0x44621d,_0x1d7757);else{if('DorSr'!=='DorSr'){if(this[_0x2df1dc(0x980)]&&this['_battler'][_0x2df1dc(0x992)]){const _0x1c3808=this[_0x2df1dc(0x980)][_0x2df1dc(0x992)];this[_0x2df1dc(0x713)]=_0x12dc9e[_0x2df1dc(0x51a)][_0x1c3808[_0x2df1dc(0x3da)]],this[_0x2df1dc(0x36b)]=_0x1c3808[_0x2df1dc(0xad6)];const _0x25051f=this[_0x2df1dc(0x4f0)];_0x25051f[_0x2df1dc(0x8e2)](_0x1c3808['weaponImageId'],_0x1c3808[_0x2df1dc(0xad6)]),this[_0x2df1dc(0x2bd)]();}}else this[_0x2df1dc(0x4c0)]=(this[_0x2df1dc(0x4c0)]*(_0x2e625c-0x1)+this['_targetFloatHeight'])/_0x2e625c;}this[_0x2df1dc(0x57f)]--;if(this[_0x2df1dc(0x57f)]<=0x0)this[_0x2df1dc(0x89e)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x89e)]=function(){const _0x34e195=_0x8db8d6;this['_floatHeight']=this[_0x34e195(0x427)];},Sprite_Battler['prototype']['isFloating']=function(){const _0x3c1599=_0x8db8d6;return this[_0x3c1599(0x57f)]>0x0;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x192)]=function(_0x2145b7,_0x1c5ca9){if(!this['canMove']())return;if(_0x1c5ca9<=0x0)return;this['_jumpMaxHeight']=_0x2145b7,this['_jumpDuration']=_0x1c5ca9,this['_jumpWholeDuration']=_0x1c5ca9;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x669)]=function(){const _0x32b09c=_0x8db8d6;if(this[_0x32b09c(0xa91)]<=0x0)return;const _0x23c7be=this[_0x32b09c(0xa80)]-this[_0x32b09c(0xa91)],_0x1365b7=this['_jumpWholeDuration']/0x2,_0xa0e8ae=this[_0x32b09c(0x7c0)],_0x2ca3b7=-_0xa0e8ae/Math['pow'](_0x1365b7,0x2);this[_0x32b09c(0x8fa)]=_0x2ca3b7*Math[_0x32b09c(0x72f)](_0x23c7be-_0x1365b7,0x2)+_0xa0e8ae,this[_0x32b09c(0xa91)]--;if(this[_0x32b09c(0xa91)]<=0x0)return this[_0x32b09c(0x941)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x941)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler['prototype'][_0x8db8d6(0x99b)]=function(){const _0x33d7c0=_0x8db8d6;return this[_0x33d7c0(0xa91)]>0x0;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x4ad)]=function(_0x2492bc,_0x24024f,_0x4304ab){const _0x2ecead=_0x8db8d6;if(this['_targetOpacity']===_0x2492bc)return;this[_0x2ecead(0x52e)]=_0x2492bc,this[_0x2ecead(0x847)]=_0x24024f,this['_opacityWholeDuration']=_0x24024f,this[_0x2ecead(0x616)]=_0x4304ab||_0x2ecead(0xa13);if(_0x24024f<=0x0)this['opacity']=_0x2492bc;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x382)]=function(){const _0x3a33da=_0x8db8d6;if(this[_0x3a33da(0x847)]<=0x0)return;const _0x38c14d=this[_0x3a33da(0x847)],_0x58e75a=this[_0x3a33da(0x74a)],_0x3d8747=this[_0x3a33da(0x616)];Imported[_0x3a33da(0x730)]?this['opacity']=this['applyEasing'](this[_0x3a33da(0x83f)],this[_0x3a33da(0x52e)],_0x38c14d,_0x58e75a,_0x3d8747):'MhJME'!==_0x3a33da(0xa49)?this[_0x3a33da(0x930)](_0x54aaf1):this[_0x3a33da(0x83f)]=(this[_0x3a33da(0x83f)]*(_0x38c14d-0x1)+this[_0x3a33da(0x52e)])/_0x38c14d;this[_0x3a33da(0x847)]--;if(this['_opacityDuration']<=0x0)this['onOpacityEnd']();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x846)]=function(){this['opacity']=this['_targetOpacity'];},Sprite_Battler[_0x8db8d6(0x6da)]['isChangingOpacity']=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x93d)]=function(){const _0x3f7c3b=_0x8db8d6;this['_shadowSprite'][_0x3f7c3b(0x344)]=this[_0x3f7c3b(0x980)]['hasSvBattler'](),this[_0x3f7c3b(0x2e9)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x2e9)]=function(){const _0x1f9a47=_0x8db8d6;if(!this[_0x1f9a47(0x20f)])return;this['_shadowSprite']['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x64f)]=function(){const _0x22af83=_0x8db8d6;if(!this[_0x22af83(0x980)])return;this[_0x22af83(0x861)]=this[_0x22af83(0x980)][_0x22af83(0x6c2)](),this[_0x22af83(0x2c6)]=this[_0x22af83(0x980)]['battlerShadowScaleY']();},Game_BattlerBase[_0x8db8d6(0x6da)]['battlerShadowScaleX']=function(){const _0x16096f=_0x8db8d6,_0x5ad4d4=this[_0x16096f(0x367)]()?this[_0x16096f(0x306)]():this['enemy']();if(_0x5ad4d4){const _0x103d51=_0x5ad4d4[_0x16096f(0x44e)];if(_0x103d51[_0x16096f(0x3ed)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x103d51[_0x16096f(0x3ed)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x16096f(0x513)!==_0x16096f(0x4fa))return Number(RegExp['$1'])||0x0;else this[_0x16096f(0xb18)][_0x16096f(0x69a)]();}}}return 0x1;},Game_BattlerBase[_0x8db8d6(0x6da)][_0x8db8d6(0x13e)]=function(){const _0x32071a=_0x8db8d6,_0x4ae5a6=this[_0x32071a(0x367)]()?this[_0x32071a(0x306)]():this[_0x32071a(0x6cf)]();if(_0x4ae5a6){const _0x300b30=_0x4ae5a6[_0x32071a(0x44e)];if(_0x300b30[_0x32071a(0x3ed)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x300b30[_0x32071a(0x3ed)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x32071a(0x84e)!==_0x32071a(0x84e)){if(!_0x357954[_0x32071a(0x38c)]())return;if(!_0x35f217[_0x32071a(0xaa5)])return;_0x504263['ConvertParams'](_0x206b6d,_0x2cff61);const _0x305029=_0x1d440b[_0x32071a(0xa85)]();_0x305029[_0x32071a(0xa5d)]=_0x39e495[_0x32071a(0x95f)];}else return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xa9c)]=function(){const _0x486c28=_0x8db8d6;if(this[_0x486c28(0x5f5)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x486c28(0x219)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x219)]=function(){const _0x4dc302=_0x8db8d6,_0x52109e=this[_0x4dc302(0x329)];_0x52109e&&(_0x52109e['scale']['x']=this[_0x4dc302(0x30c)](),_0x52109e['scale']['y']=this[_0x4dc302(0x4de)]());},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x30c)]=function(){const _0x28621c=_0x8db8d6;let _0x2c4d9c=0x1;return _0x2c4d9c*=this['_flipScaleX'],_0x2c4d9c*=this[_0x28621c(0xa20)],_0x2c4d9c;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x4de)]=function(){const _0x8b5de0=_0x8db8d6;return 0x1*this[_0x8b5de0(0x73d)];},Sprite_Battler['prototype'][_0x8db8d6(0x5d3)]=function(){const _0x593cb8=_0x8db8d6;return this[_0x593cb8(0x5cb)]*this[_0x593cb8(0x30c)]();},Sprite_Battler['prototype'][_0x8db8d6(0x3be)]=function(){const _0xc60a9f=_0x8db8d6;return this[_0xc60a9f(0x7f5)]*this['mainSpriteScaleY']();},Sprite_Battler[_0x8db8d6(0x6da)]['startGrow']=function(_0x40bdb8,_0x326e72,_0x9c4286,_0x5a863f){const _0x221a31=_0x8db8d6;if(!this[_0x221a31(0x222)]())return;if(!this[_0x221a31(0x329)])return;if(this[_0x221a31(0x592)]===_0x40bdb8&&this[_0x221a31(0x4e5)]===_0x326e72)return;this[_0x221a31(0x592)]=_0x40bdb8,this['_targetGrowY']=_0x326e72,this[_0x221a31(0x73e)]=_0x9c4286,this['_growWholeDuration']=_0x9c4286,this['_growEasing']=_0x5a863f||_0x221a31(0xa13),_0x9c4286<=0x0&&(this[_0x221a31(0xa20)]=this[_0x221a31(0x592)],this[_0x221a31(0x73d)]=this[_0x221a31(0x4e5)]);},Sprite_Battler[_0x8db8d6(0x6da)]['updateGrow']=function(){const _0x8ad5fd=_0x8db8d6;if(this[_0x8ad5fd(0x73e)]<=0x0)return;if(!this[_0x8ad5fd(0x329)])return;const _0x3a49dc=this['_growDuration'],_0x17696e=this[_0x8ad5fd(0x704)],_0x57ce58=this[_0x8ad5fd(0x89a)];if(Imported[_0x8ad5fd(0x730)])_0x8ad5fd(0x84f)==='IvNzI'?this[_0x8ad5fd(0x49f)]='default':(this['_growX']=this[_0x8ad5fd(0x240)](this[_0x8ad5fd(0xa20)],this[_0x8ad5fd(0x592)],_0x3a49dc,_0x17696e,_0x57ce58),this[_0x8ad5fd(0x73d)]=this[_0x8ad5fd(0x240)](this['_growY'],this['_targetGrowY'],_0x3a49dc,_0x17696e,_0x57ce58));else{if(_0x8ad5fd(0x1db)!=='ygvXL')this[_0x8ad5fd(0xa20)]=(this[_0x8ad5fd(0xa20)]*(_0x3a49dc-0x1)+this[_0x8ad5fd(0x592)])/_0x3a49dc,this[_0x8ad5fd(0x73d)]=(this[_0x8ad5fd(0x73d)]*(_0x3a49dc-0x1)+this[_0x8ad5fd(0x4e5)])/_0x3a49dc;else return this[_0x8ad5fd(0x7a6)]()[_0x8ad5fd(0x1c6)];}this[_0x8ad5fd(0x73e)]--;if(this[_0x8ad5fd(0x73e)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x62b)]=function(){const _0xfc9a4b=_0x8db8d6;this[_0xfc9a4b(0xa20)]=this[_0xfc9a4b(0x592)],this['_growY']=this[_0xfc9a4b(0x4e5)];},Sprite_Battler[_0x8db8d6(0x6da)]['isGrowing']=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x565)]=function(_0x40f898,_0x3e17c1,_0x1402ab,_0x1aa8e3){const _0x4a0292=_0x8db8d6;if(!this[_0x4a0292(0x222)]())return;if(!this[_0x4a0292(0x329)])return;if(this['_targetSkewX']===_0x40f898&&this['_targetSkewY']===_0x3e17c1)return;this[_0x4a0292(0x9a1)]=_0x40f898,this[_0x4a0292(0x38a)]=_0x3e17c1,this['_skewDuration']=_0x1402ab,this[_0x4a0292(0x9f6)]=_0x1402ab,this[_0x4a0292(0x591)]=_0x1aa8e3||_0x4a0292(0xa13),_0x1402ab<=0x0&&('AwhfW'==='AwhfW'?(this['_distortionSprite']['skew']['x']=this[_0x4a0292(0x9a1)],this[_0x4a0292(0x329)][_0x4a0292(0x4e1)]['y']=this[_0x4a0292(0x38a)]):_0x3d56de[_0x4a0292(0x26a)]=![]);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x439)]=function(){const _0x400582=_0x8db8d6;if(this['_skewDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x200503=this['_skewDuration'],_0x597de3=this[_0x400582(0x9f6)],_0x4d16bb=this['_skewEasing'],_0x131fb4=this[_0x400582(0x329)];Imported['VisuMZ_0_CoreEngine']?'ENLUE'!==_0x400582(0x663)?this[_0x400582(0x49f)]='sideview_ui':(_0x131fb4[_0x400582(0x4e1)]['x']=this['applyEasing'](_0x131fb4[_0x400582(0x4e1)]['x'],this['_targetSkewX'],_0x200503,_0x597de3,_0x4d16bb),_0x131fb4[_0x400582(0x4e1)]['y']=this[_0x400582(0x240)](_0x131fb4[_0x400582(0x4e1)]['y'],this[_0x400582(0x38a)],_0x200503,_0x597de3,_0x4d16bb)):(_0x131fb4[_0x400582(0x4e1)]['x']=(_0x131fb4['skew']['x']*(_0x200503-0x1)+this['_targetSkewX'])/_0x200503,_0x131fb4[_0x400582(0x4e1)]['y']=(_0x131fb4['skew']['y']*(_0x200503-0x1)+this[_0x400582(0x38a)])/_0x200503);this[_0x400582(0xa29)]--;if(this['_skewDuration']<=0x0)this[_0x400582(0x285)]();},Sprite_Battler[_0x8db8d6(0x6da)]['onSkewEnd']=function(){const _0x284ac5=_0x8db8d6;this[_0x284ac5(0x329)][_0x284ac5(0x4e1)]['x']=this[_0x284ac5(0x9a1)],this[_0x284ac5(0x329)][_0x284ac5(0x4e1)]['y']=this[_0x284ac5(0x38a)];},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x2dc)]=function(){const _0x8152d2=_0x8db8d6;return this[_0x8152d2(0xa29)]>0x0;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x5e5)]=function(_0x2a1e3e,_0xc7cdb0,_0x53fcec,_0x430544){const _0x2ae75f=_0x8db8d6;if(!this[_0x2ae75f(0x222)]())return;if(!this['_distortionSprite'])return;if(this['_targetAngle']===_0x2a1e3e)return;this[_0x2ae75f(0x9b7)]=_0x2a1e3e,this['_angleDuration']=_0xc7cdb0,this['_angleWholeDuration']=_0xc7cdb0,this[_0x2ae75f(0x42e)]=_0x53fcec||_0x2ae75f(0xa13),this[_0x2ae75f(0x177)]=_0x430544;if(this[_0x2ae75f(0x177)]===undefined){if('VShiI'!==_0x2ae75f(0x262))this[_0x2ae75f(0x177)]=!![];else{this['_partyCommandWindow'][_0x2ae75f(0x88c)](),this['_actorCommandWindow'][_0x2ae75f(0xae4)]();if(!_0x2fb3a5['BattleCore'][_0x2ae75f(0x30d)])return;if(_0x16ae35['VisuMZ_2_BattleSystemCTB']&&_0x161ff6[_0x2ae75f(0xacc)]())return;if(_0xefa5d0[_0x2ae75f(0x232)]){_0x14059a['_currentActor'][_0x2ae75f(0x7aa)]('undecided');const _0x4fda16=_0x37b7bb[_0x2ae75f(0x232)][_0x2ae75f(0x538)]();if(_0x4fda16)_0x4fda16[_0x2ae75f(0x8b3)]();}_0x2d1b65[_0x2ae75f(0x232)]=null;}}if(_0xc7cdb0<=0x0){if(_0x2ae75f(0xa60)===_0x2ae75f(0x711)){const _0x5689eb=this[_0x2ae75f(0x1f8)](),_0x38f916=_0x571588['BattleCore']['Settings'][_0x2ae75f(0x956)][_0x2ae75f(0x6e3)],_0x317038=_0x5689eb===_0x2ae75f(0x79c)?_0x32a580[_0x2ae75f(0xa44)]:_0x2ae75f(0x539)['format'](_0x38f916,_0x150c6e[_0x2ae75f(0xa44)]),_0x164550=this['isEscapeCommandEnabled']();this[_0x2ae75f(0x878)](_0x317038,_0x2ae75f(0xa44),_0x164550);}else this[_0x2ae75f(0x967)]=_0x2a1e3e,this[_0x2ae75f(0x177)]&&(this[_0x2ae75f(0x9b7)]=0x0,this['_currentAngle']=0x0);}},Sprite_Battler['prototype'][_0x8db8d6(0x9e0)]=function(){const _0x1dfd51=_0x8db8d6;this['updateAngleCalculations'](),this[_0x1dfd51(0x24b)]();},Sprite_Battler['prototype'][_0x8db8d6(0x14d)]=function(){const _0x24b511=_0x8db8d6;if(this['_angleDuration']<=0x0)return;const _0x4b1688=this[_0x24b511(0x6c5)],_0x1da6ee=this[_0x24b511(0x746)],_0x25ba57=this[_0x24b511(0x42e)];if(Imported['VisuMZ_0_CoreEngine'])this[_0x24b511(0x967)]=this[_0x24b511(0x240)](this[_0x24b511(0x967)],this[_0x24b511(0x9b7)],_0x4b1688,_0x1da6ee,_0x25ba57);else{if(_0x24b511(0x283)!==_0x24b511(0x4c8))this['_currentAngle']=(this['_currentAngle']*(_0x4b1688-0x1)+this['_targetAngle'])/_0x4b1688;else{let _0x31a994=_0x220a96[_0x24b511(0x71f)][_0x13cb53];if(!_0x31a994)return;let _0x343f66=_0x31a994;const _0xbea282=this['commandStyle']();if(_0xbea282===_0x24b511(0x79c))_0x343f66=_0x343f66[_0x24b511(0x929)](/\x1I\[(\d+)\]/gi,''),_0x343f66=_0x343f66[_0x24b511(0x929)](/\\I\[(\d+)\]/gi,'');else{if(!_0x31a994[_0x24b511(0x3ed)](/\\I\[(\d+)\]/i)){const _0x3bca39=_0xb3b7ab[_0x24b511(0x369)]?_0xb6c5c9[_0x24b511(0xb04)][_0x24b511(0x466)]['Skills']:_0x24f55f[_0x24b511(0x602)][_0x24b511(0x466)][_0x24b511(0x41d)],_0x161e25=_0x8c2a47[_0x24b511(0xb03)][_0x24b511(0xa5c)](_0x4a1fa5),_0x1818fc=_0x161e25?_0x3bca39[_0x24b511(0x34a)]:_0x3bca39[_0x24b511(0x5a9)];_0x343f66=_0x24b511(0x539)[_0x24b511(0xad2)](_0x1818fc,_0x31a994);}}this['addCommand'](_0x343f66,_0x24b511(0x938),!![],_0x3f0103);}}this['_angleDuration']--;if(this['_angleDuration']<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xaf0)]=function(){const _0x3f1786=_0x8db8d6;this[_0x3f1786(0x967)]=this[_0x3f1786(0x9b7)],this['_angleRevertOnFinish']&&(this[_0x3f1786(0x9b7)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x8db8d6(0x6da)]['isSpinning']=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x24b)]=function(){const _0x103012=_0x8db8d6;if(!this[_0x103012(0x329)])return;const _0x4e5d1f=this['_currentAngle'],_0x3cf045=this[_0x103012(0x728)]['x'],_0x4d15cd=this[_0x103012(0x980)][_0x103012(0x367)]()?-0x1:0x1;this[_0x103012(0x329)][_0x103012(0x15d)]=_0x4e5d1f*_0x3cf045*_0x4d15cd;const _0xf98faf=this['_distortionSprite']['scale']['y'];this['_distortionSprite']['y']=this[_0x103012(0x7f5)]*-0.5*(0x2-_0xf98faf),this[_0x103012(0x329)]['y']=Math[_0x103012(0x2f7)](this[_0x103012(0x329)]['y']);const _0x53aa7c=[this[_0x103012(0x843)],this['_svBattlerSprite'],this[_0x103012(0x1a5)]];for(const _0x22dce3 of _0x53aa7c){if(_0x103012(0x2ec)!==_0x103012(0x41c)){if(!_0x22dce3)continue;_0x22dce3['y']=this[_0x103012(0x7f5)]*0.5;}else this[_0x103012(0x20f)]['setFrame'](0x0,0x0,0x0,0x0);}this[_0x103012(0x20f)]&&(this[_0x103012(0x861)]=this['_shadowScaleX']??0x1,this[_0x103012(0x2c6)]=this[_0x103012(0x2c6)]??0x1,this[_0x103012(0x20f)][_0x103012(0x728)]['x']=this[_0x103012(0x329)][_0x103012(0x728)]['x']*this[_0x103012(0x861)],this[_0x103012(0x20f)]['scale']['y']=this[_0x103012(0x329)]['scale']['y']*this[_0x103012(0x2c6)]);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xaad)]=Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x68f)],Sprite_Actor['prototype']['createStateSprite']=function(){const _0x42f54c=_0x8db8d6;VisuMZ[_0x42f54c(0x602)][_0x42f54c(0xaad)][_0x42f54c(0x5fd)](this),VisuMZ['BattleCore'][_0x42f54c(0x466)][_0x42f54c(0x5d8)][_0x42f54c(0x1b5)]&&this['createHpGaugeSprite']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa33)]=Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x636)],Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x636)]=function(){const _0x5e5ba2=_0x8db8d6;VisuMZ[_0x5e5ba2(0x602)][_0x5e5ba2(0x466)][_0x5e5ba2(0x5d8)][_0x5e5ba2(0x75a)]&&(_0x5e5ba2(0xab4)!=='hdlGI'?this[_0x5e5ba2(0x293)]():this[_0x5e5ba2(0x322)]()),VisuMZ[_0x5e5ba2(0x602)]['Sprite_Enemy_createStateIconSprite'][_0x5e5ba2(0x5fd)](this);},Sprite_Battler['prototype'][_0x8db8d6(0x322)]=function(){const _0x4eb3ed=_0x8db8d6;if(!ConfigManager[_0x4eb3ed(0x403)])return;if(this[_0x4eb3ed(0x5f5)]===Sprite_SvEnemy)return;const _0x47c7a2=VisuMZ[_0x4eb3ed(0x602)][_0x4eb3ed(0x466)][_0x4eb3ed(0x5d8)],_0x41edc2=new Sprite_HpGauge();_0x41edc2[_0x4eb3ed(0x347)]['x']=_0x47c7a2['AnchorX'],_0x41edc2[_0x4eb3ed(0x347)]['y']=_0x47c7a2[_0x4eb3ed(0xb3e)],_0x41edc2[_0x4eb3ed(0x728)]['x']=_0x41edc2[_0x4eb3ed(0x728)]['y']=_0x47c7a2[_0x4eb3ed(0x68d)],this[_0x4eb3ed(0x5be)]=_0x41edc2,this['addChild'](this[_0x4eb3ed(0x5be)]);},VisuMZ[_0x8db8d6(0x602)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x630)],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x630)]=function(_0x5a20f3){const _0x19e2c3=_0x8db8d6,_0x590da7=this['_battler'];VisuMZ[_0x19e2c3(0x602)][_0x19e2c3(0x839)][_0x19e2c3(0x5fd)](this,_0x5a20f3),this[_0x19e2c3(0xa92)](_0x5a20f3);if(_0x590da7!==_0x5a20f3)this[_0x19e2c3(0x64f)]();},Sprite_Battler[_0x8db8d6(0x6da)]['setupHpGaugeSprite']=function(_0x34ab1f){const _0x3ffade=_0x8db8d6;if(!_0x34ab1f)return;if(!this[_0x3ffade(0x5be)])return;if(_0x34ab1f[_0x3ffade(0x367)]()){}else{if(_0x34ab1f['isEnemy']()){if(this[_0x3ffade(0x5f5)]===Sprite_SvEnemy&&!_0x34ab1f[_0x3ffade(0x991)]())return;}}this['_hpGaugeSprite'][_0x3ffade(0x88c)](_0x34ab1f,'hp');},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x8d8)]=function(){const _0x2e98b0=_0x8db8d6;if(!this['_battler'])return;if(!this[_0x2e98b0(0x5be)])return;const _0x39b67a=VisuMZ[_0x2e98b0(0x602)][_0x2e98b0(0x466)]['HpGauge'],_0x12ac97=this['_hpGaugeSprite'];_0x12ac97[_0x2e98b0(0x344)]=this[_0x2e98b0(0x66c)]();const _0x69828a=_0x39b67a[_0x2e98b0(0x37c)],_0x5f258a=_0x39b67a[_0x2e98b0(0x9e9)];_0x12ac97['x']=_0x69828a,_0x12ac97['x']+=this[_0x2e98b0(0x980)]['battleUIOffsetX'](),_0x12ac97['y']=-this[_0x2e98b0(0x7f5)]+_0x5f258a,_0x12ac97['y']+=this[_0x2e98b0(0x980)][_0x2e98b0(0x277)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x66c)]=function(){const _0x55dbf0=_0x8db8d6;if(!this[_0x55dbf0(0x980)])return![];if(this[_0x55dbf0(0x980)][_0x55dbf0(0x367)]())return!![];const _0x442f83=this[_0x55dbf0(0x980)][_0x55dbf0(0x6cf)]()['note'];if(_0x442f83[_0x55dbf0(0x3ed)](/<SHOW HP GAUGE>/i))return!![];if(_0x442f83[_0x55dbf0(0x3ed)](/<HIDE HP GAUGE>/i))return![];const _0xce3b4b=VisuMZ[_0x55dbf0(0x602)]['Settings'][_0x55dbf0(0x5d8)];if(_0xce3b4b[_0x55dbf0(0x699)]){if('acdQG'===_0x55dbf0(0x3f8)){if(_0xce3b4b[_0x55dbf0(0x206)]&&BattleManager['isBattleTest']())return!![];if(this[_0x55dbf0(0x980)]['_visualHpGauge_JustDied'])return![];return this['_battler'][_0x55dbf0(0x81b)]();}else{const _0x352dbb=this['_actorCommandWindow'];_0x352dbb[_0x55dbf0(0x86f)](_0x55dbf0(0xa44),this['actorCommandEscape']['bind'](this)),_0x352dbb[_0x55dbf0(0x86f)]('autoBattle',this[_0x55dbf0(0xaff)][_0x55dbf0(0x998)](this)),_0x352dbb[_0x55dbf0(0x86f)](_0x55dbf0(0x97d),this[_0x55dbf0(0x1ef)][_0x55dbf0(0x998)](this)),_0x65ddf4['isTpb']()&&(this['isPartyCommandWindowDisabled']()?delete _0x352dbb['_handlers'][_0x55dbf0(0x107)]:_0x352dbb[_0x55dbf0(0x86f)]('cancel',this[_0x55dbf0(0x47c)][_0x55dbf0(0x998)](this)));}}return!![];},VisuMZ['BattleCore']['Sprite_Battler_isMoving']=Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xa38)],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xa38)]=function(){const _0x4c6b15=_0x8db8d6;if(!this[_0x4c6b15(0x980)])return![];return VisuMZ[_0x4c6b15(0x602)][_0x4c6b15(0x507)][_0x4c6b15(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x8cc)]=Sprite_Battler[_0x8db8d6(0x6da)]['startMove'],Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x520)]=function(_0x226acd,_0x5c93a3,_0xb007b6){const _0x557813=_0x8db8d6;this[_0x557813(0x222)]()&&VisuMZ[_0x557813(0x602)]['Sprite_Battler_startMove'][_0x557813(0x5fd)](this,_0x226acd,_0x5c93a3,_0xb007b6);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x222)]=function(){const _0xc2e1e8=_0x8db8d6;if(this[_0xc2e1e8(0x980)]&&this['_battler'][_0xc2e1e8(0x20a)]())return![];if(this['_battler']&&!this[_0xc2e1e8(0x980)][_0xc2e1e8(0x3d5)]())return![];return $gameSystem[_0xc2e1e8(0x6b5)]();},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x6f6)]=function(){},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x8b3)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0xafe)]=function(){},Sprite_Battler[_0x8db8d6(0x6da)][_0x8db8d6(0x674)]=function(){const _0x340a55=_0x8db8d6,_0x4413cf=VisuMZ[_0x340a55(0x602)]['Settings'][_0x340a55(0x73a)],_0x10f985=this[_0x340a55(0x980)]&&this[_0x340a55(0x980)][_0x340a55(0x367)]()?0x1:-0x1,_0x38caf6=this[_0x340a55(0x94f)]-this[_0x340a55(0x67c)]+_0x10f985*_0x4413cf[_0x340a55(0x780)],_0x5e5f00=this[_0x340a55(0x214)]-this[_0x340a55(0x334)]+_0x10f985*_0x4413cf[_0x340a55(0x578)],_0x2d4ee3=_0x4413cf[_0x340a55(0x50f)];this[_0x340a55(0x520)](_0x38caf6,_0x5e5f00,_0x2d4ee3);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x2d1)]=Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x13d)],Sprite_Actor['prototype'][_0x8db8d6(0x13d)]=function(){const _0x5722a3=_0x8db8d6;VisuMZ['BattleCore'][_0x5722a3(0x2d1)][_0x5722a3(0x5fd)](this),this[_0x5722a3(0x703)]();},Sprite_Actor[_0x8db8d6(0x6da)]['mainSprite']=function(){const _0x3eeb6d=_0x8db8d6;return this[_0x3eeb6d(0x329)]||this[_0x3eeb6d(0x843)]||this;},VisuMZ[_0x8db8d6(0x602)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor['prototype'][_0x8db8d6(0x503)],Sprite_Actor['prototype'][_0x8db8d6(0x503)]=function(){},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x706)]=function(_0x460d49){const _0x59e58e=_0x8db8d6;if(SceneManager[_0x59e58e(0x3bc)]())return;if(!_0x460d49)return;if(!_0x460d49['canMove']())return;VisuMZ[_0x59e58e(0x602)]['Sprite_Actor_moveToStartPosition'][_0x59e58e(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa05)]=Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x922)],Sprite_Actor['prototype'][_0x8db8d6(0x922)]=function(_0x5e3484){const _0x1accd5=_0x8db8d6;if(VisuMZ[_0x1accd5(0x602)][_0x1accd5(0x466)][_0x1accd5(0x73a)][_0x1accd5(0x756)])VisuMZ[_0x1accd5(0x602)][_0x1accd5(0x466)][_0x1accd5(0x73a)][_0x1accd5(0x756)]['call'](this,_0x5e3484);else{if(_0x1accd5(0xad8)!==_0x1accd5(0xad8)){const _0x194459=_0x5da98d(_0x5af283['$1']);_0x194459<_0xf62311?(_0x5bc18f('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x1accd5(0xad2)](_0x248978,_0x194459,_0x54dbd4)),_0x2b2f37[_0x1accd5(0x18b)]()):_0x34f672=_0x4431d6['max'](_0x194459,_0x2d1fca);}else VisuMZ[_0x1accd5(0x602)][_0x1accd5(0xa05)][_0x1accd5(0x5fd)](this,_0x5e3484);}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x70c)]=Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x630)],Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x630)]=function(_0x1f17a6){const _0x35d890=_0x8db8d6;VisuMZ['BattleCore'][_0x35d890(0x70c)][_0x35d890(0x5fd)](this,_0x1f17a6),this['setBattlerBattleCore'](_0x1f17a6);},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x5ac)]=function(_0x3a6a04){const _0x2190f3=_0x8db8d6;if(!_0x3a6a04)return;if(!this['_mainSprite'])return;this['_mainSprite'][_0x2190f3(0x347)]['x']=this[_0x2190f3(0x88f)][_0x2190f3(0x8a2)](),this['_mainSprite'][_0x2190f3(0x347)]['y']=this[_0x2190f3(0x88f)][_0x2190f3(0x9f5)](),this['updateShadowVisibility']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x547)]=Sprite_Actor[_0x8db8d6(0x6da)]['update'],Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)]=function(){const _0x29fe51=_0x8db8d6;VisuMZ[_0x29fe51(0x602)][_0x29fe51(0x547)][_0x29fe51(0x5fd)](this),this[_0x29fe51(0x88f)]&&(this['updateStateSprite'](),this[_0x29fe51(0x810)]());},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xb23)]=Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x6a1)],Sprite_Actor['prototype'][_0x8db8d6(0x6a1)]=function(){const _0x44aca6=_0x8db8d6;VisuMZ[_0x44aca6(0x602)][_0x44aca6(0xb23)]['call'](this),this[_0x44aca6(0x843)]&&this[_0x44aca6(0x843)][_0x44aca6(0x86a)]&&this[_0x44aca6(0x980)]&&(this[_0x44aca6(0x843)][_0x44aca6(0x86a)][_0x44aca6(0x269)]!==this[_0x44aca6(0x980)][_0x44aca6(0x14c)]()&&(_0x44aca6(0x279)!==_0x44aca6(0x2ac)?this[_0x44aca6(0x843)][_0x44aca6(0x86a)][_0x44aca6(0x269)]=this[_0x44aca6(0x980)][_0x44aca6(0x14c)]():(this['updateAngleCalculations'](),this[_0x44aca6(0x24b)]())));},VisuMZ[_0x8db8d6(0x602)]['Sprite_Actor_updateShadow']=Sprite_Actor['prototype'][_0x8db8d6(0x93d)],Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x93d)]=function(){const _0x5a68e9=_0x8db8d6;VisuMZ[_0x5a68e9(0x602)][_0x5a68e9(0x3c5)][_0x5a68e9(0x5fd)](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x8db8d6(0x6da)]['updateShadowBattleCore']=function(){const _0x175853=_0x8db8d6;if(!this[_0x175853(0x843)])return;if(!this[_0x175853(0x20f)])return;this[_0x175853(0x9be)](),this['updateShadowPosition']();},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x11d)]=function(){const _0x5d6ee2=_0x8db8d6;this[_0x5d6ee2(0x862)][_0x5d6ee2(0x728)]['x']=0x1/(this[_0x5d6ee2(0x728)]['x']||0.001),this['_stateSprite'][_0x5d6ee2(0x728)]['y']=0x1/(this[_0x5d6ee2(0x728)]['y']||0.001);},Sprite_Actor['prototype'][_0x8db8d6(0x810)]=function(){const _0x588588=_0x8db8d6;if(!$gameSystem[_0x588588(0x6b5)]()&&this[_0x588588(0x5f5)]===Sprite_Actor){const _0x26ad69=Scene_Battle[_0x588588(0x6da)]['battleLayoutStyle']();[_0x588588(0x9e5),_0x588588(0x69b),_0x588588(0x9af),'border']['includes'](_0x26ad69)&&('JIWCz'!==_0x588588(0x3a6)?this['visible']=_0x342b16[_0x588588(0x4e0)]:this[_0x588588(0x83f)]=0x0);}},Sprite_Actor['prototype'][_0x8db8d6(0x845)]=function(){const _0x1904cc=_0x8db8d6,_0x22b818=this[_0x1904cc(0x88f)];if(_0x22b818){if('ggizI'===_0x1904cc(0xa28)){const _0x43b67d=_0x22b818[_0x1904cc(0x529)]();if(_0x22b818[_0x1904cc(0xac6)]()||_0x22b818[_0x1904cc(0x376)]())_0x1904cc(0x87e)!==_0x1904cc(0x484)?this[_0x1904cc(0x5de)](_0x1904cc(0x8d2)):this[_0x1904cc(0x520)](0x0,0x0,0xc);else{if(_0x43b67d===0x3)_0x1904cc(0xaf4)===_0x1904cc(0xaf4)?this['startMotion'](_0x1904cc(0x7a7)):_0x3712d7[_0x1904cc(0x57a)]()[_0x1904cc(0x383)]?this[_0x1904cc(0x43e)]('performEvasion',_0x14ffdd):this[_0x1904cc(0x43e)](_0x1904cc(0x471),_0xf28835);else{if(_0x43b67d===0x2)this[_0x1904cc(0x5de)](_0x1904cc(0x178));else{if(this['forceEscapeSprite'])this[_0x1904cc(0x5de)](_0x1904cc(0xa44));else{if(_0x22b818['isCharging']())_0x1904cc(0x1d2)===_0x1904cc(0x613)?_0x1c3d5c[_0x1904cc(0x602)][_0x1904cc(0x466)][_0x1904cc(0x8fe)]['NameAttachStateIcon']&&(this[_0x1904cc(0xae6)]=new _0x371dfa(),this[_0x1904cc(0x9b0)](this['_stateIconSprite'])):this[_0x1904cc(0x5de)](_0x1904cc(0x66d));else{if(_0x22b818[_0x1904cc(0xa59)]()){if(_0x1904cc(0x1b8)===_0x1904cc(0x1b8))this[_0x1904cc(0x5de)](_0x1904cc(0x3fe));else{const _0x39e534=this['itemLineRect'](_0x732d5),_0x304df0=this[_0x1904cc(0x5ec)](_0x4b0979),_0x52f488=this[_0x1904cc(0x1fc)](_0x304df0)[_0x1904cc(0x5cb)];this[_0x1904cc(0x69d)](this['isCommandEnabled'](_0x5346fa));const _0x49cf9b=this[_0x1904cc(0x889)]();if(_0x49cf9b===_0x1904cc(0x174))this[_0x1904cc(0x822)](_0x304df0,_0x39e534['x']+_0x39e534[_0x1904cc(0x5cb)]-_0x52f488,_0x39e534['y'],_0x52f488);else{if(_0x49cf9b===_0x1904cc(0x9e7)){const _0x153237=_0x39e534['x']+_0x40b60c['floor']((_0x39e534[_0x1904cc(0x5cb)]-_0x52f488)/0x2);this[_0x1904cc(0x822)](_0x304df0,_0x153237,_0x39e534['y'],_0x52f488);}else this[_0x1904cc(0x822)](_0x304df0,_0x39e534['x'],_0x39e534['y'],_0x52f488);}}}else{if(_0x22b818[_0x1904cc(0x4ff)]()||_0x22b818['isGuardWaiting']())this['startMotion'](_0x1904cc(0x9a9));else{if(_0x43b67d===0x1)this[_0x1904cc(0x5de)]('abnormal');else{if(_0x22b818['isDying']())this[_0x1904cc(0x5de)](_0x1904cc(0x89d));else{if(_0x22b818[_0x1904cc(0xb0b)]())'aPRXU'!=='aPRXU'?(_0x3df7b3['BattleCore']['Window_BattleLog_performCollapse'][_0x1904cc(0x5fd)](this,_0x5efdae),this[_0x1904cc(0x8fb)]()):this[_0x1904cc(0x5de)](_0x1904cc(0x8d2));else{if(_0x22b818[_0x1904cc(0x7bc)]()){if('hrdHW'===_0x1904cc(0x363))this['startMotion'](_0x1904cc(0x66d));else{if(!_0x12aece['isSceneBattle']())return;if(!_0x4c5551[_0x1904cc(0x9b1)])return;_0x2a6e40['ConvertParams'](_0x39d160,_0x1d7bf0);const _0x25be9c=_0x5565fc['_action'],_0x131661=_0x135b46[_0x1904cc(0x35e)];if(!_0x25be9c)return;_0x25be9c[_0x1904cc(0x4a5)]=_0x131661;}}else this['startMotion'](_0x1904cc(0x8d2));}}}}}}}}}}}else _0x789b99['addTextToCombatLog'](_0x1e7431['Text']||'',_0x556705[_0x1904cc(0x795)]||0x0);}},Sprite_Actor['prototype'][_0x8db8d6(0xafe)]=function(){const _0x1d861f=_0x8db8d6,_0x375f29=0xa,_0x5c4043=0x12c*_0x375f29,_0x18a773=0x1e*_0x375f29;this[_0x1d861f(0x520)](_0x5c4043,0x0,_0x18a773);},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x606)]=function(){const _0x2f1406=_0x8db8d6;Sprite_Battler['prototype'][_0x2f1406(0x606)][_0x2f1406(0x5fd)](this);},Sprite_Actor[_0x8db8d6(0x6da)]['motionSpeed']=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon['prototype']['animationWait']=function(){const _0x24bf01=_0x8db8d6;return Sprite_Battler[_0x24bf01(0x770)];},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x70b)]=function(){},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x559)]=function(){},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x11f)]=function(){const _0x47a3f8=_0x8db8d6;if(this['_motion']&&++this[_0x47a3f8(0xb10)]>=this[_0x47a3f8(0x93c)]()){if(this[_0x47a3f8(0x713)]['loop'])this[_0x47a3f8(0x36b)]=(this[_0x47a3f8(0x36b)]+0x1)%0x4;else this[_0x47a3f8(0x36b)]<0x2?'MZBsa'===_0x47a3f8(0x2db)?this[_0x47a3f8(0x36b)]++:this[_0x47a3f8(0x747)](_0x670e4a,_0x3de778,_0x221908):this[_0x47a3f8(0x845)]();this[_0x47a3f8(0xb10)]=0x0;}},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x9dc)]=function(_0x461202){const _0x525b8f=_0x8db8d6;if(_0x461202===_0x525b8f(0xb30))this[_0x525b8f(0x3ae)]=!![];if(this[_0x525b8f(0x980)]&&this[_0x525b8f(0x980)][_0x525b8f(0x20a)]()){if(_0x525b8f(0x272)!==_0x525b8f(0xa65)){this[_0x525b8f(0x713)]=Sprite_Actor[_0x525b8f(0x51a)]['dead'];return;}else _0x5d6317?(this[_0x525b8f(0x373)]['x']=(_0x31333a[_0x525b8f(0x5cb)]-_0x3c3e1f[_0x525b8f(0x3ef)])/0x2,this[_0x525b8f(0x373)]['y']=(_0x242a03[_0x525b8f(0x7f5)]-_0x250c54[_0x525b8f(0x68b)])/0x2):(this[_0x525b8f(0x373)]['x']=_0x3e745c[_0x525b8f(0x5cb)]*0xa,this['_windowLayer']['y']=_0x5b8a82['height']*0xa);}const _0x5502a0=Sprite_Actor['MOTIONS'][_0x461202];this[_0x525b8f(0x713)]=_0x5502a0,this[_0x525b8f(0xb10)]=0x0,this[_0x525b8f(0x36b)]=0x0;},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x7c8)]=function(_0x1b6a5e){const _0x3ea721=_0x8db8d6;this[_0x3ea721(0x2bd)](),this[_0x3ea721(0x4f0)][_0x3ea721(0x88c)](_0x1b6a5e),this['_actor']['clearWeaponAnimation']();},Sprite_Actor['prototype'][_0x8db8d6(0x2bd)]=function(){const _0x46fa65=_0x8db8d6;let _0x3e507d=-0x10,_0x1ed3c4=this[_0x46fa65(0x7f5)]*0.5;const _0x557597=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x38e8d4=this[_0x46fa65(0x980)][_0x46fa65(0x1f3)]()[_0x46fa65(0x9f8)](_0x5caf4f=>_0x5caf4f&&_0x5caf4f[_0x46fa65(0x44e)][_0x46fa65(0x3ed)](_0x557597)?Number(RegExp['$1']):0x0),_0x29d1a0=this[_0x46fa65(0x980)][_0x46fa65(0x1f3)]()[_0x46fa65(0x9f8)](_0x592c1f=>_0x592c1f&&_0x592c1f[_0x46fa65(0x44e)]['match'](_0x557597)?Number(RegExp['$2']):0x0);_0x3e507d=_0x38e8d4[_0x46fa65(0x65f)]((_0xc69962,_0x51ed80)=>_0xc69962+_0x51ed80,_0x3e507d),_0x1ed3c4=_0x29d1a0[_0x46fa65(0x65f)]((_0x29afac,_0x20313a)=>_0x29afac+_0x20313a,_0x1ed3c4),this[_0x46fa65(0x4f0)]['x']=_0x3e507d,this['_weaponSprite']['y']=_0x1ed3c4,this[_0x46fa65(0x4f0)][_0x46fa65(0x2fb)]();},Sprite_Weapon[_0x8db8d6(0x6da)][_0x8db8d6(0x88c)]=function(_0xf30a8e){const _0xf52324=_0x8db8d6;this[_0xf52324(0x188)]=_0xf30a8e,this[_0xf52324(0x26b)]=-0x1,this[_0xf52324(0x36b)]=0x0,this[_0xf52324(0x2b2)](),this['updateFrame']();},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x462)]=function(){},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x6f6)]=function(){const _0x1be28d=_0x8db8d6,_0x31c648=VisuMZ[_0x1be28d(0x602)]['Settings']['ActionSequence'],_0x3a2f19=_0x31c648['StepDistanceX'],_0x5028e6=_0x31c648[_0x1be28d(0x175)],_0x959214=_0x31c648['StepDuration'];this['startMove'](-_0x3a2f19,-_0x5028e6,_0x959214);},VisuMZ[_0x8db8d6(0x602)]['Sprite_Actor_updateFrame']=Sprite_Actor['prototype']['updateFrame'],Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0x920)]=function(){const _0x5f2b94=_0x8db8d6;this['applyFreezeMotionFrames'](),VisuMZ[_0x5f2b94(0x602)]['Sprite_Actor_updateFrame'][_0x5f2b94(0x5fd)](this);},Sprite_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0xa7b)]=function(){const _0x152549=_0x8db8d6;if(this[_0x152549(0x980)]&&this['_battler'][_0x152549(0x992)]){const _0x3e7b1a=this['_battler'][_0x152549(0x992)];this[_0x152549(0x713)]=Sprite_Actor[_0x152549(0x51a)][_0x3e7b1a['motionType']],this[_0x152549(0x36b)]=_0x3e7b1a[_0x152549(0xad6)];const _0x3f71ff=this[_0x152549(0x4f0)];_0x3f71ff['freezeFrame'](_0x3e7b1a[_0x152549(0x8e8)],_0x3e7b1a['pattern']),this[_0x152549(0x2bd)]();}},Sprite_Weapon[_0x8db8d6(0x6da)][_0x8db8d6(0x8e2)]=function(_0x55de5b,_0x250147){const _0x32633c=_0x8db8d6;this['_weaponImageId']=_0x55de5b,this[_0x32633c(0x26b)]=-Infinity,this['_pattern']=_0x250147,this[_0x32633c(0x2b2)](),this[_0x32633c(0x920)]();},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x13d)]=function(){const _0x336731=_0x8db8d6;Sprite_Battler[_0x336731(0x6da)][_0x336731(0x13d)][_0x336731(0x5fd)](this),this[_0x336731(0x9ce)]=null,this['_appeared']=![],this[_0x336731(0x140)]='',this['_battlerHue']=0x0,this[_0x336731(0xa94)]=null,this['_effectDuration']=0x0,this[_0x336731(0x129)]=0x0,this['createMainSprite'](),this[_0x336731(0x636)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x469)]=Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)],Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)]=function(){const _0x33b76f=_0x8db8d6;VisuMZ[_0x33b76f(0x602)][_0x33b76f(0x469)][_0x33b76f(0x5fd)](this),this[_0x33b76f(0x9be)]();},Sprite_Enemy['prototype']['createMainSprite']=function(){const _0x4c1443=_0x8db8d6;this[_0x4c1443(0x843)]=new Sprite(),this[_0x4c1443(0x843)][_0x4c1443(0x347)]['x']=0.5,this[_0x4c1443(0x843)]['anchor']['y']=0x1,this['addChild'](this[_0x4c1443(0x843)]),this[_0x4c1443(0x703)]();},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x220)]=function(){const _0x110491=_0x8db8d6;return this[_0x110491(0x329)]||this[_0x110491(0x843)]||this;},Sprite_Enemy[_0x8db8d6(0x6da)]['loadBitmap']=function(_0x5890c6){const _0x17fa1a=_0x8db8d6;this[_0x17fa1a(0x86a)]=new Bitmap(0x1,0x1);if($gameSystem[_0x17fa1a(0x6b5)]()){if(_0x17fa1a(0x3b8)===_0x17fa1a(0xa9a)){const _0x4a199e=this[_0x17fa1a(0x288)]()?this['_eventId']:0x0,_0x1c690d=_0x573f80[_0x17fa1a(0x69b)];this[_0x17fa1a(0x42a)](_0x1c690d,_0x4a199e),this[_0x17fa1a(0x671)]=_0x59d015[_0x17fa1a(0x885)](this[_0x17fa1a(0x671)]);const _0x5ae1ef={'code':0xbc3,'indent':this[_0x17fa1a(0x25a)],'parameters':_0x57c135['makeDeepCopy'](_0x383111)};return this[_0x17fa1a(0x671)][_0x17fa1a(0x5bc)](this[_0x17fa1a(0x6d5)]+0x1,0x0,_0x5ae1ef),!![];}else this[_0x17fa1a(0x843)][_0x17fa1a(0x86a)]=ImageManager[_0x17fa1a(0x112)](_0x5890c6);}else this[_0x17fa1a(0x843)]['bitmap']=ImageManager[_0x17fa1a(0xaef)](_0x5890c6);this[_0x17fa1a(0x843)][_0x17fa1a(0x86a)][_0x17fa1a(0x851)](this[_0x17fa1a(0xada)][_0x17fa1a(0x998)](this));},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0xada)]=function(){const _0x2f33a3=_0x8db8d6,_0x176cfa=this['_mainSprite']['bitmap'];_0x176cfa&&('sIFKB'===_0x2f33a3(0x9ca)?this[_0x2f33a3(0x86a)]=new Bitmap(_0x176cfa[_0x2f33a3(0x5cb)],_0x176cfa['height']):this['_customDamageFormula']=_0x2b3d8e);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa87)]=Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x791)],Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x791)]=function(_0x5d4ce2){const _0x432809=_0x8db8d6;this[_0x432809(0x843)]&&('mmDVL'!==_0x432809(0x3e7)?_0x205763[_0x432809(0x8c0)]=_0x11d5f4[_0x432809(0x623)](0x1,_0x5eb47c(_0xa71f4f['$1'])):this['_mainSprite'][_0x432809(0x791)](_0x5d4ce2));},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x27f)]=Sprite_Enemy['prototype'][_0x8db8d6(0x8b2)],Sprite_Enemy['prototype']['initVisibility']=function(){const _0x5c472c=_0x8db8d6;if(this[_0x5c472c(0x7b8)]())VisuMZ['BattleCore'][_0x5c472c(0x27f)]['call'](this);else{if(_0x5c472c(0xa76)!=='snIWK'){this[_0x5c472c(0x8d9)]=!this[_0x5c472c(0x9ce)][_0x5c472c(0x8e7)]();if(!this[_0x5c472c(0x8d9)]){if(_0x5c472c(0x37b)==='VzoPK')this[_0x5c472c(0x83f)]=0x0;else{if(!_0x45bb18[_0x5c472c(0x6b5)]())return;if(this[_0x5c472c(0x82e)])return;this[_0x5c472c(0x82e)]=!![];const _0x505e45=this['battler']();if(_0x505e45)_0x505e45[_0x5c472c(0x674)]();}}}else{const _0x680f68=_0x2a21f4[0x0][_0x5c472c(0xad2)](_0x39490a[0x0],_0x16f96b[0x0]),_0x4a252d=_0x41b1b3[0x1]['format'](_0xef2544[0x1],_0x281862[0x1])[_0x5c472c(0xa51)](),_0x4ab40f=new _0x3016b5(_0x12d5b8['format'](_0x4a252d),'i');_0x378b9e[_0x680f68]=_0x4ab40f;}}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x11e)]=Sprite_Enemy['prototype'][_0x8db8d6(0x714)],Sprite_Enemy[_0x8db8d6(0x6da)]['updateCollapse']=function(){const _0x15b063=_0x8db8d6;if(this[_0x15b063(0x7b8)]())VisuMZ['BattleCore'][_0x15b063(0x11e)]['call'](this);},Sprite_Enemy[_0x8db8d6(0x6da)]['updateFrame']=function(){const _0x5709ed=_0x8db8d6;Sprite_Battler[_0x5709ed(0x6da)]['updateFrame'][_0x5709ed(0x5fd)](this);const _0x67104e=this['mainSprite']()||this;if(!_0x67104e)return;!_0x67104e[_0x5709ed(0x86a)]&&(_0x5709ed(0x35b)!=='HOtQx'?_0x67104e[_0x5709ed(0x86a)]=new Bitmap(this[_0x5709ed(0x5cb)],this['height']):_0x46fc33[_0x5709ed(0x869)]([_0x3c153f])),this[_0x5709ed(0xa94)]==='bossCollapse'?this[_0x5709ed(0x843)][_0x5709ed(0x128)](0x0,0x0,this[_0x5709ed(0x843)][_0x5709ed(0x5cb)],this[_0x5709ed(0x94b)]):_0x67104e[_0x5709ed(0x128)](0x0,0x0,_0x67104e[_0x5709ed(0x86a)][_0x5709ed(0x5cb)],this[_0x5709ed(0x86a)]['height']);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x2a4)]=Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x632)],Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x632)]=function(){const _0x3c9547=_0x8db8d6;if(this[_0x3c9547(0x7b8)]())VisuMZ[_0x3c9547(0x602)][_0x3c9547(0x2a4)][_0x3c9547(0x5fd)](this);},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0xa38)]=function(){const _0xc7a4f8=_0x8db8d6;return Sprite_Battler['prototype'][_0xc7a4f8(0xa38)][_0xc7a4f8(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x7e7)]=Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x11d)],Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x11d)]=function(){const _0x261995=_0x8db8d6;VisuMZ[_0x261995(0x602)][_0x261995(0x7e7)][_0x261995(0x5fd)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x179)]=function(){const _0x4b2b3b=_0x8db8d6,_0x6f45c6=VisuMZ[_0x4b2b3b(0x602)][_0x4b2b3b(0x466)]['Enemy'];if(_0x6f45c6[_0x4b2b3b(0x6d4)]&&!_0x6f45c6['NameLegacy']){if(_0x4b2b3b(0x48c)!==_0x4b2b3b(0x48c)){if(!_0x3cb978[_0x4b2b3b(0x602)][_0x4b2b3b(0x466)][_0x4b2b3b(0x8fe)][_0x4b2b3b(0x6b0)])return;this[_0x4b2b3b(0x999)]=new _0x5df161(),this['_enemyNameContainer']['x']=this[_0x4b2b3b(0x373)]['x'],this[_0x4b2b3b(0x999)]['y']=this['_windowLayer']['y'];const _0x4326bc=this['children'][_0x4b2b3b(0x764)](this[_0x4b2b3b(0x373)]);this[_0x4b2b3b(0x1a1)](this[_0x4b2b3b(0x999)],_0x4326bc);for(let _0x200d6b=0x0;_0x200d6b<0x8;_0x200d6b++){const _0xf1bdf6=new _0x16f82d(_0x200d6b);this['_enemyNameContainer']['addChild'](_0xf1bdf6);}}else{this['_stateIconSprite'][_0x4b2b3b(0x83f)]=0x0;return;}}this[_0x4b2b3b(0xae6)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x4b2b3b(0x980)][_0x4b2b3b(0x585)](),this[_0x4b2b3b(0xae6)]['y']=-this['bitmap'][_0x4b2b3b(0x7f5)]-this[_0x4b2b3b(0xae6)]['height'],this[_0x4b2b3b(0xae6)]['y']+=this['_battler'][_0x4b2b3b(0x277)](),this[_0x4b2b3b(0xae6)][_0x4b2b3b(0x728)]['x']=0x1/(this[_0x4b2b3b(0x728)]['x']||0.001),this[_0x4b2b3b(0xae6)][_0x4b2b3b(0x728)]['y']=0x1/(this[_0x4b2b3b(0x728)]['y']||0.001);if(this['hasSvBattler']()){if(_0x4b2b3b(0xaae)!==_0x4b2b3b(0xaae))return _0x115491[_0x4b2b3b(0x44e)][_0x4b2b3b(0x3ed)](/<COMMAND ICON: (\d+)>/i)?_0xc0e612(_0xbec793['$1']):_0x37ae40['iconIndex'];else this['_svBattlerSprite'][_0x4b2b3b(0x862)]['scale']['x']=-0x1/(this['scale']['x']||0.001),this[_0x4b2b3b(0x85c)][_0x4b2b3b(0x862)][_0x4b2b3b(0x728)]['y']=0x1/(this[_0x4b2b3b(0x728)]['y']||0.001);}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1c0)]=Sprite_Enemy['prototype'][_0x8db8d6(0x630)],Sprite_Enemy['prototype'][_0x8db8d6(0x630)]=function(_0x1dc051){const _0x528992=_0x8db8d6;VisuMZ[_0x528992(0x602)][_0x528992(0x1c0)]['call'](this,_0x1dc051),this[_0x528992(0xab7)](_0x1dc051);},Sprite_Enemy['prototype'][_0x8db8d6(0xab7)]=function(_0x43636c){const _0xa5eea6=_0x8db8d6;if(!this[_0xa5eea6(0x85c)]){if(_0xa5eea6(0x117)!==_0xa5eea6(0x5a0))this[_0xa5eea6(0x85c)]=new Sprite_SvEnemy(_0x43636c),this[_0xa5eea6(0x703)]();else{const _0x86e89d=this[_0xa5eea6(0x538)]();_0x86e89d&&_0x86e89d[_0xa5eea6(0x6f6)]();}}this[_0xa5eea6(0x85c)]['setBattler'](_0x43636c);},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x991)]=function(){const _0x522c24=_0x8db8d6;return this[_0x522c24(0x9ce)]&&this[_0x522c24(0x9ce)][_0x522c24(0x991)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x8b0)]=Sprite_Enemy[_0x8db8d6(0x6da)]['loadBitmap'],Sprite_Enemy['prototype']['loadBitmap']=function(_0x2b24cc){const _0x25e753=_0x8db8d6;if(this[_0x25e753(0x991)]()){if('mLVGR'==='mLVGR'){const _0x3c94f0=this[_0x25e753(0x9ce)]['svBattlerData']();this[_0x25e753(0x86a)]=new Bitmap(_0x3c94f0[_0x25e753(0x5cb)],_0x3c94f0['height']);}else _0xcbf1d8[_0x25e753(0x602)]['ParseStateNotetags'][_0x25e753(0x5fd)](this,_0x27c3e2);}else _0x25e753(0x8f7)!=='iTgCC'?VisuMZ['BattleCore']['Sprite_Enemy_loadBitmap'][_0x25e753(0x5fd)](this,_0x2b24cc):this[_0x25e753(0x991)]()&&this[_0x25e753(0x85c)][_0x25e753(0x845)]();},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x7b8)]=function(){const _0x34ce92=_0x8db8d6;if(this[_0x34ce92(0x991)]()){if('jTRNj'===_0x34ce92(0x9cc)){_0x3faf43=_0x4bcfae||0x1,_0x2aa959--;const _0x4a16d1=this[_0x34ce92(0x449)](),_0x1149c9=_0x4a16d1[_0x484518]?_0x4a16d1[_0x3a2bd8]['wtypeId']:0x0;return _0x38cc3d['attackMotions'][_0x1149c9];}else return this[_0x34ce92(0x9ce)][_0x34ce92(0x7b8)]();}else return!![];},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x845)]=function(){const _0x1a35b7=_0x8db8d6;this[_0x1a35b7(0x991)]()&&this['_svBattlerSprite']['refreshMotion']();},Sprite_Enemy[_0x8db8d6(0x6da)]['forceMotion']=function(_0x3cca98){const _0x830a76=_0x8db8d6;if(this[_0x830a76(0x991)]())this['_svBattlerSprite'][_0x830a76(0x9dc)](_0x3cca98);},Sprite_Enemy[_0x8db8d6(0x6da)][_0x8db8d6(0x7c8)]=function(_0x2414ba){const _0x42e67e=_0x8db8d6;if(this[_0x42e67e(0x991)]())this[_0x42e67e(0x85c)][_0x42e67e(0x7c8)](_0x2414ba);},Sprite_Enemy[_0x8db8d6(0x6da)]['stepForward']=function(){const _0x2ea7f7=_0x8db8d6,_0xa81bd5=VisuMZ[_0x2ea7f7(0x602)]['Settings']['ActionSequence'],_0x3d450f=_0xa81bd5[_0x2ea7f7(0x40d)],_0x355492=_0xa81bd5['StepDistanceY'],_0xfa56cf=_0xa81bd5['StepDuration'];this['startMove'](_0x3d450f,_0x355492,_0xfa56cf);};function Sprite_SvEnemy(){const _0x21ddb2=_0x8db8d6;this[_0x21ddb2(0x3f1)](...arguments);}Sprite_SvEnemy[_0x8db8d6(0x6da)]=Object[_0x8db8d6(0x55d)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x5f5)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x8db8d6(0x3f1)]=function(_0x23a789){const _0xc16de7=_0x8db8d6;Sprite_Actor[_0xc16de7(0x6da)][_0xc16de7(0x3f1)][_0xc16de7(0x5fd)](this,_0x23a789),this['scale']['x']=-0x1,this[_0xc16de7(0x862)][_0xc16de7(0x728)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x8db8d6(0x5bd)]=function(){},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x503)]=function(){},Sprite_SvEnemy['prototype'][_0x8db8d6(0x922)]=function(_0x4886e8){},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x93d)]=function(){},Sprite_SvEnemy[_0x8db8d6(0x6da)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x11d)]=function(){const _0x29bc6e=_0x8db8d6;this[_0x29bc6e(0x862)][_0x29bc6e(0x344)]=![];},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x6a1)]=function(){const _0x46a8d=_0x8db8d6;Sprite_Battler[_0x46a8d(0x6da)][_0x46a8d(0x6a1)][_0x46a8d(0x5fd)](this);const _0x4b8491=this['_actor']['svBattlerName']();this[_0x46a8d(0x140)]!==_0x4b8491&&(this[_0x46a8d(0x140)]=_0x4b8491,this[_0x46a8d(0x843)]['bitmap']=ImageManager[_0x46a8d(0x51c)](_0x4b8491)),this[_0x46a8d(0x843)]&&this['_mainSprite'][_0x46a8d(0x86a)]&&this[_0x46a8d(0x980)]&&(this[_0x46a8d(0x843)]['bitmap'][_0x46a8d(0x269)]!==this[_0x46a8d(0x980)][_0x46a8d(0x14c)]()&&('MZuIj'!==_0x46a8d(0x985)?_0x564ead['setHandler'](_0x46a8d(0x107),this[_0x46a8d(0x47c)]['bind'](this)):this[_0x46a8d(0x843)][_0x46a8d(0x86a)][_0x46a8d(0x269)]=this[_0x46a8d(0x980)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0xafe)]=function(){},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x520)]=function(_0x31c89e,_0x4f0522,_0xdfdb55){const _0x471030=_0x8db8d6;if(this['parent'])this[_0x471030(0x19c)]['startMove'](_0x31c89e,_0x4f0522,_0xdfdb55);},Sprite_SvEnemy['prototype']['refreshMotion']=function(){const _0x2570d7=_0x8db8d6,_0x191227=this['_actor'];if(_0x191227){const _0x52f537=_0x191227[_0x2570d7(0x529)]();if(_0x191227[_0x2570d7(0xac6)]()||_0x191227[_0x2570d7(0x376)]())this['startMotion'](_0x2570d7(0x8d2));else{if(_0x52f537===0x3){if(_0x2570d7(0x2fc)!=='eAsyR')return this[_0x2570d7(0xaf1)]()[_0x2570d7(0x44e)][_0x2570d7(0x3ed)](/<JS TARGETS>/i);else this[_0x2570d7(0x5de)](_0x2570d7(0x7a7));}else{if(_0x52f537===0x2){if(_0x2570d7(0x768)!==_0x2570d7(0xb38))this[_0x2570d7(0x5de)](_0x2570d7(0x178));else{const _0x3dd1d2=new _0x164556();return _0x327918[_0x4cdc51]=_0x3dd1d2,this[_0x2570d7(0x8f0)](_0x3dd1d2),this['addChildToBack'](this[_0x2570d7(0x38d)]),_0x3dd1d2;}}else{if(_0x191227[_0x2570d7(0xa59)]())this[_0x2570d7(0x5de)](_0x2570d7(0x3fe));else{if(_0x191227[_0x2570d7(0x4ff)]()||_0x191227['isGuardWaiting']())this['startMotion']('guard');else{if(_0x52f537===0x1)this['startMotion'](_0x2570d7(0x8ef));else{if(_0x191227[_0x2570d7(0x594)]())_0x2570d7(0x9bc)===_0x2570d7(0x193)?(_0x5e93b4+=_0x204572[_0x2570d7(0x367)]()?-_0x33c64c:_0x4c171e,_0x3d714c+=_0x2b3ea7):this[_0x2570d7(0x5de)](_0x2570d7(0x89d));else{if(_0x191227[_0x2570d7(0xb0b)]())_0x2570d7(0x166)===_0x2570d7(0x166)?this[_0x2570d7(0x5de)](_0x2570d7(0x8d2)):this['opacity']=0x0;else{if(_0x2570d7(0xac9)===_0x2570d7(0xac9))this[_0x2570d7(0x5de)](_0x191227['svBattlerData']()['motionIdle']||_0x2570d7(0x8d2));else return;}}}}}}}}}},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x953)]=function(){const _0xb95b26=_0x8db8d6;return this['parent']?_0xb95b26(0x270)===_0xb95b26(0x270)?this[_0xb95b26(0x19c)]['_offsetX']===0x0&&this['parent']['_offsetY']===0x0:this[_0xb95b26(0x329)]||this['_mainSprite']||this:!![];},Sprite_SvEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0xaea)]=function(){},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x7db)]=Sprite_Animation[_0x8db8d6(0x6da)][_0x8db8d6(0x48d)],Sprite_Animation[_0x8db8d6(0x6da)][_0x8db8d6(0x48d)]=function(_0x2426ed){const _0x11282d=_0x8db8d6;return _0x2426ed[_0x11282d(0x329)]?this[_0x11282d(0x81d)](_0x2426ed):VisuMZ['BattleCore']['Sprite_Animation_targetSpritePosition'][_0x11282d(0x5fd)](this,_0x2426ed);},Sprite_Animation[_0x8db8d6(0x6da)]['targetDistortionSpritePosition']=function(_0x4d9f0a){const _0x5a797d=_0x8db8d6;let _0xd5774d=_0x4d9f0a['x'],_0x3ed618=_0x4d9f0a['y'],_0x25b2cc=_0x4d9f0a[_0x5a797d(0x7f5)],_0x594b61=_0x4d9f0a['_distortionSprite']['scale']['y'];_0x4d9f0a['x']=_0x4d9f0a[_0x5a797d(0x94f)]+_0x4d9f0a[_0x5a797d(0x6c7)](),_0x4d9f0a['y']=_0x4d9f0a[_0x5a797d(0x214)]+_0x4d9f0a[_0x5a797d(0x72d)](),_0x4d9f0a[_0x5a797d(0x7f5)]*=_0x594b61;let _0x47f75d=VisuMZ['BattleCore'][_0x5a797d(0x7db)][_0x5a797d(0x5fd)](this,_0x4d9f0a);return _0x4d9f0a['x']=_0xd5774d,_0x4d9f0a['y']=_0x3ed618,_0x4d9f0a[_0x5a797d(0x7f5)]=_0x25b2cc,_0x47f75d;},Sprite_Damage[_0x8db8d6(0x6da)][_0x8db8d6(0x21c)]=function(_0xab2ae9){const _0x44af67=_0x8db8d6,_0x44259f=_0xab2ae9[_0x44af67(0x27e)]()||_0xab2ae9[_0x44af67(0x57a)]();if(_0x44259f[_0x44af67(0x3f7)]||_0x44259f[_0x44af67(0x4a7)])this[_0x44af67(0xb06)]=0x0,this[_0x44af67(0x4ec)]();else{if(_0x44259f[_0x44af67(0x4af)]){if(_0x44af67(0x237)!=='SQUvv')this[_0x44af67(0xb06)]=_0x44259f[_0x44af67(0x3b7)]>=0x0?0x0:0x1,this[_0x44af67(0x88e)](_0x44259f[_0x44af67(0x3b7)]);else return this[_0x44af67(0x81d)](_0x53cfa6);}else _0xab2ae9[_0x44af67(0xb02)]()&&_0x44259f['mpDamage']!==0x0&&(this[_0x44af67(0xb06)]=_0x44259f['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x44259f[_0x44af67(0x710)]));}_0x44259f['critical']&&this[_0x44af67(0x809)]();},Sprite_Damage['prototype']['setup']=function(_0x5f229c){},Sprite_Damage[_0x8db8d6(0x6da)][_0x8db8d6(0x88e)]=function(_0x43100e){const _0x1e0175=_0x8db8d6;let _0x540e1e=this[_0x1e0175(0x452)](_0x43100e);const _0x2a1dfa=this[_0x1e0175(0x79d)](),_0x430d1e=Math['floor'](_0x2a1dfa*0.75);for(let _0x3469f1=0x0;_0x3469f1<_0x540e1e[_0x1e0175(0x5e0)];_0x3469f1++){const _0x10a889=this[_0x1e0175(0x6a8)](_0x430d1e,_0x2a1dfa);_0x10a889['bitmap'][_0x1e0175(0xa01)](_0x540e1e[_0x3469f1],0x0,0x0,_0x430d1e,_0x2a1dfa,_0x1e0175(0x9e7)),_0x10a889['x']=(_0x3469f1-(_0x540e1e[_0x1e0175(0x5e0)]-0x1)/0x2)*_0x430d1e,_0x10a889['dy']=-_0x3469f1;}},Sprite_Damage['prototype'][_0x8db8d6(0x452)]=function(_0x1f9942){const _0x39a7fe=_0x8db8d6;let _0x25969d=Math[_0x39a7fe(0x78b)](_0x1f9942)[_0x39a7fe(0x146)]();if(this[_0x39a7fe(0x45d)]()){if(_0x39a7fe(0x686)!==_0x39a7fe(0x925))_0x25969d=VisuMZ[_0x39a7fe(0x6de)](_0x25969d);else return 0x1;}const _0x2cb3cd=VisuMZ[_0x39a7fe(0x602)][_0x39a7fe(0x466)][_0x39a7fe(0x409)];let _0x48500f='',_0xffb8d1='';switch(this[_0x39a7fe(0xb06)]){case 0x0:_0x48500f=_0x2cb3cd[_0x39a7fe(0x797)]||_0x39a7fe(0x631),_0xffb8d1=TextManager['hp'];if(_0x1f9942===0x0)_0x48500f='%1';break;case 0x1:_0x48500f=_0x2cb3cd[_0x39a7fe(0x372)]||_0x39a7fe(0x401),_0xffb8d1=TextManager['hp'];break;case 0x2:_0x48500f=_0x2cb3cd['mpDamageFmt']||_0x39a7fe(0x7ac),_0xffb8d1=TextManager['mp'];break;case 0x3:_0x48500f=_0x2cb3cd[_0x39a7fe(0x6f1)]||'+%1\x20MP',_0xffb8d1=TextManager['mp'];break;}return _0x48500f[_0x39a7fe(0xad2)](_0x25969d,_0xffb8d1)[_0x39a7fe(0xa51)]();},Sprite_Damage[_0x8db8d6(0x6da)][_0x8db8d6(0x45d)]=function(){const _0x4d6746=_0x8db8d6;if(Imported[_0x4d6746(0x730)])return VisuMZ['CoreEngine'][_0x4d6746(0x466)][_0x4d6746(0xabe)][_0x4d6746(0x91d)];else{if('zkvLc'==='MEkGh'){const _0x321956=_0x123212(_0x3aa056['$1']);return[_0x411d49['actor'](_0x321956)];}else return![];}},Sprite_Damage[_0x8db8d6(0x6da)][_0x8db8d6(0x809)]=function(){const _0x4a3fff=_0x8db8d6,_0x176bcb=VisuMZ[_0x4a3fff(0x602)][_0x4a3fff(0x466)][_0x4a3fff(0x409)];this[_0x4a3fff(0x9f1)]=_0x176bcb['CriticalColor'][_0x4a3fff(0x7e0)](0x0),this[_0x4a3fff(0x28f)]=_0x176bcb[_0x4a3fff(0x4cd)];},Sprite_Damage['prototype'][_0x8db8d6(0x10a)]=function(_0x114709,_0x472654){const _0x5ecd02=_0x8db8d6;this['_flashColor']=_0x472654[_0x5ecd02(0x7b6)]||[0x0,0x0,0x0,0x0],this[_0x5ecd02(0x9f1)]=JsonEx[_0x5ecd02(0x885)](this[_0x5ecd02(0x9f1)]),this[_0x5ecd02(0x28f)]=_0x472654[_0x5ecd02(0x1c8)]||0x0;const _0x49ec1c=this[_0x5ecd02(0x79d)](),_0x55ab24=Math['floor'](_0x49ec1c*0x1e),_0x2ec144=this[_0x5ecd02(0x6a8)](_0x55ab24,_0x49ec1c);_0x2ec144['bitmap']['textColor']=ColorManager[_0x5ecd02(0xb3f)](_0x472654[_0x5ecd02(0x858)]),_0x2ec144[_0x5ecd02(0x86a)][_0x5ecd02(0xa01)](_0x114709,0x0,0x0,_0x55ab24,_0x49ec1c,'center'),_0x2ec144['dy']=0x0;},Sprite_Damage[_0x8db8d6(0x6da)][_0x8db8d6(0x9e4)]=function(_0x3a29c3,_0x546bb3,_0x54cdbe){const _0x3c6f33=_0x8db8d6,_0x7a5f49=Math[_0x3c6f33(0x623)](this[_0x3c6f33(0x79d)](),ImageManager['iconHeight']),_0x3134e6=Math['floor'](_0x7a5f49*0x1e),_0x5b6f62=this[_0x3c6f33(0x6a8)](_0x3134e6,_0x7a5f49),_0x418cca=ImageManager['iconWidth']/0x2,_0x3f791b=_0x5b6f62[_0x3c6f33(0x86a)][_0x3c6f33(0x50d)](_0x546bb3+'\x20');_0x5b6f62[_0x3c6f33(0x86a)][_0x3c6f33(0x858)]=ColorManager[_0x3c6f33(0xb3f)](_0x54cdbe[_0x3c6f33(0x858)]),_0x5b6f62[_0x3c6f33(0x86a)][_0x3c6f33(0xa01)](_0x546bb3,_0x418cca,0x0,_0x3134e6-_0x418cca,_0x7a5f49,_0x3c6f33(0x9e7));const _0x3f718e=Math['round']((_0x7a5f49-ImageManager[_0x3c6f33(0x709)])/0x2),_0x430054=_0x3134e6/0x2-ImageManager[_0x3c6f33(0x3cf)]-_0x3f791b/0x2+_0x418cca/0x2,_0x4933bd=ImageManager[_0x3c6f33(0x8c4)](_0x3c6f33(0x684)),_0x4cbf39=ImageManager[_0x3c6f33(0x3cf)],_0xd1b1b=ImageManager[_0x3c6f33(0x709)],_0x34158a=_0x3a29c3%0x10*_0x4cbf39,_0x189147=Math[_0x3c6f33(0x1f5)](_0x3a29c3/0x10)*_0xd1b1b;_0x5b6f62[_0x3c6f33(0x86a)][_0x3c6f33(0x86b)](_0x4933bd,_0x34158a,_0x189147,_0x4cbf39,_0xd1b1b,_0x430054,_0x3f718e),this[_0x3c6f33(0x9f1)]=_0x54cdbe[_0x3c6f33(0x7b6)]||[0x0,0x0,0x0,0x0],this[_0x3c6f33(0x9f1)]=JsonEx['makeDeepCopy'](this[_0x3c6f33(0x9f1)]),this[_0x3c6f33(0x28f)]=_0x54cdbe[_0x3c6f33(0x1c8)]||0x0,_0x5b6f62['dy']=0x0;},VisuMZ['BattleCore'][_0x8db8d6(0x55e)]=Sprite_StateIcon[_0x8db8d6(0x6da)]['updateFrame'],Sprite_StateIcon[_0x8db8d6(0x6da)][_0x8db8d6(0x920)]=function(){const _0x64efc6=_0x8db8d6;VisuMZ[_0x64efc6(0x602)][_0x64efc6(0x55e)][_0x64efc6(0x5fd)](this),this[_0x64efc6(0x83f)]=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x2c0)]=Sprite_Weapon['prototype'][_0x8db8d6(0x2b2)],Sprite_Weapon[_0x8db8d6(0x6da)][_0x8db8d6(0x2b2)]=function(){const _0x1e68d5=_0x8db8d6;VisuMZ[_0x1e68d5(0x602)][_0x1e68d5(0x2c0)]['call'](this),this[_0x1e68d5(0x86a)]&&(this[_0x1e68d5(0x86a)]['smooth']=VisuMZ[_0x1e68d5(0x602)][_0x1e68d5(0x466)][_0x1e68d5(0x73a)][_0x1e68d5(0x7e1)]);};function Sprite_HpGauge(){const _0x244bb6=_0x8db8d6;this[_0x244bb6(0x3f1)](...arguments);}Sprite_HpGauge[_0x8db8d6(0x6da)]=Object['create'](Sprite_Gauge[_0x8db8d6(0x6da)]),Sprite_HpGauge[_0x8db8d6(0x6da)][_0x8db8d6(0x5f5)]=Sprite_HpGauge,Sprite_HpGauge[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)]=function(){const _0x2c636a=_0x8db8d6;Sprite_Gauge[_0x2c636a(0x6da)]['initialize'][_0x2c636a(0x5fd)](this);},Sprite_HpGauge[_0x8db8d6(0x6da)][_0x8db8d6(0x7b3)]=function(){return 0x0;},Sprite_HpGauge[_0x8db8d6(0x6da)][_0x8db8d6(0x5c5)]=function(){const _0x3e10e3=_0x8db8d6;this[_0x3e10e3(0x86a)]['clear']();const _0x4e3b6e=this[_0x3e10e3(0x141)]();!isNaN(_0x4e3b6e)&&this[_0x3e10e3(0x2f3)]();};function Sprite_EnemyName(){const _0x31c488=_0x8db8d6;this[_0x31c488(0x3f1)](...arguments);}Sprite_EnemyName[_0x8db8d6(0x6da)]=Object[_0x8db8d6(0x55d)](Sprite_Name[_0x8db8d6(0x6da)]),Sprite_EnemyName[_0x8db8d6(0x6da)]['constructor']=Sprite_EnemyName,Sprite_EnemyName['prototype']['initialize']=function(){const _0x3121ad=_0x8db8d6;Sprite_Name[_0x3121ad(0x6da)][_0x3121ad(0x3f1)][_0x3121ad(0x5fd)](this),this[_0x3121ad(0x9c3)]();},Sprite_EnemyName['prototype'][_0x8db8d6(0x13d)]=function(){const _0x58bde0=_0x8db8d6;Sprite_Name[_0x58bde0(0x6da)][_0x58bde0(0x13d)][_0x58bde0(0x5fd)](this),this['opacity']=0x0,this['_linkedSprite']=null,this[_0x58bde0(0x347)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype']['createAttachedSprites']=function(){const _0x3cf581=_0x8db8d6;VisuMZ['BattleCore']['Settings'][_0x3cf581(0x8fe)][_0x3cf581(0x6d4)]&&(_0x3cf581(0x3eb)!==_0x3cf581(0x1b9)?(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x3cf581(0x9b0)](this[_0x3cf581(0xae6)])):this[_0x3cf581(0x3f1)](...arguments));},Sprite_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x4d6)]=function(){const _0x26ea15=_0x8db8d6;return Graphics[_0x26ea15(0x3ef)];},Sprite_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x641)]=function(){const _0x1895bc=_0x8db8d6;return this[_0x1895bc(0x395)]=this[_0x1895bc(0x395)]||Window_Base[_0x1895bc(0x6da)][_0x1895bc(0x8ca)]()||0x24,this[_0x1895bc(0x395)]*0x4;},Sprite_EnemyName['prototype']['fontSize']=function(){const _0x4e247b=_0x8db8d6;return VisuMZ[_0x4e247b(0x602)][_0x4e247b(0x466)][_0x4e247b(0x8fe)]['NameFontSize']||$gameSystem[_0x4e247b(0x2c9)]();},Sprite_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x408)]=function(_0x24e40f){const _0x49efb6=_0x8db8d6;this[_0x49efb6(0x268)]=_0x24e40f;},Sprite_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)]=function(){const _0x392682=_0x8db8d6;Sprite_Name[_0x392682(0x6da)][_0x392682(0x2fb)][_0x392682(0x5fd)](this),this['updateLink'](),this[_0x392682(0x245)](),this[_0x392682(0x212)](),this['updateOpacity']();},Sprite_EnemyName[_0x8db8d6(0x6da)]['redraw']=function(){const _0x3db846=_0x8db8d6;this[_0x3db846(0x9b5)]=undefined;const _0x9666bf=this[_0x3db846(0x7fd)](),_0x5cfe69=this[_0x3db846(0x4d6)](),_0x5a9c67=Window_Base['prototype'][_0x3db846(0x8ca)]();this['setupFont'](),this[_0x3db846(0x86a)][_0x3db846(0x750)](),this['bitmap'][_0x3db846(0xa01)](_0x9666bf,0x0,0x0,_0x5cfe69,_0x5a9c67,_0x3db846(0x9e7));},Sprite_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x392)]=function(){const _0x5473e3=_0x8db8d6;if(!this[_0x5473e3(0x268)])return;this[_0x5473e3(0x980)]!==this[_0x5473e3(0x268)][_0x5473e3(0x980)]&&this[_0x5473e3(0x88c)](this[_0x5473e3(0x268)][_0x5473e3(0x980)]);},Sprite_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x245)]=function(){const _0x30051a=_0x8db8d6;if(!this[_0x30051a(0x268)])return;this[_0x30051a(0x395)]=this[_0x30051a(0x395)]||Window_Base[_0x30051a(0x6da)]['lineHeight'](),this['x']=this[_0x30051a(0x268)][_0x30051a(0x94f)],this['y']=this[_0x30051a(0x268)][_0x30051a(0x214)]-this['_lineHeight']*0.5;const _0x143c45=VisuMZ['BattleCore'][_0x30051a(0x466)]['Enemy'];this['x']+=_0x143c45[_0x30051a(0x292)]||0x0,this['y']+=_0x143c45[_0x30051a(0x2b3)]||0x0;},Sprite_EnemyName['prototype'][_0x8db8d6(0x212)]=function(){const _0x3d04d5=_0x8db8d6;this[_0x3d04d5(0x63b)]();},Sprite_EnemyName[_0x8db8d6(0x6da)]['updateStateIconSprite']=function(){const _0x1d394a=_0x8db8d6;if(!this[_0x1d394a(0xae6)])return;this['_battler']!==this['_stateIconSprite'][_0x1d394a(0x980)]&&this['_stateIconSprite']['setup'](this['_battler']);const _0x5813c0=this['textWidth']();this['_lineHeight']=this[_0x1d394a(0x395)]||Window_Base['prototype']['lineHeight'](),this[_0x1d394a(0xae6)]['x']=Math[_0x1d394a(0x423)]((_0x5813c0+ImageManager[_0x1d394a(0x3cf)])/0x2)+0x8,this[_0x1d394a(0xae6)]['y']=this[_0x1d394a(0x395)]/0x2;const _0x166c50=VisuMZ[_0x1d394a(0x602)][_0x1d394a(0x466)][_0x1d394a(0x8fe)];this[_0x1d394a(0xae6)]['x']+=_0x166c50['AttachStateOffsetX']||0x0,this[_0x1d394a(0xae6)]['y']+=_0x166c50[_0x1d394a(0x39f)]||0x0;},Sprite_EnemyName['prototype'][_0x8db8d6(0x382)]=function(){const _0x1e5983=_0x8db8d6,_0x50bfc2=this[_0x1e5983(0xa90)]();if(_0x50bfc2&&this['opacity']<0xff)this['opacity']+=0x10;else!_0x50bfc2&&this[_0x1e5983(0x83f)]>0x0&&(_0x1e5983(0x8f5)==='XDXCG'?this[_0x1e5983(0xa32)]():this[_0x1e5983(0x83f)]-=0x10);},Sprite_EnemyName[_0x8db8d6(0x6da)]['visibilityState']=function(){const _0x5adab9=_0x8db8d6;if(this['isAlwaysHidden']())return![];else{if(!this[_0x5adab9(0x980)])return![];else{if(this['_battler'][_0x5adab9(0x20a)]()){if('GzHNk'===_0x5adab9(0x67b))return![];else _0x5b6594[_0x5adab9(0x79f)]();}else{if(!this['_battler'][_0x5adab9(0x38b)]())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x5adab9(0x737)]())return!![];else{if(this['isIncludedInEnemyWindow']()){if(_0x5adab9(0xace)==='OIMTU')_0x12d4aa[_0x5adab9(0x43e)](new _0x130b1b(_0x319ff9));else return!![];}else{if(this[_0x5adab9(0x83f)]>0x0){if(_0x5adab9(0x55f)===_0x5adab9(0x55f))return![];else this[_0x5adab9(0x403)]=_0x26f87e[_0x5adab9(0x403)];}}}}}}}}},Sprite_EnemyName['prototype'][_0x8db8d6(0xa84)]=function(){const _0x8288e5=_0x8db8d6;return VisuMZ[_0x8288e5(0x602)][_0x8288e5(0x466)][_0x8288e5(0x8fe)][_0x8288e5(0x18f)];},Sprite_EnemyName[_0x8db8d6(0x6da)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x737)]=function(){const _0x45a4f2=_0x8db8d6;return VisuMZ[_0x45a4f2(0x602)]['Settings'][_0x45a4f2(0x8fe)][_0x45a4f2(0x95d)];},Sprite_EnemyName['prototype'][_0x8db8d6(0x443)]=function(){const _0x1492dd=_0x8db8d6;if(VisuMZ['BattleCore']['Settings'][_0x1492dd(0x8fe)][_0x1492dd(0x723)]){if(_0x1492dd(0x4df)===_0x1492dd(0x8a9)){if(!_0x532784['isSceneBattle']())return;_0x3e996b[_0x1492dd(0xb24)](_0x20a876,_0x3c713b);const _0x2d74a9=_0x2a3208['getLastPluginCommandInterpreter'](),_0x36f915=_0x3b6e5c[_0x1492dd(0x64d)],_0xeb266d=_0xf719cb[_0x1492dd(0x7be)],_0xe5c625=_0x4e13d2['_allTargets']?_0x325357[_0x1492dd(0x67a)][_0x1492dd(0x7e0)](0x0):[],_0x21e005=_0x13946e[_0x1492dd(0x307)];if(!_0x2d74a9||!_0x36f915||!_0xeb266d)return;if(!_0x36f915[_0x1492dd(0xaf1)]())return;if(_0x5dc9c5[_0x1492dd(0xb1c)])_0x21e005[_0x1492dd(0x43e)](_0x1492dd(0x865),_0xeb266d,_0xe5c625,![]);if(_0x57a12b[_0x1492dd(0x7d6)])_0x21e005[_0x1492dd(0x43e)](_0x1492dd(0xb37));if(_0x43ce17['WaitForEffect'])_0x21e005[_0x1492dd(0x43e)](_0x1492dd(0x841));if(_0x4455e3[_0x1492dd(0x1d9)])_0x21e005['push'](_0x1492dd(0x750));if(_0x8e755c['ActionEnd'])_0x21e005[_0x1492dd(0x43e)](_0x1492dd(0x5b5),_0xeb266d);if(_0x518cf7['WaitForMovement'])_0x21e005[_0x1492dd(0x43e)](_0x1492dd(0x200));_0x2d74a9[_0x1492dd(0x4f2)](_0x1492dd(0x316));}else return this[_0x1492dd(0x980)][_0x1492dd(0x155)]();}else{if(_0x1492dd(0x6e1)!=='WnMSJ')_0xc2333d['remove'](this['subject']());else return SceneManager[_0x1492dd(0xa4a)][_0x1492dd(0x6eb)]&&SceneManager[_0x1492dd(0xa4a)][_0x1492dd(0x6eb)][_0x1492dd(0x121)]&&SceneManager[_0x1492dd(0xa4a)][_0x1492dd(0x6eb)]['_enemies'][_0x1492dd(0xa5c)](this[_0x1492dd(0x980)]);}},Sprite_EnemyName['prototype']['textWidth']=function(){const _0x5c3e74=_0x8db8d6;if(!this[_0x5c3e74(0x980)])return 0x0;if(this[_0x5c3e74(0x9b5)])return this['_cacheTextWidth'];const _0x14731f=this['name']();return this[_0x5c3e74(0x836)](),this[_0x5c3e74(0x9b5)]=this['bitmap'][_0x5c3e74(0x50d)](_0x14731f)||0x1,this[_0x5c3e74(0x9b5)];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xaf7)]=Sprite_Battleback[_0x8db8d6(0x6da)][_0x8db8d6(0xa82)],Sprite_Battleback[_0x8db8d6(0x6da)][_0x8db8d6(0xa82)]=function(){const _0x3b5319=_0x8db8d6,_0x418d91=VisuMZ[_0x3b5319(0x602)]['Settings'][_0x3b5319(0x1c2)];if(!_0x418d91)return VisuMZ[_0x3b5319(0x602)][_0x3b5319(0xaf7)][_0x3b5319(0x5fd)](this);const _0x25b998=String(_0x418d91[_0x3b5319(0xa42)])||'MZ';switch(_0x25b998){case'MZ':VisuMZ[_0x3b5319(0x602)][_0x3b5319(0xaf7)][_0x3b5319(0x5fd)](this);break;case _0x3b5319(0x273):this['adjustPosition_1for1']();break;case _0x3b5319(0x96a):this['adjustPosition_ScaleToFit']();break;case _0x3b5319(0x978):this['adjustPosition_ScaleDown']();break;case _0x3b5319(0x49a):this[_0x3b5319(0x302)]();break;}},Sprite_Battleback[_0x8db8d6(0x6da)][_0x8db8d6(0x282)]=function(){const _0x459af7=_0x8db8d6;this['width']=Graphics[_0x459af7(0x5cb)],this[_0x459af7(0x7f5)]=Graphics['height'];const _0x23513d=0x1;this[_0x459af7(0x728)]['x']=_0x23513d,this[_0x459af7(0x728)]['y']=_0x23513d,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x8db8d6(0x326)]=function(){const _0x5aa904=_0x8db8d6;this[_0x5aa904(0x5cb)]=Graphics[_0x5aa904(0x5cb)],this[_0x5aa904(0x7f5)]=Graphics[_0x5aa904(0x7f5)];const _0x537e3e=this[_0x5aa904(0x5cb)]/this[_0x5aa904(0x86a)]['width'],_0xbfa114=this[_0x5aa904(0x7f5)]/this[_0x5aa904(0x86a)]['height'],_0x2733b5=Math[_0x5aa904(0x623)](_0x537e3e,_0xbfa114);this[_0x5aa904(0x728)]['x']=_0x2733b5,this[_0x5aa904(0x728)]['y']=_0x2733b5,this['x']=(Graphics[_0x5aa904(0x5cb)]-this[_0x5aa904(0x5cb)])/0x2,this['y']=Graphics[_0x5aa904(0x7f5)]-this[_0x5aa904(0x7f5)];},Sprite_Battleback['prototype'][_0x8db8d6(0x43a)]=function(){const _0x194824=_0x8db8d6;this[_0x194824(0x5cb)]=Graphics[_0x194824(0x5cb)],this[_0x194824(0x7f5)]=Graphics[_0x194824(0x7f5)];const _0x1557ff=Math[_0x194824(0x8e0)](0x1,this[_0x194824(0x5cb)]/this['bitmap'][_0x194824(0x5cb)]),_0x39d64e=Math[_0x194824(0x8e0)](0x1,this['height']/this['bitmap'][_0x194824(0x7f5)]),_0x36ab82=Math['max'](_0x1557ff,_0x39d64e);this[_0x194824(0x728)]['x']=_0x36ab82,this['scale']['y']=_0x36ab82,this['x']=(Graphics[_0x194824(0x5cb)]-this[_0x194824(0x5cb)])/0x2,this['y']=Graphics[_0x194824(0x7f5)]-this[_0x194824(0x7f5)];},Sprite_Battleback['prototype'][_0x8db8d6(0x302)]=function(){const _0xb8e889=_0x8db8d6;this[_0xb8e889(0x5cb)]=Graphics[_0xb8e889(0x5cb)],this[_0xb8e889(0x7f5)]=Graphics[_0xb8e889(0x7f5)];const _0x1e08e9=Math[_0xb8e889(0x623)](0x1,this[_0xb8e889(0x5cb)]/this[_0xb8e889(0x86a)][_0xb8e889(0x5cb)]),_0x1b5364=Math['max'](0x1,this['height']/this[_0xb8e889(0x86a)][_0xb8e889(0x7f5)]),_0x4153b1=Math[_0xb8e889(0x623)](_0x1e08e9,_0x1b5364);this[_0xb8e889(0x728)]['x']=_0x4153b1,this[_0xb8e889(0x728)]['y']=_0x4153b1,this['x']=(Graphics['width']-this[_0xb8e889(0x5cb)])/0x2,this['y']=Graphics[_0xb8e889(0x7f5)]-this[_0xb8e889(0x7f5)];},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x320)]=function(){const _0x473d54=_0x8db8d6;if(!$gameSystem[_0x473d54(0x6b5)]())return![];return![];},Spriteset_Battle['prototype'][_0x8db8d6(0x8cd)]=function(){return 0x0;},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x83a)]=function(){return 0x0;},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x163)]=Spriteset_Battle[_0x8db8d6(0x6da)]['createLowerLayer'],Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x31e)]=function(){const _0x243f3f=_0x8db8d6;VisuMZ[_0x243f3f(0x602)][_0x243f3f(0x163)][_0x243f3f(0x5fd)](this),this[_0x243f3f(0x2f9)](),this[_0x243f3f(0x46e)](),this[_0x243f3f(0x2ef)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x446)]=Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)],Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)]=function(){const _0x18be74=_0x8db8d6;VisuMZ[_0x18be74(0x602)][_0x18be74(0x446)][_0x18be74(0x5fd)](this),this[_0x18be74(0x3f4)]();},Spriteset_Battle['prototype']['createWeather']=function(){const _0x12d471=_0x8db8d6;this['_weather']=new Weather(),this[_0x12d471(0x556)]['addChild'](this['_weather']);},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x3f4)]=function(){const _0x22b9a3=_0x8db8d6;this['_weather'][_0x22b9a3(0x28e)]=$gameScreen[_0x22b9a3(0xa62)](),this[_0x22b9a3(0xb16)][_0x22b9a3(0xabb)]=$gameScreen[_0x22b9a3(0x444)]();},Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x169)]=function(_0x52831e){const _0x4a8996=_0x8db8d6;$gameScreen['changeWeather'](_0x52831e[0x0],_0x52831e[0x1],_0x52831e[0x2]);if(_0x52831e[0x3])this[_0x4a8996(0x66d)](_0x52831e[0x2]);return!![];},VisuMZ['BattleCore'][_0x8db8d6(0x5a6)]=Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x3f0)],Game_Interpreter[_0x8db8d6(0x6da)][_0x8db8d6(0x3f0)]=function(_0x5b1895){const _0x33d370=_0x8db8d6;if(SceneManager[_0x33d370(0x38c)]())return SceneManager[_0x33d370(0xa4a)]['_spriteset']['changeBattlebacks'](_0x5b1895[0x0],_0x5b1895[0x1]),!![];else{if('AobMV'===_0x33d370(0x5b9)){const _0x3f7abb=_0x40c7b4[_0x33d370(0x5cb)],_0x1c04ca=_0x144ada[_0x33d370(0x423)]((_0x17df4f[_0x33d370(0x3ef)]-_0x3f7abb)/0x2),_0x42186c=this[_0x33d370(0x464)](),_0x23c41a=(_0x46785f[_0x33d370(0x7f5)]-_0x4abdb5[_0x33d370(0x68b)])/-0x2;return new _0x4c1e76(_0x1c04ca,_0x23c41a,_0x3f7abb,_0x42186c);}else return VisuMZ['BattleCore'][_0x33d370(0x5a6)]['call'](this,_0x5b1895);}},Spriteset_Battle['prototype'][_0x8db8d6(0x98a)]=function(_0x4dc996,_0x33e4f5){const _0x4fdf0b=_0x8db8d6;_0x4dc996[_0x4fdf0b(0x86a)]=_0x33e4f5;},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xb08)]=function(_0x32fcb6,_0x328d55){const _0x157aef=_0x8db8d6;_0x32fcb6=_0x32fcb6||'',_0x328d55=_0x328d55||'';_0x32fcb6===''&&_0x328d55===''&&(_0x32fcb6=this[_0x157aef(0x78f)][_0x157aef(0x271)](),_0x328d55=this[_0x157aef(0x86d)][_0x157aef(0x253)]());const _0x14068d=ImageManager[_0x157aef(0x60a)](_0x32fcb6),_0x13a3be=ImageManager['loadBattleback2'](_0x328d55);_0x14068d['addLoadListener'](this[_0x157aef(0xa19)]['bind'](this,this['_back1Sprite'],this[_0x157aef(0x86d)],_0x14068d,_0x13a3be));},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xa19)]=function(_0x441a54,_0x5c98c3,_0x4e7f2a,_0x12af40){const _0x3e0089=_0x8db8d6;_0x12af40[_0x3e0089(0x851)](this[_0x3e0089(0x436)][_0x3e0089(0x998)](this,_0x441a54,_0x5c98c3,_0x4e7f2a,_0x12af40));},Spriteset_Battle[_0x8db8d6(0x6da)]['updateBattlebackBitmap2']=function(_0x570a6b,_0x129549,_0x16a152,_0x47eed2){const _0x301541=_0x8db8d6;_0x570a6b[_0x301541(0x86a)]=_0x16a152,_0x129549[_0x301541(0x86a)]=_0x47eed2,_0x570a6b[_0x301541(0xa82)](),_0x129549[_0x301541(0xa82)]();},VisuMZ['BattleCore'][_0x8db8d6(0x5d1)]=Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x4d3)],Spriteset_Battle['prototype'][_0x8db8d6(0x4d3)]=function(){const _0x54c339=_0x8db8d6;VisuMZ[_0x54c339(0x602)][_0x54c339(0x5d1)]['call'](this),this[_0x54c339(0x9c9)]();},Spriteset_Battle[_0x8db8d6(0x6da)]['createBattleFieldBattleCore']=function(){const _0x54b377=_0x8db8d6;this[_0x54b377(0x532)](),this[_0x54b377(0x7b4)](),this[_0x54b377(0x5bb)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x532)]=function(){const _0x304360=_0x8db8d6;this[_0x304360(0x7d3)]=new Sprite(),this[_0x304360(0x556)][_0x304360(0x9b0)](this[_0x304360(0x7d3)]);},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x7b4)]=function(){const _0x11ecbe=_0x8db8d6;this[_0x11ecbe(0x856)]=new Sprite(),this['_battleField'][_0x11ecbe(0x9b0)](this[_0x11ecbe(0x856)]);},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x5bb)]=function(){const _0x441988=_0x8db8d6;this[_0x441988(0xa71)]=new Sprite(),this[_0x441988(0xa71)]['x']=this[_0x441988(0x556)]['x'],this['_damageContainer']['y']=this[_0x441988(0x556)]['y'],this[_0x441988(0x9b0)](this[_0x441988(0xa71)]);},Spriteset_Battle['prototype'][_0x8db8d6(0x6b2)]=function(){const _0x20cd8b=_0x8db8d6;if(!this[_0x20cd8b(0x320)]())return;this[_0x20cd8b(0x7d3)][_0x20cd8b(0x728)]['x']=-0x1,this[_0x20cd8b(0x7d3)]['x']=this['_battleField'][_0x20cd8b(0x5cb)],this['_animationContainer'][_0x20cd8b(0x728)]['x']=-0x1,this[_0x20cd8b(0x856)]['x']=this[_0x20cd8b(0x556)]['width'],this[_0x20cd8b(0xa71)]['scale']['x']=-0x1,this['_damageContainer']['x']=this[_0x20cd8b(0x556)]['x']+this[_0x20cd8b(0x556)][_0x20cd8b(0x5cb)];},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x3c0)]=function(){const _0x2ad1ec=_0x8db8d6;Imported[_0x2ad1ec(0x730)]&&VisuMZ[_0x2ad1ec(0x753)]['Settings']['UI'][_0x2ad1ec(0x984)]&&this['repositionEnemiesByResolution']();const _0x556b27=$gameTroop[_0x2ad1ec(0xa8f)](),_0x5d8e58=[];for(const _0x37b73a of _0x556b27){_0x5d8e58[_0x2ad1ec(0x43e)](new Sprite_Enemy(_0x37b73a));}_0x5d8e58[_0x2ad1ec(0x5ab)](this['compareEnemySprite'][_0x2ad1ec(0x998)](this));for(const _0x2f4856 of _0x5d8e58){'QSwUo'!==_0x2ad1ec(0x640)?this[_0x2ad1ec(0x7d3)][_0x2ad1ec(0x9b0)](_0x2f4856):(_0x1b18a8=_0x19ba4b['swapEnemyIDs'](_0x4664d6),_0x437632[_0x2ad1ec(0x602)]['Game_Enemy_setup'][_0x2ad1ec(0x5fd)](this,_0x513dbd,_0x1cfa5d,_0xae98e7),_0x589937[_0x2ad1ec(0x9b1)]&&this[_0x2ad1ec(0x819)](),this[_0x2ad1ec(0x7dd)](),this['setupBattleCoreData'](),_0x50bb5b[_0x2ad1ec(0x9b1)]&&this[_0x2ad1ec(0x8cb)]());}this[_0x2ad1ec(0x1e0)]=_0x5d8e58;},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x535)]=function(){const _0x3f5a57=_0x8db8d6;this[_0x3f5a57(0x313)]=[];for(let _0x1a853e=0x0;_0x1a853e<$gameParty[_0x3f5a57(0xb2e)]();_0x1a853e++){if(_0x3f5a57(0x9f7)!=='cQWdP')return this['iterateBattler'](_0x118238[0x0],_0x502243[0x1],_0x23c6e8=>{const _0x54a37e=_0x3f5a57;!_0x23c6e8['isDeathStateAffected']()&&(_0x23c6e8[_0x54a37e(0xa1c)](_0x46bbc1[0x2],_0x580088[0x3]),_0x261e8c[_0x54a37e(0xa1c)](_0x23c6e8));}),!![];else{const _0x5e931a=$gameParty[_0x3f5a57(0x7fb)]()[_0x1a853e],_0x3f7c03=new Sprite_Actor();_0x3f7c03[_0x3f5a57(0x706)](_0x5e931a),_0x3f7c03['setBattler'](_0x5e931a),_0x3f7c03[_0x3f5a57(0x2fb)](),this['_actorSprites'][_0x3f5a57(0x43e)](_0x3f7c03),this[_0x3f5a57(0x7d3)][_0x3f5a57(0x9b0)](_0x3f7c03);}}},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x399)]=function(_0x4dccd4,_0x273fec,_0x34211d,_0x1d01c9){const _0x5a4a6b=_0x8db8d6,_0xeffcbb=this[_0x5a4a6b(0x1b6)](_0x273fec),_0x31463c=new(_0xeffcbb?Sprite_AnimationMV:Sprite_Animation)(),_0x1f3db7=this[_0x5a4a6b(0x8e4)](_0x4dccd4);this[_0x5a4a6b(0x294)](_0x4dccd4[0x0])&&(_0x34211d=!_0x34211d),_0x31463c[_0x5a4a6b(0x476)]=_0x4dccd4,_0x31463c[_0x5a4a6b(0x88c)](_0x1f3db7,_0x273fec,_0x34211d,_0x1d01c9),this[_0x5a4a6b(0x32c)](_0x31463c);},Spriteset_Battle[_0x8db8d6(0x6da)]['addAnimationSpriteToContainer']=function(_0x42699a){const _0xc748a4=_0x8db8d6;if(this[_0xc748a4(0x8bb)](_0x42699a))this['battleStatusWindowAnimationContainer']()[_0xc748a4(0x9b0)](_0x42699a);else{if('NLjwY'===_0xc748a4(0x397)){const _0x586be6=/<BYPASS DAMAGE CAP>/i;if(this[_0xc748a4(0xaf1)]()[_0xc748a4(0x44e)][_0xc748a4(0x3ed)](_0x586be6))return!![];if(this[_0xc748a4(0x4b1)]()['traitObjects']()[_0xc748a4(0xa0a)](_0x540a6a=>_0x540a6a&&_0x540a6a['note']['match'](_0x586be6)))return!![];return!_0x46f6d4[_0xc748a4(0x602)][_0xc748a4(0x466)]['Damage'][_0xc748a4(0x763)];}else this['_animationContainer'][_0xc748a4(0x9b0)](_0x42699a);}this[_0xc748a4(0x26e)][_0xc748a4(0x43e)](_0x42699a);},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x8bb)]=function(_0x55e8b9){const _0x3f72a2=_0x8db8d6;if(!_0x55e8b9)return![];if(!_0x55e8b9[_0x3f72a2(0x6bf)])return![];if(_0x55e8b9[_0x3f72a2(0x6bf)][_0x3f72a2(0x707)]!==0x0)return![];if(!_0x55e8b9[_0x3f72a2(0x476)][0x0])return![];if(!_0x55e8b9[_0x3f72a2(0x476)][0x0][_0x3f72a2(0x367)]())return![];if($gameSystem[_0x3f72a2(0x6b5)]())return![];if(!this[_0x3f72a2(0x28d)]())return![];return Window_BattleStatus['prototype'][_0x3f72a2(0x830)]()===_0x3f72a2(0x9af);},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x28d)]=function(){const _0x3063ef=_0x8db8d6;if(!SceneManager['_scene'])return;if(!SceneManager['_scene'][_0x3063ef(0x98e)])return;if(!SceneManager[_0x3063ef(0xa4a)][_0x3063ef(0x98e)][_0x3063ef(0xb0c)])return;return SceneManager[_0x3063ef(0xa4a)]['_statusWindow']['_effectsContainer'];},Spriteset_Battle['prototype'][_0x8db8d6(0x261)]=function(_0x4455c1){const _0x452c01=_0x8db8d6;this[_0x452c01(0xa39)](_0x4455c1);for(const _0x1128f0 of _0x4455c1['targetObjects']){_0x452c01(0x971)!=='ZWTdb'?(this[_0x452c01(0x98e)][_0x452c01(0x69a)](),this['_enemyWindow'][_0x452c01(0x24c)](),this[_0x452c01(0x426)]['activate']()):_0x1128f0[_0x452c01(0x29d)]&&_0x1128f0[_0x452c01(0x29d)]();}_0x4455c1[_0x452c01(0x5d7)]();},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xa39)]=function(_0x17b69e){const _0xb3900f=_0x8db8d6;this[_0xb3900f(0x26e)][_0xb3900f(0xa8c)](_0x17b69e);if(this[_0xb3900f(0x8bb)](_0x17b69e)){if(_0xb3900f(0x4a8)!==_0xb3900f(0x4a8)){this[_0xb3900f(0x43e)](_0xb3900f(0x647),_0x570f6b);_0x5d2bc1[_0xb3900f(0x602)][_0xb3900f(0x466)][_0xb3900f(0x965)]['CounterPlayback']&&this[_0xb3900f(0x43e)](_0xb3900f(0x41e),_0x38d7c5,[_0x1e1c3c[_0xb3900f(0x7be)]],-0x1);if(!_0x4eb668[_0xb3900f(0x602)][_0xb3900f(0x466)]['BattleLog'][_0xb3900f(0x4ce)])return;this[_0xb3900f(0x43e)](_0xb3900f(0x1d0),_0x239247[_0xb3900f(0x3e2)][_0xb3900f(0xad2)](_0x461a13[_0xb3900f(0x7fd)]()));}else this[_0xb3900f(0x28d)]()[_0xb3900f(0x4f1)](_0x17b69e);}else{if(_0xb3900f(0x46d)!=='IwuTr')this['_animationContainer'][_0xb3900f(0x4f1)](_0x17b69e);else{if(!_0x36e31d[_0xb3900f(0x56b)](_0x472228))return!![];}}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x5fb)]=Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x518)],Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x518)]=function(){const _0x3afbb9=_0x8db8d6;VisuMZ['BattleCore']['Spriteset_Battle_updateActors'][_0x3afbb9(0x5fd)](this),this['updateBattlerContainer']();},Spriteset_Battle['prototype'][_0x8db8d6(0xacd)]=function(){const _0x67f4d7=_0x8db8d6;this[_0x67f4d7(0x7d3)][_0x67f4d7(0x8c2)][_0x67f4d7(0x5ab)](this[_0x67f4d7(0x670)][_0x67f4d7(0x998)](this)),this[_0x67f4d7(0x1f2)]();},Spriteset_Battle['prototype'][_0x8db8d6(0x670)]=function(_0x158d19,_0x39f5b1){const _0xa419e3=_0x8db8d6;if(VisuMZ[_0xa419e3(0x602)]['Settings'][_0xa419e3(0x73a)][_0xa419e3(0x398)]){if(_0x158d19[_0xa419e3(0x980)]&&_0x39f5b1[_0xa419e3(0x980)]){if(_0x158d19[_0xa419e3(0x980)][_0xa419e3(0x367)]()&&_0x39f5b1['_battler'][_0xa419e3(0x26d)]())return _0xa419e3(0x28c)==='tozHG'?0x1:!![];else{if(_0x39f5b1[_0xa419e3(0x980)][_0xa419e3(0x367)]()&&_0x158d19['_battler']['isEnemy']())return _0xa419e3(0xa57)!=='OXZKt'?-0x1:_0x17cae1[_0xa419e3(0x419)]();}}}if(_0x158d19[_0xa419e3(0x214)]!==_0x39f5b1[_0xa419e3(0x214)])return _0x158d19['_baseY']-_0x39f5b1[_0xa419e3(0x214)];else{if('DdpWl'===_0xa419e3(0x5f0)){if(!this[_0xa419e3(0x20f)])return;if(this[_0xa419e3(0x980)]&&this['_battler'][_0xa419e3(0xab1)]()){const _0x24c84c=this[_0xa419e3(0x20f)][_0xa419e3(0x86a)];this[_0xa419e3(0x20f)]['setFrame'](0x0,0x0,_0x24c84c[_0xa419e3(0x5cb)],_0x24c84c[_0xa419e3(0x7f5)]);}else this['_shadowSprite'][_0xa419e3(0x128)](0x0,0x0,0x0,0x0);}else return _0x39f5b1[_0xa419e3(0x724)]-_0x158d19[_0xa419e3(0x724)];}},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x1f2)]=function(){const _0x56cb32=_0x8db8d6;if(!VisuMZ[_0x56cb32(0x602)]['Settings'][_0x56cb32(0x73a)][_0x56cb32(0xa3b)])return;const _0x57d881=BattleManager[_0x56cb32(0x7be)];if(_0x57d881){if(_0x56cb32(0x25b)==='ofgeX'){if(_0x57d881[_0x56cb32(0x367)]()&&!$gameSystem[_0x56cb32(0x6b5)]())return;const _0x40ef85=_0x57d881[_0x56cb32(0x538)]();if(_0x40ef85&&_0x57d881[_0x56cb32(0x367)]())this['_battlerContainer']['addChild'](_0x40ef85);}else _0x3e7f8b[_0x56cb32(0xa1c)](_0x34d2f4[0x2],_0x3359f9[0x3]),_0x2a6713[_0x56cb32(0xa1c)](_0xc3f8b4);}},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xa58)]=function(){const _0x524c63=_0x8db8d6;for(const _0x3bf868 of $gameParty[_0x524c63(0x338)]()){if(!_0x3bf868)continue;if(!_0x3bf868[_0x524c63(0x538)]())continue;_0x3bf868[_0x524c63(0x538)]()[_0x524c63(0x582)]=!![],_0x3bf868[_0x524c63(0x538)]()['retreat']();}},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x46e)]=function(){const _0x1bfb11=_0x8db8d6;this[_0x1bfb11(0x228)]=new Sprite(),this['_battleField'][_0x1bfb11(0x9b0)](this[_0x1bfb11(0x228)]);},Spriteset_Battle['prototype']['createEnemyNames']=function(){const _0x36a2e0=_0x8db8d6;if(VisuMZ[_0x36a2e0(0x602)][_0x36a2e0(0x466)][_0x36a2e0(0x8fe)]['NameLegacy'])return;this[_0x36a2e0(0x999)]=new Sprite(),this[_0x36a2e0(0x228)][_0x36a2e0(0x9b0)](this[_0x36a2e0(0x999)]);for(const _0x3bd7da of this['_enemySprites']){if(_0x36a2e0(0x898)!=='UhlpY'){const _0x47734e=new Sprite_EnemyName();this[_0x36a2e0(0x999)][_0x36a2e0(0x9b0)](_0x47734e),_0x47734e[_0x36a2e0(0x408)](_0x3bd7da);}else{const _0x17ac17=_0x2c7dc0[_0x36a2e0(0x369)]?_0x5840c8[_0x36a2e0(0xb04)]['Settings'][_0x36a2e0(0x9d3)]:_0x15c257[_0x36a2e0(0x602)]['Settings'][_0x36a2e0(0x41d)],_0x47fe70=_0x15ed00[_0x36a2e0(0xb03)][_0x36a2e0(0xa5c)](_0x4c0cc5),_0x10e83a=_0x47fe70?_0x17ac17[_0x36a2e0(0x34a)]:_0x17ac17[_0x36a2e0(0x5a9)];_0x516248='\x5cI[%1]%2'['format'](_0x10e83a,_0x5e2153);}}},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x249)]=function(){return![];},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x6ba)]=function(){const _0x3cb90f=_0x8db8d6;return this[_0x3cb90f(0x81c)]()[_0x3cb90f(0xa0a)](_0x1ab0c5=>_0x1ab0c5['isFloating']());},Spriteset_Battle['prototype'][_0x8db8d6(0xa2a)]=function(){const _0x32ca30=_0x8db8d6;return this[_0x32ca30(0x81c)]()[_0x32ca30(0xa0a)](_0x1ecd87=>_0x1ecd87[_0x32ca30(0x99b)]());},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0x20c)]=function(){const _0x2a278b=_0x8db8d6;return this[_0x2a278b(0x81c)]()[_0x2a278b(0xa0a)](_0x31ae4c=>_0x31ae4c['isGrowing']());},Spriteset_Battle[_0x8db8d6(0x6da)]['isAnyoneSkewing']=function(){const _0x48bd9d=_0x8db8d6;return this[_0x48bd9d(0x81c)]()[_0x48bd9d(0xa0a)](_0x96abf1=>_0x96abf1[_0x48bd9d(0x2dc)]());},Spriteset_Battle['prototype']['isAnyoneSpinning']=function(){const _0x2944a4=_0x8db8d6;return this['battlerSprites']()['some'](_0x581653=>_0x581653[_0x2944a4(0x4ac)]());},Spriteset_Battle[_0x8db8d6(0x6da)][_0x8db8d6(0xa30)]=function(){const _0x561c37=_0x8db8d6;return this[_0x561c37(0x81c)]()['some'](_0x3d781a=>_0x3d781a[_0x561c37(0x1fa)]());},VisuMZ['BattleCore'][_0x8db8d6(0x418)]=Window_ItemList['prototype'][_0x8db8d6(0x34f)],Window_ItemList[_0x8db8d6(0x6da)][_0x8db8d6(0x34f)]=function(){const _0x271089=_0x8db8d6;if(SceneManager[_0x271089(0x38c)]()){if(SceneManager[_0x271089(0xa4a)]['battleLayoutStyle']()===_0x271089(0x816)){if(_0x271089(0x63e)!==_0x271089(0x63e)){if(!_0x27d1a2)return![];return _0x5a1b55[_0x271089(0x296)]()===this[_0x271089(0x1bd)]();}else return VisuMZ[_0x271089(0x602)][_0x271089(0x466)][_0x271089(0xa31)][_0x271089(0x387)];}else return VisuMZ['BattleCore']['Settings'][_0x271089(0xa31)][_0x271089(0x3d9)];}else return VisuMZ[_0x271089(0x602)][_0x271089(0x418)][_0x271089(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x658)]=Window_SkillList[_0x8db8d6(0x6da)]['maxCols'],Window_SkillList['prototype']['maxCols']=function(){const _0x1efcbf=_0x8db8d6;if(SceneManager[_0x1efcbf(0x38c)]()){if(SceneManager[_0x1efcbf(0xa4a)]['battleLayoutStyle']()===_0x1efcbf(0x816)){if('OXFHw'===_0x1efcbf(0x68e)){const _0x1b5610=this[_0x1efcbf(0xa00)];if(_0x1b5610[_0x2dabc4])return _0x1b5610[_0x14feed];else{const _0x4bddb7=new _0x487f51();return _0x1b5610[_0x20d9c9]=_0x4bddb7,this[_0x1efcbf(0x8f0)](_0x4bddb7),this[_0x1efcbf(0x8f0)](this['_cursorArea']),_0x4bddb7;}}else return VisuMZ[_0x1efcbf(0x602)][_0x1efcbf(0x466)][_0x1efcbf(0xa31)][_0x1efcbf(0x387)];}else return VisuMZ[_0x1efcbf(0x602)][_0x1efcbf(0x466)][_0x1efcbf(0xa31)][_0x1efcbf(0x3d9)];}else return VisuMZ[_0x1efcbf(0x602)][_0x1efcbf(0x658)]['call'](this);},VisuMZ['BattleCore'][_0x8db8d6(0xacf)]=Window_Options[_0x8db8d6(0x6da)][_0x8db8d6(0x853)],Window_Options[_0x8db8d6(0x6da)]['addGeneralOptions']=function(){const _0x3c5c17=_0x8db8d6;VisuMZ[_0x3c5c17(0x602)][_0x3c5c17(0xacf)][_0x3c5c17(0x5fd)](this),this[_0x3c5c17(0xa16)](),this[_0x3c5c17(0x981)]();},Window_Options[_0x8db8d6(0x6da)][_0x8db8d6(0xa16)]=function(){const _0x56cd3a=_0x8db8d6;VisuMZ[_0x56cd3a(0x602)]['Settings'][_0x56cd3a(0x91f)][_0x56cd3a(0x720)]&&(this[_0x56cd3a(0x4e7)](),this[_0x56cd3a(0x6d1)]());},Window_Options['prototype'][_0x8db8d6(0x981)]=function(){const _0x5dcd12=_0x8db8d6;if(!VisuMZ[_0x5dcd12(0x602)]['Settings'][_0x5dcd12(0x5d8)][_0x5dcd12(0x50b)])return;const _0x330740=TextManager[_0x5dcd12(0x403)],_0x507386=_0x5dcd12(0x403);this['addCommand'](_0x330740,_0x507386);},Window_Options['prototype'][_0x8db8d6(0x4e7)]=function(){const _0x1554c5=_0x8db8d6,_0xbe51ea=TextManager[_0x1554c5(0x6e6)],_0x113c6b='autoBattleAtStart';this[_0x1554c5(0x878)](_0xbe51ea,_0x113c6b);},Window_Options[_0x8db8d6(0x6da)][_0x8db8d6(0x6d1)]=function(){const _0x53c8b8=_0x8db8d6,_0x2f8e7d=TextManager[_0x53c8b8(0x290)],_0x4d96e9=_0x53c8b8(0x1c7);this[_0x53c8b8(0x878)](_0x2f8e7d,_0x4d96e9);},VisuMZ['BattleCore'][_0x8db8d6(0xb41)]=Window_Options[_0x8db8d6(0x6da)][_0x8db8d6(0x7c2)],Window_Options['prototype']['statusText']=function(_0x578141){const _0x5b967e=_0x8db8d6,_0x3888c7=this['commandSymbol'](_0x578141);if(_0x3888c7===_0x5b967e(0x1c7))return this[_0x5b967e(0x568)]();else{if(_0x5b967e(0x3bf)!=='ZcKtO'){const _0x34828f=_0x677f37['getStypeIdWithName'](_0x508914['$1']);this[_0x5b967e(0xa5f)](_0x34828f);}else return VisuMZ[_0x5b967e(0x602)][_0x5b967e(0xb41)][_0x5b967e(0x5fd)](this,_0x578141);}},Window_Options[_0x8db8d6(0x6da)][_0x8db8d6(0x568)]=function(){const _0x2bffbd=_0x8db8d6,_0x3c4eef=VisuMZ[_0x2bffbd(0x602)][_0x2bffbd(0x466)][_0x2bffbd(0x91f)],_0x4779e6=this[_0x2bffbd(0x7e8)]('autoBattleUseSkills');return _0x4779e6?_0x3c4eef['StyleON']:_0x3c4eef[_0x2bffbd(0x848)];},Window_ShopStatus[_0x8db8d6(0x6da)][_0x8db8d6(0xa0b)]=function(){const _0x3433cd=_0x8db8d6,_0x3df12f=DataManager[_0x3433cd(0x433)](this['_item']),_0x33010d=VisuMZ[_0x3433cd(0x75e)][_0x3df12f];if(!_0x33010d)return this[_0x3433cd(0x769)]();const _0x5320cf=_0x3433cd(0xb43)[_0x3433cd(0xad2)](this[_0x3433cd(0x673)][_0x3433cd(0x1ea)][_0x3433cd(0x28e)]),_0x449dda=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x3433cd(0x673)][_0x3433cd(0x1ea)][_0x3433cd(0x28e)]];return _0x33010d[_0x5320cf][_0x3433cd(0xad2)](_0x449dda);},Window_ShopStatus[_0x8db8d6(0x6da)][_0x8db8d6(0xa08)]=function(){const _0x133919=_0x8db8d6,_0x3cf995=DataManager[_0x133919(0x433)](this['_item']),_0xdf0b11=VisuMZ[_0x133919(0x75e)][_0x3cf995];if(!_0xdf0b11)return this[_0x133919(0x31f)]();return _0xdf0b11[_0x133919(0x4b5)][_0x133919(0x5fd)](this);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x3e5)]=Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)],Window_PartyCommand['prototype'][_0x8db8d6(0x3f1)]=function(_0x265785){const _0x3f8997=_0x8db8d6;VisuMZ[_0x3f8997(0x602)][_0x3f8997(0x3e5)][_0x3f8997(0x5fd)](this,_0x265785),this[_0x3f8997(0x5a1)](_0x265785);},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x5a1)]=function(_0x437eaa){const _0x4eb287=_0x8db8d6,_0x40e545=new Rectangle(0x0,0x0,_0x437eaa[_0x4eb287(0x5cb)],_0x437eaa['height']);this[_0x4eb287(0x954)]=new Window_Base(_0x40e545),this[_0x4eb287(0x954)][_0x4eb287(0x83f)]=0x0,this[_0x4eb287(0x9b0)](this[_0x4eb287(0x954)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x5a8)]=function(){const _0x3f0dbc=_0x8db8d6;Window_Command[_0x3f0dbc(0x6da)][_0x3f0dbc(0x5a8)][_0x3f0dbc(0x5fd)](this);if(this['_commandNameWindow'])this[_0x3f0dbc(0x297)]();},Window_PartyCommand['prototype']['updateCommandNameWindow']=function(){const _0x3bd275=_0x8db8d6,_0x311a72=this[_0x3bd275(0x954)];_0x311a72['contents'][_0x3bd275(0x750)]();const _0x42d1f2=this[_0x3bd275(0x5ca)](this[_0x3bd275(0x79e)]());if(_0x42d1f2===_0x3bd275(0xa95)&&this[_0x3bd275(0x599)]()>0x0){if(_0x3bd275(0x9cb)==='HsGUX'){const _0x592174=this[_0x3bd275(0x385)](this[_0x3bd275(0x79e)]());let _0x5d71af=this[_0x3bd275(0x5ec)](this[_0x3bd275(0x79e)]());_0x5d71af=_0x5d71af[_0x3bd275(0x929)](/\\I\[(\d+)\]/gi,''),_0x311a72[_0x3bd275(0x73c)](),this[_0x3bd275(0xae7)](_0x5d71af,_0x592174),this[_0x3bd275(0x589)](_0x5d71af,_0x592174),this['commandNameWindowCenter'](_0x5d71af,_0x592174);}else _0x5f0c74=_0x3fc68b>=_0x477e92?_0x9a4608:_0x4e291d;}},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0xae7)]=function(_0x1e4cd9,_0x3aa65d){},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x589)]=function(_0x27fa24,_0x50cfbd){const _0x453da8=_0x8db8d6,_0xe7363e=this[_0x453da8(0x954)];_0xe7363e['drawText'](_0x27fa24,0x0,_0x50cfbd['y'],_0xe7363e[_0x453da8(0x8a0)],_0x453da8(0x9e7));},Window_PartyCommand['prototype'][_0x8db8d6(0x3de)]=function(_0x5c5b1a,_0x205b64){const _0x14d011=_0x8db8d6,_0x4843c5=this[_0x14d011(0x954)],_0x3e411c=$gameSystem['windowPadding'](),_0x21cbc2=_0x205b64['x']+Math[_0x14d011(0x1f5)](_0x205b64[_0x14d011(0x5cb)]/0x2)+_0x3e411c;_0x4843c5['x']=_0x4843c5[_0x14d011(0x5cb)]/-0x2+_0x21cbc2,_0x4843c5['y']=Math[_0x14d011(0x1f5)](_0x205b64['height']/0x2);},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x80a)]=function(){const _0x30508c=_0x8db8d6;this[_0x30508c(0x17c)](),this[_0x30508c(0x2e3)](),this[_0x30508c(0x32a)](),this[_0x30508c(0x6f3)](),this['addEscapeCommand']();},Window_PartyCommand[_0x8db8d6(0x6da)]['addFightCommand']=function(){const _0x288b40=_0x8db8d6,_0x200d7e=this[_0x288b40(0x1f8)](),_0x27f58a=VisuMZ[_0x288b40(0x602)][_0x288b40(0x466)][_0x288b40(0x956)][_0x288b40(0x842)],_0x57c16d=_0x200d7e===_0x288b40(0x79c)?TextManager[_0x288b40(0x2eb)]:_0x288b40(0x539)['format'](_0x27f58a,TextManager[_0x288b40(0x2eb)]),_0x32c1f8=this['isFightCommandEnabled']();this['addCommand'](_0x57c16d,_0x288b40(0x2eb),_0x32c1f8);},Window_PartyCommand['prototype']['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x2e3)]=function(){const _0x16b2b0=_0x8db8d6;if(!this[_0x16b2b0(0x276)]())return;const _0xfa1669=this[_0x16b2b0(0x1f8)](),_0x563da9=VisuMZ[_0x16b2b0(0x602)][_0x16b2b0(0x466)]['PartyCmd'][_0x16b2b0(0x8a4)],_0x36baa2=_0xfa1669===_0x16b2b0(0x79c)?TextManager[_0x16b2b0(0x734)]:_0x16b2b0(0x539)[_0x16b2b0(0xad2)](_0x563da9,TextManager[_0x16b2b0(0x734)]),_0x3cf3ec=this['isAutoBattleCommandEnabled']();this[_0x16b2b0(0x878)](_0x36baa2,_0x16b2b0(0x734),_0x3cf3ec);},Window_PartyCommand['prototype'][_0x8db8d6(0x276)]=function(){const _0xfd7115=_0x8db8d6;return VisuMZ['BattleCore']['Settings'][_0xfd7115(0x956)][_0xfd7115(0x73f)];},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x6d7)]=function(){return!![];},Window_PartyCommand[_0x8db8d6(0x6da)]['addCustomCommands']=function(){},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x6f3)]=function(){const _0x402ed1=_0x8db8d6;if(!this['isOptionsCommandAdded']())return;const _0x106976=this[_0x402ed1(0x1f8)](),_0x1de0af=VisuMZ[_0x402ed1(0x602)][_0x402ed1(0x466)][_0x402ed1(0x956)][_0x402ed1(0x948)],_0x5c7b43=_0x106976===_0x402ed1(0x79c)?TextManager['options']:'\x5cI[%1]%2'[_0x402ed1(0xad2)](_0x1de0af,TextManager['options']),_0x523b58=this['isOptionsCommandEnabled']();this[_0x402ed1(0x878)](_0x5c7b43,'options',_0x523b58);},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0xa36)]=function(){const _0x1a3eb0=_0x8db8d6;return VisuMZ['BattleCore'][_0x1a3eb0(0x466)]['PartyCmd'][_0x1a3eb0(0x310)];},Window_PartyCommand[_0x8db8d6(0x6da)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x8db8d6(0xa23)]=function(){const _0x177fb2=_0x8db8d6,_0x2a9649=this[_0x177fb2(0x1f8)](),_0x53d0e0=VisuMZ['BattleCore']['Settings'][_0x177fb2(0x956)][_0x177fb2(0x6e3)],_0x2b2c6a=_0x2a9649===_0x177fb2(0x79c)?TextManager[_0x177fb2(0xa44)]:'\x5cI[%1]%2'[_0x177fb2(0xad2)](_0x53d0e0,TextManager[_0x177fb2(0xa44)]),_0x3baa05=this[_0x177fb2(0x563)]();this['addCommand'](_0x2b2c6a,_0x177fb2(0xa44),_0x3baa05);},Window_PartyCommand['prototype'][_0x8db8d6(0x563)]=function(){const _0x1e6b82=_0x8db8d6;return BattleManager[_0x1e6b82(0x419)]();},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x889)]=function(){const _0x3ba366=_0x8db8d6;return VisuMZ[_0x3ba366(0x602)]['Settings'][_0x3ba366(0x956)][_0x3ba366(0x65d)];},Window_PartyCommand['prototype'][_0x8db8d6(0xade)]=function(_0xafa506){const _0x1b8b4b=_0x8db8d6,_0xd188d0=this[_0x1b8b4b(0x5ca)](_0xafa506);if(_0xd188d0==='iconText'){if(_0x1b8b4b(0x54e)!==_0x1b8b4b(0x286))this['drawItemStyleIconText'](_0xafa506);else{const _0x450711=_0x4d0e5d(_0x1e3849['$1']),_0x223e61=_0x1d8b0b[_0x1b8b4b(0x602)][_0x1b8b4b(0x7c1)](_0x359323,_0x1b8b4b(0x74d));_0x430641[_0x1b8b4b(0x602)][_0x1b8b4b(0x524)](_0x450711,_0x223e61);}}else _0xd188d0===_0x1b8b4b(0xa95)?this['drawItemStyleIcon'](_0xafa506):Window_Command[_0x1b8b4b(0x6da)][_0x1b8b4b(0xade)][_0x1b8b4b(0x5fd)](this,_0xafa506);},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x1f8)]=function(){const _0x1e0059=_0x8db8d6;return VisuMZ['BattleCore'][_0x1e0059(0x466)][_0x1e0059(0x956)]['CmdStyle'];},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x5ca)]=function(_0x81e1c3){const _0x10cc34=_0x8db8d6;if(_0x81e1c3<0x0)return _0x10cc34(0x79c);const _0x4454a6=this[_0x10cc34(0x1f8)]();if(_0x4454a6!==_0x10cc34(0x638))return _0x4454a6;else{if(this[_0x10cc34(0x599)]()>0x0){const _0x4b2b33=this[_0x10cc34(0x5ec)](_0x81e1c3);if(_0x4b2b33[_0x10cc34(0x3ed)](/\\I\[(\d+)\]/i)){const _0x5e0e5c=this[_0x10cc34(0x385)](_0x81e1c3),_0x2c48b1=this['textSizeEx'](_0x4b2b33)[_0x10cc34(0x5cb)];if(_0x2c48b1<=_0x5e0e5c[_0x10cc34(0x5cb)]){if(_0x10cc34(0x72c)===_0x10cc34(0x3ee))this[_0x10cc34(0x68a)](_0x16b7f8,'tp',_0x5ad223+(_0xe8c4d7['TpGaugeOffsetX']||0x0),_0xfb7199+this[_0x10cc34(0xa55)]()*0x2+(_0x4b89fb['TpGaugeOffsetY']||0x0));else return _0x10cc34(0x23b);}else{if(_0x10cc34(0x504)==='sfhkS')this[_0x10cc34(0xa99)]=!![];else return _0x10cc34(0xa95);}}}}return _0x10cc34(0x79c);},Window_PartyCommand['prototype']['drawItemStyleIconText']=function(_0x2e4003){const _0x4d47f7=_0x8db8d6,_0x13bf2c=this['itemLineRect'](_0x2e4003),_0x30c3ab=this[_0x4d47f7(0x5ec)](_0x2e4003),_0x349c19=this['textSizeEx'](_0x30c3ab)[_0x4d47f7(0x5cb)];this[_0x4d47f7(0x69d)](this[_0x4d47f7(0x312)](_0x2e4003));const _0x743372=this[_0x4d47f7(0x889)]();if(_0x743372===_0x4d47f7(0x174))this[_0x4d47f7(0x822)](_0x30c3ab,_0x13bf2c['x']+_0x13bf2c[_0x4d47f7(0x5cb)]-_0x349c19,_0x13bf2c['y'],_0x349c19);else{if(_0x743372==='center'){if(_0x4d47f7(0x65c)!==_0x4d47f7(0x65c))this[_0x4d47f7(0x140)]=_0x1aae1a,this[_0x4d47f7(0x843)][_0x4d47f7(0x86a)]=_0xcec9c7['loadSvActor'](_0x3c39d8);else{const _0x472876=_0x13bf2c['x']+Math[_0x4d47f7(0x1f5)]((_0x13bf2c['width']-_0x349c19)/0x2);this['drawTextEx'](_0x30c3ab,_0x472876,_0x13bf2c['y'],_0x349c19);}}else{if(_0x4d47f7(0x2a6)!==_0x4d47f7(0x9de))this['drawTextEx'](_0x30c3ab,_0x13bf2c['x'],_0x13bf2c['y'],_0x349c19);else return!![];}}},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x76c)]=function(_0x53855d){const _0x2c2ebf=_0x8db8d6;this[_0x2c2ebf(0x5ec)](_0x53855d)[_0x2c2ebf(0x3ed)](/\\I\[(\d+)\]/i);const _0xaf632=Number(RegExp['$1'])||0x0,_0x23e66e=this[_0x2c2ebf(0x385)](_0x53855d),_0x476d8b=_0x23e66e['x']+Math[_0x2c2ebf(0x1f5)]((_0x23e66e[_0x2c2ebf(0x5cb)]-ImageManager[_0x2c2ebf(0x3cf)])/0x2),_0x3e38f5=_0x23e66e['y']+(_0x23e66e[_0x2c2ebf(0x7f5)]-ImageManager[_0x2c2ebf(0x709)])/0x2;this['drawIcon'](_0xaf632,_0x476d8b,_0x3e38f5);},Window_PartyCommand['prototype'][_0x8db8d6(0x24c)]=function(){},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0xa4e)]=function(){const _0xbcc1eb=_0x8db8d6;Window_Command[_0xbcc1eb(0x6da)][_0xbcc1eb(0xa4e)][_0xbcc1eb(0x5fd)](this);const _0x452ccf=this[_0xbcc1eb(0x830)]();_0x452ccf===_0xbcc1eb(0x816)&&(_0xbcc1eb(0x3db)!==_0xbcc1eb(0x3ab)?this['showHelpWindow']():this[_0xbcc1eb(0x97e)]()?delete _0x2307f6[_0xbcc1eb(0x666)][_0xbcc1eb(0x107)]:_0x44b0f5[_0xbcc1eb(0x86f)](_0xbcc1eb(0x107),this['actorCommandCancelTPB']['bind'](this)));},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x830)]=function(){const _0x231cc1=_0x8db8d6;if(this['_battleLayoutStyle'])return this[_0x231cc1(0x491)];return this[_0x231cc1(0x491)]=SceneManager[_0x231cc1(0xa4a)][_0x231cc1(0x830)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x99d)]=function(){const _0x17cdfd=_0x8db8d6,_0x14bee4=VisuMZ[_0x17cdfd(0x602)]['Settings']['PartyCmd'],_0x449433=this[_0x17cdfd(0x1a0)]();switch(_0x449433){case _0x17cdfd(0x2eb):this[_0x17cdfd(0x30a)]['setText'](_0x14bee4['HelpFight']);break;case'autoBattle':this[_0x17cdfd(0x30a)]['setText'](_0x14bee4[_0x17cdfd(0x6a3)]);break;case _0x17cdfd(0x9c1):this[_0x17cdfd(0x30a)][_0x17cdfd(0x453)](_0x14bee4[_0x17cdfd(0x470)]);break;case'escape':this[_0x17cdfd(0x30a)]['setText'](_0x14bee4['HelpEscape']);break;default:this[_0x17cdfd(0x30a)][_0x17cdfd(0x453)]('');break;}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x619)]=Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)],Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)]=function(_0x3ca8b4){const _0x37cc29=_0x8db8d6;VisuMZ[_0x37cc29(0x602)][_0x37cc29(0x619)][_0x37cc29(0x5fd)](this,_0x3ca8b4),this[_0x37cc29(0x5a1)](_0x3ca8b4);},Window_ActorCommand['prototype']['createCommandNameWindow']=function(_0x588caf){const _0x37792f=_0x8db8d6,_0x2eff4d=new Rectangle(0x0,0x0,_0x588caf[_0x37792f(0x5cb)],_0x588caf['height']);this['_commandNameWindow']=new Window_Base(_0x2eff4d),this[_0x37792f(0x954)][_0x37792f(0x83f)]=0x0,this[_0x37792f(0x9b0)](this[_0x37792f(0x954)]),this[_0x37792f(0x297)]();},Window_ActorCommand[_0x8db8d6(0x6da)]['callUpdateHelp']=function(){const _0x500a3d=_0x8db8d6;Window_Command[_0x500a3d(0x6da)][_0x500a3d(0x5a8)]['call'](this);if(this['_commandNameWindow'])this[_0x500a3d(0x297)]();},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x297)]=function(){const _0x28b62a=_0x8db8d6,_0x5cd7ae=this[_0x28b62a(0x954)];_0x5cd7ae[_0x28b62a(0x374)][_0x28b62a(0x750)]();const _0x5b9ef0=this[_0x28b62a(0x5ca)](this[_0x28b62a(0x79e)]());if(_0x5b9ef0===_0x28b62a(0xa95)&&this[_0x28b62a(0x599)]()>0x0){const _0x5ef5d1=this[_0x28b62a(0x385)](this[_0x28b62a(0x79e)]());let _0x16b992=this[_0x28b62a(0x5ec)](this[_0x28b62a(0x79e)]());_0x16b992=_0x16b992[_0x28b62a(0x929)](/\\I\[(\d+)\]/gi,''),_0x5cd7ae[_0x28b62a(0x73c)](),this['commandNameWindowDrawBackground'](_0x16b992,_0x5ef5d1),this[_0x28b62a(0x589)](_0x16b992,_0x5ef5d1),this[_0x28b62a(0x3de)](_0x16b992,_0x5ef5d1);}},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0xae7)]=function(_0x32de6c,_0x3b1640){},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x589)]=function(_0x1ba198,_0x4b652f){const _0x56b5f7=_0x8db8d6,_0x4bb02d=this[_0x56b5f7(0x954)];_0x4bb02d[_0x56b5f7(0xa01)](_0x1ba198,0x0,_0x4b652f['y'],_0x4bb02d[_0x56b5f7(0x8a0)],_0x56b5f7(0x9e7));},Window_ActorCommand[_0x8db8d6(0x6da)]['commandNameWindowCenter']=function(_0x1775e2,_0x58b29b){const _0x2eeb80=_0x8db8d6,_0x332b8c=this['_commandNameWindow'],_0x5b6285=$gameSystem['windowPadding'](),_0x4807b1=_0x58b29b['x']+Math[_0x2eeb80(0x1f5)](_0x58b29b['width']/0x2)+_0x5b6285;_0x332b8c['x']=_0x332b8c[_0x2eeb80(0x5cb)]/-0x2+_0x4807b1,_0x332b8c['y']=Math[_0x2eeb80(0x1f5)](_0x58b29b['height']/0x2);},Window_ActorCommand[_0x8db8d6(0x6da)]['makeCommandList']=function(){const _0x7550cd=_0x8db8d6;if(!this['_actor'])return;const _0x5269c7=this[_0x7550cd(0x88f)][_0x7550cd(0x892)]();for(const _0x488dd3 of _0x5269c7){if(_0x7550cd(0xa48)!==_0x7550cd(0xa48))return _0x175f60[_0x7550cd(0x602)]['Game_Interpreter_command283'][_0x7550cd(0x5fd)](this,_0x4e513f);else this[_0x7550cd(0x2a2)](_0x488dd3['toUpperCase']()[_0x7550cd(0xa51)]());}},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x2a2)]=function(_0x3d62b3){const _0x15c246=_0x8db8d6;_0x3d62b3===_0x15c246(0x264)&&this['addAttackCommand']();if([_0x15c246(0x6dd),_0x15c246(0x75d)][_0x15c246(0xa5c)](_0x3d62b3)){if(_0x15c246(0x115)===_0x15c246(0xb0d))return _0xd32d70[_0x15c246(0x449)]()[_0x15c246(0x5e0)]||0x1;else this[_0x15c246(0x501)]();}_0x3d62b3===_0x15c246(0x7ae)&&this['addGuardCommand']();_0x3d62b3===_0x15c246(0x61d)&&this[_0x15c246(0x800)]();_0x3d62b3===_0x15c246(0x81e)&&this['addEscapeCommand']();_0x3d62b3===_0x15c246(0x472)&&('DDVUn'!=='ddAdI'?this[_0x15c246(0x2e3)]():this['_forcedBattleLayout']=_0x15c246(0x9af));if(_0x3d62b3['match'](/STYPE: (\d+)/i)){const _0x4b54a9=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x4b54a9);}else{if(_0x3d62b3[_0x15c246(0x3ed)](/STYPE: (.*)/i)){const _0x3c5d16=DataManager[_0x15c246(0x33a)](RegExp['$1']);this[_0x15c246(0xa5f)](_0x3c5d16);}}if(_0x3d62b3===_0x15c246(0x1da)){if(_0x15c246(0xa27)===_0x15c246(0xa27))this[_0x15c246(0x39a)]();else{const _0x19b6f5=this['_borderPortraitDuration'],_0x24efc1=this[_0x15c246(0x38f)];_0x24efc1['x']=(_0x24efc1['x']*(_0x19b6f5-0x1)+this[_0x15c246(0x8ea)])/_0x19b6f5,_0x24efc1[_0x15c246(0x83f)]=(_0x24efc1['opacity']*(_0x19b6f5-0x1)+0xff)/_0x19b6f5,this[_0x15c246(0x1af)]--;}}if(_0x3d62b3[_0x15c246(0x3ed)](/SKILL: (\d+)/i)){if('LYyXB'===_0x15c246(0xa88)){const _0x40881b=_0x15c246(0x56e)['format'](_0x4028d7);_0x3a872c[_0x15c246(0x602)]['JS'][_0x578d95]=new _0x1cdb64(_0x40881b);}else{const _0x5c8183=Number(RegExp['$1']);this[_0x15c246(0x7fc)]($dataSkills[_0x5c8183]);}}else{if(_0x3d62b3[_0x15c246(0x3ed)](/SKILL: (.*)/i)){const _0xad85df=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x15c246(0x7fc)]($dataSkills[_0xad85df]);}}_0x3d62b3===_0x15c246(0x76a)&&Imported[_0x15c246(0x3ec)]&&this[_0x15c246(0x759)](),[_0x15c246(0x6c8),_0x15c246(0x47e)][_0x15c246(0xa5c)](_0x3d62b3)&&Imported[_0x15c246(0x650)]&&(_0x15c246(0x509)!=='iwxyA'?this[_0x15c246(0xb39)]():(_0x192b63['BattleCore'][_0x15c246(0x3c3)]['call'](this),this[_0x15c246(0x358)]=this[_0x15c246(0x358)]['filter'](_0x5861b3=>_0x5861b3&&_0x5861b3[_0x15c246(0x38b)]()))),_0x3d62b3===_0x15c246(0x806)&&Imported[_0x15c246(0x21b)]&&this[_0x15c246(0x23f)](!![]);},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x5d9)]=function(){const _0x299769=_0x8db8d6,_0x239c2a=$dataSkills[this[_0x299769(0x88f)][_0x299769(0xa21)]()];if(!_0x239c2a)return;if(!this[_0x299769(0x5b6)](_0x239c2a))return;const _0xb716d3=this[_0x299769(0x1f8)](),_0x46e0cc=DataManager['battleCommandName'](_0x239c2a),_0x1c9fdb=DataManager[_0x299769(0xae8)](_0x239c2a),_0x2afaea=_0xb716d3===_0x299769(0x79c)?_0x46e0cc:_0x299769(0x539)[_0x299769(0xad2)](_0x1c9fdb,_0x46e0cc);this[_0x299769(0x878)](_0x2afaea,_0x299769(0x180),this['_actor'][_0x299769(0x90e)]());},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x2ee)]=function(){const _0x47b905=_0x8db8d6,_0x242bfc=$dataSkills[this['_actor'][_0x47b905(0x295)]()];if(!_0x242bfc)return;if(!this[_0x47b905(0x5b6)](_0x242bfc))return;const _0x49a3cd=this['commandStyle'](),_0x5d505e=DataManager[_0x47b905(0x3f6)](_0x242bfc),_0x5e37c0=DataManager[_0x47b905(0xae8)](_0x242bfc),_0x940b88=_0x49a3cd===_0x47b905(0x79c)?_0x5d505e:'\x5cI[%1]%2'[_0x47b905(0xad2)](_0x5e37c0,_0x5d505e);this['addCommand'](_0x940b88,_0x47b905(0x9a9),this[_0x47b905(0x88f)][_0x47b905(0x4ed)]());},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x800)]=function(){const _0x596ead=_0x8db8d6,_0x11a2ee=this[_0x596ead(0x1f8)](),_0x8b0b30=VisuMZ[_0x596ead(0x602)][_0x596ead(0x466)][_0x596ead(0x41d)][_0x596ead(0x717)],_0x2e2a28=_0x11a2ee===_0x596ead(0x79c)?TextManager['item']:_0x596ead(0x539)[_0x596ead(0xad2)](_0x8b0b30,TextManager[_0x596ead(0xaf1)]),_0x4e6b42=this[_0x596ead(0x61e)]();this[_0x596ead(0x878)](_0x2e2a28,_0x596ead(0xaf1),_0x4e6b42);},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x61e)]=function(){const _0x5ac2ad=_0x8db8d6;return this[_0x5ac2ad(0x88f)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x501)]=function(){const _0x1651cc=_0x8db8d6,_0x53bf5e=this[_0x1651cc(0x88f)][_0x1651cc(0x71f)]();for(const _0x11f3b3 of _0x53bf5e){this['addSkillTypeCommand'](_0x11f3b3);}},Window_ActorCommand[_0x8db8d6(0x6da)]['addSkillTypeCommand']=function(_0x1d0e51){const _0xbbd5e8=_0x8db8d6;let _0x180af3=$dataSystem['skillTypes'][_0x1d0e51];if(!_0x180af3)return;let _0x565a7d=_0x180af3;const _0x4117cc=this['commandStyle']();if(_0x4117cc===_0xbbd5e8(0x79c)){if(_0xbbd5e8(0x116)===_0xbbd5e8(0x116))_0x565a7d=_0x565a7d[_0xbbd5e8(0x929)](/\x1I\[(\d+)\]/gi,''),_0x565a7d=_0x565a7d[_0xbbd5e8(0x929)](/\\I\[(\d+)\]/gi,'');else{_0x2aef00+=_0x766c2d['x']-this['damageOffsetX']();const _0x31c81f=_0x35c245['lineHeight']()*0x3/0x4;_0x276ec7=_0x56e1d8['y']+_0x31c81f,_0x201e31=_0x227e0b['min'](_0xe063a7,_0x4aaaf5['y']+this['y']-this[_0xbbd5e8(0x7f5)]+_0x31c81f);}}else{if(!_0x180af3[_0xbbd5e8(0x3ed)](/\\I\[(\d+)\]/i)){const _0x4d5d5c=Imported[_0xbbd5e8(0x369)]?VisuMZ[_0xbbd5e8(0xb04)][_0xbbd5e8(0x466)][_0xbbd5e8(0x9d3)]:VisuMZ[_0xbbd5e8(0x602)]['Settings']['ActorCmd'],_0x123b31=$dataSystem['magicSkills'][_0xbbd5e8(0xa5c)](_0x1d0e51),_0x176d26=_0x123b31?_0x4d5d5c[_0xbbd5e8(0x34a)]:_0x4d5d5c[_0xbbd5e8(0x5a9)];_0x565a7d=_0xbbd5e8(0x539)[_0xbbd5e8(0xad2)](_0x176d26,_0x180af3);}}this['addCommand'](_0x565a7d,_0xbbd5e8(0x938),!![],_0x1d0e51);},Window_ActorCommand[_0x8db8d6(0x6da)]['addSingleSkillCommands']=function(){const _0xc71884=_0x8db8d6,_0x3b61a8=this[_0xc71884(0x88f)][_0xc71884(0x71f)](),_0x20cc37=this[_0xc71884(0x88f)][_0xc71884(0x90c)]();for(const _0xcb6324 of _0x20cc37){if(_0xc71884(0x733)!=='nLovW')_0x5edd4f=_0x5f1193['concat'](_0x40dec1[_0xc71884(0x6be)](_0x57196a));else{if(!_0xcb6324)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0xc71884(0x17a)!==_0xc71884(0x17a))_0x18416b=_0x1a46bf[_0xc71884(0x929)](/\x1I\[(\d+)\]/gi,''),_0x3db639=_0x463980[_0xc71884(0x929)](/\\I\[(\d+)\]/gi,'');else{if(this[_0xc71884(0x9cd)](_0xcb6324))continue;if(this[_0xc71884(0x314)](_0xcb6324))continue;}}else{if(!_0x3b61a8[_0xc71884(0xa5c)](_0xcb6324[_0xc71884(0x685)])){if(_0xc71884(0x17f)!==_0xc71884(0x181))continue;else{if(!_0x532e30[_0xc71884(0x602)][_0xc71884(0x466)][_0xc71884(0x817)][_0xc71884(0x5f6)])return;_0x3ea5d0['BattleCore']['Window_BattleLog_displayCurrentState'][_0xc71884(0x5fd)](this,_0x28a711);}}}this[_0xc71884(0x7fc)](_0xcb6324);}}},Window_ActorCommand['prototype'][_0x8db8d6(0x9cd)]=function(_0x352890){const _0x391916=_0x8db8d6,_0x1e87fb=this['_actor'][_0x391916(0x71f)](),_0x47d61e=_0x1e87fb[_0x391916(0x691)](_0x5a041e=>DataManager['getSkillTypes'](_0x352890)[_0x391916(0xa5c)](_0x5a041e));return _0x47d61e['length']<=0x0;},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x314)]=function(_0x13fdee){const _0x5ab52e=_0x8db8d6;if(!Window_SkillList[_0x5ab52e(0x6da)][_0x5ab52e(0x7b5)][_0x5ab52e(0x5fd)](this,_0x13fdee))return!![];if(!Window_SkillList[_0x5ab52e(0x6da)][_0x5ab52e(0x6a0)][_0x5ab52e(0x5fd)](this,_0x13fdee))return!![];if(!Window_SkillList[_0x5ab52e(0x6da)][_0x5ab52e(0x880)][_0x5ab52e(0x5fd)](this,_0x13fdee))return!![];return![];},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x7fc)]=function(_0x5ad043){const _0x5f0f9b=_0x8db8d6;if(!_0x5ad043)return;if(!this[_0x5f0f9b(0x5b6)](_0x5ad043))return;const _0x47c834=this[_0x5f0f9b(0x1f8)](),_0x34d227=DataManager[_0x5f0f9b(0x3f6)](_0x5ad043),_0x5c1f5d=DataManager[_0x5f0f9b(0xae8)](_0x5ad043),_0x2febd9=_0x47c834===_0x5f0f9b(0x79c)?_0x34d227:_0x5f0f9b(0x539)[_0x5f0f9b(0xad2)](_0x5c1f5d,_0x34d227),_0x27d41a=this[_0x5f0f9b(0x88f)]['canUse'](_0x5ad043);this['addCommand'](_0x2febd9,_0x5f0f9b(0x97d),_0x27d41a,_0x5ad043['id']);},Window_ActorCommand['prototype'][_0x8db8d6(0x5b6)]=function(_0x182dbb){const _0xb624e7=_0x8db8d6,_0x1d0894=_0x182dbb['note'];if(_0x1d0894['match'](/<COMMAND REQUIRE LEARN>/i)){if(_0xb624e7(0x6cc)===_0xb624e7(0x4d1))!_0xd68ad6['battleMembers']()[_0xb624e7(0xa5c)](this[_0xb624e7(0x327)])&&(this[_0xb624e7(0x327)]=null);else{if(!this['_actor'][_0xb624e7(0x162)](_0x182dbb['id']))return![];}}if(_0x1d0894[_0xb624e7(0x3ed)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0xb624e7(0x88f)]['hasSkill'](_0x182dbb['id']))return![];}const _0x23de95=VisuMZ[_0xb624e7(0x602)][_0xb624e7(0x7c1)](_0x182dbb,_0xb624e7(0x74d));if(VisuMZ[_0xb624e7(0x602)]['JS'][_0x23de95]){if(_0xb624e7(0x405)!=='cAPoW'){if(!VisuMZ[_0xb624e7(0x602)]['JS'][_0x23de95][_0xb624e7(0x5fd)](this,this['_actor'],_0x182dbb))return![];}else _0x4d7f56[_0xb624e7(0x602)]['JS'][_0x165011][_0xb624e7(0x5fd)](this,this[_0xb624e7(0x4b1)](),this[_0xb624e7(0x4b1)](),_0x56d08a,_0x30b5d1);}return VisuMZ[_0xb624e7(0x602)][_0xb624e7(0x8c1)](_0x182dbb);},VisuMZ['BattleCore'][_0x8db8d6(0x8c1)]=function(_0x3a72a1){const _0x472683=_0x8db8d6,_0x491f63=_0x3a72a1[_0x472683(0x44e)];if(_0x491f63[_0x472683(0x3ed)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3b580f=JSON[_0x472683(0xa6a)]('['+RegExp['$1'][_0x472683(0x3ed)](/\d+/g)+']');for(const _0x5bcb6a of _0x3b580f){if(!$gameSwitches[_0x472683(0x56b)](_0x5bcb6a))return![];}return!![];}if(_0x491f63[_0x472683(0x3ed)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x53d5b6=JSON['parse']('['+RegExp['$1'][_0x472683(0x3ed)](/\d+/g)+']');for(const _0x342521 of _0x53d5b6){if(!$gameSwitches['value'](_0x342521))return![];}return!![];}if(_0x491f63[_0x472683(0x3ed)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x472683(0x495)!=='DnGTc')return _0xaea302[_0x472683(0x338)]();else{const _0x493adf=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x558560 of _0x493adf){if($gameSwitches[_0x472683(0x56b)](_0x558560))return!![];}return![];}}if(_0x491f63[_0x472683(0x3ed)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x58f6cc=JSON[_0x472683(0xa6a)]('['+RegExp['$1'][_0x472683(0x3ed)](/\d+/g)+']');for(const _0x2a04ab of _0x58f6cc){if(_0x472683(0x4ef)!==_0x472683(0x4ef))return![];else{if(!$gameSwitches['value'](_0x2a04ab))return!![];}}return![];}if(_0x491f63['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x747047=JSON[_0x472683(0xa6a)]('['+RegExp['$1'][_0x472683(0x3ed)](/\d+/g)+']');for(const _0x1ca0ce of _0x747047){if(_0x472683(0x5fc)!==_0x472683(0xb21)){if(!$gameSwitches[_0x472683(0x56b)](_0x1ca0ce))return!![];}else _0x9e84f5[_0x472683(0x602)][_0x472683(0x2c2)][_0x472683(0x5fd)](this),_0x35663c[_0x472683(0x38c)]()&&this['requestMotion'](_0x472683(0x7a7));}return![];}if(_0x491f63[_0x472683(0x3ed)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x472683(0x6a5)!==_0x472683(0x6a5)){if(!_0x135434[_0x472683(0x38c)]())return;const _0x561d0b=_0x2e30ef[_0x472683(0x307)];_0x561d0b[_0x472683(0x548)]();}else{const _0x6f3ea=JSON[_0x472683(0xa6a)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0xeadd6d of _0x6f3ea){if($gameSwitches[_0x472683(0x56b)](_0xeadd6d))return![];}return!![];}}return!![];},Window_ActorCommand['prototype'][_0x8db8d6(0xa23)]=function(){const _0x1b60c6=_0x8db8d6,_0x44bc47=this[_0x1b60c6(0x1f8)](),_0x1b49c2=VisuMZ[_0x1b60c6(0x602)][_0x1b60c6(0x466)]['PartyCmd'][_0x1b60c6(0x6e3)],_0x113111=_0x44bc47==='text'?TextManager[_0x1b60c6(0xa44)]:_0x1b60c6(0x539)[_0x1b60c6(0xad2)](_0x1b49c2,TextManager['escape']),_0x3185bc=this[_0x1b60c6(0x563)]();this[_0x1b60c6(0x878)](_0x113111,'escape',_0x3185bc);},Window_ActorCommand[_0x8db8d6(0x6da)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x2e3)]=function(){const _0x11da44=_0x8db8d6,_0x2a60f3=this[_0x11da44(0x1f8)](),_0x468651=VisuMZ[_0x11da44(0x602)][_0x11da44(0x466)][_0x11da44(0x956)]['CmdIconAutoBattle'],_0x2868fe=_0x2a60f3==='text'?TextManager[_0x11da44(0x734)]:'\x5cI[%1]%2'[_0x11da44(0xad2)](_0x468651,TextManager['autoBattle']),_0x2d2d74=this[_0x11da44(0x6d7)]();this[_0x11da44(0x878)](_0x2868fe,_0x11da44(0x734),_0x2d2d74);},Window_ActorCommand[_0x8db8d6(0x6da)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x889)]=function(){const _0x2afcd2=_0x8db8d6;return VisuMZ[_0x2afcd2(0x602)]['Settings'][_0x2afcd2(0x41d)][_0x2afcd2(0x65d)];},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0xade)]=function(_0x188d67){const _0x5c333a=_0x8db8d6,_0xe21045=this['commandStyleCheck'](_0x188d67);if(_0xe21045===_0x5c333a(0x23b))this[_0x5c333a(0xa5e)](_0x188d67);else{if(_0xe21045===_0x5c333a(0xa95)){if(_0x5c333a(0x204)!==_0x5c333a(0x4d4))this[_0x5c333a(0x76c)](_0x188d67);else{if(this[_0x5c333a(0x6ae)]())return _0xdb88b9;const _0x28fb18=this[_0x5c333a(0x4b1)](),_0x508cde=_0x3df6ce;let _0x2fa5a3=[],_0x596cd5=[];_0x2fa5a3[_0x5c333a(0x43e)](this[_0x5c333a(0x4eb)]['arPenFlat'],this[_0x5c333a(0x4eb)][_0x5c333a(0x37e)]),_0x596cd5[_0x5c333a(0x43e)](this[_0x5c333a(0x4eb)][_0x5c333a(0x321)],this['_armorPenetration']['arRedRate']);const _0x250bf9=this[_0x5c333a(0xa63)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x36254f=this[_0x5c333a(0xa63)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x56019e=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1493cd=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x2fa5a3=_0x2fa5a3[_0x5c333a(0x668)](_0x508cde[_0x5c333a(0x1f3)]()[_0x5c333a(0x9f8)](_0x15f1c8=>_0x15f1c8&&_0x15f1c8[_0x5c333a(0x44e)][_0x5c333a(0x3ed)](_0x250bf9)?_0x41d923(_0x52d74f['$1']):0x0)),_0x596cd5=_0x596cd5[_0x5c333a(0x668)](_0x508cde[_0x5c333a(0x1f3)]()['map'](_0x2b0a93=>_0x2b0a93&&_0x2b0a93[_0x5c333a(0x44e)][_0x5c333a(0x3ed)](_0x36254f)?_0x517f71(_0x55bbb4['$1'])/0x64:0x0)),_0x2fa5a3=_0x2fa5a3[_0x5c333a(0x668)](_0x28fb18[_0x5c333a(0x1f3)]()['map'](_0xec505a=>_0xec505a&&_0xec505a[_0x5c333a(0x44e)][_0x5c333a(0x3ed)](_0x56019e)?_0x1b31e9(_0x18b174['$1']):0x0)),_0x596cd5=_0x596cd5[_0x5c333a(0x668)](_0x28fb18[_0x5c333a(0x1f3)]()['map'](_0x7c95aa=>_0x7c95aa&&_0x7c95aa['note'][_0x5c333a(0x3ed)](_0x1493cd)?_0x52bcd5(_0x282a09['$1'])/0x64:0x0)),this[_0x5c333a(0xaf1)]()[_0x5c333a(0x44e)][_0x5c333a(0x3ed)](_0x56019e)&&_0x2fa5a3[_0x5c333a(0x43e)](_0x2bc905(_0x4c4372['$1'])),this[_0x5c333a(0xaf1)]()[_0x5c333a(0x44e)]['match'](_0x1493cd)&&_0x596cd5[_0x5c333a(0x43e)](_0x44dc82(_0x4085ca['$1'])),_0x170e92=_0x2fa5a3[_0x5c333a(0x65f)]((_0x1b5e45,_0x56908e)=>_0x1b5e45-_0x56908e,_0x896d57),_0x10a111>0x0&&(_0x469cbb=_0x596cd5[_0x5c333a(0x65f)]((_0xcf7a7f,_0x4ed58d)=>_0xcf7a7f*(0x1-_0x4ed58d),_0x29b20b)),_0x28cbed;}}else Window_Command[_0x5c333a(0x6da)]['drawItem'][_0x5c333a(0x5fd)](this,_0x188d67);}this[_0x5c333a(0x460)](_0x188d67);},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x1f8)]=function(){const _0x4c7a5f=_0x8db8d6;return VisuMZ[_0x4c7a5f(0x602)][_0x4c7a5f(0x466)][_0x4c7a5f(0x41d)][_0x4c7a5f(0x19d)];},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x5ca)]=function(_0x27194b){const _0x27a520=_0x8db8d6;if(_0x27194b<0x0)return _0x27a520(0x79c);const _0x501361=this[_0x27a520(0x1f8)]();if(_0x501361!=='auto')return _0x501361;else{if(this['maxItems']()>0x0){const _0x11c531=this[_0x27a520(0x5ec)](_0x27194b);if(_0x11c531[_0x27a520(0x3ed)](/\\I\[(\d+)\]/i)){if(_0x27a520(0x7e6)!==_0x27a520(0x7e6))_0x1777e5=this[_0x27a520(0x7a6)]()[_0x27a520(0x22f)]||0x0;else{const _0x539521=this['itemLineRect'](_0x27194b),_0x4e2bc0=this[_0x27a520(0x1fc)](_0x11c531)['width'];if(_0x4e2bc0<=_0x539521[_0x27a520(0x5cb)])return _0x27a520(0x23b);else{if(_0x27a520(0x692)!==_0x27a520(0x6a2))return'icon';else _0x9221db[_0x27a520(0x73a)][_0x27a520(0xa3b)]=![];}}}}}return'text';},Window_ActorCommand[_0x8db8d6(0x6da)]['drawItemStyleIconText']=function(_0x1808cd){const _0x2ab708=_0x8db8d6,_0x1e60d3=this[_0x2ab708(0x385)](_0x1808cd),_0x4c799f=this[_0x2ab708(0x5ec)](_0x1808cd),_0x10fdb4=this['textSizeEx'](_0x4c799f)['width'];this[_0x2ab708(0x69d)](this[_0x2ab708(0x312)](_0x1808cd));const _0x2ca8af=this[_0x2ab708(0x889)]();if(_0x2ca8af===_0x2ab708(0x174)){if(_0x2ab708(0x429)===_0x2ab708(0x7f1))return this['isForOpponentBattleCore']();else this[_0x2ab708(0x822)](_0x4c799f,_0x1e60d3['x']+_0x1e60d3['width']-_0x10fdb4,_0x1e60d3['y'],_0x10fdb4);}else{if(_0x2ca8af===_0x2ab708(0x9e7)){const _0xee530a=_0x1e60d3['x']+Math['floor']((_0x1e60d3[_0x2ab708(0x5cb)]-_0x10fdb4)/0x2);this[_0x2ab708(0x822)](_0x4c799f,_0xee530a,_0x1e60d3['y'],_0x10fdb4);}else this[_0x2ab708(0x822)](_0x4c799f,_0x1e60d3['x'],_0x1e60d3['y'],_0x10fdb4);}},Window_ActorCommand['prototype'][_0x8db8d6(0x76c)]=function(_0x37ff2d){const _0x37bd64=_0x8db8d6;this[_0x37bd64(0x5ec)](_0x37ff2d)[_0x37bd64(0x3ed)](/\\I\[(\d+)\]/i);const _0x598fc8=Number(RegExp['$1'])||0x0,_0x49d569=this[_0x37bd64(0x385)](_0x37ff2d),_0x4459f8=_0x49d569['x']+Math['floor']((_0x49d569['width']-ImageManager[_0x37bd64(0x3cf)])/0x2),_0x31dcee=_0x49d569['y']+(_0x49d569[_0x37bd64(0x7f5)]-ImageManager[_0x37bd64(0x709)])/0x2;this[_0x37bd64(0x328)](_0x598fc8,_0x4459f8,_0x31dcee);},Window_ActorCommand[_0x8db8d6(0x6da)]['drawSingleSkillCost']=function(_0x4665cc){const _0x1f42ab=_0x8db8d6;if(!(VisuMZ['BattleCore'][_0x1f42ab(0x466)][_0x1f42ab(0x41d)][_0x1f42ab(0x554)]??!![]))return;const _0x49230d=this[_0x1f42ab(0x51d)](_0x4665cc);if(![_0x1f42ab(0x180),_0x1f42ab(0x9a9),_0x1f42ab(0x97d)][_0x1f42ab(0xa5c)](_0x49230d))return;const _0x4a21a6=this['itemLineRect'](_0x4665cc);let _0x17ad77=null;if(_0x49230d===_0x1f42ab(0x180)){if(_0x1f42ab(0x5e8)!==_0x1f42ab(0x5e8)){let _0x1ee936=_0x232701['BattleCore'][_0x1f42ab(0x4a2)][_0x1f42ab(0x5fd)](this);return this['expRate']&&(_0x1ee936*=this[_0x1f42ab(0x33b)]()),_0x4b6203[_0x1f42ab(0x2f7)](_0x1ee936);}else _0x17ad77=$dataSkills[this['_actor'][_0x1f42ab(0xa21)]()];}else _0x49230d===_0x1f42ab(0x9a9)?_0x17ad77=$dataSkills[this[_0x1f42ab(0x88f)][_0x1f42ab(0x295)]()]:_0x17ad77=$dataSkills[this[_0x1f42ab(0x671)][_0x4665cc]['ext']];this['drawSkillCost'](this[_0x1f42ab(0x88f)],_0x17ad77,_0x4a21a6['x'],_0x4a21a6['y'],_0x4a21a6[_0x1f42ab(0x5cb)]);},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x143)]=function(_0x4d0ce6,_0x2a7e67,_0x1eb644,_0x307536,_0x48cec9){const _0x3b0733=_0x8db8d6;if(!_0x2a7e67)return;if(Imported[_0x3b0733(0x369)]){if(_0x3b0733(0x251)!==_0x3b0733(0x899))Window_Command[_0x3b0733(0x6da)]['drawSkillCost'][_0x3b0733(0x5fd)](this,_0x4d0ce6,_0x2a7e67,_0x1eb644,_0x307536,_0x48cec9);else{const _0x4ede96=_0x376326[_0xf65865[_0x3b0733(0xa66)]],_0x2465c7=_0x4ede96[_0x3b0733(0x69b)]['length']-0x2,_0x5aaff4=_0x4ede96[_0x3b0733(0x69b)][_0x2465c7];if(_0x5aaff4[_0x3b0733(0x92c)]!==0xe6){const _0x2cbefb={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x11ad2e=_0x4ede96[_0x3b0733(0x69b)]['pop']();_0x4ede96[_0x3b0733(0x69b)][_0x3b0733(0x4a1)](_0x2cbefb),_0x4ede96['list'][_0x3b0733(0x4a1)](_0x11ad2e);}}}else _0x3b0733(0xa34)!=='WLsEY'?_0x56bda6=_0x2023ca[this[_0x3b0733(0x88f)][_0x3b0733(0xa21)]()]:Window_SkillList[_0x3b0733(0x6da)]['drawSkillCost'][_0x3b0733(0x5fd)](this,_0x2a7e67,_0x1eb644,_0x307536,_0x48cec9);},Window_ActorCommand[_0x8db8d6(0x6da)]['hide']=function(){},Window_ActorCommand['prototype'][_0x8db8d6(0xa4e)]=function(){const _0x167f19=_0x8db8d6;Window_Command['prototype'][_0x167f19(0xa4e)][_0x167f19(0x5fd)](this);const _0x388d7a=this['battleLayoutStyle']();if(_0x388d7a===_0x167f19(0x816)){if(_0x167f19(0x64e)==='npWrB')this['showHelpWindow']();else{const _0x134734=_0x5a6e39['parse']('['+_0x2f41d8['$1'][_0x167f19(0x3ed)](/\d+/g)+']');for(const _0xff367 of _0x134734){if(_0x2eba1e[_0x167f19(0x56b)](_0xff367))return![];}return!![];}}},Window_ActorCommand['prototype'][_0x8db8d6(0x830)]=function(){const _0x17f028=_0x8db8d6;if(this[_0x17f028(0x491)])return this[_0x17f028(0x491)];return this[_0x17f028(0x491)]=SceneManager[_0x17f028(0xa4a)][_0x17f028(0x830)](),this[_0x17f028(0x491)];},VisuMZ['BattleCore']['Window_ActorCommand_setup']=Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x88c)],Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x88c)]=function(_0x29601e){const _0x3fb5bf=_0x8db8d6,_0x2cde32=this[_0x3fb5bf(0x830)]();if(_0x29601e&&['xp',_0x3fb5bf(0x9af)]['includes'](_0x2cde32))this[_0x3fb5bf(0x930)](_0x29601e);else _0x29601e&&[_0x3fb5bf(0x816)][_0x3fb5bf(0xa5c)](_0x2cde32)&&(this[_0x3fb5bf(0x88b)](_0x29601e),this[_0x3fb5bf(0xfc)]());VisuMZ[_0x3fb5bf(0x602)][_0x3fb5bf(0x3d8)][_0x3fb5bf(0x5fd)](this,_0x29601e),_0x29601e&&$gameTroop[_0x3fb5bf(0x338)]()[_0x3fb5bf(0x5e0)]>0x0&&_0x29601e[_0x3fb5bf(0x538)]()&&_0x29601e[_0x3fb5bf(0x538)]()[_0x3fb5bf(0x6f6)]();},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x930)]=function(_0x1c1e57){const _0x354519=_0x8db8d6,_0x43edeb=Math[_0x354519(0x423)](Graphics[_0x354519(0x3ef)]/0x3),_0x8b9870=Math[_0x354519(0x423)](Graphics[_0x354519(0x3ef)]/$gameParty[_0x354519(0x7fb)]()[_0x354519(0x5e0)]),_0x1dce98=Math[_0x354519(0x8e0)](_0x43edeb,_0x8b9870),_0x1f897c=this[_0x354519(0x601)](VisuMZ[_0x354519(0x602)][_0x354519(0x466)][_0x354519(0xa31)][_0x354519(0x4b8)]),_0x261659=_0x8b9870*_0x1c1e57[_0x354519(0x79e)]()+(_0x8b9870-_0x1dce98)/0x2,_0x49a707=SceneManager[_0x354519(0xa4a)][_0x354519(0x98e)]['y']-_0x1f897c;this[_0x354519(0x3f3)](_0x261659,_0x49a707,_0x1dce98,_0x1f897c),this['createContents'](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x88b)]=function(_0x1a3554){const _0x2978a6=_0x8db8d6,_0x2c18eb=SceneManager['_scene']['partyCommandWindowRectBorderStyle']();this[_0x2978a6(0x3f3)](_0x2c18eb['x'],_0x2c18eb['y'],_0x2c18eb[_0x2978a6(0x5cb)],_0x2c18eb[_0x2978a6(0x7f5)]),this[_0x2978a6(0x2f2)](),this[_0x2978a6(0x218)](0x0);},Window_ActorCommand[_0x8db8d6(0x6da)][_0x8db8d6(0x923)]=function(){const _0x275f09=_0x8db8d6;if(this[_0x275f09(0x627)]){if('CyTrt'===_0x275f09(0x17d))return this['hasSvBattler']()?_0x37429d[_0x275f09(0x602)][_0x275f09(0x466)][_0x275f09(0x73a)][_0x275f09(0x7e1)]:_0x1020f9[_0x275f09(0x602)]['Settings'][_0x275f09(0x8fe)][_0x275f09(0x7e1)];else{const _0x11e4c9=this['_dimmerSprite'][_0x275f09(0x86a)],_0x204563=this['width']-0x8,_0x3f3219=this[_0x275f09(0x7f5)],_0x533194=this[_0x275f09(0x438)],_0x3614b5=ColorManager['dimColor1'](),_0x3acede=ColorManager['dimColor2']();this[_0x275f09(0x627)]['x']=0x4,_0x11e4c9[_0x275f09(0x95e)](_0x204563,_0x3f3219),_0x11e4c9[_0x275f09(0x766)](0x0,0x0,_0x204563,_0x533194,_0x3acede,_0x3614b5,!![]),_0x11e4c9[_0x275f09(0x74b)](0x0,_0x533194,_0x204563,_0x3f3219-_0x533194*0x2,_0x3614b5),_0x11e4c9[_0x275f09(0x766)](0x0,_0x3f3219-_0x533194,_0x204563,_0x533194,_0x3614b5,_0x3acede,!![]),this[_0x275f09(0x627)][_0x275f09(0x128)](0x0,0x0,_0x204563,_0x3f3219);}}},Window_ActorCommand[_0x8db8d6(0x6da)]['updateHelp']=function(){const _0x2546ab=_0x8db8d6;if(!this[_0x2546ab(0x88f)])return;const _0x3be99e=VisuMZ[_0x2546ab(0x602)][_0x2546ab(0x466)]['ActorCmd'],_0xa8ccba=this[_0x2546ab(0x1a0)]();switch(_0xa8ccba){case _0x2546ab(0x180):this[_0x2546ab(0x65b)]($dataSkills[this[_0x2546ab(0x88f)][_0x2546ab(0xa21)]()]);break;case _0x2546ab(0x9a9):this[_0x2546ab(0x65b)]($dataSkills[this[_0x2546ab(0x88f)][_0x2546ab(0x295)]()]);break;case _0x2546ab(0x938):const _0x5a113a=_0x3be99e[_0x2546ab(0x287)],_0x44944e=_0x5a113a[_0x2546ab(0xad2)]($dataSystem[_0x2546ab(0x71f)][this[_0x2546ab(0x82b)]()]);this['_helpWindow']['setText'](_0x44944e);break;case _0x2546ab(0x97d):this['setHelpWindowItem']($dataSkills[this[_0x2546ab(0x82b)]()]);break;case _0x2546ab(0xaf1):this[_0x2546ab(0x30a)][_0x2546ab(0x453)](_0x3be99e[_0x2546ab(0x199)]);break;case _0x2546ab(0xa44):this[_0x2546ab(0x30a)]['setText'](_0x3be99e['HelpEscape']);break;case'autoBattle':this[_0x2546ab(0x30a)]['setText'](_0x3be99e['HelpAutoBattle']);break;default:this[_0x2546ab(0x30a)][_0x2546ab(0x453)]('');break;}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x386)]=Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)],Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)]=function(_0x3ecff3){const _0x33f650=_0x8db8d6;VisuMZ['BattleCore'][_0x33f650(0x386)][_0x33f650(0x5fd)](this,_0x3ecff3),this[_0x33f650(0x859)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x830)]=function(){const _0x51cb81=_0x8db8d6;if(this[_0x51cb81(0x491)])return this[_0x51cb81(0x491)];return this[_0x51cb81(0x491)]=SceneManager[_0x51cb81(0xa4a)][_0x51cb81(0x830)](),this[_0x51cb81(0x491)];},Window_BattleStatus[_0x8db8d6(0x6da)]['initBattleCore']=function(){const _0x1e3c19=_0x8db8d6;this[_0x1e3c19(0x421)]=this[_0x1e3c19(0x4e6)]();const _0x5a98ec=VisuMZ[_0x1e3c19(0x602)][_0x1e3c19(0x466)][_0x1e3c19(0xa31)];_0x5a98ec[_0x1e3c19(0x9b2)]&&(this[_0x1e3c19(0x83f)]=0x0);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x4e6)]=function(){const _0x281c18=_0x8db8d6,_0x157533=VisuMZ[_0x281c18(0x602)]['Settings']['BattleLayout'];if(_0x157533['StatusWindowSkinFilename'])return!![];const _0xf53e6c=this[_0x281c18(0x830)]();switch(_0xf53e6c){case'list':case _0x281c18(0x816):return!![];break;case _0x281c18(0x9e5):case'xp':case _0x281c18(0x9af):default:return![];break;}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x73b)]=function(){const _0x291120=_0x8db8d6;if(this['isFrameVisible']())return 0x0;else{if('YTCIL'===_0x291120(0x247))this[_0x291120(0x4e6)]()?_0x32c169[_0x291120(0x6da)][_0x291120(0x86c)][_0x291120(0x5fd)](this):this[_0x291120(0x438)]=0x8;else return 0xa;}},Window_BattleStatus['prototype'][_0x8db8d6(0x34f)]=function(){const _0x35666d=_0x8db8d6,_0x186c4c=this[_0x35666d(0x830)]();switch(_0x186c4c){case _0x35666d(0x69b):return 0x1;break;case'xp':case _0x35666d(0x9af):return $gameParty[_0x35666d(0x7fb)]()['length'];break;case _0x35666d(0x9e5):default:return $gameParty[_0x35666d(0xb2e)]();break;}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x95a)]=function(){const _0x5361c5=_0x8db8d6,_0x387bbe=this[_0x5361c5(0x830)]();switch(_0x387bbe){case _0x5361c5(0x69b):return Window_StatusBase[_0x5361c5(0x6da)][_0x5361c5(0x95a)][_0x5361c5(0x5fd)](this);break;case _0x5361c5(0x9e5):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x8db8d6(0x7cb)]=function(){const _0x6e1602=_0x8db8d6,_0x2d5735=this['battleLayoutStyle']();switch(_0x2d5735){case _0x6e1602(0x69b):return Window_StatusBase[_0x6e1602(0x6da)][_0x6e1602(0x7cb)][_0x6e1602(0x5fd)](this);break;case'default':case'xp':case _0x6e1602(0x9af):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x8db8d6(0x86c)]=function(){const _0x53bfe6=_0x8db8d6;if(this[_0x53bfe6(0x4e6)]()){if(_0x53bfe6(0x351)==='Rcory')Window_StatusBase[_0x53bfe6(0x6da)][_0x53bfe6(0x86c)][_0x53bfe6(0x5fd)](this);else{if(_0x1e2d0f>_0x15c7d8[_0x53bfe6(0x94f)])_0x1214da=![];if(_0x1763c4<_0xf21ac8[_0x53bfe6(0x94f)])_0x3455b8=!![];}}else this[_0x53bfe6(0x438)]=0x8;},Window_BattleStatus['prototype'][_0x8db8d6(0x497)]=function(){const _0xa9f08a=_0x8db8d6,_0x421318=VisuMZ[_0xa9f08a(0x602)][_0xa9f08a(0x466)][_0xa9f08a(0xa31)];_0x421318[_0xa9f08a(0x625)]?this[_0xa9f08a(0x23e)]=ImageManager['loadSystem'](_0x421318['StatusWindowSkinFilename']):_0xa9f08a(0x42d)!==_0xa9f08a(0x435)?Window_StatusBase[_0xa9f08a(0x6da)][_0xa9f08a(0x497)][_0xa9f08a(0x5fd)](this):this[_0xa9f08a(0x63d)](![]);},Window_BattleStatus[_0x8db8d6(0x6da)]['drawItemBackground']=function(_0x2a7eba){const _0x294c29=_0x8db8d6,_0x3e520d=VisuMZ[_0x294c29(0x602)][_0x294c29(0x466)]['BattleLayout'];if(_0x3e520d['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x294c29(0x6da)][_0x294c29(0x92e)][_0x294c29(0x5fd)](this,_0x2a7eba);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x85d)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus['prototype'][_0x8db8d6(0x2fb)]=function(){const _0x7f6459=_0x8db8d6;Window_StatusBase[_0x7f6459(0x6da)][_0x7f6459(0x2fb)][_0x7f6459(0x5fd)](this),this[_0x7f6459(0xaca)](),this['updateEffectContainers']();if(this[_0x7f6459(0x830)]()==='border')this[_0x7f6459(0x10b)]();},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0xaca)]=function(){const _0x4a4a85=_0x8db8d6;if($gameTemp['isBattleRefreshRequested']())this[_0x4a4a85(0x9a7)](),this['_requestRefresh']=![],$gameTemp[_0x4a4a85(0x672)]();else this[_0x4a4a85(0xa99)]&&(this['_requestRefresh']=![],this[_0x4a4a85(0x548)](),this[_0x4a4a85(0x417)]());},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x69a)]=function(){const _0x53ac59=_0x8db8d6;Window_StatusBase['prototype'][_0x53ac59(0x69a)][_0x53ac59(0x5fd)](this);if(!$gameSystem[_0x53ac59(0x6b5)]())this[_0x53ac59(0x548)]();},Window_BattleStatus[_0x8db8d6(0x6da)]['hide']=function(){const _0x5c103e=_0x8db8d6;if(this[_0x5c103e(0x5f5)]===Window_BattleStatus)return;Window_StatusBase[_0x5c103e(0x6da)][_0x5c103e(0x24c)][_0x5c103e(0x5fd)](this);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x964)]=function(_0x4a5fa8){const _0xe0a324=_0x8db8d6,_0x450fa6=this[_0xe0a324(0x830)]();switch(_0x450fa6){case'xp':case'portrait':break;case _0xe0a324(0x9e5):case _0xe0a324(0x69b):case _0xe0a324(0x816):default:return Window_StatusBase[_0xe0a324(0x6da)][_0xe0a324(0x964)]['call'](this,_0x4a5fa8);break;}},VisuMZ[_0x8db8d6(0x602)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0xfd)],Window_BattleStatus['prototype']['drawItemImage']=function(_0xbd47d2){const _0x16ecce=_0x8db8d6,_0xf4d472=this[_0x16ecce(0x830)]();switch(_0xf4d472){case _0x16ecce(0x69b):this[_0x16ecce(0x787)](_0xbd47d2);break;case'xp':this[_0x16ecce(0x1fb)](_0xbd47d2);break;case _0x16ecce(0x9af):this[_0x16ecce(0x2de)](_0xbd47d2);break;case _0x16ecce(0x9e5):case _0x16ecce(0x816):default:VisuMZ['BattleCore'][_0x16ecce(0x64a)]['call'](this,_0xbd47d2);break;}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x579)]=function(_0x56decb){const _0x27ac37=_0x8db8d6,_0x18d69b=this[_0x27ac37(0x830)]();if(!$gameSystem[_0x27ac37(0x6b5)]())this[_0x27ac37(0x8f8)](_0x56decb);switch(_0x18d69b){case _0x27ac37(0x69b):this[_0x27ac37(0x51b)](_0x56decb);break;case'xp':case _0x27ac37(0x9af):case _0x27ac37(0x9e5):case _0x27ac37(0x816):default:this[_0x27ac37(0x324)](_0x56decb);break;}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x5f2)]=function(){const _0x56c9d5=_0x8db8d6,_0xc486bb=this['battleLayoutStyle']();if(['xp']['includes'](_0xc486bb)&&!$gameSystem[_0x56c9d5(0x6b5)]()){if('zYmZt'===_0x56c9d5(0x89f))return _0x4e6431['filter'](_0x53ed05=>_0x53ed05[_0x56c9d5(0xb02)]());else{this[_0x56c9d5(0x1d7)](0x0,0x0,0x0,0x0);return;}}Window_StatusBase['prototype'][_0x56c9d5(0x5f2)][_0x56c9d5(0x5fd)](this);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x8f8)]=function(_0x103180){const _0x56c286=_0x8db8d6,_0x42b745=this[_0x56c286(0x306)](_0x103180)[_0x56c286(0x538)]();if(!_0x42b745)return;const _0x53df37=this['battleLayoutStyle'](),_0x4fa7af=this[_0x56c286(0x90a)](_0x103180);let _0x48c0d3=Math[_0x56c286(0x423)](_0x4fa7af['x']+_0x4fa7af['width']/0x2)+this[_0x56c286(0x438)];if(['list'][_0x56c286(0xa5c)](_0x53df37)){if('NOoXG'!=='NOoXG'){if(_0x1aa6b9[_0x56c286(0x779)])this['displayItemMessage'](_0x12ac29['useItem'],_0x4c71bd,_0x2ffead);}else _0x48c0d3=_0x4fa7af[_0x56c286(0x5cb)]/$gameParty[_0x56c286(0x7fb)]()[_0x56c286(0x5e0)],_0x48c0d3*=_0x103180,_0x48c0d3+=_0x4fa7af['width']/$gameParty[_0x56c286(0x7fb)]()[_0x56c286(0x5e0)]/0x2;}let _0x1dc723=Math[_0x56c286(0x423)](this['frontviewSpriteY'](_0x103180,_0x42b745,_0x4fa7af));_0x42b745[_0x56c286(0x461)](_0x48c0d3,_0x1dc723),this[_0x56c286(0x1a1)](_0x42b745,0x1),_0x42b745[_0x56c286(0x69a)]();},Window_BattleStatus['prototype'][_0x8db8d6(0x9f4)]=function(_0x85cbc7,_0x37f1dd,_0x1daac9){const _0x5cae6a=_0x8db8d6,_0x12d46b=VisuMZ['BattleCore'][_0x5cae6a(0x466)][_0x5cae6a(0xa31)],_0x1e1e8b=this[_0x5cae6a(0x830)]();if(_0x1e1e8b==='xp'){const _0xcdea34=_0x12d46b['XPSpriteYLocation'];switch(_0xcdea34[_0x5cae6a(0x80e)]()['trim']()){case _0x5cae6a(0x6ed):return _0x1daac9[_0x5cae6a(0x7f5)]-_0x37f1dd[_0x5cae6a(0x20f)][_0x5cae6a(0x7f5)]/0x4;break;case _0x5cae6a(0x9e7):const _0x49ee53=_0x12d46b['XPActorDefaultHeight'];return(_0x1daac9[_0x5cae6a(0x7f5)]+(_0x37f1dd[_0x5cae6a(0x7f5)]||_0x49ee53))/0x2;break;case _0x5cae6a(0x54d):return 0x0;case'name':default:return this[_0x5cae6a(0x3fa)](_0x1daac9);break;}}else{if(_0x1e1e8b==='portrait'){}}return _0x37f1dd[_0x5cae6a(0x7f5)];},Window_BattleStatus[_0x8db8d6(0x6da)]['drawItemImageListStyle']=function(_0x542f9c){const _0x9616a7=_0x8db8d6;if(!VisuMZ['BattleCore'][_0x9616a7(0x466)][_0x9616a7(0xa31)][_0x9616a7(0x741)])return;const _0x155ba3=this[_0x9616a7(0x306)](_0x542f9c),_0x21cff8=this[_0x9616a7(0x90a)](_0x542f9c);_0x21cff8[_0x9616a7(0x5cb)]=ImageManager[_0x9616a7(0x587)],_0x21cff8[_0x9616a7(0x7f5)]-=0x2,this['drawActorFace'](_0x155ba3,_0x21cff8['x']+0x1,_0x21cff8['y']+0x1,_0x21cff8[_0x9616a7(0x5cb)],_0x21cff8[_0x9616a7(0x7f5)]);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x51b)]=function(_0x7cfb0c){const _0x157c5d=_0x8db8d6,_0x55f0a9=VisuMZ['BattleCore']['Settings'][_0x157c5d(0xa31)],_0x5b5baa=$dataSystem['optDisplayTp']?0x4:0x3,_0x4edd5a=_0x5b5baa*0x80+(_0x5b5baa-0x1)*0x8+0x4,_0x726adf=this[_0x157c5d(0x306)](_0x7cfb0c),_0x55ed38=this[_0x157c5d(0x90a)](_0x7cfb0c);let _0x4739b5=_0x55ed38['x']+this['padding'];if(_0x55f0a9[_0x157c5d(0x741)])_0x4739b5=_0x55ed38['x']+ImageManager[_0x157c5d(0x587)]+0x8;else{if('Cpghe'!=='Cpghe'){this[_0x157c5d(0xa9c)](),this[_0x157c5d(0x439)](),this[_0x157c5d(0x9e0)](),this['updateFlip'](),this[_0x157c5d(0x8d8)](),_0x10bd0c[_0x157c5d(0x602)]['Sprite_Battler_updateMain'][_0x157c5d(0x5fd)](this);if(this[_0x157c5d(0x5f5)]===_0x2df15d)this[_0x157c5d(0x93d)]();}else _0x4739b5+=ImageManager[_0x157c5d(0x3cf)];}const _0x4748ae=Math['round'](Math['min'](_0x55ed38['x']+_0x55ed38[_0x157c5d(0x5cb)]-_0x4edd5a,_0x4739b5)),_0x3d26ad=Math[_0x157c5d(0x423)](_0x55ed38['y']+(_0x55ed38['height']-Sprite_Name[_0x157c5d(0x6da)][_0x157c5d(0x641)]())/0x2),_0x212717=Math[_0x157c5d(0x423)](_0x4748ae-ImageManager[_0x157c5d(0x3cf)]/0x2-0x4),_0x254cc9=Math[_0x157c5d(0x423)](_0x55ed38['y']+(_0x55ed38[_0x157c5d(0x7f5)]-ImageManager['iconHeight'])/0x2+ImageManager['iconHeight']/0x2);let _0x2136e6=_0x4748ae+0x88;const _0x2543a5=_0x3d26ad;this[_0x157c5d(0x9fa)](_0x726adf,_0x4748ae-0x4+(_0x55f0a9[_0x157c5d(0x661)]||0x0),_0x3d26ad+(_0x55f0a9[_0x157c5d(0x4fd)]||0x0)),this['placeActorName'](_0x726adf,_0x4748ae+(_0x55f0a9[_0x157c5d(0x292)]||0x0),_0x3d26ad+(_0x55f0a9[_0x157c5d(0x2b3)]||0x0)),this[_0x157c5d(0x541)](_0x726adf,_0x212717+(_0x55f0a9[_0x157c5d(0x5ed)]||0x0),_0x254cc9+(_0x55f0a9['StateIconOffsetY']||0x0)),this['placeGauge'](_0x726adf,'hp',_0x2136e6+0x88*0x0+(_0x55f0a9[_0x157c5d(0x14b)]||0x0),_0x2543a5+(_0x55f0a9[_0x157c5d(0x760)]||0x0)),this[_0x157c5d(0x68a)](_0x726adf,'mp',_0x2136e6+0x88*0x1+(_0x55f0a9[_0x157c5d(0x72b)]||0x0),_0x2543a5+(_0x55f0a9['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x157c5d(0x68a)](_0x726adf,'tp',_0x2136e6+0x88*0x2+(_0x55f0a9[_0x157c5d(0x624)]||0x0),_0x2543a5+(_0x55f0a9['TpGaugeOffsetY']||0x0));},Window_BattleStatus['prototype'][_0x8db8d6(0x1fb)]=function(_0x9c50eb){const _0x54768b=_0x8db8d6;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x54768b(0x64a)]['call'](this,_0x9c50eb);},Window_BattleStatus['prototype']['drawItemStatusXPStyle']=function(_0x3d2a2e){const _0x304b90=_0x8db8d6,_0x332dd7=VisuMZ[_0x304b90(0x602)][_0x304b90(0x466)][_0x304b90(0xa31)],_0x4b5568=this[_0x304b90(0x306)](_0x3d2a2e),_0x4324ca=this[_0x304b90(0x90a)](_0x3d2a2e),_0x5ce286=Math[_0x304b90(0x423)](_0x4324ca['x']+(_0x4324ca[_0x304b90(0x5cb)]-0x80)/0x2),_0x487c57=this[_0x304b90(0x3fa)](_0x4324ca);let _0x35aaf0=_0x5ce286-ImageManager[_0x304b90(0x3cf)]/0x2-0x4,_0x4d6011=_0x487c57+ImageManager[_0x304b90(0x709)]/0x2;_0x35aaf0-ImageManager[_0x304b90(0x3cf)]/0x2<_0x4324ca['x']&&(_0x35aaf0=_0x5ce286+ImageManager[_0x304b90(0x3cf)]/0x2-0x4,_0x4d6011=_0x487c57-ImageManager[_0x304b90(0x709)]/0x2);const _0x13a6ad=_0x5ce286,_0x1b5334=this[_0x304b90(0x4d8)](_0x4324ca);this[_0x304b90(0x9fa)](_0x4b5568,_0x5ce286+(_0x332dd7[_0x304b90(0x661)]||0x0),_0x487c57+(_0x332dd7[_0x304b90(0x4fd)]||0x0)),this[_0x304b90(0x170)](_0x4b5568,_0x5ce286+(_0x332dd7[_0x304b90(0x292)]||0x0),_0x487c57+(_0x332dd7['NameOffsetY']||0x0)),this[_0x304b90(0x541)](_0x4b5568,_0x35aaf0+(_0x332dd7[_0x304b90(0x5ed)]||0x0),_0x4d6011+(_0x332dd7[_0x304b90(0xa43)]||0x0)),this[_0x304b90(0x68a)](_0x4b5568,'hp',_0x13a6ad+(_0x332dd7[_0x304b90(0x14b)]||0x0),_0x1b5334+(_0x332dd7[_0x304b90(0x760)]||0x0)),this[_0x304b90(0x68a)](_0x4b5568,'mp',_0x13a6ad+(_0x332dd7['MpGaugeOffsetX']||0x0),_0x1b5334+this['gaugeLineHeight']()+(_0x332dd7['MpGaugeOffsetY']||0x0)),$dataSystem[_0x304b90(0x3d6)]&&('HkZmP'!==_0x304b90(0x4a4)?(this[_0x304b90(0x499)](),this[_0x304b90(0x232)]=null,this[_0x304b90(0x457)]=![]):this[_0x304b90(0x68a)](_0x4b5568,'tp',_0x13a6ad+(_0x332dd7[_0x304b90(0x624)]||0x0),_0x1b5334+this[_0x304b90(0xa55)]()*0x2+(_0x332dd7[_0x304b90(0x808)]||0x0)));},Window_BattleStatus[_0x8db8d6(0x6da)]['showPortraits']=function(_0x5c521c){const _0x4e9ff8=_0x8db8d6;if(!VisuMZ[_0x4e9ff8(0x602)][_0x4e9ff8(0x466)][_0x4e9ff8(0xa31)][_0x4e9ff8(0x330)])return![];if(_0x5c521c[_0x4e9ff8(0x9a6)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x5c521c[_0x4e9ff8(0x3bb)]();},Game_Actor[_0x8db8d6(0x6da)][_0x8db8d6(0xa61)]=function(){const _0x2a0145=_0x8db8d6;if(this['actor']()[_0x2a0145(0x44e)][_0x2a0145(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x2a0145(0x44e)][_0x2a0145(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x8db8d6(0x6da)]['getBattlePortraitOffsetY']=function(){const _0x4b13e9=_0x8db8d6;if(this[_0x4b13e9(0x306)]()[_0x4b13e9(0x44e)][_0x4b13e9(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()['note'][_0x4b13e9(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x2de)]=function(_0xccec1f){const _0x1bffa0=_0x8db8d6,_0xf9ad84=this[_0x1bffa0(0x306)](_0xccec1f);if(this[_0x1bffa0(0xb13)](_0xf9ad84)){if(_0x1bffa0(0x679)!==_0x1bffa0(0x7f6)){const _0x273079=_0x1bffa0(0x825)[_0x1bffa0(0xad2)](_0xf9ad84['actorId']()),_0x19efd8=this[_0x1bffa0(0x2bb)](_0x273079,Sprite),_0xdc9d8d=_0xf9ad84[_0x1bffa0(0x24d)]();_0xdc9d8d!==''?_0x19efd8['bitmap']=ImageManager[_0x1bffa0(0x3ff)](_0xdc9d8d):_0x19efd8[_0x1bffa0(0x86a)]=ImageManager[_0x1bffa0(0x390)];const _0x20ad24=this['itemRect'](_0xccec1f);_0x19efd8[_0x1bffa0(0x347)]['x']=0.5,_0x19efd8[_0x1bffa0(0x347)]['y']=0x1;let _0x5a18e9=Math[_0x1bffa0(0x423)](_0x20ad24['x']+_0x20ad24['width']/0x2)+this['padding'];_0x5a18e9+=_0xf9ad84[_0x1bffa0(0xa61)]();let _0x4ff137=Math[_0x1bffa0(0x423)](this['height']);_0x4ff137+=_0xf9ad84[_0x1bffa0(0x238)](),_0x19efd8['move'](_0x5a18e9,_0x4ff137);const _0x4b0761=VisuMZ['BattleCore'][_0x1bffa0(0x466)]['BattleLayout'][_0x1bffa0(0x208)];_0x19efd8[_0x1bffa0(0x728)]['x']=_0x4b0761,_0x19efd8[_0x1bffa0(0x728)]['y']=_0x4b0761,_0x19efd8['show']();}else this[_0x1bffa0(0x393)](_0x1bffa0(0x4d2)),_0x5c6052[_0x1bffa0(0x485)]['processEscape'](),_0x540aae[_0x1bffa0(0x602)][_0x1bffa0(0x8c8)][_0x1bffa0(0x5fd)](this),this[_0x1bffa0(0x335)]('EscapeSuccess');}else{if('wnjde'===_0x1bffa0(0x3d3)){const _0x27011=this[_0x1bffa0(0x9c7)](_0xccec1f);this[_0x1bffa0(0x445)](_0xf9ad84,_0x27011['x'],_0x27011['y'],_0x27011[_0x1bffa0(0x5cb)],_0x27011[_0x1bffa0(0x7f5)]);}else{const _0x560374=this['_cursorArea'][_0x1bffa0(0x6bb)]['apply'](new _0x3b8756(0x0,0x0)),_0x4a346e=this[_0x1bffa0(0x38d)][_0x1bffa0(0x9fe)];_0x4a346e['x']=_0x560374['x']+this[_0x1bffa0(0x6b9)]['x'],_0x4a346e['y']=_0x560374['y']+this[_0x1bffa0(0x6b9)]['y'],_0x4a346e[_0x1bffa0(0x5cb)]=this['innerWidth'],_0x4a346e[_0x1bffa0(0x7f5)]=this[_0x1bffa0(0x36f)];}}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x2bb)]=function(_0x3271e3,_0x186534){const _0x2978bb=_0x8db8d6,_0x37f19f=this[_0x2978bb(0xa00)];if(_0x37f19f[_0x3271e3])return _0x37f19f[_0x3271e3];else{const _0x340441=new _0x186534();return _0x37f19f[_0x3271e3]=_0x340441,this['addChildToBack'](_0x340441),this[_0x2978bb(0x8f0)](this[_0x2978bb(0x38d)]),_0x340441;}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x15f)]=function(){const _0x8ebda5=_0x8db8d6;this[_0x8ebda5(0x1e4)](),this[_0x8ebda5(0x2ae)](),Window_StatusBase['prototype'][_0x8ebda5(0x15f)][_0x8ebda5(0x5fd)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x1e4)]=function(){const _0x52910b=_0x8db8d6;this[_0x52910b(0x38d)]=new Sprite(),this[_0x52910b(0x38d)][_0x52910b(0x30b)]=[new PIXI[(_0x52910b(0x30b))][(_0x52910b(0x676))]()],this[_0x52910b(0x38d)][_0x52910b(0x9fe)]=new Rectangle(),this[_0x52910b(0x38d)][_0x52910b(0x3f3)](this[_0x52910b(0x9ee)],this[_0x52910b(0x9ee)]),this['addChild'](this[_0x52910b(0x38d)]);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x2ae)]=function(){const _0x40ee7a=_0x8db8d6;this[_0x40ee7a(0xb0c)]=new Sprite(),this[_0x40ee7a(0x9b0)](this[_0x40ee7a(0xb0c)]);},Window_BattleStatus['prototype'][_0x8db8d6(0x778)]=function(){const _0x1ea099=_0x8db8d6;this['_damageContainer']=new Sprite(),this['addChild'](this[_0x1ea099(0xa71)]);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x364)]=function(){const _0x41f7e1=_0x8db8d6;this[_0x41f7e1(0x7ab)]=new Sprite();for(let _0x1335c5=0x0;_0x1335c5<0x9;_0x1335c5++){this[_0x41f7e1(0x7ab)][_0x41f7e1(0x9b0)](new Sprite());}this[_0x41f7e1(0x38d)]['addChild'](this[_0x41f7e1(0x7ab)]);},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x291)]=function(){const _0x91ee2e=_0x8db8d6;Window_StatusBase[_0x91ee2e(0x6da)][_0x91ee2e(0x291)][_0x91ee2e(0x5fd)](this),this[_0x91ee2e(0x10e)]();},Window_BattleStatus[_0x8db8d6(0x6da)]['_updateCursorArea']=function(){const _0xd1b2fd=_0x8db8d6,_0x1db84d=this[_0xd1b2fd(0x9ee)];this[_0xd1b2fd(0x38d)][_0xd1b2fd(0x3f3)](_0x1db84d,_0x1db84d),this['_cursorArea']['x']=_0x1db84d-this[_0xd1b2fd(0x6b9)]['x'],this[_0xd1b2fd(0x38d)]['y']=_0x1db84d-this[_0xd1b2fd(0x6b9)]['y'];if(this[_0xd1b2fd(0x8a0)]>0x0&&this[_0xd1b2fd(0x36f)]>0x0)this[_0xd1b2fd(0x38d)][_0xd1b2fd(0x344)]=this[_0xd1b2fd(0x7ad)]();else{if(_0xd1b2fd(0x653)===_0xd1b2fd(0x653))this['_cursorArea']['visible']=![];else return 0x0;}},Window_BattleStatus['prototype'][_0x8db8d6(0x1e6)]=function(){const _0x302e59=_0x8db8d6;Window_StatusBase[_0x302e59(0x6da)][_0x302e59(0x1e6)]['call'](this),this[_0x302e59(0xa9e)]();},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0xa9e)]=function(){const _0x5d2eee=_0x8db8d6,_0x57683d=this[_0x5d2eee(0x38d)][_0x5d2eee(0x6bb)][_0x5d2eee(0x552)](new Point(0x0,0x0)),_0x4c91c2=this['_cursorArea'][_0x5d2eee(0x9fe)];_0x4c91c2['x']=_0x57683d['x']+this[_0x5d2eee(0x6b9)]['x'],_0x4c91c2['y']=_0x57683d['y']+this['origin']['y'],_0x4c91c2[_0x5d2eee(0x5cb)]=this['innerWidth'],_0x4c91c2[_0x5d2eee(0x7f5)]=this['innerHeight'];},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0xaed)]=function(_0x239c70){const _0x460e4f=_0x8db8d6;if(this[_0x460e4f(0x830)]()!==_0x460e4f(0x9af))return;this[_0x460e4f(0x2de)](_0x239c70[_0x460e4f(0x79e)]());},Window_BattleStatus['prototype'][_0x8db8d6(0x150)]=function(_0x3de143,_0x39a80e){const _0x1ce2f2=_0x8db8d6;if(!this[_0x1ce2f2(0xa71)])return;if(!_0x3de143)return;if(!_0x39a80e)return;const _0x164858=this[_0x1ce2f2(0x90a)](_0x39a80e['index']());_0x164858['x']+=_0x164858[_0x1ce2f2(0x5cb)]/0x2+this['padding'],_0x3de143['x']=_0x164858['x'],_0x3de143['y']=_0x164858['y'],this[_0x1ce2f2(0xa71)][_0x1ce2f2(0x9b0)](_0x3de143);},Window_BattleStatus['prototype'][_0x8db8d6(0x4bc)]=function(_0x3c3715){const _0xff7a51=_0x8db8d6;if(!this[_0xff7a51(0xa71)])return;if(!_0x3c3715)return;this['_damageContainer'][_0xff7a51(0x4f1)](_0x3c3715);},Window_BattleStatus['prototype']['updateBorderStyle']=function(){const _0x5d6ddc=_0x8db8d6;if(!this[_0x5d6ddc(0x4f8)]())return;if(!this[_0x5d6ddc(0x38f)])this['createBorderStylePortraitSprite']();this[_0x5d6ddc(0x1f0)](),this[_0x5d6ddc(0x8cf)]();},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x4f8)]=function(){const _0x5c70a9=_0x8db8d6;if(this[_0x5c70a9(0x5f5)]!==Window_BattleStatus)return![];if(!SceneManager[_0x5c70a9(0x38c)]())return![];return VisuMZ[_0x5c70a9(0x602)]['Settings'][_0x5c70a9(0xa31)][_0x5c70a9(0x379)];},Window_BattleStatus[_0x8db8d6(0x6da)]['createBorderStylePortraitSprite']=function(){const _0xfca691=_0x8db8d6;this[_0xfca691(0x38f)]=new Sprite();const _0x82366e=SceneManager[_0xfca691(0xa4a)],_0x59824a=_0x82366e[_0xfca691(0x8c2)][_0xfca691(0x764)](_0x82366e[_0xfca691(0x373)]);_0x82366e[_0xfca691(0x1a1)](this[_0xfca691(0x38f)],_0x59824a),this['_borderPortraitSprite'][_0xfca691(0x347)]['x']=0.5,this[_0xfca691(0x38f)]['anchor']['y']=0x1;const _0x45be07=VisuMZ[_0xfca691(0x602)][_0xfca691(0x466)][_0xfca691(0xa31)]['PortraitScaleBorderStyle'];this[_0xfca691(0x38f)][_0xfca691(0x728)]['x']=_0x45be07,this['_borderPortraitSprite'][_0xfca691(0x728)]['y']=_0x45be07,this[_0xfca691(0x38f)]['y']=this['y']+this['height'],this[_0xfca691(0x1af)]=0x0;},Window_BattleStatus[_0x8db8d6(0x6da)]['prepareBorderActor']=function(){const _0x2060d2=_0x8db8d6;this[_0x2060d2(0x38f)][_0x2060d2(0x344)]=BattleManager[_0x2060d2(0xac6)]();const _0x3a412a=BattleManager[_0x2060d2(0x306)]();if(_0x3a412a===this[_0x2060d2(0x38f)]['actor'])return;this[_0x2060d2(0x38f)][_0x2060d2(0x306)]=_0x3a412a||this[_0x2060d2(0x38f)][_0x2060d2(0x306)];if(!_0x3a412a){if(_0x2060d2(0x2d7)!==_0x2060d2(0x33e))return;else return this[_0x2060d2(0x358)][_0x2060d2(0x646)]();}else{if(_0x3a412a[_0x2060d2(0x24d)]()===''){this[_0x2060d2(0x38f)]['bitmap']=ImageManager[_0x2060d2(0x390)];return;}else{if(_0x2060d2(0x9a0)===_0x2060d2(0x9a0)){const _0x9f498f=ImageManager[_0x2060d2(0x3ff)](_0x3a412a[_0x2060d2(0x24d)]());_0x9f498f[_0x2060d2(0x851)](this['processBorderActor']['bind'](this,_0x9f498f));}else{if(!_0x2bac65['isSceneBattle']())return;if(!_0x4b01d5[_0x2060d2(0x431)])return;if(!_0x45c504[_0x2060d2(0x3a0)]())return;_0x4f86e9[_0x2060d2(0xb24)](_0x56440b,_0x5e6566);const _0x29b16a=_0x4d06bc[_0x2060d2(0x7be)][_0x2060d2(0x1bd)](),_0x72022d=_0xee2cdd[_0x2060d2(0x924)],_0x97746=_0x25174d['alterChange']||_0x2060d2(0xb1d),_0x40182a=_0x4352af[_0x2060d2(0xa04)]||_0x2060d2(0xb1d),_0x2f6519=_0x53e1b2[_0x2060d2(0x7c3)]||0x0,_0x3d4a47=_0x3295dd[_0x2060d2(0x577)]||0x0,_0x524fce=_0x1a7b71['alterSound']||'';(_0x29b16a['canAlterActionCostPTB']()||_0x72022d)&&(_0x72022d&&(_0x29b16a['_ptbActionCost']=_0x29b16a[_0x2060d2(0x511)]||{},_0x29b16a[_0x2060d2(0x511)]['priority']=0x0),_0x29b16a['alterActionCostPTB'](_0x97746,_0x40182a,_0x2f6519,_0x3d4a47,_0x524fce));}}}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x1a6)]=function(_0xf44d4){const _0x255291=_0x8db8d6;this[_0x255291(0x1af)]=0x14,this['_borderPortraitSprite'][_0x255291(0x86a)]=_0xf44d4;SceneManager[_0x255291(0xa4a)][_0x255291(0x19e)]()?(this[_0x255291(0x38f)]['x']=0x0,this[_0x255291(0x8ea)]=Math[_0x255291(0x2f7)](_0xf44d4['width']/0x2)):_0x255291(0x101)===_0x255291(0x101)?(this['_borderPortraitSprite']['x']=this[_0x255291(0x5cb)],this[_0x255291(0x8ea)]=this[_0x255291(0x5cb)]*0x3/0x4):this[_0x255291(0x35d)]();this[_0x255291(0x38f)][_0x255291(0x83f)]=0x0,this[_0x255291(0x38f)]['y']=this['y']+this['height'];const _0x24218e=BattleManager[_0x255291(0x306)]();_0x24218e&&(this[_0x255291(0x8ea)]+=_0x24218e[_0x255291(0xa61)](),this[_0x255291(0x38f)]['y']+=_0x24218e[_0x255291(0x238)]());},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x8cf)]=function(){const _0x4fc625=_0x8db8d6;if(this[_0x4fc625(0x1af)]>0x0){const _0x468558=this['_borderPortraitDuration'],_0x48ff50=this[_0x4fc625(0x38f)];_0x48ff50['x']=(_0x48ff50['x']*(_0x468558-0x1)+this[_0x4fc625(0x8ea)])/_0x468558,_0x48ff50['opacity']=(_0x48ff50['opacity']*(_0x468558-0x1)+0xff)/_0x468558,this[_0x4fc625(0x1af)]--;}},Window_BattleStatus['prototype'][_0x8db8d6(0x27d)]=function(){const _0x1fe4a1=_0x8db8d6;return;this['_effectsContainer']&&(this[_0x1fe4a1(0xb0c)]['x']=this['x'],this[_0x1fe4a1(0xb0c)]['y']=this['y']),this['_damageContainer']&&('UqKGA'!==_0x1fe4a1(0x905)?(this['_damageContainer']['x']=this['x'],this[_0x1fe4a1(0xa71)]['y']=this['y']):this[_0x1fe4a1(0x843)]['bitmap']=_0x1b9d2b[_0x1fe4a1(0xaef)](_0x23aa68));},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x758)]=function(){const _0x3fba52=_0x8db8d6,_0x4d4735=VisuMZ[_0x3fba52(0x602)]['Settings'][_0x3fba52(0xa31)];if(_0x4d4735['StatusWindowAttachmentBack']){const _0x2224a5=new Sprite();_0x2224a5[_0x3fba52(0x86a)]=ImageManager['loadSystem'](_0x4d4735[_0x3fba52(0x235)]),_0x2224a5['x']=_0x4d4735[_0x3fba52(0x786)]||0x0,_0x2224a5['y']=_0x4d4735[_0x3fba52(0x742)]||0x0,this[_0x3fba52(0x8f0)](_0x2224a5),this['_backAttachmentSprite']=_0x2224a5;}if(_0x4d4735[_0x3fba52(0x2d0)]){if(_0x3fba52(0xa50)!==_0x3fba52(0x2bc)){const _0xd7bec4=new Sprite();_0xd7bec4['bitmap']=ImageManager[_0x3fba52(0x8c4)](_0x4d4735['StatusWindowAttachmentFront']),_0xd7bec4['x']=_0x4d4735[_0x3fba52(0x8b7)]||0x0,_0xd7bec4['y']=_0x4d4735[_0x3fba52(0x767)]||0x0,this[_0x3fba52(0x9b0)](_0xd7bec4),this['_frontAttachmentSprite']=_0xd7bec4;}else{if(!this['isBorderStylePortraitShown']())return;if(!this[_0x3fba52(0x38f)])this['createBorderStylePortraitSprite']();this[_0x3fba52(0x1f0)](),this[_0x3fba52(0x8cf)]();}}},Window_BattleStatus[_0x8db8d6(0x6da)][_0x8db8d6(0x417)]=function(){const _0x2f3b76=_0x8db8d6;this[_0x2f3b76(0x70d)]&&this[_0x2f3b76(0x9b0)](this[_0x2f3b76(0x70d)]);},Window_BattleActor[_0x8db8d6(0x6da)][_0x8db8d6(0x375)]=function(){const _0x11b4e0=_0x8db8d6;return Window_BattleStatus[_0x11b4e0(0x6da)][_0x11b4e0(0x375)][_0x11b4e0(0x5fd)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x8db8d6(0x6da)][_0x8db8d6(0x821)]=function(){const _0x5f3700=_0x8db8d6,_0x186b86=BattleManager['inputtingAction'](),_0x18e17a=this[_0x5f3700(0x306)](this['index']());if(!_0x186b86)return!![];if(!_0x186b86['item']())return!![];const _0x47fa72=_0x186b86[_0x5f3700(0xaf1)]()[_0x5f3700(0x44e)];if(_0x47fa72[_0x5f3700(0x3ed)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x18e17a===BattleManager[_0x5f3700(0x306)]())return![];}return!![];},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x267)]=Window_BattleEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)],Window_BattleEnemy['prototype'][_0x8db8d6(0x3f1)]=function(_0x2b2d72){const _0x7bc14b=_0x8db8d6;this[_0x7bc14b(0x8ae)]=null,VisuMZ['BattleCore'][_0x7bc14b(0x267)][_0x7bc14b(0x5fd)](this,_0x2b2d72);},Window_BattleEnemy['prototype'][_0x8db8d6(0x34f)]=function(){const _0xd55887=_0x8db8d6;return this[_0xd55887(0x599)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x37d)]=Window_BattleEnemy['prototype']['show'],Window_BattleEnemy[_0x8db8d6(0x6da)]['show']=function(){const _0x29a11e=_0x8db8d6;VisuMZ[_0x29a11e(0x602)][_0x29a11e(0x37d)][_0x29a11e(0x5fd)](this),this['y']=Graphics[_0x29a11e(0x7f5)]*0xa;},Window_BattleEnemy['prototype']['validTargets']=function(){const _0x5b61bc=_0x8db8d6;return $gameTroop[_0x5b61bc(0x338)]()['slice'](0x0);},Window_BattleEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x548)]=function(){const _0x4a419f=_0x8db8d6;this[_0x4a419f(0x4c1)]=this[_0x4a419f(0xb33)](),this[_0x4a419f(0x6af)](),Window_Selectable[_0x4a419f(0x6da)]['refresh']['call'](this);},Window_BattleEnemy[_0x8db8d6(0x6da)]['sortEnemies']=function(){const _0xc0e146=_0x8db8d6;this[_0xc0e146(0x4c1)]['sort']((_0xb71196,_0x642407)=>{const _0x1ecf66=_0xc0e146;if('enCon'===_0x1ecf66(0x59b))this['_waitCount']=_0x2c594f;else return _0xb71196[_0x1ecf66(0x538)]()[_0x1ecf66(0x94f)]===_0x642407[_0x1ecf66(0x538)]()['_baseX']?_0xb71196['battler']()[_0x1ecf66(0x214)]-_0x642407[_0x1ecf66(0x538)]()[_0x1ecf66(0x214)]:_0xb71196[_0x1ecf66(0x538)]()[_0x1ecf66(0x94f)]-_0x642407[_0x1ecf66(0x538)]()[_0x1ecf66(0x94f)];}),SceneManager[_0xc0e146(0x2b5)]()&&(_0xc0e146(0x614)===_0xc0e146(0x614)?this[_0xc0e146(0x4c1)][_0xc0e146(0x60e)]():(_0x2c2ec5[_0xc0e146(0x602)][_0xc0e146(0x5fb)][_0xc0e146(0x5fd)](this),this[_0xc0e146(0xacd)]()));},Window_BattleEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x966)]=function(){const _0x4948ce=_0x8db8d6,_0x2c9f96=VisuMZ['BattleCore'][_0x4948ce(0x466)]['Enemy'];_0x2c9f96['LastSelected']?_0x4948ce(0x6b3)!==_0x4948ce(0x58a)?this[_0x4948ce(0x5c1)]():_0x21c571[_0x4948ce(0x602)][_0x4948ce(0xae9)]['call'](this,_0x8c1afc):this[_0x4948ce(0xa53)]();},Window_BattleEnemy[_0x8db8d6(0x6da)][_0x8db8d6(0x5c1)]=function(){const _0x13eab7=_0x8db8d6;if(this['_lastEnemy']&&this[_0x13eab7(0x4c1)]['includes'](this['_lastEnemy'])){const _0x57df36=this['_enemies'][_0x13eab7(0x764)](this[_0x13eab7(0x8ae)]);this['forceSelect'](_0x57df36);}else this[_0x13eab7(0xa53)]();},Window_BattleEnemy['prototype'][_0x8db8d6(0xa53)]=function(){const _0x1ee74d=_0x8db8d6,_0x18dafc=VisuMZ[_0x1ee74d(0x602)][_0x1ee74d(0x466)]['Enemy'];let _0x1fccbc=![];$gameSystem[_0x1ee74d(0x6b5)]()?_0x1fccbc=_0x18dafc['SideviewSelect']:_0x1fccbc=_0x18dafc[_0x1ee74d(0x983)],this['forceSelect'](_0x1fccbc?this[_0x1ee74d(0x599)]()-0x1:0x0);},Window_BattleEnemy[_0x8db8d6(0x6da)]['callOkHandler']=function(){const _0x233934=_0x8db8d6;Window_Selectable[_0x233934(0x6da)][_0x233934(0x1d5)]['call'](this),this[_0x233934(0x8ae)]=this[_0x233934(0x6cf)]();},Window_BattleItem[_0x8db8d6(0x6da)][_0x8db8d6(0xa5c)]=function(_0x5e88a8){if(!_0x5e88a8)return![];return _0x5e88a8['occasion']===0x0||_0x5e88a8['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x294d04=_0x8db8d6;this[_0x294d04(0x3f1)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x8db8d6(0x55d)](Window_Base[_0x8db8d6(0x6da)]),Window_AutoBattleCancel['prototype'][_0x8db8d6(0x5f5)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)]=function(_0x29cb63){const _0x36790e=_0x8db8d6;Window_Base[_0x36790e(0x6da)]['initialize'][_0x36790e(0x5fd)](this,_0x29cb63),this[_0x36790e(0x218)](this[_0x36790e(0x611)]()),this['refresh']();},Window_AutoBattleCancel[_0x8db8d6(0x6da)][_0x8db8d6(0x611)]=function(){const _0x296670=_0x8db8d6;return VisuMZ['BattleCore'][_0x296670(0x466)][_0x296670(0x91f)][_0x296670(0x5ce)];},Window_AutoBattleCancel[_0x8db8d6(0x6da)]['refresh']=function(){const _0x2de819=_0x8db8d6;this['contents']['clear']();const _0x5106ad=VisuMZ[_0x2de819(0x602)][_0x2de819(0x466)][_0x2de819(0x91f)][_0x2de819(0x6a4)],_0x20020e=_0x5106ad['format'](this['okButtonText'](),this[_0x2de819(0x712)]()),_0x2dc9da=this[_0x2de819(0x1fc)](_0x20020e)['width'],_0x5cbd20=Math['floor']((this[_0x2de819(0x8a0)]-_0x2dc9da)/0x2);this[_0x2de819(0x822)](_0x20020e,_0x5cbd20,0x0,_0x2dc9da);},Window_AutoBattleCancel[_0x8db8d6(0x6da)][_0x8db8d6(0x259)]=function(){const _0x551169=_0x8db8d6;if(Imported[_0x551169(0x730)])return TextManager[_0x551169(0x108)]('ok');else{if('OaUaJ'===_0x551169(0x1fe))this['startMotion'](_0x551169(0xa44));else return VisuMZ[_0x551169(0x602)][_0x551169(0x466)]['AutoBattle']['AutoBattleOK'];}},Window_AutoBattleCancel['prototype'][_0x8db8d6(0x712)]=function(){const _0x55c1a2=_0x8db8d6;if(Imported['VisuMZ_0_CoreEngine']){if(_0x55c1a2(0x5ee)===_0x55c1a2(0x7b7))_0x567c17=_0x4862c5;else return TextManager[_0x55c1a2(0x108)](_0x55c1a2(0x107));}else return VisuMZ[_0x55c1a2(0x602)]['Settings'][_0x55c1a2(0x91f)]['AutoBattleCancel'];},Window_AutoBattleCancel['prototype'][_0x8db8d6(0x2fb)]=function(){const _0x267066=_0x8db8d6;Window_Base[_0x267066(0x6da)][_0x267066(0x2fb)][_0x267066(0x5fd)](this),this[_0x267066(0x40a)](),this[_0x267066(0x25c)]();},Window_AutoBattleCancel[_0x8db8d6(0x6da)][_0x8db8d6(0x40a)]=function(){const _0x5e6146=_0x8db8d6;this[_0x5e6146(0x344)]=BattleManager[_0x5e6146(0x4e0)];},Window_AutoBattleCancel[_0x8db8d6(0x6da)]['updateCancel']=function(){const _0x3ead27=_0x8db8d6;if(!BattleManager[_0x3ead27(0x4e0)])return;(Input[_0x3ead27(0x8e6)]('ok')||Input['isTriggered']('cancel')||TouchInput[_0x3ead27(0x4e8)]()||TouchInput[_0x3ead27(0x886)]())&&(_0x3ead27(0x558)==='AXyQj'?(SoundManager['playCancel'](),BattleManager[_0x3ead27(0x4e0)]=![],Input[_0x3ead27(0x750)](),TouchInput['clear']()):(this[_0x3ead27(0x426)][_0x3ead27(0x151)](this[_0x3ead27(0x30a)]),this[_0x3ead27(0x28a)]['setHelpWindow'](this[_0x3ead27(0x30a)])));};function Window_EnemyName(){this['initialize'](...arguments);}function _0x1bcc(_0x548966,_0x144bed){return _0x1bcc=function(_0xb61c3d,_0x1bcca9){_0xb61c3d=_0xb61c3d-0xfc;let _0x15226b=_0xb61c[_0xb61c3d];return _0x15226b;},_0x1bcc(_0x548966,_0x144bed);}Window_EnemyName[_0x8db8d6(0x6da)]=Object[_0x8db8d6(0x55d)](Window_StatusBase['prototype']),Window_EnemyName[_0x8db8d6(0x6da)]['constructor']=Window_EnemyName,Window_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x3f1)]=function(_0x495113){const _0x30f532=_0x8db8d6;this['_enemyID']=_0x495113,this[_0x30f532(0x47a)]='';const _0x146e33=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x30f532(0x8ca)]()*0x4);Window_StatusBase[_0x30f532(0x6da)][_0x30f532(0x3f1)]['call'](this,_0x146e33),this[_0x30f532(0x218)](0x2),this[_0x30f532(0x147)]=0x0;},Window_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x86c)]=function(){const _0x513fba=_0x8db8d6;this[_0x513fba(0x438)]=0x0;},Window_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x6cf)]=function(){const _0x142ee9=_0x8db8d6;return $gameTroop[_0x142ee9(0xa8f)]()[this['_enemyID']];},Window_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x2fb)]=function(){const _0xd5b245=_0x8db8d6;Window_StatusBase['prototype'][_0xd5b245(0x2fb)][_0xd5b245(0x5fd)](this),this[_0xd5b245(0x6cf)]()&&this[_0xd5b245(0x6cf)]()[_0xd5b245(0x7fd)]()!==this['_text']&&(this[_0xd5b245(0x47a)]=this[_0xd5b245(0x6cf)]()[_0xd5b245(0x7fd)](),this[_0xd5b245(0x548)]()),this[_0xd5b245(0x382)](),this[_0xd5b245(0x245)]();},Window_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x382)]=function(){const _0x1a9a90=_0x8db8d6;if(!this[_0x1a9a90(0x6cf)]()){if('hjcjL'!==_0x1a9a90(0x61a)){if(this[_0x1a9a90(0x147)]>0x0)this[_0x1a9a90(0x147)]-=0x10;}else _0x4263ab['BattleCore'][_0x1a9a90(0x527)][_0x1a9a90(0x5fd)](this),_0xb4698a['_battleCoreBattleResumeAfter']&&(this[_0x1a9a90(0x56f)]=!![],_0x54e9de['_battleCoreBattleResumeAfter']=_0x1a9b9d);}else{if(this['enemy']()[_0x1a9a90(0x20a)]()){if(this[_0x1a9a90(0x147)]>0x0)this[_0x1a9a90(0x147)]-=0x10;}else{if(SceneManager[_0x1a9a90(0xa4a)]['_enemyWindow']&&SceneManager[_0x1a9a90(0xa4a)]['_enemyWindow'][_0x1a9a90(0x121)]&&SceneManager[_0x1a9a90(0xa4a)][_0x1a9a90(0x6eb)][_0x1a9a90(0x4c1)][_0x1a9a90(0xa5c)](this[_0x1a9a90(0x6cf)]())){if(this[_0x1a9a90(0x147)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x1a9a90(0x147)]>0x0&&(this[_0x1a9a90(0x147)]-=0x10);}}},Window_EnemyName['prototype'][_0x8db8d6(0x245)]=function(){const _0x2ea4e0=_0x8db8d6;if(!this[_0x2ea4e0(0x6cf)]())return;SceneManager[_0x2ea4e0(0x2b5)]()?_0x2ea4e0(0xaa6)===_0x2ea4e0(0xaa6)?this['x']=Graphics[_0x2ea4e0(0x3ef)]-this[_0x2ea4e0(0x6cf)]()['battler']()['_baseX']:this['startWeaponAnimation'](_0x4a35dd[_0x2ea4e0(0x8e8)]):this['x']=this[_0x2ea4e0(0x6cf)]()[_0x2ea4e0(0x538)]()[_0x2ea4e0(0x94f)];this['x']-=Math[_0x2ea4e0(0x423)](this[_0x2ea4e0(0x5cb)]/0x2),this['y']=this['enemy']()[_0x2ea4e0(0x538)]()['_baseY']-Math[_0x2ea4e0(0x423)](this[_0x2ea4e0(0x8ca)]()*1.5);const _0x1a46ab=VisuMZ[_0x2ea4e0(0x602)][_0x2ea4e0(0x466)][_0x2ea4e0(0x8fe)];this['x']+=_0x1a46ab['NameOffsetX']||0x0,this['y']+=_0x1a46ab[_0x2ea4e0(0x2b3)]||0x0;},Window_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x73c)]=function(){const _0xbca93f=_0x8db8d6;Window_Base[_0xbca93f(0x6da)]['resetFontSettings'][_0xbca93f(0x5fd)](this),this[_0xbca93f(0x374)][_0xbca93f(0x79d)]=VisuMZ[_0xbca93f(0x602)][_0xbca93f(0x466)]['Enemy']['NameFontSize'];},Window_EnemyName[_0x8db8d6(0x6da)][_0x8db8d6(0x548)]=function(){const _0x37d289=_0x8db8d6;Window_StatusBase['prototype']['refresh'][_0x37d289(0x5fd)](this),this[_0x37d289(0x374)][_0x37d289(0x750)]();if(!this[_0x37d289(0x6cf)]())return;this[_0x37d289(0x305)]();},Window_EnemyName['prototype'][_0x8db8d6(0x305)]=function(){const _0x3df8af=_0x8db8d6;this[_0x3df8af(0x47a)]=this['enemy']()['name']();const _0x25335d=this[_0x3df8af(0x1fc)](this[_0x3df8af(0x47a)])[_0x3df8af(0x5cb)],_0xa88ecc=Math[_0x3df8af(0x423)]((this[_0x3df8af(0x8a0)]-_0x25335d)/0x2);this[_0x3df8af(0x822)](this['_text'],_0xa88ecc,0x0,_0x25335d+0x8);},Window_BattleLog['prototype'][_0x8db8d6(0x951)]=function(){const _0x55166b=_0x8db8d6;return VisuMZ[_0x55166b(0x602)][_0x55166b(0x466)][_0x55166b(0x817)][_0x55166b(0x67d)];},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x654)]=function(){const _0x38552c=_0x8db8d6;return VisuMZ['BattleCore']['Settings'][_0x38552c(0x817)][_0x38552c(0x18a)];},Window_BattleLog['prototype'][_0x8db8d6(0x66e)]=function(){const _0x2fe91b=_0x8db8d6;return VisuMZ['BattleCore'][_0x2fe91b(0x466)][_0x2fe91b(0x817)][_0x2fe91b(0x3e8)];},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6d6)]=function(){return![];},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x1eb)]=function(_0x563be5,_0x454112){const _0x1405e7=_0x8db8d6;this[_0x1405e7(0x4a1)](_0x1405e7(0x2d9)),BattleManager[_0x1405e7(0x793)](_0x563be5,_0x454112),this[_0x1405e7(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x2d9)]=function(){const _0x2b7689=_0x8db8d6;this[_0x2b7689(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x43e)]=function(_0x5c3fb8){const _0x149191=_0x8db8d6,_0x39a2db=Array[_0x149191(0x6da)]['slice'][_0x149191(0x5fd)](arguments,0x1),_0x316c64={'name':_0x5c3fb8,'params':_0x39a2db},_0x5c7745=this['_methods'][_0x149191(0x9f8)](_0x44e597=>_0x44e597[_0x149191(0x7fd)])[_0x149191(0x764)]('actionSplicePoint');_0x5c7745>=0x0?this['_methods'][_0x149191(0x5bc)](_0x5c7745,0x0,_0x316c64):'wdtwA'!==_0x149191(0x961)?(_0x3e5829--,_0xf24307++):this['_methods'][_0x149191(0x43e)](_0x316c64);},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x4a1)]=function(_0xc8c28e){const _0x14b52b=_0x8db8d6,_0x40978d=Array[_0x14b52b(0x6da)][_0x14b52b(0x7e0)][_0x14b52b(0x5fd)](arguments,0x1);this['_methods'][_0x14b52b(0x4a1)]({'name':_0xc8c28e,'params':_0x40978d});},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x2f0)]=function(){const _0x26b2ca=_0x8db8d6;if(!$gameTemp[_0x26b2ca(0x6c6)]())return;console['log'](this[_0x26b2ca(0x1a9)]['map'](_0x290445=>_0x290445[_0x26b2ca(0x7fd)])[_0x26b2ca(0x645)]('\x0a'));},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x826)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x548)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x548)]=function(){this['_requestRefresh']=!![];},VisuMZ['BattleCore'][_0x8db8d6(0x5b1)]=Window_BattleLog[_0x8db8d6(0x6da)]['update'],Window_BattleLog['prototype'][_0x8db8d6(0x2fb)]=function(){const _0x36702f=_0x8db8d6;VisuMZ['BattleCore'][_0x36702f(0x5b1)]['call'](this);if(this[_0x36702f(0xa99)])this[_0x36702f(0x98b)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x98b)]=function(){const _0x21a18a=_0x8db8d6;this['_requestRefresh']=![],VisuMZ[_0x21a18a(0x602)][_0x21a18a(0x826)][_0x21a18a(0x5fd)](this);},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x301)]=function(_0x3cd2ca){const _0x1e48da=_0x8db8d6;let _0x20bdc8=VisuMZ[_0x1e48da(0x602)][_0x1e48da(0x466)][_0x1e48da(0x817)][_0x1e48da(0x5c7)]['toLowerCase']()['trim'](),_0x2bd83d=this['_lines'][_0x3cd2ca];if(_0x2bd83d[_0x1e48da(0x3ed)](/<LEFT>/i))_0x1e48da(0x9fb)==='dEfbe'?this[_0x1e48da(0xa70)]()?(this[_0x1e48da(0x4a9)]=!![],this[_0x1e48da(0x307)][_0x1e48da(0x43e)](_0x1e48da(0x1d0),_0x31e679[_0x1e48da(0x602)][_0x1e48da(0x466)]['PartyCmd'][_0x1e48da(0x3e1)])):this['callOptions']():_0x20bdc8='left';else{if(_0x2bd83d[_0x1e48da(0x3ed)](/<CENTER>/i))_0x20bdc8=_0x1e48da(0x9e7);else _0x2bd83d[_0x1e48da(0x3ed)](/<RIGHT>/i)&&(_0x20bdc8='right');}_0x2bd83d=_0x2bd83d[_0x1e48da(0x929)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x2bd83d=_0x2bd83d[_0x1e48da(0x929)](/\\I\[0\]/gi,'');const _0x474f1b=this['lineRect'](_0x3cd2ca);this[_0x1e48da(0x374)][_0x1e48da(0x231)](_0x474f1b['x'],_0x474f1b['y'],_0x474f1b[_0x1e48da(0x5cb)],_0x474f1b[_0x1e48da(0x7f5)]);const _0x1d868e=this[_0x1e48da(0x1fc)](_0x2bd83d)[_0x1e48da(0x5cb)];let _0x90cfc0=_0x474f1b['x'];if(_0x20bdc8===_0x1e48da(0x9e7))_0x90cfc0+=(_0x474f1b[_0x1e48da(0x5cb)]-_0x1d868e)/0x2;else _0x20bdc8===_0x1e48da(0x174)&&(_0x90cfc0+=_0x474f1b[_0x1e48da(0x5cb)]-_0x1d868e);this[_0x1e48da(0x822)](_0x2bd83d,_0x90cfc0,_0x474f1b['y'],_0x1d868e+0x8);},Window_BattleLog[_0x8db8d6(0x6da)]['addText']=function(_0x4e1ab5){const _0x370eac=_0x8db8d6;this['_lines'][_0x370eac(0x43e)](_0x4e1ab5),this['refresh'](),this[_0x370eac(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6c1)]=function(){const _0x13959b=_0x8db8d6;let _0x1058c3=![];switch(this[_0x13959b(0x190)]){case'effect':_0x1058c3=this[_0x13959b(0x485)][_0x13959b(0x44b)]();break;case _0x13959b(0x7e5):_0x1058c3=this[_0x13959b(0x485)]['isAnyoneMoving']();break;case _0x13959b(0x55a):_0x1058c3=this[_0x13959b(0x485)][_0x13959b(0x697)]();break;case _0x13959b(0x54f):_0x1058c3=this[_0x13959b(0x485)]['isAnyoneFloating']();break;case _0x13959b(0x194):_0x1058c3=this[_0x13959b(0x485)][_0x13959b(0xa2a)]();break;case'opacity':_0x1058c3=this[_0x13959b(0x485)][_0x13959b(0xa30)]();break;}if(!_0x1058c3){if('kYmwK'!==_0x13959b(0x9d1))this[_0x13959b(0x190)]='';else return this[_0x13959b(0x9ce)]&&this[_0x13959b(0x9ce)][_0x13959b(0x991)]();}return _0x1058c3;},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0xa0f)]=function(){const _0x573ee7=_0x8db8d6;this[_0x573ee7(0x4f2)](_0x573ee7(0x55a));},Window_BattleLog[_0x8db8d6(0x6da)]['waitForFloat']=function(){const _0x3a02c0=_0x8db8d6;this[_0x3a02c0(0x4f2)](_0x3a02c0(0x54f));},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x1ba)]=function(){const _0x36c56e=_0x8db8d6;this[_0x36c56e(0x4f2)](_0x36c56e(0x194));},Window_BattleLog['prototype'][_0x8db8d6(0x6cd)]=function(){const _0x37c246=_0x8db8d6;this[_0x37c246(0x4f2)](_0x37c246(0x83f));},Window_BattleLog[_0x8db8d6(0x6da)]['startTurn']=function(){const _0x5eae59=_0x8db8d6,_0x23f137=VisuMZ[_0x5eae59(0x602)]['Settings'][_0x5eae59(0x817)];if(!_0x23f137['StartTurnShow'])return;this[_0x5eae59(0x43e)]('addText',_0x23f137['StartTurnMsg'][_0x5eae59(0xad2)]($gameTroop[_0x5eae59(0x243)]())),this[_0x5eae59(0x43e)](_0x5eae59(0x5c4),_0x23f137[_0x5eae59(0x11b)]),this[_0x5eae59(0x43e)](_0x5eae59(0x750));},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x8bf)]=function(_0x334612,_0x788af4,_0x2d815b){const _0x38b06c=_0x8db8d6;this[_0x38b06c(0x8dc)](_0x788af4)?BattleManager[_0x38b06c(0x25e)]():this['usePremadeActionSequence'](_0x334612,_0x788af4,_0x2d815b);},Window_BattleLog['prototype'][_0x8db8d6(0x8dc)]=function(_0x36e5d1){const _0x80a68b=_0x8db8d6;if(!SceneManager[_0x80a68b(0x38c)]())return![];if(!_0x36e5d1)return![];if(!_0x36e5d1[_0x80a68b(0xaf1)]())return![];if(_0x36e5d1[_0x80a68b(0xaf1)]()[_0x80a68b(0x44e)][_0x80a68b(0x3ed)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x80a68b(0x32d)!==_0x80a68b(0xa45))return!![];else this[_0x80a68b(0x17c)](),this[_0x80a68b(0x2e3)](),this['addCustomCommands'](),this[_0x80a68b(0x6f3)](),this['addEscapeCommand']();}if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x36e5d1[_0x80a68b(0xaf1)]()))return!![];return![];},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x2a0)]=function(_0x3c4583,_0x741ddc,_0x21ca7c){const _0x1f384d=_0x8db8d6,_0x591392=_0x741ddc[_0x1f384d(0xaf1)]();this['setupActionSet'](_0x3c4583,_0x741ddc,_0x21ca7c),this['createEffectActionSet'](_0x3c4583,_0x741ddc,_0x21ca7c),this[_0x1f384d(0xa11)](_0x3c4583,_0x741ddc,_0x21ca7c);},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x4d9)]=function(_0x2d6412,_0xd937c){const _0x117c81=_0x8db8d6,_0x3f850a=VisuMZ['BattleCore']['Settings'][_0x117c81(0x817)];_0x3f850a[_0x117c81(0x47b)]&&this[_0x117c81(0x43e)]('addText',_0x117c81(0x5f1)[_0x117c81(0xad2)](DataManager[_0x117c81(0x380)](_0xd937c)));if(DataManager[_0x117c81(0x54a)](_0xd937c)){if(_0x3f850a[_0x117c81(0x7ee)])this[_0x117c81(0x57b)](_0xd937c[_0x117c81(0x7f3)],_0x2d6412,_0xd937c);if(_0x3f850a['ActionSkillMsg2'])this['displayItemMessage'](_0xd937c[_0x117c81(0x160)],_0x2d6412,_0xd937c);}else{if(_0x3f850a['ActionItemMsg'])this[_0x117c81(0x57b)](TextManager[_0x117c81(0xae2)],_0x2d6412,_0xd937c);}},Window_BattleLog[_0x8db8d6(0x6da)]['setupActionSet']=function(_0x15d346,_0x1203bb,_0x11caf4){const _0x156592=_0x8db8d6,_0x252289=_0x1203bb[_0x156592(0xaf1)]();this[_0x156592(0x4d9)](_0x15d346,_0x252289),this[_0x156592(0x43e)](_0x156592(0x865),_0x15d346,_0x11caf4,!![]),this[_0x156592(0x43e)]('performActionStart',_0x15d346,_0x1203bb),this[_0x156592(0x43e)]('waitForMovement'),this[_0x156592(0x43e)](_0x156592(0x64c),_0x15d346,_0x1203bb),this['push'](_0x156592(0xa0f));},Window_BattleLog[_0x8db8d6(0x6da)]['createEffectActionSet']=function(_0x201734,_0x29469c,_0x39b107){const _0x32ebd7=_0x8db8d6;if(this['isMeleeSingleTargetAction'](_0x29469c)){if(_0x32ebd7(0x76e)===_0x32ebd7(0xa7c)){const _0x299ccd=_0x51d083['BattleCore'][_0x32ebd7(0x466)][_0x32ebd7(0x8fe)];let _0x106819=![];_0x50d2de[_0x32ebd7(0x6b5)]()?_0x106819=_0x299ccd[_0x32ebd7(0x4a0)]:_0x106819=_0x299ccd[_0x32ebd7(0x983)],this[_0x32ebd7(0x972)](_0x106819?this[_0x32ebd7(0x599)]()-0x1:0x0);}else this['autoMeleeSingleTargetActionSet'](_0x201734,_0x29469c,_0x39b107);}else{if(this[_0x32ebd7(0x864)](_0x29469c))this[_0x32ebd7(0x937)](_0x201734,_0x29469c,_0x39b107);else _0x29469c[_0x32ebd7(0x502)]()?_0x32ebd7(0x230)!==_0x32ebd7(0x230)?_0x2e83c9=_0xdac57e[_0x32ebd7(0x4a0)]:this[_0x32ebd7(0x6fb)](_0x201734,_0x29469c,_0x39b107):this[_0x32ebd7(0x134)](_0x201734,_0x29469c,_0x39b107);}},Window_BattleLog['prototype'][_0x8db8d6(0x489)]=function(_0x3892bb){const _0x33ef5f=_0x8db8d6;if(!_0x3892bb[_0x33ef5f(0xa63)]())return![];if(!_0x3892bb[_0x33ef5f(0x21f)]())return![];if(!_0x3892bb['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x33ef5f(0x466)][_0x33ef5f(0x965)]['AutoMeleeSolo'];},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x747)]=function(_0x570a19,_0x58d9e6,_0x5c5546){const _0x59baef=_0x8db8d6,_0x10e35d=_0x570a19[_0x59baef(0xa26)]()['type']<0x2,_0x1c107d=0x14,_0x420cb5=0x30;if(_0x10e35d){if(_0x59baef(0x9ad)===_0x59baef(0x9ad))this[_0x59baef(0x43e)]('performJump',[_0x570a19],_0x420cb5,_0x1c107d),this[_0x59baef(0x43e)](_0x59baef(0x58d),_0x570a19,_0x5c5546,_0x59baef(0xad3),_0x1c107d,!![],_0x59baef(0xa13),!![]),this[_0x59baef(0x43e)](_0x59baef(0xa1d),[_0x570a19],'walk'),this[_0x59baef(0x43e)]('waitForMovement');else{const _0x19c38a=this[_0x59baef(0x980)];_0x834aa8[_0x59baef(0x602)][_0x59baef(0x839)][_0x59baef(0x5fd)](this,_0x3ac449),this[_0x59baef(0xa92)](_0x4f987a);if(_0x19c38a!==_0x53aee1)this[_0x59baef(0x64f)]();}}let _0x3fe36f=_0x58d9e6[_0x59baef(0xa97)]()?this[_0x59baef(0x48e)](_0x570a19):0x1;for(let _0x146d80=0x0;_0x146d80<_0x3fe36f;_0x146d80++){if('vfThv'===_0x59baef(0x455))_0x58d9e6[_0x59baef(0xa97)]()&&_0x570a19[_0x59baef(0x367)]()&&this['push'](_0x59baef(0xa81),_0x570a19,_0x146d80),_0x58d9e6['item']()[_0x59baef(0x35f)]<0x0?this[_0x59baef(0x6fb)](_0x570a19,_0x58d9e6,_0x5c5546):_0x59baef(0x3fc)===_0x59baef(0x223)?this[_0x59baef(0x23e)]=_0x3b2689[_0x59baef(0x8c4)](_0x4d18d1[_0x59baef(0x625)]):this[_0x59baef(0x134)](_0x570a19,_0x58d9e6,_0x5c5546);else return _0x179053[_0x59baef(0x7fd)];}_0x58d9e6['isAttack']()&&_0x570a19[_0x59baef(0x367)]()&&this['push'](_0x59baef(0x790),_0x570a19);this[_0x59baef(0x43e)](_0x59baef(0x865),_0x570a19,_0x5c5546,![]);if(_0x10e35d){const _0x508dd0=_0x570a19[_0x59baef(0x538)]();this[_0x59baef(0x43e)](_0x59baef(0x6c3),[_0x570a19],_0x420cb5,_0x1c107d),this[_0x59baef(0x43e)](_0x59baef(0x216),_0x570a19,_0x508dd0[_0x59baef(0x67c)],_0x508dd0['_homeY'],_0x1c107d,![],_0x59baef(0xa13)),this[_0x59baef(0x43e)](_0x59baef(0xa1d),[_0x570a19],_0x59baef(0x605)),this[_0x59baef(0x43e)]('waitForMovement'),this['push']('requestMotion',[_0x570a19],_0x59baef(0x8d2));}},Window_BattleLog['prototype'][_0x8db8d6(0x864)]=function(_0x1d2c41){const _0x48a47e=_0x8db8d6;if(!_0x1d2c41[_0x48a47e(0xa63)]())return![];if(!_0x1d2c41['isForAll']())return![];if(!_0x1d2c41[_0x48a47e(0x448)]())return![];return VisuMZ[_0x48a47e(0x602)][_0x48a47e(0x466)]['ActionSequence'][_0x48a47e(0xa7d)];},Window_BattleLog[_0x8db8d6(0x6da)]['autoMeleeMultiTargetActionSet']=function(_0x583641,_0x58860f,_0x41639e){const _0x11f567=_0x8db8d6,_0x109a04=_0x583641[_0x11f567(0xa26)]()[_0x11f567(0x28e)]<0x2,_0x31b1c2=0x14,_0x3b545b=0x30;_0x109a04&&(this[_0x11f567(0x43e)](_0x11f567(0x6c3),[_0x583641],_0x3b545b,_0x31b1c2),this[_0x11f567(0x43e)]('performMoveToTargets',_0x583641,_0x41639e,_0x11f567(0xb05),_0x31b1c2,!![],_0x11f567(0xa13),!![]),this[_0x11f567(0x43e)](_0x11f567(0xa1d),[_0x583641],_0x11f567(0x8d2)),this['push'](_0x11f567(0x200)));let _0x320916=_0x58860f[_0x11f567(0xa97)]()?this['getDualWieldTimes'](_0x583641):0x1;for(let _0x2d3873=0x0;_0x2d3873<_0x320916;_0x2d3873++){if(_0x58860f['isAttack']()&&_0x583641['isActor']()){if('KNMPO'!==_0x11f567(0x7d0))this['push'](_0x11f567(0xa81),_0x583641,_0x2d3873);else{const _0x53b58a=this[_0x11f567(0xb2c)][this[_0x11f567(0xb2c)][_0x11f567(0x5e0)]-0x1];_0x53b58a&&(_0x3eb3c9['x']=_0x53b58a['x']+_0x32062a[_0x11f567(0xb0e)]*_0x4d1212,_0x1f83ed['y']=_0x53b58a['y']+_0x272baa[_0x11f567(0x3d0)]);}}this[_0x11f567(0x134)](_0x583641,_0x58860f,_0x41639e);}if(_0x58860f[_0x11f567(0xa97)]()&&_0x583641[_0x11f567(0x367)]()){if(_0x11f567(0x921)===_0x11f567(0x921))this[_0x11f567(0x43e)]('clearActiveWeaponSet',_0x583641);else{if(!_0x9c78ea)return![];if(!_0x3d561a[_0x11f567(0x6bf)])return![];if(_0x965b75['_animation'][_0x11f567(0x707)]!==0x0)return![];if(!_0x4986e7['targetObjects'][0x0])return![];if(!_0x888c2b[_0x11f567(0x476)][0x0][_0x11f567(0x367)]())return![];if(_0x39ba24['isSideView']())return![];if(!this[_0x11f567(0x28d)]())return![];return _0x35993c[_0x11f567(0x6da)][_0x11f567(0x830)]()==='portrait';}}this[_0x11f567(0x43e)](_0x11f567(0x865),_0x583641,_0x41639e,![]);if(_0x109a04){if('mdkBh'!=='mdkBh')this[_0x11f567(0x110)]=!this['hasBeenDefeatedBefore'](),_0xa4321a[_0x11f567(0x6aa)](this[_0x11f567(0x30e)]());else{const _0x4e3677=_0x583641[_0x11f567(0x538)]();this['push'](_0x11f567(0x6c3),[_0x583641],_0x3b545b,_0x31b1c2),this['push'](_0x11f567(0x216),_0x583641,_0x4e3677['_homeX'],_0x4e3677['_homeY'],_0x31b1c2,![],_0x11f567(0xa13)),this[_0x11f567(0x43e)](_0x11f567(0xa1d),[_0x583641],_0x11f567(0x605)),this[_0x11f567(0x43e)]('waitForMovement'),this[_0x11f567(0x43e)](_0x11f567(0xa1d),[_0x583641],_0x11f567(0x8d2));}}},Window_BattleLog[_0x8db8d6(0x6da)]['targetActionSet']=function(_0x954a94,_0x13403c,_0x17ff7c){const _0x4ec20a=_0x8db8d6,_0x336563=_0x13403c[_0x4ec20a(0xaf1)]();for(const _0x5e7183 of _0x17ff7c){if(_0x4ec20a(0x10c)!==_0x4ec20a(0x10c))_0x13d092+='\x0a',_0x426a21+=_0x2413b0[_0x4ec20a(0x5a4)][0x0];else{if(!_0x5e7183)continue;this['push'](_0x4ec20a(0x61f),_0x954a94,_0x13403c),this[_0x4ec20a(0x43e)](_0x4ec20a(0x5c4),Sprite_Battler[_0x4ec20a(0x770)]),this[_0x4ec20a(0x43e)](_0x4ec20a(0x41e),_0x954a94,[_0x5e7183],_0x336563[_0x4ec20a(0x35f)]),this[_0x4ec20a(0x43e)]('waitCount',0x18),this[_0x4ec20a(0x43e)](_0x4ec20a(0x1eb),_0x954a94,_0x5e7183);}}},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x134)]=function(_0x186d3c,_0x460b32,_0x42b659){const _0x5b4645=_0x8db8d6,_0x38900a=_0x460b32[_0x5b4645(0xaf1)]();this['push'](_0x5b4645(0x61f),_0x186d3c,_0x460b32),this[_0x5b4645(0x43e)](_0x5b4645(0x5c4),Sprite_Battler['_motionSpeed']),this['push'](_0x5b4645(0x41e),_0x186d3c,_0x42b659['clone'](),_0x38900a[_0x5b4645(0x35f)]),this[_0x5b4645(0x43e)](_0x5b4645(0xa0f));for(const _0x319fd4 of _0x42b659){if(!_0x319fd4)continue;this[_0x5b4645(0x43e)](_0x5b4645(0x1eb),_0x186d3c,_0x319fd4);}},Window_BattleLog['prototype'][_0x8db8d6(0xa11)]=function(_0x23a46a,_0x223e55,_0x3c2633){const _0x20b117=_0x8db8d6,_0x450c76=_0x223e55['item']();this['push'](_0x20b117(0x865),_0x23a46a,_0x3c2633,![]),this[_0x20b117(0x43e)](_0x20b117(0xb37)),this[_0x20b117(0x43e)](_0x20b117(0x841)),this[_0x20b117(0x43e)](_0x20b117(0x750)),this[_0x20b117(0x43e)]('performActionEnd',_0x23a46a),this[_0x20b117(0x43e)]('waitForMovement');},Window_BattleLog[_0x8db8d6(0x6da)]['endAction']=function(_0x3456bc){},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x8f2)]=Window_BattleLog['prototype']['displayCurrentState'],Window_BattleLog['prototype'][_0x8db8d6(0x25f)]=function(_0x2a9315){const _0x34331a=_0x8db8d6;if(!VisuMZ[_0x34331a(0x602)][_0x34331a(0x466)][_0x34331a(0x817)][_0x34331a(0x5f6)])return;VisuMZ[_0x34331a(0x602)][_0x34331a(0x8f2)][_0x34331a(0x5fd)](this,_0x2a9315);},Window_BattleLog[_0x8db8d6(0x6da)]['displayCounter']=function(_0xb5a2b){const _0x2cb9a6=_0x8db8d6;this[_0x2cb9a6(0x43e)](_0x2cb9a6(0x647),_0xb5a2b);VisuMZ[_0x2cb9a6(0x602)][_0x2cb9a6(0x466)][_0x2cb9a6(0x965)][_0x2cb9a6(0x413)]&&this[_0x2cb9a6(0x43e)](_0x2cb9a6(0x41e),_0xb5a2b,[BattleManager[_0x2cb9a6(0x7be)]],-0x1);if(!VisuMZ[_0x2cb9a6(0x602)]['Settings']['BattleLog']['ShowCounter'])return;this[_0x2cb9a6(0x43e)](_0x2cb9a6(0x1d0),TextManager[_0x2cb9a6(0x3e2)]['format'](_0xb5a2b[_0x2cb9a6(0x7fd)]()));},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x2af)]=function(_0xfcc710){const _0x2fc075=_0x8db8d6;this[_0x2fc075(0x43e)](_0x2fc075(0xa07),_0xfcc710);if(!VisuMZ[_0x2fc075(0x602)][_0x2fc075(0x466)]['BattleLog']['ShowReflect'])return;this[_0x2fc075(0x43e)]('addText',TextManager[_0x2fc075(0x89c)]['format'](_0xfcc710['name']()));},Window_BattleLog['prototype'][_0x8db8d6(0x818)]=function(_0x1a67ef,_0x28e44f){const _0x32fbae=_0x8db8d6;if(VisuMZ[_0x32fbae(0x602)][_0x32fbae(0x466)][_0x32fbae(0x965)][_0x32fbae(0x56c)]){if(_0x32fbae(0x82a)!=='PJuvU'){const _0x1f1e52=_0x28e44f[_0x32fbae(0xaf1)]();this[_0x32fbae(0x43e)]('showAnimation',_0x1a67ef,[_0x1a67ef],_0x1f1e52[_0x32fbae(0x35f)]);}else this['_growX']=(this[_0x32fbae(0xa20)]*(_0x44fde2-0x1)+this['_targetGrowX'])/_0x423933,this[_0x32fbae(0x73d)]=(this[_0x32fbae(0x73d)]*(_0x43ed2e-0x1)+this['_targetGrowY'])/_0x4ba318;}},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0xa46)]=function(_0x119999,_0x398cae){const _0x302249=_0x8db8d6;this[_0x302249(0x43e)](_0x302249(0x51f),_0x119999,_0x398cae);if(!VisuMZ[_0x302249(0x602)][_0x302249(0x466)][_0x302249(0x817)][_0x302249(0x2a7)])return;const _0x16150f=_0x119999[_0x302249(0x7fd)](),_0x123fc3=TextManager['substitute'][_0x302249(0xad2)](_0x16150f,_0x398cae['name']());this[_0x302249(0x43e)](_0x302249(0x1d0),_0x123fc3);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x323)]=Window_BattleLog[_0x8db8d6(0x6da)]['displayFailure'],Window_BattleLog['prototype'][_0x8db8d6(0x26f)]=function(_0x55bc0d){const _0x65f50d=_0x8db8d6;if(!VisuMZ[_0x65f50d(0x602)][_0x65f50d(0x466)][_0x65f50d(0x817)][_0x65f50d(0x9ab)])return;VisuMZ[_0x65f50d(0x602)][_0x65f50d(0x323)][_0x65f50d(0x5fd)](this,_0x55bc0d);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x950)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6d0)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6d0)]=function(_0x454974){const _0x3af550=_0x8db8d6;if(!VisuMZ[_0x3af550(0x602)][_0x3af550(0x466)][_0x3af550(0x817)][_0x3af550(0x10f)])return;VisuMZ['BattleCore'][_0x3af550(0x950)][_0x3af550(0x5fd)](this,_0x454974);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0xa15)]=Window_BattleLog[_0x8db8d6(0x6da)]['displayMiss'],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0xa14)]=function(_0x230d5c){const _0x37d4c3=_0x8db8d6;!VisuMZ[_0x37d4c3(0x602)][_0x37d4c3(0x466)][_0x37d4c3(0x817)][_0x37d4c3(0x874)]?this['push'](_0x37d4c3(0x6e7),_0x230d5c):VisuMZ[_0x37d4c3(0x602)]['Window_BattleLog_displayMiss'][_0x37d4c3(0x5fd)](this,_0x230d5c);},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x784)]=Window_BattleLog['prototype']['displayEvasion'],Window_BattleLog['prototype']['displayEvasion']=function(_0xa1cacd){const _0x37d976=_0x8db8d6;!VisuMZ['BattleCore'][_0x37d976(0x466)][_0x37d976(0x817)][_0x37d976(0x874)]?_0xa1cacd[_0x37d976(0x57a)]()[_0x37d976(0x383)]?this['push'](_0x37d976(0x349),_0xa1cacd):this[_0x37d976(0x43e)](_0x37d976(0x471),_0xa1cacd):VisuMZ[_0x37d976(0x602)][_0x37d976(0x784)]['call'](this,_0xa1cacd);},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x721)]=function(_0x2c7abb){const _0x23ca27=_0x8db8d6;if(_0x2c7abb[_0x23ca27(0x57a)]()['hpAffected']){if(_0x23ca27(0x2f4)!==_0x23ca27(0x12a))_0x2c7abb[_0x23ca27(0x57a)]()[_0x23ca27(0x3b7)]>0x0&&!_0x2c7abb['result']()[_0x23ca27(0x872)]&&this['push']('performDamage',_0x2c7abb),_0x2c7abb['result']()[_0x23ca27(0x3b7)]<0x0&&this[_0x23ca27(0x43e)]('performRecovery',_0x2c7abb),VisuMZ['BattleCore'][_0x23ca27(0x466)]['BattleLog'][_0x23ca27(0x932)]&&this[_0x23ca27(0x43e)](_0x23ca27(0x1d0),this[_0x23ca27(0xab8)](_0x2c7abb));else{const _0x47a4ee=this[_0x23ca27(0x260)]();this[_0x23ca27(0x342)](_0x47a4ee);}}},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x40e)]=Window_BattleLog[_0x8db8d6(0x6da)]['displayMpDamage'],Window_BattleLog[_0x8db8d6(0x6da)]['displayMpDamage']=function(_0x1179a9){const _0xed3ad6=_0x8db8d6;if(!VisuMZ[_0xed3ad6(0x602)][_0xed3ad6(0x466)][_0xed3ad6(0x817)][_0xed3ad6(0x168)])return;VisuMZ[_0xed3ad6(0x602)]['Window_BattleLog_displayMpDamage'][_0xed3ad6(0x5fd)](this,_0x1179a9);},VisuMZ[_0x8db8d6(0x602)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6a6)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6a6)]=function(_0x20d5c1){const _0x10132e=_0x8db8d6;if(!VisuMZ['BattleCore'][_0x10132e(0x466)][_0x10132e(0x817)][_0x10132e(0x6f4)])return;VisuMZ[_0x10132e(0x602)][_0x10132e(0x6b8)][_0x10132e(0x5fd)](this,_0x20d5c1);},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x844)]=function(_0x5e5e5e){const _0x218583=_0x8db8d6,_0x2473d9=_0x5e5e5e[_0x218583(0x57a)](),_0x28583d=_0x2473d9[_0x218583(0xa35)]();for(const _0x161516 of _0x28583d){const _0x22e6e3=_0x5e5e5e[_0x218583(0x367)]()?_0x161516[_0x218583(0x7f3)]:_0x161516[_0x218583(0x160)];_0x22e6e3&&VisuMZ[_0x218583(0x602)][_0x218583(0x466)][_0x218583(0x817)][_0x218583(0xad4)]&&(_0x218583(0x576)!==_0x218583(0x576)?_0x36d3ff['BattleCore']['Scene_Battle_onEnemyCancel']['call'](this):(this['push'](_0x218583(0xa83)),this[_0x218583(0x43e)](_0x218583(0x16d)),this[_0x218583(0x43e)](_0x218583(0x1d0),_0x22e6e3[_0x218583(0xad2)](_0x5e5e5e[_0x218583(0x7fd)]())),this[_0x218583(0x43e)](_0x218583(0x66d)))),_0x161516['id']===_0x5e5e5e[_0x218583(0x700)]()&&('KXqGk'===_0x218583(0x479)?_0x1cfb6d['BattleCore']['JS'][_0x319f40][_0x218583(0x5fd)](this,this,this,_0x2a5616,0x0):this['push'](_0x218583(0x79f),_0x5e5e5e));}},Window_BattleLog['prototype']['displayRemovedStates']=function(_0x56e114){const _0x1fec80=_0x8db8d6;if(!VisuMZ['BattleCore'][_0x1fec80(0x466)][_0x1fec80(0x817)][_0x1fec80(0x62a)])return;const _0x8884f3=_0x56e114['result'](),_0x36994c=_0x8884f3[_0x1fec80(0xa12)]();for(const _0xd891a9 of _0x36994c){if('RSFAF'===_0x1fec80(0xb32))_0xd891a9[_0x1fec80(0x1ae)]&&(this['push'](_0x1fec80(0xa83)),this[_0x1fec80(0x43e)](_0x1fec80(0x16d)),this['push'](_0x1fec80(0x1d0),_0xd891a9[_0x1fec80(0x1ae)][_0x1fec80(0xad2)](_0x56e114['name']())),this[_0x1fec80(0x43e)](_0x1fec80(0x66d)));else{const _0x549759=_0x28f695(_0x48d671['$1'])[_0x1fec80(0xa51)](),_0x177d3c=_0x4a7310(_0x41cb96['$2']);_0x4268cd[_0x549759]=_0x177d3c,_0x222d4f+=_0x177d3c;}}},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0xa6b)]=function(_0x45ed8a){const _0x4b00f2=_0x8db8d6,_0x278ed9=VisuMZ[_0x4b00f2(0x602)][_0x4b00f2(0x466)][_0x4b00f2(0x817)],_0x5924c3=_0x45ed8a[_0x4b00f2(0x57a)]();if(_0x278ed9[_0x4b00f2(0xb0a)])this['displayBuffs'](_0x45ed8a,_0x5924c3[_0x4b00f2(0x693)],TextManager[_0x4b00f2(0x3c7)]);if(_0x278ed9[_0x4b00f2(0x3c8)])this[_0x4b00f2(0x8c9)](_0x45ed8a,_0x5924c3[_0x4b00f2(0x341)],TextManager[_0x4b00f2(0x9d6)]);if(_0x278ed9['ShowRemovedBuff'])this[_0x4b00f2(0x8c9)](_0x45ed8a,_0x5924c3['removedBuffs'],TextManager['buffRemove']);},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x8c9)]=function(_0x52ca13,_0x23484d,_0x5d41d9){const _0x563477=_0x8db8d6;for(const _0x3e2ba1 of _0x23484d){const _0x265c98=_0x5d41d9['format'](_0x52ca13[_0x563477(0x7fd)](),TextManager[_0x563477(0x48b)](_0x3e2ba1));this[_0x563477(0x43e)](_0x563477(0xa83)),this[_0x563477(0x43e)](_0x563477(0x16d)),this[_0x563477(0x43e)](_0x563477(0x1d0),_0x265c98),this[_0x563477(0x43e)](_0x563477(0x66d));}},VisuMZ['BattleCore']['Window_BattleLog_clear']=Window_BattleLog[_0x8db8d6(0x6da)]['clear'],Window_BattleLog[_0x8db8d6(0x6da)]['clear']=function(){const _0x419d74=_0x8db8d6;VisuMZ[_0x419d74(0x602)]['Window_BattleLog_clear'][_0x419d74(0x5fd)](this),this[_0x419d74(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x883)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x16d)],Window_BattleLog['prototype'][_0x8db8d6(0x16d)]=function(){const _0x36e665=_0x8db8d6;VisuMZ[_0x36e665(0x602)][_0x36e665(0x883)][_0x36e665(0x5fd)](this),this[_0x36e665(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x774)]=Window_BattleLog['prototype'][_0x8db8d6(0xa83)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0xa83)]=function(){const _0x23aeaf=_0x8db8d6;VisuMZ[_0x23aeaf(0x602)]['Window_BattleLog_popBaseLine']['call'](this),this['refresh'](),this[_0x23aeaf(0x8fb)]();},VisuMZ['BattleCore'][_0x8db8d6(0x982)]=Window_BattleLog['prototype']['popupDamage'],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x5f9)]=function(_0x465a43){const _0xf3ad7f=_0x8db8d6;VisuMZ[_0xf3ad7f(0x602)]['Window_BattleLog_popupDamage']['call'](this,_0x465a43),this[_0xf3ad7f(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)]['waitForNewLine']=function(){const _0x3ee608=_0x8db8d6;let _0x56a66e=0x0;this[_0x3ee608(0x325)]['length']>0x0&&(_0x56a66e=this[_0x3ee608(0x325)][this['_baseLineStack'][_0x3ee608(0x5e0)]-0x1]),this['_lines'][_0x3ee608(0x5e0)]>_0x56a66e?this['wait']():this[_0x3ee608(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x9f3)]=Window_BattleLog['prototype']['performActionStart'],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x1f7)]=function(_0x4882ff,_0xac927e){const _0x2fe4cf=_0x8db8d6;VisuMZ[_0x2fe4cf(0x602)][_0x2fe4cf(0x9f3)]['call'](this,_0x4882ff,_0xac927e),this[_0x2fe4cf(0x8fb)]();},VisuMZ['BattleCore'][_0x8db8d6(0x9c6)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x61f)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x61f)]=function(_0xf2e6c5,_0x2b7c10){const _0x17aada=_0x8db8d6;VisuMZ[_0x17aada(0x602)][_0x17aada(0x9c6)][_0x17aada(0x5fd)](this,_0xf2e6c5,_0x2b7c10),this[_0x17aada(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x598)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x5b5)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x5b5)]=function(_0x1c2f98){const _0x4bcd01=_0x8db8d6;VisuMZ[_0x4bcd01(0x602)][_0x4bcd01(0x598)]['call'](this,_0x1c2f98);for(const _0x2ea514 of BattleManager['allBattleMembers']()){if(!_0x2ea514)continue;if(_0x2ea514['isDead']())continue;_0x2ea514[_0x4bcd01(0x94c)]();}this[_0x4bcd01(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x500)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x3b1)],Window_BattleLog['prototype'][_0x8db8d6(0x3b1)]=function(_0x520207){const _0x44a7fd=_0x8db8d6;VisuMZ[_0x44a7fd(0x602)]['Window_BattleLog_performDamage'][_0x44a7fd(0x5fd)](this,_0x520207),this[_0x44a7fd(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x77a)]=Window_BattleLog[_0x8db8d6(0x6da)]['performMiss'],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6e7)]=function(_0x15aadd){const _0x1226f4=_0x8db8d6;VisuMZ[_0x1226f4(0x602)][_0x1226f4(0x77a)][_0x1226f4(0x5fd)](this,_0x15aadd),this[_0x1226f4(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x19f)]=Window_BattleLog[_0x8db8d6(0x6da)]['performRecovery'],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x1ad)]=function(_0x171a5c){const _0x2a3ba9=_0x8db8d6;VisuMZ[_0x2a3ba9(0x602)][_0x2a3ba9(0x19f)][_0x2a3ba9(0x5fd)](this,_0x171a5c),this[_0x2a3ba9(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x49c)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x349)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x349)]=function(_0x2493b0){const _0x53ba06=_0x8db8d6;VisuMZ[_0x53ba06(0x602)]['Window_BattleLog_performEvasion']['call'](this,_0x2493b0),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x471)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x471)]=function(_0x33c332){const _0x1b682a=_0x8db8d6;VisuMZ[_0x1b682a(0x602)][_0x1b682a(0xb2a)][_0x1b682a(0x5fd)](this,_0x33c332),this[_0x1b682a(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x2e7)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x647)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x647)]=function(_0x5316d9){const _0x17c9fe=_0x8db8d6;VisuMZ[_0x17c9fe(0x602)][_0x17c9fe(0x2e7)][_0x17c9fe(0x5fd)](this,_0x5316d9),this['callNextMethod']();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x1ee)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0xa07)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0xa07)]=function(_0x182716){const _0xba8d0f=_0x8db8d6;VisuMZ[_0xba8d0f(0x602)][_0xba8d0f(0x1ee)][_0xba8d0f(0x5fd)](this,_0x182716),this[_0xba8d0f(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x907)]=Window_BattleLog['prototype'][_0x8db8d6(0x51f)],Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x51f)]=function(_0x382030,_0xececc7){const _0x323fc5=_0x8db8d6;VisuMZ[_0x323fc5(0x602)]['Window_BattleLog_performSubstitute']['call'](this,_0x382030,_0xececc7),this[_0x323fc5(0x8fb)]();},VisuMZ[_0x8db8d6(0x602)][_0x8db8d6(0x648)]=Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x79f)],Window_BattleLog[_0x8db8d6(0x6da)]['performCollapse']=function(_0x40a7c7){const _0x22565f=_0x8db8d6;VisuMZ[_0x22565f(0x602)][_0x22565f(0x648)][_0x22565f(0x5fd)](this,_0x40a7c7),this[_0x22565f(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x64c)]=function(_0x1b13a2,_0x2c77a2){const _0x16f4fa=_0x8db8d6;_0x1b13a2['performCastAnimation'](_0x2c77a2),this[_0x16f4fa(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x69f)]=function(_0xf5f540,_0x36a13c){const _0x45b166=_0x8db8d6,_0x76adf7=_0xf5f540['attackAnimationId1']();_0x76adf7<=0x0?SoundManager['playEnemyAttack']():this[_0x45b166(0x4b9)](_0x36a13c,_0x76adf7);},Window_BattleLog['prototype']['applyImmortal']=function(_0x498561,_0x4686af,_0x5b941f){const _0x26d59e=_0x8db8d6,_0x413c7b=[_0x498561]['concat'](_0x4686af);for(const _0x4134cb of _0x413c7b){if(!_0x4134cb)continue;_0x4134cb[_0x26d59e(0x44a)](_0x5b941f);}this[_0x26d59e(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x5c4)]=function(_0x281e6f){const _0xd64585=_0x8db8d6;this[_0xd64585(0x857)]=_0x281e6f;},Window_BattleLog['prototype'][_0x8db8d6(0xa1d)]=function(_0x286aa9,_0x11a903){const _0x4679e7=_0x8db8d6;for(const _0x40883d of _0x286aa9){if('oogWE'===_0x4679e7(0x6b4)){if(!_0x40883d)continue;_0x40883d[_0x4679e7(0xa1d)](_0x11a903);}else{this[_0x4679e7(0x713)]=_0x3c8bdc[_0x4679e7(0x51a)][_0x4679e7(0x7a7)];return;}}this[_0x4679e7(0x8fb)]();},Window_BattleLog['prototype'][_0x8db8d6(0x216)]=function(_0x4084d8,_0x48c169,_0x59b424,_0x54d594,_0x503a61,_0x25c837){const _0x55b0b6=_0x8db8d6;_0x4084d8[_0x55b0b6(0x553)](_0x48c169,_0x59b424,_0x54d594,_0x503a61,_0x25c837,-0x1),this[_0x55b0b6(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x58d)]=function(_0x3cf618,_0x32a3bf,_0x404557,_0x1ac381,_0x391268,_0x3ab5a7,_0x49942f){const _0x531a88=_0x8db8d6,_0x3b3577=Math[_0x531a88(0x8e0)](..._0x32a3bf[_0x531a88(0x9f8)](_0x18cf34=>_0x18cf34[_0x531a88(0x538)]()[_0x531a88(0x94f)]-_0x18cf34['battler']()[_0x531a88(0x5d3)]()/0x2)),_0x1ffe4e=Math[_0x531a88(0x623)](..._0x32a3bf[_0x531a88(0x9f8)](_0x2e53e1=>_0x2e53e1['battler']()[_0x531a88(0x94f)]+_0x2e53e1[_0x531a88(0x538)]()[_0x531a88(0x5d3)]()/0x2)),_0x2b8f18=Math[_0x531a88(0x8e0)](..._0x32a3bf[_0x531a88(0x9f8)](_0x1b8a3e=>_0x1b8a3e[_0x531a88(0x538)]()[_0x531a88(0x214)]-_0x1b8a3e[_0x531a88(0x538)]()[_0x531a88(0x3be)]())),_0x17b678=Math[_0x531a88(0x623)](..._0x32a3bf[_0x531a88(0x9f8)](_0x24c9ae=>_0x24c9ae[_0x531a88(0x538)]()[_0x531a88(0x214)])),_0x5510da=_0x32a3bf[_0x531a88(0x691)](_0x305f81=>_0x305f81[_0x531a88(0x367)]())[_0x531a88(0x5e0)],_0xe928f2=_0x32a3bf[_0x531a88(0x691)](_0x109649=>_0x109649[_0x531a88(0x26d)]())['length'];let _0x2363ea=0x0,_0x376ddd=0x0;if(_0x404557[_0x531a88(0x3ed)](/front/i))_0x2363ea=_0x5510da>=_0xe928f2?_0x3b3577:_0x1ffe4e;else{if(_0x404557[_0x531a88(0x3ed)](/middle/i))_0x531a88(0x4bb)==='MkabV'?this['_activeWeaponSlot']=_0x15906a||0x0:(_0x2363ea=(_0x3b3577+_0x1ffe4e)/0x2,_0x49942f=-0x1);else{if(_0x404557[_0x531a88(0x3ed)](/back/i)){if(_0x531a88(0xaa2)!=='IdHbz')_0x2363ea=_0x5510da>=_0xe928f2?_0x1ffe4e:_0x3b3577;else{if(this[_0x531a88(0x306)]()['note'][_0x531a88(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x45af1a(_0x4e0b29['$1']);else{if(this[_0x531a88(0x306)]()['note'][_0x531a88(0x3ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x54bf94(_0x11359e['$1']);}return 0x0;}}}}if(_0x404557[_0x531a88(0x3ed)](/head/i))_0x376ddd=_0x2b8f18;else{if(_0x404557[_0x531a88(0x3ed)](/center/i))_0x376ddd=(_0x2b8f18+_0x17b678)/0x2;else _0x404557[_0x531a88(0x3ed)](/base/i)&&(_0x376ddd=_0x17b678);}_0x3cf618[_0x531a88(0x553)](_0x2363ea,_0x376ddd,_0x1ac381,_0x391268,_0x3ab5a7,_0x49942f),this[_0x531a88(0x8fb)]();},Window_BattleLog[_0x8db8d6(0x6da)][_0x8db8d6(0x6c3)]=function(_0x55a29e,_0x2c5e71,_0x5673aa){const _0x37c828=_0x8db8d6;for(const _0x2f9b2f of _0x55a29e){if(!_0x2f9b2f)continue;_0x2f9b2f['jumpBattler'](_0x2c5e71,_0x5673aa);}this[_0x37c828(0x8fb)]();};