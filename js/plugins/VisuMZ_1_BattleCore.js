//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.41;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.41] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @param alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x99d3=['_cancelButton','lTpZc','_damages','skill','oyJrg','Sprite_Actor_setBattler','addSkillCommands','toUpperCase','setCustomDamageFormula','statusText','drawItemBackground','commandNameWindowCenter','dxMVp','ActSeq_Mechanics_BoostPointsStoreData','ActSeq_Mechanics_EtbAction','_skewDuration','ShowFailure','randomInt','battlerSprites','floatBattler','PerformAction','sort','YqZgj','PostApply%1JS','vmtsZ','_tempActor','isFloating','Game_Action_makeTargets','Game_Troop_setup','helpWindowRectBorderStyle','cameraOffsetDuration','removeImmortal','DTB','performMoveToTargets','jSMhq','_targetSkewY','active','Radius','waitForNewLine','ActSeq_Movement_BattleStep','ActSeq_Impact_ShockwaveCenterTargets','FlinchDistanceX','CriticalHitFlat','setupDamagePopup','Jvumm','createBorderStylePortraitSprite','ActSeq_Angle_Reset','setupTextPopup','ActSeq_Weapon_SetActiveWeapon','VisuMZ_2_DragonbonesUnion','requestDragonbonesAnimation','onBattleStart','isMagical','_floatWholeDuration','isPlaytest','value','RbMxY','ActSeq_Camera_WaitForCamera','CastCertain','JS\x20BATTLE\x20VICTORY','vkCEu','Scene_Battle_startActorCommandSelection','_freezeMotionData','+%1','process_VisuMZ_BattleCore_PluginParams','needsActorInputCancel','ActSeq_Movement_MoveToPoint','Item-%1-%2','DigitGrouping','_enemyWindow','lYSSV','displayBuffs','updateInterpreter','GnyPS','StatusWindowAttachmentFront','Style','battleEffect','jUpLU','autoBattleStyle','some','DualWield','canAlterActionCostPTB','ScaleUp','ActSeq_Movement_WaitForMovement','Scene_Battle_itemWindowRect','HalfActions','autoSelect','param','%1EndActionJS','VisuMZ_3_ActSeqProjectiles','processBorderActor','_svBattlerSprite','hasSvBattler','PostRegenerateJS','ShowPortraits','itemWindowRect','canEscape','createEnemies','battlerShadowScaleY','isActiveTpb','isAnyoneChangingOpacity','XSbGY','ActSeq_Horror_NoiseRemove','command301_PreBattleEvent','RctnU','currentSymbol','Spriteset_Battle_createLowerLayer','moveToStartPositionBattleCore','replace','displayReflectionPlayBack','CheckMapBattleEventValid','JS\x20%1DAMAGE\x20%2','ShowFacesListStyle','startActorSelection','ActSeq_Camera_FocusTarget','iterateBattler','makeDeepCopy','CtIkT','applyForcedGameTroopSettingsBattleCore','IconSet','Window_BattleStatus_initialize','_battler','fJvNW','WjvEj','moveBattlerDistance','bPhLD','qdkJA','mhlqB','updateTargetPosition','Jqcsl','Elements','collapseType','PyDLb','makeSpeed','VisuMZ_2_HorrorEffects','VisuMZ_2_BattleSystemSTB','_enemySprites','addCombatLogCommand','BRiAH','ConfigManager_applyData','Game_Battler_onTurnEnd','damageRate','_skewY','_actionBattlers','488451kYPveu','setupFont','ActSeq_Set_FinishAction','updateAttachmentSprites','compatibilityVisible','CZnSC','Scene_Battle_terminate','resizeWindowBorderStyle','AwuUl','setBattlerFlip','EQTqz','setCursorRect','ActSeq_Horror_GlitchCreate','displayAddedStates','frameVisible','PostApplyJS','ActionEnd','qUzWz','getInputButtonString','BattleManager_startAction','eSVwz','waitForEffect','_colorType','noise','thrust','StatusWindowSkinHide','lyiuR','stepForward','updateShadowVisibility','BTestBypass','PopupShiftY','criticalHitFlat','placeActorName','_skewWholeDuration','AsTarget','Scene_Boot_onDatabaseLoaded','CoreEngine','_updateClientArea','getAttackWeaponAnimationId','ActSeq_Mechanics_PtbFullHalfAction','setFullActionsPTB','Game_Action_clear','CaRgj','displayCounter','makeData','addText','setupMotionBlurImpactFilter','tpbActorSwitchConditionsMet','Amp','HitFlat','NameFontSize','NQbEc','VisuMZ_2_BattleSystemETB','Victory','isForFriend','gaugeX','VisuMZ_0_CoreEngine','ActSeq_Animation_CastAnimation','startInput','Window_BattleLog_popBaseLine','PCXgV','CmdIconAutoBattle','zRsSg','twiim','isAnyoneMoving','ShowAddedDebuff','_battleLayoutStyle','preparePartyRefresh','createMiss','PostDamageAsTargetJS','MQhLo','hpAffected','_jumpDuration','isBorderStylePortraitShown','Mechanics','dmDyo','ActSeq_BattleLog_WaitForBattleLog','AutoBattleOK','portrait','displayTpDamage','updateGrow','resize','subject','tJDQF','BattleManager_updatePhase','mybRd','EmergeText','initMembersBattleCore','Sprite_Enemy_updateBossCollapse','rPmxT','refresh','actorCommandAutoBattle','_skillIDs','changeBattlebacks','Window_BattleLog_refresh','animationId','SkVOZ','dCQdx','XksoA','canMove','ActSeq_Skew_WaitForSkew','toZVF','Window_ActorCommand_setup','isForOpponent','unshift','battleCameraData','ActSeq_Mechanics_BreakShieldChange','drawGauge','Game_Battler_makeSpeed','_angleEasing','Height','boxWidth','opacity','ActSeq_Mechanics_BoostPointsChange','yOqOg','onGrowEnd','LBMDK','NgoQY','setupBattleCore','inBattle','_actorCommandWindow','battleAnimation','XPActorDefaultHeight','_targetOpacity','bkMlL','createCommandVisibleJS','pages','VisuMZ_3_BoostAction','setupMotion','setupBattleback','pkDRT','updateStyleOpacity','processForcedAction','performCastAnimation','auto','%1Event','zivWh','Dyije','mainSprite','prepareBorderActor','rAOLz','applyGlobalCommonEventNotetags','mainSpriteHeight','StepDistanceY','isEnemy','_backAttachmentSprite','getBattlePortraitOffsetX','drawBackgroundRect','_targetGrowX','jLWFI','BattleManager_processVictory','stepFlinch','svBattlerShadowVisible','parent','vTYNc','allowRandomSpeed','startSkew','applyGuard','ActSeq_Movement_MoveBy','Actions','ActSeq_Movement_WaitForScale','HsSjP','performTpbActiveCheckSwitch','swapEnemyIDs','_forcing','kYlbU','addSkillTypeCommand','_branch','_surprise','Index','Sprite_Actor_moveToStartPosition','addDebuff','setFrame','Fvmmp','_damagePopupArray','ReflectAnimation','PopupDuration','performActionMotions','DisplayAction','alive\x20enemies\x20not\x20target','getColor','MwQiZ','checkShowHideBattleNotetags','_lines','Debuffs','attackSkillId','PreDamageAsTargetJS','createChildSprite','setHelpWindow','CmdIconEscape','updateFloat','ShowPortraitsBorderStyle','partyCommandWindowRectXPStyle','KNsLd','PreStartActionJS','EscapeSuccessJS','skillTypes','ConvertActionSequenceTarget','ynGWF','setBattleCameraPoint','ParseSkillNotetags','ActionSkillMsg2','animation','Game_Battler_performMiss','SkipPartyCmd','updateBitmap','changeBattlerOpacity','isGuard','_battlerHue','makeTargetSelectionMoreVisible','oBxWn','_battleField','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','isFriendly','SkillItemMiddleLayout','CdKyY','max','Window_BattleLog_displayMiss','NameAttachStateIcon','animationNextDelay','drawItem','clearDamagePopup','xPbkK','MseZq','battleSpin','NameLegacy','zkOfQ','splice','isAnyProjectilePresent','update','Sprite_Enemy_updateStateSprite','Window_BattleLog_displayMpDamage','autoBattleStart','eAPIr','slice','mAgED','wKUZZ','displayReflection','ActSeq_Mechanics_HpMpTp','BoostPoints','eGZRD','traitObjects','isSkipPartyCommandWindow','HgUzH','QoL','hasSkill','hkTTO','mainFontSize','OqgEv','_lastRegenFrameCount','setBattlePortrait','skills','setupShockwaveImpactFilter','isCertainHit','updateVisibility','rgHNq','wFfAR','QrqKg','iconHeight','_inputting','KpJXm','AGI','updatePositionBattleCore','_subject','ShuffleArray','actionEffect','getWtypeIdWithName','checkShowHideSkillNotetags','TOEOW','coreEngineRepositionEnemies','setupCriticalEffect','AutoMeleeSolo','bctsf','KxguP','setMoveEasingType','addAutoBattleCommand','_itemWindow','Game_Map_battleback2Name','evalDamageFormula','revealNewWeaknesses','skillItemWindowRectBorderStyle','scale','AHXCp','_motionCount','applyResultSwitches','addDamageSprite','Skill-%1-%2','isRightInputMode','VariableID','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','floor','gainHp','STYPES','Game_BattlerBase_die','Window_BattleLog_performAction','start','ActSeq_Camera_Clamp','damageFlat','rrBax','PrioritySortActors','softDamageCap','call','Sprite_Battler_updatePosition','aNrkz','addWeaponSwapCommand','PreEndTurnJS','setSTBExploited','processBattleCoreJS','removeState','YrZkJ','htLbh','eHSFR','ActionAnimation','rrwBg','DistanceY','updateWaitMode','getNextSubject','Sprite_Animation_targetSpritePosition','onSkewEnd','damageOffsetY','hide','filters','requestRefresh','Scene_Battle_selectPreviousCommand','Game_Enemy_transform','IcrVN','clamp','aDvYQ','drawItemImagePortraitStyle','QAZKx','onEscapeSuccess','_wtypeIDs','alterActionCostPTB','weapons','Sprite_Battler_update','_autoBattleWindow','piNTA','ActionEndUpdate','applyHardDamageCap','_skewX','cWpku','Damage','EPAin','canAttack','cmkdU','_battleCoreBattleResumeAfter','chant','zZMiG','isInputting','flashColor','animationBaseDelay','command283','arRedFlat','StartName','AttackAnimation','NVZml','ActSeq_Mechanics_DeathBreak','JS\x20%1REGENERATE','otQtS','children','round','addItemCommand','focus','trueRandomTarget','IUbKI','updateBattleProcess','StepDistanceX','_back1Sprite','_actorWindow','CSVeU','waitForOpacity','cancel','sortDamageSprites','Armor-%1-%2','Game_BattlerBase_initMembers','Scene_Battle_createHelpWindow','dTNuG','thFIL','zbJIv','setupChild','startActorCommandSelection','STRUCT','retreat','Game_Battler_performEvasion','VuNhT','nhoPu','addActor','alterCost','getSkillIdWithName','tjcPj','Window_SkillList_maxCols','GVUpv','loadSvActor','alive\x20battlers\x20not\x20user','traitSet','_homeY','performSubstitute','HelpItem','actorCommandEscape','clearMotion','_growWholeDuration','_shake','MIN_SAFE_INTEGER','wjCQx','DkWMr','deadMembers','bCFzg','Scene_Battle_updateBattleProcess','PreDamageJS','tpbCommandFight','Scene_Battle_onActorOk','loop','_endBattle','oFLXQ','Window_Options_addGeneralOptions','updateEventMain','ActSeq_Weapon_NextActiveWeapon','enemy','PcmEo','wQAYx','front\x20base','inHomePosition','createActorCommandWindowBattleCore','isAttack','min','abs','Sprite_Weapon_loadBitmap','addChild','drawIcon','_damageContainer','JS\x20%1APPLY\x20%2','Game_Action_itemEffectAddNormalState','BattleManager_onEncounter','ActSeq_Mechanics_WaitForEffect','yKAef','Scene_Battle_skillWindowRect','ReflectPlayback','AllowCollapse','endBattle','Sprite_Actor_updateShadow','ShowRemovedState','MOMfO','BattleStartEvent','gtMxY','isPreviousSceneBattleTransitionable','_targetAngle','showAnimation','ZzwLV','refreshMotion','targetSpritePosition','setActiveWeaponSlot','SlotID','arPenRate','changePaintOpacity','_statusWindow','_emptyBitmap','Enemy-%1-%2','TaCBA','turnOrderChangeOTB','applyDamageCaps','_attackAnimationId','%1StartTurnJS','UbnoG','ORsQv','updateActors','ByGLo','skew','isTriggered','AllowRandomSpeed','clearElementChanges','canGuard','motionSpeed','adjustPosition_ScaleDown','initBattleCore','Window_BattleLog_pushBaseLine','QxqGX','uiInputPosition','refreshDimmerBitmap','Window_BattleLog_performSubstitute','addChildToBack','updateCustomActionSequence','battleback1Name','damage','requestMotionRefresh','lEIGe','ZFexB','attackAnimationIdSlot','onOpacityEnd','isCharging','AttachStateOffsetX','Hlyls','CriticalDmgRate','applyImmortal','ConvertParams','createStateSprite','CalcActionSpeedJS','setSvBattlerSprite','WuGvR','mwXNs','epyYM','IhCds','Point','updateBossCollapse','BBpwY','padding','crhRs','AucpG','AuUlI','Game_Interpreter_command283','clearRect','ActSeq_Set_WholeActionSet','Game_BattlerBase_canAttack','DamageStyles','YisNN','alive\x20opponents\x20not\x20target','trim','WtypeId','ParseAllNotetags','isAutoBattleCommandAdded','createString','ActSeq_BattleLog_WaitForNewLine','forceSelect','parseForcedGameTroopSettingsBattleCore','PreDamageAsUserJS','startSpin','processVictory','CjHQJ','ActSeq_Motion_FreezeMotionFrame','_battleCoreAddedElements','ArRedFlat','ActSeq_Impact_MotionBlurScreen','Game_Action_itemEffectAddAttackState','aErQf','Game_Enemy_setup','AddOption','mainSpriteScaleY','makeDamageValue','isImmortal','VisuMZ_2_WeaponSwapSystem','IconStypeMagic','Window_BattleLog_performEvasion','canAddSkillCommand','iconText','isTpbMainPhase','JS\x20%1END\x20BATTLE','bitmap','createDamageContainer','extraPositionY','callNextMethod','_effectsContainer','AmASk','join','ActSeq_Animation_WaitForAnimation','MAXHP','ParseClassNotetags','zyjWJ','targetActionSet','setEventCallback','Window_BattleLog_displayCurrentState','tvtOd','isATB','Tclec','stypeId','KdrOH','kPDmZ','Game_Action_apply','drawItemStatusXPStyle','getLastPluginCommandInterpreter','isTurnBased','walk','prototype','animationShouldMirror','StatusWindowAttachmentFrontOffsetX','zJJCx','BattleManager_startBattle','Sprite_StateIcon_updateFrame','_enemyID','CxKZh','bhREX','makeHpDamageText','iLWrS','createJS','equips','autoSelectLastSelected','isMoving','missile','isJumping','_skillWindow','BPlwO','alterPriority','isTpbCharged','Direction','process_VisuMZ_BattleCore_jsFunctions','ActionCount','Sprite_Battler_isMoving','WEAPON\x20SWAP','ActSeq_Movement_MoveToTarget','getHardDamageCap','mhp','updateEffectContainers','Srhno','createContents','constructor','move','applyVariance','Frame','updateAttachedSprites','_targetGrowY','dataId','cameraDuration','%1EndTurnJS','currentExt','movement','waitForJump','ActSeq_Horror_NoiseCreate','Window_BattleStatus_drawItemImage','_commandNameWindow','MP_Flat','qZFaP','updateSkew','message2','tesCu','isMeleeSingleTargetAction','setActiveWeaponSet','updateBattlebackBitmap1','EVAL','ActSeq_Motion_PerformAction','redraw','ngOsA','map','lorOQ','_index','changeInputWindow','nPFAX','NextTurn','SmoothImage','isAnyoneJumping','origin','startAttackWeaponAnimation','Window_BattleLog_performRecovery','jQkLj','BQnfE','_battlePortrait','_flashColor','HEMpv','customDamageFormula','displayItemMessage','statusWindowRect','Sprite_Actor_setActorHome','_partyCommandWindow','duqwb','isSceneBattle','JuzJj','noSimilarSTypes','displayAction','CriticalHitRateJS','ActiveTpbOptionsMessage','BAJNe','clearFreezeMotion','JS\x20BATTLE\x20DEFEAT','evalDamageFormulaBattleCore','isActor','_dragonbonesSpriteContainer','angle','huiTE','LzRwg','pop','displayType','_commonEventIDs','_multipliers','ApplyImmortal','setActorHome','_animationCount','Window_BattleLog_performReflection','dutRD','HfdqD','autoSelectPriority','Game_Battler_clearDamagePopup','pmNDn','COMBATLOG','battleSpriteSkew','alterType','ElementStatusCore','StartTurnMsg','CommandVisible','ARRAYNUM','oCtyh','alignBattleCoreDamageSprite','CmdStyle','aQbjS','Scene_Battle_createActorCommandWindow','isAnyoneSpinning','addSingleSkillCommands','counterAttack','wuuGf','stepBack','updateJump','AkllX','reserveCommonEvent','isGuardWaiting','onEscapeFailure','_callSceneOptions','process_VisuMZ_BattleCore_CreateRegExp','centerFrontViewSprite','IfXmp','SZLJR','ShowWeapon','_target','isEscapeCommandEnabled','uiMenuStyle','_indent','battleUIOffsetY','_floatEasing','_animationSprites','setText','createTroopNote','missed','dead\x20battlers','lloUX','Shadow2','turnCount','WaitForOpacity','targetObjects','updateForceAction','NcDAo','helpAreaHeight','applyEasing','isEffecting','isOnCurrentMap','Game_Battler_forceAction','_enemyId','getBattlePortrait','ResetFocus','ScaleDown','RequiresDefeat','dead\x20opponents','getItemDamageAmountLabelBattleCore','ScaleX','isUndecided','Sprite_Enemy_initVisibility','addGeneralOptions','battleSkew','_currentAngle','makeBattleCommand','ActSeq_Mechanics_ArmorPenetration','displayCritical','HPKQL','Exploiter','pushBaseLine','ShowPopup','jump','ytQOv','createAttachmentSprites','ActSeq_BattleLog_Clear','waitForFloat','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','onTurnEnd','debuffAdd','itemEffectAddAttackState','canGuardBattleCore','drawItemImage','WaitForFloat','command236','optDisplayTp','JNyAq','ZYWvb','battleback2Name','HitRate','rwwnK','options','SceneManager_isSceneChanging','VisuMZ_2_BattleSystemFTB','Scene_Battle_startEnemySelection','MAT','user','allBattleMembers','isBusy','_cache','item','Settings','checkTpbInputOpen','Sprite_Enemy_updateCollapse','freezeMotion','WKqip','_cacheTextWidth','showPortraits','setBattleCameraTargets','BattleLayout','isDisplayEmergedEnemies','battleGrow','PRE-','performRecovery','isOpen','changeTurnOrderByCTB','Spriteset_Battle_updateActors','gekef','isBattleCoreTargetScope','criticalHitRate','Game_Party_addActor','_totalValue','autoBattleAtStart','Window_Options_statusText','loMzJ','BattleManager_makeActionOrders','createEnemyNameContainer','battleLayoutStyle','getDefeatedEnemies','GmGsc','isDamagePopupRequested','_stateIconSprite','occasion','CreateActionSequenceTargets','damageContainer','_enemyNameContainer','Destination','Formula','_targetSkewX','RegExp','SaflV','text\x20target','CuhMX','WaitForAnimation','motionIdle','autoBattleWindowRect','isPhysical','vOOmX','_createClientArea','_appeared','YQgxi','onAngleEnd','iZzcN','commandStyleCheck','PostStartActionJS','kwTBA','sbExj','PreApplyJS','NameAlwaysSelectOnly','gainMp','MAXMP','_battleCoreBattleStartEvent','PostDamage%1JS','FaceAway','Actor','ATDdX','TPB','commandNameWindowDrawText','Scene_Battle_startActorSelection','Scene_Battle_helpWindowRect','actor','statusWindowRectBorderStyle','updatePosition','#ffffff','Sprite_Battler_updateMain','show','VisuMZ_2_BattleSystemCTB','startPartyCommandSelection','DigitGroupingDamageSprites','forceMotion','_growEasing','setBattleZoom','helpWindowRect','Sprite_Actor_initMembers','performAttack','XtyZK','Exploited','sHlpY','ActionCenteredName','recoverAll','isForAll','CurrentTurn','default','Scene_Battle_updateStatusWindowPosition','1:1','loadWindowskin','AnchorY','_reflectionTarget','adjustPosition_ScaleToFit','EnableDamageCap','moveBattlerToPoint','performMiss','Game_Action_itemHit','CheckSkillCommandShowSwitches','actorCommandSingleSkill','Override','qkniJ','_offsetY','Game_Temp_requestAnimation','_windowLayer','PostEndBattleJS','HyGSW','_actions','iAEiR','jumpBattler','actorCommandCancelTPB','Window_BattleLog_popupDamage','actorCommandWindowRect','addBuff','ActSeq_BattleLog_Refresh','waitForAnimation','ActSeq_Element_AddElements','isOTB','WVFoo','rowSpacing','Variable','MotionAni','itemTextAlign','NNvbZ','processDefeat','vvvZP','rQPtT','StartTurnShow','isCustomActionSequence','Zxlxn','DBFeF','jwtPS','Game_System_initialize','ChantStyle','EguQJ','JpJIm','PortraitScale','itemEffectAddNormalState','KSwHq','AnimationID','GNXlu','surprise','filterArea','_battleCoreForcedElements','tEZrx','BattleDefeatJS','abnormal','wait','_iconIndex','isDuringNonLoopingMotion','isBattlerGrounded','StyleOFF','MDF','_weather','HP_Flat','onAllActionsEnd','loadBitmap','requestMotion','power','FollowTurn','CalcEscapeRatioJS','dead\x20actors','enemyNames','currentAction','battleMove','pxhua','WmZXW','ActSeq_Mechanics_BreakShieldReset','_hpGaugeSprite','create','DuxOq','Game_Action_evalDamageFormula','UFroE','_armorPenetration','nzZon','itemCri','setBattleSkew','uxSda','nextActiveWeaponSlot','performAction','createTargetsJS','applyTargetFilters','skillItemWindowRectMiddle','Veewp','_currentActor','XPActorCommandLines','command3011','_padding','FlashColor','isBattleFlipped','Spriteset_Battle_createBattleField','chantStyle','isAlive','ESCAPE','umKyq','_isBattlerFlipped','_preBattleCommonEvent','_escapeRatio','ARRAYSTRUCT','playCancel','helpAreaBottom','isBattleMember','updateShadowPosition','ShowAddedBuff','Khzzw','Sprite_Enemy_createStateIconSprite','addSingleSkillCommand','current\x20target','StateIconOffsetX','ActSeq_Mechanics_RemoveState','AJWSB','AprNK','_distortionSprite','KIkau','MxVWj','oxjor','drawItemStatusListStyle','sideview_ui','VisuMZ_2_BattleSystemPTB','fOsLV','SkillItemStandardCols','rOlIM','HUOzw','undecided','displayRemovedStates','canInput','updateBorderStyle','match','Unhwg','bossCollapse','uxSzD','_cursorSprite','hpDamageFmt','bswOv','_createCursorArea','_weaponImageId','command339','Interrupt','xtwfD','createDistortionSprite','HPYYq','BattleManager_endBattle','getBattlePortraitFilename','vkHMy','lineRect','Scene_Map_initialize','setValue','filter','Scene_Battle_onActorCancel','removeDamageSprite','alive\x20actors\x20not\x20target','StatusWindowAttachmentBack','Game_BattlerBase_canGuard','removeHorrorEffect','changeCtbCastTime','HelpSkillType','isGrowing','ActSeq_Mechanics_BtbGain','_effectDuration','ActionSkillMsg1','actions','process_VisuMZ_BattleCore_DamageStyles','TpGaugeOffsetY','HPoTW','%1StartBattleJS','fight','StatusWindowAttachmentBackOffsetY','DamageType%1','addCommand','Game_BattlerBase_refresh','OJVAw','setupHpGaugeSprite','odEUs','ActSeq_Set_TargetActionSet','ParseWeaponNotetags','VisuMZ_2_BattleSystemBTB','Window_BattleLog_performActionEnd','Scene_Battle_onEnemyOk','phvBW','alive\x20enemies','isDebuffAffected','PreStartTurnJS','formula','playEnemyAttack','_flinched','dragonbonesData','StartTurnWait','setHandler','ForceExploiter','addedDebuffs','BzaRA','Weapon-%1-%2','endAnimation','autoBattleUseSkills','setImmortal','regionId','HfpfI','updateHelp','ActSeq_Impact_ZoomBlurPoint','transform','qtmNT','boxHeight','ActSeq_Mechanics_VariablePopup','innerHeight','initMembers','fjSaI','placeTimeGauge','JS\x20%1END\x20ACTION','QPVIZ','ActionItemMsg','Game_Battler_onBattleStart','okButtonText','timeScale','frameCount','qeThd','_tpbState','drawSingleSkillCost','setBattler','executeDamage','_borderPortraitTargetX','RJbHD','Window_BattleLog_performMiss','targetDistortionSpritePosition','isVisualHpGaugeDisplayed','AsUser','apply','NameOffsetX','WAyCl','EscapeSuccess','LaQyS','CriticalDuration','updateStateIconSprite','isAnyoneGrowing','pcMVY','usePremadeActionSequence','QjMQg','buffAdd','onActorOk','skillWindowRect','StatusWindowSkinFilename','clearFreezeMotionForWeapons','Game_Troop_expTotal','ActSeq_Animation_ShowAnimation','lineHeight','weatherType','battleAngle','Sprite_Battler_initMembers','mainSpriteScaleX','createSeparateDamagePopups','bzhhx','setupWeaponAnimation','WOfmz','FrontViewSelect','FocusY','reverse','updateLink','CombatLogIcon','<CENTER>%1','ActSeq_Movement_Opacity','QViom','weaponImageId','regenerateAll','PostApplyAsUserJS','createAllWindows','processEscape','RBIwn','playEnemyDamage','updateShadowScale','PreEndBattleJS','getTraitSetKeys','performWeaponAnimation','TpGaugeOffsetX','rMKzZ','AuNpF','battler','OyQPj','FoXVb','32209LxkkJy','isBypassDamageCap','_spriteset','_growDuration','HelpAutoBattle','battleCommandName','Scene_Map_initializeAfter','partyCommandWindowRectDefaultStyle','processPostBattleCommonEvents','cancelActorInput','_createCursorSprite','setHue','_borderPortraitDuration','performMagicEvasion','CriticalColor','isSideView','VisuMZ_1_SkillsStatesCore','createBattleFieldContainer','setup','-%1\x20MP','JPuOW','bDLhq','log','_animationContainer','bXDgs','isPTB','performCounter','spinBattler','displayFailure','jbzHj','addPartyCommand','RaMCq','performMoveToPoint','commandAutoBattle','NajGe','commandNameWindowDrawBackground','BattleEndEvent','Game_Action_needsSelection','ActSeq_Mechanics_SwapWeapon','bEhjA','shift','PostEndActionJS','_requestRefresh','getDamageStyle','onRegeneratePlayStateAnimation','makeCommandList','prepareCustomActionSequence','1AlQInx','WaitForCamera','Sprite_Enemy_setBattler','_borderPortraitSprite','maxCols','createActorCommandWindow','StatusWindowAttachmentBackOffsetX','AlphaFilter','555785AGMXRN','makeTargetsBattleCore','_waitCount','maxItems','ForceExploited','clearHorrorEffects','GroupDigits','drawSkillCost','isForFriendBattleCore','OffsetX','CdMdo','isBuffAffected','statusWindowRectDefaultStyle','guardSkillId','ATTACK','Sprite_Actor_createStateSprite','GRTeL','performActionEnd','float','contentsOpacity','ParseActorNotetags','aEiPA','onDisabledPartyCommandSelection','_skewEasing','_updateFilterArea','ShowReflect','removeAnimationFromContainer','singleSkill','PostDamageAsUserJS','MotionSpeed','checkAutoCustomActionSequenceNotetagEffect','hasBeenDefeatedBefore','isChangingOpacity','isAutoBattleCommandEnabled','_defeatedEnemies','dead\x20friends','adjustWeaponSpriteOffset','setupBattlebackBattleCore','callUpdateHelp','CriticalDmgFlat','gdRik','makeActionOrders','dJzvh','_enemies','canUseItemCommand','vsyLG','Scene_Battle_partyCommandWindowRect','createBattleFieldBattleCore','isPartyTpbInputtable','gainTp','ActSeq_Impact_ColorBreak','ShowHpDmg','isForOne','ZfUnx','GuardFormulaJS','createDigits','setHalfActionsPTB','processActorCommandCancelTPB','isHidden','loadBattleback2','oljBh','aZKYp','mUbcE','AGmqa','actorId','_baseX','changeWeather','type','pow','TTUYt','_effectType','zdltx','TpbActiveChangeEnabled','Window_BattleLog_displayCritical','FUObU','cRcUI','MANUAL','friendsUnit','BattleManager_selectNextCommand','mpDamageFmt','438256FeQsYY','sortEnemies','UNTITLED','turn','PTxtC','updateFrame','ActSeq_Movement_FaceTarget','callOptions','QZIPw','bind','setBackgroundType','ZAfnl','createBattleField','StyleName','createAttachedSprites','selectPreviousCommand','dtikY','alive\x20battlers\x20not\x20target','motionType','slices','removeActor','showNormalAnimation','opacityStart','isClicked','srinh','Window_ItemList_maxCols','Scene_Battle_logWindowRect','isStateResist','requestAnimation','flashDuration','createStateIconSprite','isWaiting','battleMembers','setupBattleCoreData','getEnemyIdWithName','reduce','gainCurrentActionsFTB','wtypeId','isDeathStateAffected','BattleManager_onEscapeFailure','tObXx','resetFontSettings','command119','extraPositionScaledY','bgType','CastPhysical','_opacityEasing','ALL\x20SKILLS','Sprite_Enemy_update','addNewState','ScaleY','battleUIOffsetX','AttachStateOffsetY','addGuardCommand','Window_BattleLog_clear','message4','drawItemImageListStyle','isIncludedInEnemyWindow','EFFECT_COMMON_EVENT','eRxLi','random','weaponTypes','mTxdK','actionSplicePoint','isTeamBased','faceWidth','fZKBd','_shadowSprite','isDTB','Buffs','shadow','_cursorArea','_angleWholeDuration','Window_BattleEnemy_initialize','startGrow','deathStateId','isAutoBattle','visible','_angleDuration','BrwOc','NOEBH','iTpbj','canBattlerMove','battleCoreResumeLaunchBattle','addEscapeCommand','isForRandomBattleCore','_duration','members','qUvay','alive\x20friends\x20not\x20target','ActSeq_Movement_Skew','makeAutoBattleActions','+%1\x20MP','setHorrorEffectSettings','setupActionSet','RqvSH','checkShowHideSwitchNotetags','attachSpritesToDistortionSprite','_shadowScaleY','expTotal','SvMotionIdleSolo-%1-%2','isOptionsCommandEnabled','zAdPe','CknFA','_helpWindow','_lastPluginCommandInterpreter','MotionType','Game_Interpreter_terminate','guard','Scene_Battle_windowAreaHeight','innerWidth','linkSprite','Angle','angleDuration','MpGaugeOffsetY','weatherPower','revertTpbCachedActor','ActSeq_Motion_ClearFreezeFrame','svAnchorX','ActSeq_Skew_Reset','list','_text','PvPkz','isFightCommandEnabled','TP_Flat','Duration','QCLRW','onMoveEnd','_shadowScaleX','%1StartActionJS','SgaZv','OXxme','_targetFloatHeight','updateScale','applyBattleCoreJS','Immortal','ActSeq_Target_RandTarget','inputting','HpGauge','_growY','addChildAt','isFTB','DefaultStyle','exit','updateAngleCalculations','MotionIdle','Targets2','ActSeq_Mechanics_Collapse','OffsetAdjust','AutoBattle','clearBattleCoreData','LEdFp','cancelTargetSelectionVisibility','createInnerPortrait','MessageWait','QprCG','StepDuration','Reveal','_allTargets','HEcNe','rsLiW','nVgIt','isSelected','NZyaN','scope','PreRegenerateJS','Game_Map_setupBattleback','maxBattleMembers','YiWac','rozPf','1134553Lbeboi','20NftFYD','refreshBattlerMotions','ActSeq_Mechanics_StbExploit','_list','BattleLog','isTickBased','return\x200','_flashDuration','ActSeq_Horror_TVCreate','ezADZ','evade','worldTransform','calcWindowHeight','push','ShowCounter','createAnimationContainer','commandOptions','TtQlV','resetBreakShield','displayMiss','battlerSmoothImage','WaitForZoom','omztm','loadBattleback1','_lineHeight','open','BASdd','battleProjectiles','maxCommands','VisuMZ_4_BreakShields','allowCollapse','softDamageCapRate','finalizeScale','startDamagePopup','isShownOnBattlePortrait','initVisibility','SomkO','FOEba','_regionBattleback2','XoXak','updateWeather','left','fdcOF','encounterList','_jumpWholeDuration','ActSeq_Element_ForceElements','pattern','hDbtO','FUNC','mbotp','getNextDamagePopup','randomTargets','poPHA','windowPadding','Mirror','%1Apply%2JS','ActSeq_Mechanics_AtbGauge','Window_BattleLog_performCounter','hQfEQ','code','oINHx','split','Game_Actor_equips','HBBrH','mmjKT','zsyTM','svBattlerAnchorX','drawItemStatus','createUIContainer','applyItem','startBattle','battlerShadowScaleX','hSmCc','performFlinch','Wave','_baseY','visualHpGauge','placeStateIcon','actionBattleCoreJS','ActSeq_Projectile_Picture','criticalDmgFlat','Game_BattlerBase_eraseState','HomePosJS','qxFSW','stop','getBattlePortraitOffsetY','anchorX','ShowActorGauge','\x5cI[%1]%2','%1Damage%2JS','isOkEnabled','VisuMZ_3_WeaknessDisplay','clearActiveWeaponSlot','alive\x20actors','isMagicSkill','CounterPlayback','svShadow','commandSymbol','TargetLocation','Scene_Battle_stop','WaitCount1','HpGaugeOffsetY','CommandAddAutoBattle','finishActorInput','createActionSequenceProjectile','WaitForJump','svBattlerName','remove','drawItemStyleIcon','SRRMg','Window_BattleLog_performCollapse','ActSeq_Horror_Clear','bHonf','setBattleCameraOffset','HDXRs','mpHCF','right','isFlipped','notFocusValid','ActSeq_Mechanics_StbExtraAction','startFloat','Game_Map_battleback1Name','XECsv','Window_BattleLog_displayFailure','process_VisuMZ_BattleCore_TraitObject_Notetags','_action','BattleManager_isTpbMainPhase','ActSeq_BattleLog_DisplayAction','isBattleSys','SKILLS','_motion','ceil','drain','VisuMZ_3_ActSeqCamera','changeAtbCastTime','_actorSprites','WeaponTypeID','ActionSequence','commandStyle','IkFXl','QFIyD','addFightCommand','ShowAddedState','maxLines','clearActiveWeaponSet','updateMain','logWindowRect','Window_BattleEnemy_show','isBattleTest','_activeWeaponSlot','SEiGn','Scene_Battle_selectNextCommand','commandFight','StateIconOffsetY','_commonEventQueue','_immortal','TKeOM','BJPpX','textWidth','battleOpacity','BCIdY','YTysq','isAppeared','activate','width','Game_Action_applyGlobal','sTQSy','mainSpriteWidth','compareBattlerSprites','PostDamageJS','ActSeq_Movement_Float','getNextSubjectFromPool','not\x20focus','GUARD','front\x20center','QCfxG','WaitCount2','isSideButtonLayout','buffRemove','isSkill','WDGlc','sEdZW','#%1','createMainSprite','removeAnimation','updateShadow','applySoftDamageCap','isCustomBattleScope','_angleRevertOnFinish','Scene_ItemBase_applyItem','victory','eraseState','_floatHeight','Linear','_enemyIDs','battleCommandIcon','Intensity','setHelpWindowItem','setWaitMode','onActorCancel','VxKxG','registerDefeatedEnemy','_floatDuration','_additionalSprites','Name','isBattlerFlipped','removeStatesAuto','startEnemySelection','UCiRH','maxTp','destroy','onFloatEnd','_actor','makeActionListAutoAttack','isChanting','WTIcR','qNpjd','WaitForAngle','itemHit','displaySubstitute','isAnyoneSkewing','ActSeq_Mechanics_StbRemoveExcessActions','statusWindowRectXPStyle','isAffectedByBreakShield','EscapeFailureJS','putActiveBattlerOnTop','aBBFf','ActSeq_Mechanics_PtbAlterCost','Game_Battler_regenerateAll','Rate','isAnimationShownOnBattlePortrait','updateStateSprite','isConfused','numTargets','_methods','JS\x20%1START\x20ACTION','performReflection','selectNextCommandTpb','onSelectAction','adjustPosition_1for1','canAttackBattleCore','updateCollapse','measureTextWidth','anchor','partyCommandWindowRect','setBattlerMotionTrailData','isAlwaysHidden','PostEndTurnJS','checkTpbInputClose','nwlQc','ActSeq_Movement_WaitForFloat','extraPositionX','ActSeq_Target_CurrentIndex','hUYOX','vmiWX','setLastPluginCommandInterpreter','SwitchCritical','Game_Action_isForFriend','expRate','Game_Interpreter_updateWaitMode','Game_Battler_performDamage','isAtbCastingState','popBaseLine','EasingType','xZVmL','CmdIconOptions','isHiddenSkill','substitute','kRhEL','PartyCmd','IAcdq','PortraitScaleBorderStyle','sVmiK','forceAction','DmqZF','stateMotionIndex','baZIb','ActSeq_Motion_WaitMotionFrame','callOkHandler','asXgG','Parse_Notetags_Targets','PopupOffsetY','BattleCmdList','aliveMembers','wholeActionSet','ArRedRate','drawItemImageXPStyle','opponentsUnit','ActSeq_Mechanics_CtbSpeed','ChargeRate','skewBattler','skillId','Width','PreEndActionJS','extraHeight','length','AS\x20USER','LUK','HelpOptions','eGZzm','autoBattle','_motionSpeed','BARE\x20HANDS','ActSeq_Mechanics_TextPopup','ChangeOrderBy','BFTJC','getHalfActionsPTB','findTargetSprite','nameY','_lastEnemy','_opacityDuration','_scene','visibilityState','hJkEK','UvFUj','_homeX','snapForBackground','ArPenFlat','BattleManager_startInput','sleep','mpHealingFmt','ActSeq_Target_NextTarget','_growX','close','HrezA','RaRIp','onEnemyCancel','frontviewSpriteY','registerCommand','ixuRi','AutoBattleRect','_svBattlerData','_canLose','SwHaI','HoePs','ActSeq_BattleLog_UI','_pattern','AaZnX','includes','enemyId','getCommonEventIdWithName','ActSeq_Impact_ShockwavePoint','_item','KJRnu','svBattlerAnchorY','ActSeq_ChangeAngle','border','popupDamage','magicReflection','tjnSv','ActSeq_BattleLog_AddText','isSpriteVisible','startMotion','WqIsa','Scene_Battle_createCancelButton','createBattleUIOffsetX','performActionStart','cdYMO','eTsas','AutoBattleBgType','EnableSoftCap','_weaponSprite','StatusWindowSelectableBackHide','processRandomizedData','YVTeC','battleStatusWindowAnimationContainer','isActing','setupZoomBlurImpactFilter','nCiCF','indexOf','SyjMt','MepnV','wfJhK','isBreakStunned','Upwuj','forceWeaponAnimation','performAttackSlot','Scene_Map_updateCallMenu','Scene_Battle_createPartyCommandWindow','PostStartTurnJS','_regionBattleback1','windowAreaHeight','SkewX','xKNyK','result','effect','_phase','getDualWieldTimes','clearWeaponAnimation','setBattlerFacePoint','RLYia','performEvasion','mpDamage','attack','Window_PartyCommand_initialize','Sprite_Actor_updateBitmap','currentClass','LduhP','zhcui','LaXAK','_eventId','updateBattlerContainer','NOwsq','skewDuration','vqiaO','dNhSK','createEnemyNames','ActSeq_Mechanics_Multipliers','ext','initElementStatusCore','Game_BattlerBase_isStateResist','isSpinning','addAttackCommand','startAction','lSyDp','charged','GfSWL','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','ActSeq_Movement_WaitForSkew','krFgL','XCaZK','drawTextEx','basicGaugesY','updateStateSpriteBattleCore','removeChild','isPartyCommandWindowDisabled','SipoZ','JS\x20%1START\x20BATTLE','fxlRD','startWeaponAnimation','_offsetX','addedStateObjects','prmJU','updatePadding','Sprite_Actor_updateFrame','battleCommands','ActSeq_Camera_Reset','zWZrA','jMTFV','VisuMZ_2_BattleSystemATB','removeBuffsAuto','ActSeq_Mechanics_PtbConvert','LKvCt','createCommandNameWindow','isSkewing','EyGQe','textSizeEx','zIAPn','syFZl','duration','PARTY','commandEscape','process_VisuMZ_BattleCore_PreBattleCommonEvent','displayActionResults','ActorCmd','ActSeq_Mechanics_CtbOrder','_enemy','setVisibleUI','Game_Map_encounterList','top','displayMpDamage','CsEcm','partyCommandWindowRectBorderStyle','Diiow','updateSpin','HP_Rate','IkuWQ','makeEscapeRatio','DistanceX','VisuMZ_1_MainMenuCore','growBattler','MaxLines','version','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','SOWeW','animationWait','_active','_back2Sprite','ATK','createHpGaugeSprite','createEmptyBitmap','PqMEy','emerge','onJumpEnd','freezeFrame','mmp','inputtingAction','Window_BattleLog_performDamage','onEncounter','XPSpriteYLocation','createBattleUIOffsetY','jjirz','bitmapWidth','getAttackMotion','Sprite_SvEnemy','isTpb','ParseEnemyNotetags','AdjustRect','isNonSubmenuCancel','finishActionSet','_stypeIDs','PopupPosition','command357','_baseLineStack','WTxqF','createLowerLayer','Targets1','VisuMZ_3_SideviewBattleUI','isOptionsCommandAdded','isCommandEnabled','SkewY','Shadow','startMove','BreakShields','isAnyoneFloating','validTargets','playReflection','repositionCancelButtonBorderStyle','qAGyp','ITEM','HAFnV','loadPicture','icon','endAction','BattleManager_cancelActorInput','toUseBoostPoints','loadSystem','ShowCritical','attackMotions','setBattlerBattleCore','Scene_Battle_startPartyCommandSelection','cancelButtonText','clearForcedGameTroopSettingsBattleCore','_updateCursorFilterArea','WaitForSpin','Scene_Options_maxCommands','PhHno','CDvYP','Targets','vdkEM','_forcedBattlers','SvWeaponSolo-%1-%2','Scene_Battle_start','bvmZn','IIcSf','FlashDuration','ParseArmorNotetags','itemLineRect','Scene_Battle_commandFight','UcmHq','jhOeQ','kWuMc','addShowHpGaugeCommand','casting','startJump','CmdTextAutoBattle','isDying','createHelpWindowBattleCore','isForRandom','refreshActorPortrait','Defeat','_jumpMaxHeight','waitForMovement','HelpEscape','aHwrf','ActSeq_BattleLog_PushBaseLine','Scene_Map_launchBattle','BattleLogRectJS','currentValue','ShowHide','updateCallMenu','hitRate','EFpWi','2557jVEMGh','becomeSTBExploited','POST-','zIjdw','bitmapHeight','SkillItemBorderCols','lAErH','performActionEndMembers','_uiContainer','czXrt','JS\x20%1END\x20TURN','MotionFrameWait','jXHTg','isSTB','WomHo','refreshCursor','_linkedSprite','applyFreezeMotionFrames','csuyX','BattleManager_processDefeat','dead','svAnchorY','autoMeleeMultiTargetActionSet','blockWidth','Window_BattleLog_update','isBTB','removeBuff','useDigitGrouping','ukEqk','performJump','nVuJe','Parse_Notetags_Action','itemRect','STR','selectNextCommand','battleCamera','Sprite_Battler_setHome','_interpreter','DamageFlat','VisuMZ_1_ElementStatusCore','startTurn','arRedRate','adjustPosition_ScaleUp','spriteId','CXqqw','drawItemStyleIconText','Battleback','FullActions','HpGaugeOffsetX','applyGlobal','clear','THBvU','ConvertCount','Game_Party_removeActor','battleFloat','updateBattlebackBitmap2','drawText','delay','moveToStartPosition','physical','autoMeleeSingleTargetActionSet','okTargetSelectionVisibility','repositionEnemiesByResolution','NCXLN','updateFlip','magicSkills','swing','waitCount','createCancelButton','isBattleRefreshRequested','SkillsStatesCore','getMenuImage','addImmortal','onBattleStartBattleCore','Utuft','status','BattleVictoryJS','startTpbTurn','battleJump','Game_Battler_performActionStart','QjzXK','NewPopupBottom','updateOpacity','_tempEquipCheck','_dimmerSprite','BattleManager_inputtingAction','isForOpponentBattleCore','yPSfl','ActSeq_Mechanics_CustomDmgFormula','_mainSprite','concat','DEF','ActSeq_Element_NullElements','actor%1-portrait','_tempBattler','qEHrT','bbTEn','BattleManager_endAction','ActSeq_Zoom_WaitForZoom','ActSeq_Movement_FaceDirection','height','dying','updateStatusWindowPosition','vqSBj','SvBattlerMass-%1-%2','fWpfI','PMYJj','mPKUJ','BZhWN','PopupShiftX','CalcEscapeRaiseJS','Hdggv','BattleManager_initMembers','Parse_Notetags_TraitObjects','ActSeq_Mechanics_DamagePopup','mHWwn','repeats','PrioritySortActive','onEncounterBattleCore','sliceMin','alive\x20friends','placeGauge','processRefresh','UVynn','JumpToLabel','Sprite_Battler_setBattler','updateCommandNameWindow','canUse','setupIconTextPopup','EscapeFail','_stateSprite','Window_BattleLog_displayEvasion','_frontAttachmentSprite','updateStart','WaitForSkew','zVczr','_flipScaleX','isSkillItemWindowsMiddle','gainBravePoints','_handlers','format','displayStartMessages','MbcUU','performDamage','bottom','createKeyJS','showHelpWindow','evaded','battleZoom','AddHpGaugeOption','isItemCommandEnabled','contents','VariableHeal','updateBorderSprite','dqfEA','uixtW','refreshStatusWindow','updateRefresh','isItem','aYvUE','loadEnemy','ParseStateNotetags','_logWindow','Text','wZPQd','PostStartBattleJS','SwitchMissEvade','cPHvq','isNextSceneBattleTransitionable','TpbGaugeOffsetX','CommandAddOptions','States','LFXdR','Game_Action_isForOpponent','BattleManager_onEscapeSuccess','equipSlots','PreStartBattleJS','SzOVc','backColor','_tpbSceneChangeCacheActor','Grffx','IFhtL','ShowTpDmg','toLowerCase','name','die','yfYIg','collapse','messageSpeed','svBattlerData','commandName','awMnm','ActionEffect','removedBuffs','_autoBattle','addBattleCoreAutoBattleStyleCommand','ActSeq_Animation_ActionAnimation','createHelpWindow','47egNzwK','needsSelectionBattleCore','adjustFlippedBattlefield','cJdkp','gmPZi','ActSeq_Motion_RefreshMotion','ActSeq_Movement_WaitForJump','rzzFG','getFullActionsPTB','Sprite_Battleback_adjustPosition','VisuMZ_4_CombatLog','MpGaugeOffsetX','updateHpGaugePosition','createAnimationSprite','adjustPosition','ObWAq','SideviewSelect','DefaultDamageStyle','Scene_Battle_onEnemyCancel','selectNextActor','createPartyCommandWindowBattleCore','vDSbv','displayCurrentState','ForceRandom','requestFauxAnimation','BaseTroopIDs','SvMotionIdleMass-%1-%2','zbFSU','Game_Action_isForRandom','FIjVB','PreDamage%1JS','NameAlwaysHidden','NuDhV','glitch','ActSeq_Zoom_Reset','statusTextAutoBattleStyle','gDCXW','boSOn','ActSeq_Mechanics_RemoveBuffDebuff','Window_BattleLog_displayTpDamage','mibKR','isAlwaysVisible','addedBuffs','command301','YsXqk','oJCCF','NUM','nPrvb','oEkuD','updateMotionCount','xppqZ','_jumpHeight','attackAnimationId2','itemHeight','qNpst','Window_BattleLog_performMagicEvasion','alterChange','_battlerContainer','SvBattlerSolo-%1-%2','Window_ActorCommand_initialize','battlelog','addBattleCoreAutoBattleStartupCommand','ActSeq_Mechanics_AnalyzeWeakness','text','IconStypeNorm','critical','process_VisuMZ_BattleCore_Action_Notetags','_motionType','AEDCQ','missle','setHome','damageOffsetX','battleCoreTpbMainPhase','action','iconWidth','setActionState','terminate','needsSelection','smooth','AuDvx','resizeWindowXPStyle','drawActorFace','isSceneChanging','fontSize','WaitForProjectile','_targetIndex','performCollapse','DOYsd','center','_executedValue','KhsXL','TextAlign','applyAngleChange','kDhPR','AnchorX','isFastForward','_updateCursorArea','MOTIONS','CommandWidth','ARRAYFUNC','DefaultSoftScaler','XJSOM','bBrxs','_waitMode','VisuMZ_3_ActSeqImpact','Game_Interpreter_PluginCommand','ActSeq_Movement_HomeReset','JmIsk','forceEscapeSprite','custom','NameOffsetY','addAnimationSpriteToContainer','CRWXC','isAtbChargingState','_battleCoreNoElement','displayEvasion','escape','_customDamageFormula','ARRAYEVAL','textColor','gaugeLineHeight','invokeAction','_battlerName','AWrzM','isFrameVisible','isETB','updatePhase','ClearBattleLog','Game_Actor_makeActionList','412138MzkmgN','BattleCore','addLoadListener','repeatTargets','isCTB','cameraClamp','setBattleAngle','PreApply%1JS','process_VisuMZ_BattleCore_Failsafes','updateCancel','Window_BattleLog_performActionStart','sliceMax','initialize','getAttackMotionSlot','_ptbActionCost','DefaultSoftCap','ResetOffset','_tpbNeedsPartyCommand','VSnQw','checkCacheKey','ActSeq_Mechanics_AddState','_opacityWholeDuration','preemptive','XRnnM','applyCritical','resetResultSwitches','hpDamage','qPEFQ','UKXpF','Game_BattlerBase_addNewState','Game_Battler_startTpbTurn','DisablePartyCmd','createAutoBattleWindow','WaitForMovement','note','arPenFlat','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','switchToWeaponType','description','zPWzc','DQCQY','_visualHpGauge_JustDied','stbGainInstant','tAcwO','VwsVP','ParseItemNotetags','hardDamageCap','index','head','drawLineText','vvspl','createShadowSprite','JS\x20ESCAPE\x20FAILURE','TpbGaugeOffsetY','COMBAT\x20LOG','addAutoBattleCommands','PreApplyAsTargetJS','dpLHG','ActSeq_Angle_WaitForAngle','Enemy','OffsetY','yygLR','addOptionsCommand','isQueueOptionsMenu','parameters','initBattlePortrait','launchBattle','parse','suXfp','unchanged','loadSvEnemy','HDNlP','Game_Interpreter_command301','Game_Action_executeDamage','createDamageSprite','attackAnimationId1','_forcedBattleLayout','BattleManager_startTurn','ShowCosts','onEnemyOk','addCustomCommands','ActSeq_Impact_ShockwaveEachTargets','ADZrH','VariableDmg','changeCtbChargeTime','useItem','ActSeq_Animation_AttackAnimation2','gradientFillRect','createWeather','alive\x20opponents','TextColor','XfWwT','CriticalHitRate','jpFFR','vOacm','Slot','isDead','GvHeG','tone','NhqWR','gainFullActionsPTB'];const _0x17f940=_0x4863;(function(_0x3a159e,_0xa80e21){const _0x3d9dee=_0x4863;while(!![]){try{const _0x22ad84=-parseInt(_0x3d9dee(0x4e0))+parseInt(_0x3d9dee(0x5db))*-parseInt(_0x3d9dee(0x4a9))+parseInt(_0x3d9dee(0x5da))+parseInt(_0x3d9dee(0x4d8))*-parseInt(_0x3d9dee(0x95f))+parseInt(_0x3d9dee(0xa54))+parseInt(_0x3d9dee(0x530))+-parseInt(_0x3d9dee(0x8de))*-parseInt(_0x3d9dee(0x818));if(_0x22ad84===_0xa80e21)break;else _0x3a159e['push'](_0x3a159e['shift']());}catch(_0x46a8b0){_0x3a159e['push'](_0x3a159e['shift']());}}}(_0x99d3,0x8aff8));var label=_0x17f940(0x960),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x335fe1){const _0x28e550=_0x17f940;return _0x335fe1[_0x28e550(0x863)]&&_0x335fe1['description'][_0x28e550(0x72d)]('['+label+']');})[0x0];VisuMZ[label][_0x17f940(0x32c)]=VisuMZ[label][_0x17f940(0x32c)]||{},VisuMZ[_0x17f940(0x20e)]=function(_0x55d6aa,_0x57fa54){const _0x3809c0=_0x17f940;for(const _0x57a543 in _0x57fa54){if(_0x57a543['match'](/(.*):(.*)/i)){const _0x2e95da=String(RegExp['$1']),_0x556b53=String(RegExp['$2'])['toUpperCase']()['trim']();let _0xd752d2,_0x141ceb,_0x456902;switch(_0x556b53){case _0x3809c0(0x90c):_0xd752d2=_0x57fa54[_0x57a543]!==''?Number(_0x57fa54[_0x57a543]):0x0;break;case _0x3809c0(0x2ce):_0x141ceb=_0x57fa54[_0x57a543]!==''?JSON[_0x3809c0(0x9a2)](_0x57fa54[_0x57a543]):[],_0xd752d2=_0x141ceb[_0x3809c0(0x296)](_0x2f0a23=>Number(_0x2f0a23));break;case _0x3809c0(0x292):_0xd752d2=_0x57fa54[_0x57a543]!==''?eval(_0x57fa54[_0x57a543]):null;break;case _0x3809c0(0x954):_0x141ceb=_0x57fa54[_0x57a543]!==''?JSON['parse'](_0x57fa54[_0x57a543]):[],_0xd752d2=_0x141ceb[_0x3809c0(0x296)](_0x3051a8=>eval(_0x3051a8));break;case'JSON':_0xd752d2=_0x57fa54[_0x57a543]!==''?JSON[_0x3809c0(0x9a2)](_0x57fa54[_0x57a543]):'';break;case'ARRAYJSON':_0x141ceb=_0x57fa54[_0x57a543]!==''?JSON[_0x3809c0(0x9a2)](_0x57fa54[_0x57a543]):[],_0xd752d2=_0x141ceb[_0x3809c0(0x296)](_0x2d07b7=>JSON['parse'](_0x2d07b7));break;case _0x3809c0(0x60b):_0xd752d2=_0x57fa54[_0x57a543]!==''?new Function(JSON[_0x3809c0(0x9a2)](_0x57fa54[_0x57a543])):new Function(_0x3809c0(0x5e1));break;case _0x3809c0(0x941):_0x141ceb=_0x57fa54[_0x57a543]!==''?JSON['parse'](_0x57fa54[_0x57a543]):[],_0xd752d2=_0x141ceb[_0x3809c0(0x296)](_0x1d1912=>new Function(JSON[_0x3809c0(0x9a2)](_0x1d1912)));break;case _0x3809c0(0x839):_0xd752d2=_0x57fa54[_0x57a543]!==''?String(_0x57fa54[_0x57a543]):'';break;case'ARRAYSTR':_0x141ceb=_0x57fa54[_0x57a543]!==''?JSON[_0x3809c0(0x9a2)](_0x57fa54[_0x57a543]):[],_0xd752d2=_0x141ceb['map'](_0x2a9853=>String(_0x2a9853));break;case _0x3809c0(0x19e):_0x456902=_0x57fa54[_0x57a543]!==''?JSON['parse'](_0x57fa54[_0x57a543]):{},_0x55d6aa[_0x2e95da]={},VisuMZ[_0x3809c0(0x20e)](_0x55d6aa[_0x2e95da],_0x456902);continue;case _0x3809c0(0x3f6):_0x141ceb=_0x57fa54[_0x57a543]!==''?JSON[_0x3809c0(0x9a2)](_0x57fa54[_0x57a543]):[],_0xd752d2=_0x141ceb['map'](_0x46c8fe=>VisuMZ[_0x3809c0(0x20e)]({},JSON['parse'](_0x46c8fe)));break;default:continue;}_0x55d6aa[_0x2e95da]=_0xd752d2;}}return _0x55d6aa;},(_0x441107=>{const _0x5d5719=_0x17f940,_0x48c180=_0x441107[_0x5d5719(0x8d0)];for(const _0x37cd0f of dependencies){if(!Imported[_0x37cd0f]){if(_0x5d5719(0x8b7)===_0x5d5719(0x8b7)){alert(_0x5d5719(0x142)[_0x5d5719(0x8a4)](_0x48c180,_0x37cd0f)),SceneManager['exit']();break;}else this['revertTpbCachedActor']();}}const _0x595587=_0x441107[_0x5d5719(0x985)];if(_0x595587[_0x5d5719(0x413)](/\[Version[ ](.*?)\]/i)){const _0x1d71e7=Number(RegExp['$1']);_0x1d71e7!==VisuMZ[label][_0x5d5719(0x7b3)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'['format'](_0x48c180,_0x1d71e7)),SceneManager['exit']());}if(_0x595587['match'](/\[Tier[ ](\d+)\]/i)){const _0x13222e=Number(RegExp['$1']);_0x13222e<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x48c180,_0x13222e,tier)),SceneManager['exit']()):tier=Math[_0x5d5719(0xb2c)](_0x13222e,tier);}VisuMZ[_0x5d5719(0x20e)](VisuMZ[label]['Settings'],_0x441107[_0x5d5719(0x99f)]);})(pluginData),VisuMZ[_0x17f940(0x34c)]=function(_0xe0e567){const _0x17a7b8=_0x17f940;let _0x273f8a=[];for(const _0x2955d8 of _0xe0e567){if(_0x17a7b8(0x824)!==_0x17a7b8(0x214))_0x273f8a=_0x273f8a[_0x17a7b8(0x872)](VisuMZ['ConvertActionSequenceTarget'](_0x2955d8));else return _0x251586['BattleCore']['Settings'][_0x17a7b8(0x36b)][_0x17a7b8(0x3b5)]||![];}return _0x273f8a[_0x17a7b8(0x427)](_0x33be40=>_0x33be40);},VisuMZ[_0x17f940(0xb19)]=function(_0x252836){const _0x593837=_0x17f940,_0x5e3daa=BattleManager['allBattleMembers']()['filter'](_0xaec465=>_0xaec465&&_0xaec465[_0x593837(0x67d)]()),_0x27ce98=BattleManager['_subject'],_0x12dbb5=BattleManager['_target'],_0x110fde=BattleManager[_0x593837(0x5ce)]?BattleManager[_0x593837(0x5ce)][_0x593837(0x10b)](0x0):_0x5e3daa;_0x252836=_0x252836[_0x593837(0x8cf)]()[_0x593837(0x224)]();if(_0x252836===_0x593837(0x327)){if(_0x593837(0x3c0)==='dOucB'){const _0x1e5559=_0x36e4e4(_0x25d614['$1']);_0x1e5559!==_0x251982[_0x2ac6fc]['version']&&(_0x1d1c34(_0x593837(0x7b4)[_0x593837(0x8a4)](_0x491070,_0x1e5559)),_0x1ee459[_0x593837(0x5bf)]());}else return[_0x27ce98];}else{if(_0x252836===_0x593837(0x3ff))return[_0x12dbb5];else{if(_0x252836==='prev\x20target'){if(_0x593837(0x9bc)!==_0x593837(0x9bc)){const _0x253de=this[_0x593837(0x3eb)];this[_0x593837(0x577)]['move'](_0x253de,_0x253de),this[_0x593837(0x577)]['x']=_0x253de-this[_0x593837(0x29e)]['x'],this['_cursorArea']['y']=_0x253de-this[_0x593837(0x29e)]['y'],this[_0x593837(0x59e)]>0x0&&this['innerHeight']>0x0?this['_cursorArea'][_0x593837(0x57d)]=this[_0x593837(0x339)]():this[_0x593837(0x577)][_0x593837(0x57d)]=![];}else{if(_0x12dbb5){const _0x498cd0=_0x110fde['indexOf'](_0x12dbb5);return _0x498cd0>=0x0?[_0x110fde[_0x498cd0-0x1]||_0x12dbb5]:[_0x12dbb5];}}}else{if(_0x252836===_0x593837(0x354)){if(_0x12dbb5){const _0x55bcb8=_0x110fde[_0x593837(0x74c)](_0x12dbb5);return _0x55bcb8>=0x0?[_0x110fde[_0x55bcb8+0x1]||_0x12dbb5]:[_0x12dbb5];}}else{if(_0x252836==='all\x20targets'){if(_0x593837(0x527)!==_0x593837(0x527)){if(_0x1bb27b['isSceneBattle']()){const _0x2a9baa=this[_0x593837(0xa7a)]();this['startWeaponAnimation'](_0x2a9baa);}}else return _0x110fde;}else{if(_0x252836===_0x593837(0x18b)){if(_0x593837(0x25e)!==_0x593837(0x715))return[_0x27ce98][_0x593837(0x872)](_0x110fde);else{const _0x2f0bcd=this[_0x593837(0x360)](_0x4aaaa3);if(_0x2f0bcd===_0x593837(0x23f))this[_0x593837(0x845)](_0x1c83ce);else _0x2f0bcd===_0x593837(0x7e5)?this[_0x593837(0x647)](_0x3efed7):_0x43d1c7[_0x593837(0x25b)][_0x593837(0xfd)][_0x593837(0x14e)](this,_0x5d8cd8);this[_0x593837(0x46c)](_0x53bccf);}}else{if(_0x252836===_0x593837(0x687))return _0x5e3daa[_0x593837(0x427)](_0x2d0759=>_0x2d0759!==_0x27ce98&&!_0x110fde[_0x593837(0x72d)](_0x2d0759)&&_0x2d0759['notFocusValid']());}}}}}}if(_0x27ce98){if(_0x252836===_0x593837(0x890))return _0x27ce98['friendsUnit']()[_0x593837(0x6f6)]();else{if(_0x252836==='alive\x20friends\x20not\x20user'){if(_0x593837(0x343)===_0x593837(0x690)){if(!_0x51146e['isSceneBattle']())return;if(!_0x9ab851[_0x593837(0x660)])return;_0x555703['ConvertParams'](_0xa59cd4,_0x57ae19);const _0x4ace56=_0x4c60d9['getLastPluginCommandInterpreter'](),_0x4fa14e=_0x92f689[_0x593837(0x89e)];if(!_0x4ace56)return;_0x13280e[_0x593837(0x3e0)](0x0,0x0,_0x2f842d[_0x593837(0x5ad)],_0x450f5c[_0x593837(0x6e2)]);if(_0x4fa14e)_0x4ace56['setWaitMode'](_0x593837(0x306));}else return _0x27ce98[_0x593837(0x52d)]()['aliveMembers']()[_0x593837(0x427)](_0x377b18=>_0x377b18!==_0x27ce98);}else{if(_0x252836===_0x593837(0x589))return _0x27ce98[_0x593837(0x52d)]()[_0x593837(0x6f6)]()[_0x593837(0x427)](_0x58f90f=>_0x58f90f!==_0x12dbb5);else{if(_0x252836===_0x593837(0x503))return _0x593837(0xa93)!==_0x593837(0xa93)?_0xe94e2b[_0x593837(0xa8c)]?_0x37e8b4[_0x593837(0xa66)]('ok'):_0x5dbada[_0x593837(0x960)][_0x593837(0x32c)]['AutoBattle'][_0x593837(0xaa1)]:_0x27ce98['friendsUnit']()['deadMembers']();else{if(_0x252836[_0x593837(0x413)](/FRIEND INDEX (\d+)/i)){if(_0x593837(0x617)===_0x593837(0x826))this[_0x593837(0x953)]=_0x54d861;else{const _0x22b49f=Number(RegExp['$1']);return[_0x27ce98[_0x593837(0x52d)]()[_0x593837(0x587)]()[_0x22b49f]];}}}}}}if(_0x252836===_0x593837(0x9b8))return _0x27ce98['opponentsUnit']()[_0x593837(0x6f6)]();else{if(_0x252836===_0x593837(0x223))return _0x27ce98[_0x593837(0x6fa)]()[_0x593837(0x6f6)]()[_0x593837(0x427)](_0x42ebe9=>_0x42ebe9!==_0x12dbb5);else{if(_0x252836===_0x593837(0x300)){if(_0x593837(0x914)!=='qNpst'){const _0x527291=_0x34272b[_0x3aac45];if(!_0x527291)return'';let _0x1cdd98='';_0x1cdd98+=_0x527291['name'];for(const _0x10c9c4 of _0x527291['pages']){for(const _0xbae7fd of _0x10c9c4[_0x593837(0x5a8)]){[0x6c,0x198][_0x593837(0x72d)](_0xbae7fd[_0x593837(0x616)])&&(_0x1cdd98+='\x0a',_0x1cdd98+=_0xbae7fd[_0x593837(0x99f)][0x0]);}}return _0x1cdd98;}else return _0x27ce98[_0x593837(0x6fa)]()[_0x593837(0x1b6)]();}else{if(_0x252836[_0x593837(0x413)](/OPPONENT INDEX (\d+)/i)){const _0x3ad8d6=Number(RegExp['$1']);return[_0x27ce98[_0x593837(0x6fa)]()[_0x593837(0x587)]()[_0x3ad8d6]];}}}}}if(_0x252836===_0x593837(0x638))return $gameParty[_0x593837(0x6f6)]();else{if(_0x252836==='alive\x20actors\x20not\x20user')return $gameParty[_0x593837(0x6f6)]()[_0x593837(0x427)](_0x35a13e=>_0x35a13e!==_0x27ce98);else{if(_0x252836===_0x593837(0x42a))return $gameParty[_0x593837(0x6f6)]()['filter'](_0x247997=>_0x247997!==_0x12dbb5);else{if(_0x252836===_0x593837(0x3d1))return $gameParty[_0x593837(0x1b6)]();else{if(_0x252836[_0x593837(0x413)](/ACTOR INDEX (\d+)/i)){if('UCiRH'!==_0x593837(0x6ab)){if(!_0x4c352d['isSceneBattle']())return;const _0xbf1d78=_0xf7b904[_0x593837(0x8ba)];_0xbf1d78[_0x593837(0x84a)]();}else{const _0x1c9fb6=Number(RegExp['$1']);return[$gameParty['members']()[_0x1c9fb6]];}}else{if(_0x252836[_0x593837(0x413)](/ACTOR ID (\d+)/i)){const _0x1ea52a=Number(RegExp['$1']);return[$gameActors[_0x593837(0x371)](_0x1ea52a)];}}}}}}if(_0x252836===_0x593837(0x447))return'BNCUg'!=='BNCUg'?_0x5dbb08(_0x12718a['$1']):$gameTroop[_0x593837(0x6f6)]();else{if(_0x252836==='alive\x20enemies\x20not\x20user'){if(_0x593837(0x6ed)===_0x593837(0x6ed))return $gameTroop[_0x593837(0x6f6)]()[_0x593837(0x427)](_0x4d5491=>_0x4d5491!==_0x27ce98);else this['push'](_0x593837(0x290),_0x5366e3,_0x411339);}else{if(_0x252836===_0x593837(0xb07))return $gameTroop['aliveMembers']()[_0x593837(0x427)](_0x3cf7a9=>_0x3cf7a9!==_0x12dbb5);else{if(_0x252836==='dead\x20enemies')return $gameTroop['deadMembers']();else{if(_0x252836[_0x593837(0x413)](/ENEMY INDEX (\d+)/i)){const _0x44bd64=Number(RegExp['$1']);return[$gameTroop[_0x593837(0x587)]()[_0x44bd64]];}else{if(_0x252836[_0x593837(0x413)](/ENEMY ID (\d+)/i)){if(_0x593837(0x2a1)!=='BQUCu'){const _0x30ce9d=Number(RegExp['$1']);return $gameTroop[_0x593837(0x6f6)]()[_0x593837(0x427)](_0x1123bb=>_0x1123bb[_0x593837(0x72e)]()===_0x30ce9d);}else this[_0x593837(0x4c0)]=new _0x3afcdd(),this[_0x593837(0xb27)][_0x593837(0x1cc)](this[_0x593837(0x4c0)]);}}}}}}if(_0x252836==='alive\x20battlers')return _0x5e3daa[_0x593837(0x427)](_0x4c6f57=>_0x4c6f57[_0x593837(0x3f0)]());else{if(_0x252836===_0x593837(0x1aa)){if('nhsOs'!==_0x593837(0x71f))return _0x5e3daa[_0x593837(0x427)](_0x5ce28c=>_0x5ce28c[_0x593837(0x3f0)]()&&_0x5ce28c!==_0x27ce98);else this['_itemWindow']['show']();}else{if(_0x252836===_0x593837(0x541))return _0x5e3daa[_0x593837(0x427)](_0x179ffa=>_0x179ffa[_0x593837(0x3f0)]()&&_0x179ffa!==_0x12dbb5);else{if(_0x252836===_0x593837(0x2ee)){if(_0x593837(0x9d0)!==_0x593837(0x9d0)){if(!this[_0x593837(0xa9d)]())return;if(!this[_0x593837(0x4db)])this['createBorderStylePortraitSprite']();this['prepareBorderActor'](),this[_0x593837(0x8b1)]();}else return _0x5e3daa[_0x593837(0x427)](_0x1678ae=>_0x1678ae['isDead']());}}}}return[];},PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Set_SetupAction',_0x30dc17=>{const _0x38d91f=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x38d91f(0x20e)](_0x30dc17,_0x30dc17);const _0x110ad4=$gameTemp['getLastPluginCommandInterpreter'](),_0x1f9409=BattleManager['_action'],_0x112a19=BattleManager['_subject'],_0xf68e44=BattleManager['_allTargets']?BattleManager[_0x38d91f(0x5ce)][_0x38d91f(0x10b)](0x0):[],_0x7c71d9=BattleManager['_logWindow'];if(!_0x110ad4||!_0x1f9409||!_0x112a19)return;if(!_0x1f9409[_0x38d91f(0x32b)]())return;if(_0x30dc17[_0x38d91f(0xb06)])_0x7c71d9[_0x38d91f(0x2af)](_0x112a19,_0x1f9409[_0x38d91f(0x32b)]());_0x30dc17['ApplyImmortal']&&('sECEj'!=='sECEj'?(this[_0x38d91f(0x7b7)]=!![],_0x4fc069[_0x38d91f(0x17a)]=_0x3e85d0):_0x7c71d9[_0x38d91f(0x5e8)]('applyImmortal',_0x112a19,_0xf68e44,!![]));if(_0x30dc17['ActionStart'])_0x7c71d9[_0x38d91f(0x5e8)](_0x38d91f(0x73f),_0x112a19,_0x1f9409);if(_0x30dc17[_0x38d91f(0x980)])_0x7c71d9[_0x38d91f(0x5e8)](_0x38d91f(0x80d));if(_0x30dc17['CastAnimation'])_0x7c71d9[_0x38d91f(0x5e8)](_0x38d91f(0xad9),_0x112a19,_0x1f9409);if(_0x30dc17[_0x38d91f(0x356)])_0x7c71d9[_0x38d91f(0x5e8)](_0x38d91f(0x3a3));_0x110ad4[_0x38d91f(0x6a1)]('battlelog');}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x21f),_0x518f66=>{const _0x11568a=_0x17f940;if(!SceneManager[_0x11568a(0x2ac)]())return;VisuMZ['ConvertParams'](_0x518f66,_0x518f66);const _0x126bde=$gameTemp['getLastPluginCommandInterpreter'](),_0x328440=BattleManager[_0x11568a(0x658)],_0x4ebc6a=BattleManager['_subject'],_0x14fdb2=BattleManager[_0x11568a(0x5ce)]?BattleManager[_0x11568a(0x5ce)][_0x11568a(0x10b)](0x0):[],_0x2b0b33=BattleManager[_0x11568a(0x8ba)],_0x383e64=_0x518f66[_0x11568a(0xa14)]??![];if(!_0x126bde||!_0x328440||!_0x4ebc6a)return;if(!_0x328440['item']())return;let _0x3fc755=_0x383e64?_0x2b0b33[_0x11568a(0x75e)](_0x4ebc6a):0x1;for(let _0x286726=0x0;_0x286726<_0x3fc755;_0x286726++){_0x383e64&&_0x4ebc6a[_0x11568a(0x2b6)]()&&_0x2b0b33[_0x11568a(0x5e8)](_0x11568a(0x290),_0x4ebc6a,_0x286726);if(_0x518f66['PerformAction'])_0x2b0b33[_0x11568a(0x5e8)](_0x11568a(0x3e3),_0x4ebc6a,_0x328440);if(_0x518f66['WaitCount']>0x0)_0x2b0b33[_0x11568a(0x5e8)](_0x11568a(0x85b),_0x518f66['WaitCount']);if(_0x518f66['ActionAnimation'])_0x2b0b33[_0x11568a(0x5e8)](_0x11568a(0x1df),_0x4ebc6a,_0x14fdb2,_0x328440[_0x11568a(0x32b)]()[_0x11568a(0xab3)]);if(_0x518f66['WaitForAnimation'])_0x2b0b33[_0x11568a(0x5e8)](_0x11568a(0x3a3));for(const _0x3765d2 of _0x14fdb2){if(!_0x3765d2)continue;if(_0x518f66[_0x11568a(0x8d8)])_0x2b0b33[_0x11568a(0x5e8)](_0x11568a(0x12a),_0x4ebc6a,_0x3765d2);}}_0x383e64&&_0x4ebc6a[_0x11568a(0x2b6)]()&&_0x2b0b33[_0x11568a(0x5e8)](_0x11568a(0x66b),_0x4ebc6a);if(_0x518f66['ApplyImmortal'])_0x2b0b33['push']('applyImmortal',_0x4ebc6a,_0x14fdb2,![]);_0x126bde[_0x11568a(0x6a1)](_0x11568a(0x91a));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x441),_0x55f60c=>{const _0x47f540=_0x17f940;if(!SceneManager[_0x47f540(0x2ac)]())return;VisuMZ[_0x47f540(0x20e)](_0x55f60c,_0x55f60c);const _0x5f1f8c=$gameTemp[_0x47f540(0x258)](),_0x3c4357=BattleManager[_0x47f540(0x658)],_0x283289=BattleManager['_subject'],_0x16d002=BattleManager[_0x47f540(0x5ce)]?BattleManager[_0x47f540(0x5ce)][_0x47f540(0x10b)](0x0):[],_0x343f17=BattleManager[_0x47f540(0x8ba)],_0x247594=_0x55f60c[_0x47f540(0xa14)]??![];if(!_0x5f1f8c||!_0x3c4357||!_0x283289)return;if(!_0x3c4357[_0x47f540(0x32b)]())return;let _0x44cd9f=_0x247594?_0x343f17['getDualWieldTimes'](_0x283289):0x1;for(let _0x53a1fd=0x0;_0x53a1fd<_0x44cd9f;_0x53a1fd++){for(const _0x567e29 of _0x16d002){if(!_0x567e29)continue;if(_0x247594&&_0x283289[_0x47f540(0x2b6)]()){if(_0x47f540(0x4a5)!==_0x47f540(0x297))_0x343f17[_0x47f540(0x5e8)](_0x47f540(0x290),_0x283289,_0x53a1fd);else return _0x46d778[_0x47f540(0x960)][_0x47f540(0x32c)][_0x47f540(0x334)][_0x47f540(0x81d)];}if(_0x55f60c[_0x47f540(0x9d8)])_0x343f17[_0x47f540(0x5e8)]('performAction',_0x283289,_0x3c4357);if(_0x55f60c[_0x47f540(0x63f)]>0x0)_0x343f17[_0x47f540(0x5e8)]('waitCount',_0x55f60c[_0x47f540(0x63f)]);if(_0x55f60c[_0x47f540(0x159)])_0x343f17['push'](_0x47f540(0x1df),_0x283289,[_0x567e29],_0x3c4357[_0x47f540(0x32b)]()[_0x47f540(0xab3)]);if(_0x55f60c[_0x47f540(0x68b)]>0x0)_0x343f17[_0x47f540(0x5e8)](_0x47f540(0x85b),_0x55f60c[_0x47f540(0x68b)]);if(_0x55f60c[_0x47f540(0x8d8)])_0x343f17['push'](_0x47f540(0x12a),_0x283289,_0x567e29);}}_0x247594&&_0x283289[_0x47f540(0x2b6)]()&&_0x343f17[_0x47f540(0x5e8)](_0x47f540(0x66b),_0x283289);if(_0x55f60c[_0x47f540(0x2bf)])_0x343f17[_0x47f540(0x5e8)](_0x47f540(0x20d),_0x283289,_0x16d002,![]);_0x5f1f8c['setWaitMode']('battlelog');}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0xa56),_0x4963da=>{const _0x1e13c1=_0x17f940;if(!SceneManager[_0x1e13c1(0x2ac)]())return;VisuMZ[_0x1e13c1(0x20e)](_0x4963da,_0x4963da);const _0x38c89f=$gameTemp[_0x1e13c1(0x258)](),_0xc9acb0=BattleManager[_0x1e13c1(0x658)],_0x4d99f8=BattleManager['_subject'],_0x5bc6c1=BattleManager[_0x1e13c1(0x5ce)]?BattleManager['_allTargets'][_0x1e13c1(0x10b)](0x0):[],_0x1ffe2d=BattleManager['_logWindow'];if(!_0x38c89f||!_0xc9acb0||!_0x4d99f8)return;if(!_0xc9acb0[_0x1e13c1(0x32b)]())return;if(_0x4963da[_0x1e13c1(0x2bf)])_0x1ffe2d[_0x1e13c1(0x5e8)]('applyImmortal',_0x4d99f8,_0x5bc6c1,![]);if(_0x4963da['WaitForNewLine'])_0x1ffe2d['push'](_0x1e13c1(0x9ea));if(_0x4963da['WaitForEffect'])_0x1ffe2d[_0x1e13c1(0x5e8)](_0x1e13c1(0xa69));if(_0x4963da[_0x1e13c1(0x95d)])_0x1ffe2d[_0x1e13c1(0x5e8)](_0x1e13c1(0x84a));if(_0x4963da[_0x1e13c1(0xa64)])_0x1ffe2d[_0x1e13c1(0x5e8)](_0x1e13c1(0x4f1),_0x4d99f8);if(_0x4963da[_0x1e13c1(0x980)])_0x1ffe2d[_0x1e13c1(0x5e8)](_0x1e13c1(0x80d));_0x38c89f[_0x1e13c1(0x6a1)]('battlelog');}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x734),_0x4bd81b=>{const _0x31464d=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x31464d(0x20e)](_0x4bd81b,_0x4bd81b);const _0x5985d2=$gameTemp[_0x31464d(0x258)](),_0x4f3291=_0x4bd81b[_0x31464d(0x6b4)];if(!_0x5985d2)return;$gameScreen[_0x31464d(0x965)](_0x4bd81b['Angle'],_0x4bd81b[_0x31464d(0x5ad)],_0x4bd81b['EasingType']);if(_0x4f3291)_0x5985d2['setWaitMode'](_0x31464d(0x489));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x9f2),_0x311a55=>{const _0x4ed5a0=_0x17f940;if(!SceneManager[_0x4ed5a0(0x2ac)]())return;if(!Imported[_0x4ed5a0(0x660)])return;VisuMZ[_0x4ed5a0(0x20e)](_0x311a55,_0x311a55);const _0x378583=$gameTemp[_0x4ed5a0(0x258)](),_0x369f87=_0x311a55[_0x4ed5a0(0x6b4)];if(!_0x378583)return;$gameScreen['setBattleAngle'](0x0,_0x311a55[_0x4ed5a0(0x5ad)],_0x311a55['EasingType']);if(_0x369f87)_0x378583[_0x4ed5a0(0x6a1)](_0x4ed5a0(0x489));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x999),_0x4c262b=>{const _0x4aeb94=_0x17f940;if(!SceneManager[_0x4aeb94(0x2ac)]())return;if(!Imported[_0x4aeb94(0x660)])return;const _0x1c9860=$gameTemp[_0x4aeb94(0x258)]();if(!_0x1c9860)return;_0x1c9860['setWaitMode']('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x8dc),_0x49460d=>{const _0xd8859f=_0x17f940;if(!SceneManager[_0xd8859f(0x2ac)]())return;VisuMZ[_0xd8859f(0x20e)](_0x49460d,_0x49460d);const _0x30b3a3=$gameTemp[_0xd8859f(0x258)](),_0x49905d=BattleManager[_0xd8859f(0x658)],_0x4fda52=BattleManager['_subject'],_0x50f137=VisuMZ[_0xd8859f(0x34c)](_0x49460d[_0xd8859f(0x7f5)]),_0x90c59=_0x49460d[_0xd8859f(0x611)],_0x7247f9=BattleManager[_0xd8859f(0x8ba)];if(!_0x30b3a3||!_0x49905d||!_0x4fda52)return;if(!_0x49905d['item']())return;let _0x1fda76=_0x49905d[_0xd8859f(0x32b)]()['animationId'];if(_0x1fda76<0x0)_0x1fda76=_0x4fda52[_0xd8859f(0x9aa)]();$gameTemp['requestAnimation'](_0x50f137,_0x1fda76,_0x90c59),_0x49460d[_0xd8859f(0x356)]&&('ocQay'==='ocQay'?_0x30b3a3['setWaitMode'](_0xd8859f(0xacd)):(this[_0xd8859f(0x958)]=_0x5aafb5,this[_0xd8859f(0x871)][_0xd8859f(0x242)]=_0x31a018[_0xd8859f(0x1a9)](_0x1bfc8e)));}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],'ActSeq_Animation_AttackAnimation',_0x505ecd=>{const _0x3b7ae6=_0x17f940;if(!SceneManager[_0x3b7ae6(0x2ac)]())return;VisuMZ[_0x3b7ae6(0x20e)](_0x505ecd,_0x505ecd);const _0x2d1647=$gameTemp[_0x3b7ae6(0x258)](),_0x28b502=BattleManager[_0x3b7ae6(0x128)],_0x1eb8f7=VisuMZ[_0x3b7ae6(0x34c)](_0x505ecd[_0x3b7ae6(0x7f5)]),_0x36bcd4=_0x505ecd['Mirror'],_0x153cb6=BattleManager['_logWindow'];if(!_0x2d1647||!_0x28b502)return;const _0x1339e0=_0x28b502[_0x3b7ae6(0x9aa)]();$gameTemp['requestAnimation'](_0x1eb8f7,_0x1339e0,_0x36bcd4),_0x505ecd['WaitForAnimation']&&('HMHLg'===_0x3b7ae6(0x4f5)?_0x51c7bd=(_0x1796f2+_0x2f1cf9)/0x2:_0x2d1647[_0x3b7ae6(0x6a1)](_0x3b7ae6(0xacd)));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x9b5),_0x2ac8f0=>{const _0x2a33dc=_0x17f940;if(!SceneManager[_0x2a33dc(0x2ac)]())return;VisuMZ[_0x2a33dc(0x20e)](_0x2ac8f0,_0x2ac8f0);const _0x2505ed=_0x449740['attackAnimationIdSlot'](_0x2ac8f0[_0x2a33dc(0x9be)]);if(_0x2505ed<=0x0)return;const _0x134b07=$gameTemp[_0x2a33dc(0x258)](),_0x449740=BattleManager[_0x2a33dc(0x128)],_0x34da01=VisuMZ[_0x2a33dc(0x34c)](_0x2ac8f0[_0x2a33dc(0x7f5)]),_0x260b2d=_0x2ac8f0[_0x2a33dc(0x611)],_0x491604=BattleManager[_0x2a33dc(0x8ba)];if(!_0x134b07||!_0x449740)return;$gameTemp[_0x2a33dc(0x54c)](_0x34da01,_0x2505ed,_0x260b2d),_0x2ac8f0[_0x2a33dc(0x356)]&&(_0x2a33dc(0x250)===_0x2a33dc(0x263)?_0x24417f=_0x10918f>=_0x8f77b9?_0x56deed:_0x565d51:_0x134b07[_0x2a33dc(0x6a1)]('battleAnimation'));}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0xa8d),_0x69eab0=>{const _0x4289f8=_0x17f940;if(!SceneManager[_0x4289f8(0x2ac)]())return;VisuMZ[_0x4289f8(0x20e)](_0x69eab0,_0x69eab0);const _0x4aa872=$gameTemp[_0x4289f8(0x258)](),_0x260fe8=BattleManager[_0x4289f8(0x658)],_0x4184c8=_0x69eab0['Mirror'],_0x14b722=VisuMZ[_0x4289f8(0x34c)](_0x69eab0[_0x4289f8(0x7f5)]);if(!_0x4aa872||!_0x260fe8)return;if(!_0x260fe8['item']())return;for(const _0x49418a of _0x14b722){if(!_0x49418a)continue;_0x49418a[_0x4289f8(0xad9)](_0x260fe8,_0x4184c8);}if(_0x69eab0[_0x4289f8(0x356)])_0x4aa872[_0x4289f8(0x6a1)](_0x4289f8(0xacd));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Animation_ChangeBattlePortrait',_0x1616cc=>{const _0x4af65e=_0x17f940;VisuMZ[_0x4af65e(0x20e)](_0x1616cc,_0x1616cc);const _0x2727ab=$gameTemp['getLastPluginCommandInterpreter'](),_0xeba6a9=VisuMZ[_0x4af65e(0x34c)](_0x1616cc[_0x4af65e(0x7f5)]),_0x2a0957=_0x1616cc['Filename'];if(!_0x2a0957)return;for(const _0x191be2 of _0xeba6a9){if(!_0x191be2)continue;if(!_0x191be2[_0x4af65e(0x2b6)]())continue;_0x191be2[_0x4af65e(0x11b)](_0x2a0957);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x486),_0x5baf83=>{const _0x2448ab=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2448ab(0x20e)](_0x5baf83,_0x5baf83);const _0x178ea1=$gameTemp[_0x2448ab(0x258)](),_0x5249a9=VisuMZ[_0x2448ab(0x34c)](_0x5baf83['Targets']),_0x48af77=_0x5baf83[_0x2448ab(0x3bb)],_0x29cb1e=_0x5baf83['Mirror'];if(!_0x178ea1)return;$gameTemp['requestAnimation'](_0x5249a9,_0x48af77,_0x29cb1e);if(_0x5baf83[_0x2448ab(0x356)])_0x178ea1[_0x2448ab(0x6a1)](_0x2448ab(0xacd));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x249),_0x3c79ab=>{const _0x53e09c=_0x17f940;if(!SceneManager[_0x53e09c(0x2ac)]())return;const _0x12e751=$gameTemp[_0x53e09c(0x258)]();if(!_0x12e751)return;_0x12e751[_0x53e09c(0x6a1)](_0x53e09c(0xacd));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x739),_0x15e710=>{const _0x2e7c4a=_0x17f940;if(!SceneManager[_0x2e7c4a(0x2ac)]())return;VisuMZ[_0x2e7c4a(0x20e)](_0x15e710,_0x15e710);const _0x1d006a=BattleManager['_logWindow'],_0x473888=_0x15e710['CopyCombatLog']&&Imported[_0x2e7c4a(0x8e8)];_0x1d006a[_0x2e7c4a(0xa81)](_0x15e710['Text']);if(_0x473888&&Imported[_0x2e7c4a(0x8e8)]){if(_0x2e7c4a(0x798)!=='EyGQe')return _0x2e7c4a(0x7e5);else $gameSystem['addTextToCombatLog'](_0x15e710[_0x2e7c4a(0x8bb)]||'',_0x15e710[_0x2e7c4a(0x494)]||0x0);}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x312),_0x2b8585=>{const _0x32dee0=_0x17f940;if(!SceneManager[_0x32dee0(0x2ac)]())return;const _0x243b9e=BattleManager[_0x32dee0(0x8ba)];_0x243b9e[_0x32dee0(0x84a)]();}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x65a),_0x5a07eb=>{const _0x1d9786=_0x17f940;if(!SceneManager[_0x1d9786(0x2ac)]())return;const _0x52f3d5=$gameTemp[_0x1d9786(0x258)](),_0x44c50a=BattleManager['_action'],_0x26c85f=BattleManager[_0x1d9786(0x128)],_0x4060b1=BattleManager[_0x1d9786(0x8ba)];if(!_0x52f3d5||!_0x44c50a||!_0x26c85f)return;if(!_0x44c50a['item']())return;_0x4060b1['displayAction'](_0x26c85f,_0x44c50a[_0x1d9786(0x32b)]()),_0x52f3d5[_0x1d9786(0x6a1)](_0x1d9786(0x91a));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_BattleLog_PopBaseLine',_0xbcdf38=>{const _0x1c6d24=_0x17f940;if(!SceneManager[_0x1c6d24(0x2ac)]())return;const _0x53c3b1=BattleManager[_0x1c6d24(0x8ba)];_0x53c3b1[_0x1c6d24(0x6e1)]();}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x810),_0x597f2f=>{const _0x575d56=_0x17f940;if(!SceneManager['isSceneBattle']())return;const _0x3ebcf3=BattleManager[_0x575d56(0x8ba)];_0x3ebcf3[_0x575d56(0x30d)]();}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x3a2),_0x2ded5b=>{const _0x2dd17c=_0x17f940;if(!SceneManager['isSceneBattle']())return;const _0x5080b5=BattleManager[_0x2dd17c(0x8ba)];_0x5080b5[_0x2dd17c(0xaae)]();}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x72a),_0xfd57d5=>{const _0x126cbf=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xfd57d5,_0xfd57d5),SceneManager[_0x126cbf(0x712)][_0x126cbf(0x7a4)](_0xfd57d5[_0x126cbf(0x814)]);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0xaa0),_0x4acec8=>{const _0xb1b8fa=_0x17f940;if(!SceneManager[_0xb1b8fa(0x2ac)]())return;const _0x10e99f=$gameTemp['getLastPluginCommandInterpreter']();_0x10e99f['setWaitMode'](_0xb1b8fa(0x91a));}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x229),_0x2e10e5=>{const _0xc8b082=_0x17f940;if(!SceneManager['isSceneBattle']())return;const _0x547b45=$gameTemp[_0xc8b082(0x258)](),_0x2ec57e=BattleManager[_0xc8b082(0x8ba)];_0x2ec57e[_0xc8b082(0x9ea)](),_0x547b45[_0xc8b082(0x6a1)](_0xc8b082(0x91a));}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x149),_0x3eb9cb=>{const _0x43ed09=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x43ed09(0x660)])return;VisuMZ[_0x43ed09(0x20e)](_0x3eb9cb,_0x3eb9cb);const _0x1dafbc=$gameScreen[_0x43ed09(0xabd)]();_0x1dafbc[_0x43ed09(0x964)]=_0x3eb9cb['Setting'];}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_Camera_FocusPoint',_0x227f76=>{const _0x415133=_0x17f940;if(!SceneManager[_0x415133(0x2ac)]())return;if(!Imported[_0x415133(0x660)])return;VisuMZ['ConvertParams'](_0x227f76,_0x227f76);const _0xe6005b=$gameTemp['getLastPluginCommandInterpreter'](),_0x11c5da=_0x227f76[_0x415133(0x4d9)];$gameScreen[_0x415133(0xb1b)](_0x227f76['FocusX'],_0x227f76[_0x415133(0x491)],_0x227f76[_0x415133(0x5ad)],_0x227f76[_0x415133(0x6e2)]);if(_0x11c5da)_0xe6005b[_0x415133(0x6a1)](_0x415133(0x83b));}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0xa36),_0x30b47e=>{const _0x1a0896=_0x17f940;if(!SceneManager[_0x1a0896(0x2ac)]())return;if(!Imported[_0x1a0896(0x660)])return;VisuMZ[_0x1a0896(0x20e)](_0x30b47e,_0x30b47e);const _0x40001d=$gameTemp['getLastPluginCommandInterpreter'](),_0x57f048=VisuMZ[_0x1a0896(0x34c)](_0x30b47e['Targets']),_0x444984=_0x30b47e[_0x1a0896(0x4d9)];$gameScreen[_0x1a0896(0x333)](_0x57f048,_0x30b47e[_0x1a0896(0x5ad)],_0x30b47e[_0x1a0896(0x6e2)]);if(_0x444984)_0x40001d['setWaitMode'](_0x1a0896(0x83b));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Camera_Offset',_0x39cb12=>{const _0xe46de=_0x17f940;if(!SceneManager[_0xe46de(0x2ac)]())return;if(!Imported[_0xe46de(0x660)])return;VisuMZ[_0xe46de(0x20e)](_0x39cb12,_0x39cb12);const _0x13a71b=$gameTemp[_0xe46de(0x258)](),_0x1f2655=_0x39cb12[_0xe46de(0x4d9)];$gameScreen[_0xe46de(0x64c)](_0x39cb12[_0xe46de(0x4e9)],_0x39cb12[_0xe46de(0x99b)],_0x39cb12[_0xe46de(0x5ad)],_0x39cb12['EasingType']);if(_0x1f2655)_0x13a71b['setWaitMode'](_0xe46de(0x83b));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x78f),_0x4dbb30=>{const _0xecf581=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xecf581(0x660)])return;VisuMZ[_0xecf581(0x20e)](_0x4dbb30,_0x4dbb30);const _0x3400f5=$gameTemp[_0xecf581(0x258)](),_0x4dc5f4=_0x4dbb30['ResetFocus'],_0x386e93=_0x4dbb30[_0xecf581(0x96f)],_0x2f440d=_0x4dbb30[_0xecf581(0x4d9)];if(_0x4dc5f4){const _0x9d1a04=Math[_0xecf581(0x189)](Graphics[_0xecf581(0x67f)]/0x2),_0x2704e7=Math[_0xecf581(0x189)](Graphics['height']/0x2);$gameScreen[_0xecf581(0xb1b)](_0x9d1a04,_0x2704e7,_0x4dbb30[_0xecf581(0x5ad)],_0x4dbb30['EasingType']);}_0x386e93&&('OTzjR'===_0xecf581(0x3a6)?this['addPartyCommand']():$gameScreen[_0xecf581(0x64c)](0x0,0x0,_0x4dbb30[_0xecf581(0x5ad)],_0x4dbb30[_0xecf581(0x6e2)]));if(_0x2f440d)_0x3400f5['setWaitMode']('battleCamera');}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x9fd),_0x2c83e3=>{const _0x1237f0=_0x17f940;if(!SceneManager[_0x1237f0(0x2ac)]())return;if(!Imported[_0x1237f0(0x660)])return;const _0x3864d1=$gameTemp[_0x1237f0(0x258)]();if(!_0x3864d1)return;_0x3864d1[_0x1237f0(0x6a1)]('battleCamera');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_DB_DragonbonesMotionAni',_0x5007a9=>{const _0x1c4df9=_0x17f940;if(!SceneManager[_0x1c4df9(0x2ac)]())return;if(!Imported[_0x1c4df9(0x9f5)])return;VisuMZ[_0x1c4df9(0x20e)](_0x5007a9,_0x5007a9);const _0x305dbd=VisuMZ[_0x1c4df9(0x34c)](_0x5007a9[_0x1c4df9(0x7f5)]),_0x110bb5=_0x5007a9[_0x1c4df9(0x3a9)]['toLowerCase']()['trim']();for(const _0xc1871 of _0x305dbd){if(!_0xc1871)continue;_0xc1871[_0x1c4df9(0x9f6)](_0x110bb5);}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],'ActSeq_DB_DragonbonesTimeScale',_0x4c06d3=>{const _0x4976c5=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4976c5(0x9f5)])return;VisuMZ[_0x4976c5(0x20e)](_0x4c06d3,_0x4c06d3);const _0x20bc8c=VisuMZ[_0x4976c5(0x34c)](_0x4c06d3['Targets']),_0x126461=_0x4c06d3['TimeScale'];for(const _0x32313b of _0x20bc8c){if(!_0x32313b)continue;_0x32313b[_0x4976c5(0x44d)]()[_0x4976c5(0x468)]=_0x126461;}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x3a4),_0x52700c=>{const _0x489e1c=_0x17f940;if(!SceneManager[_0x489e1c(0x2ac)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x489e1c(0x20e)](_0x52700c,_0x52700c);const _0x1b62a3=BattleManager['_action'],_0x17b01f=_0x52700c['Elements'];if(!_0x1b62a3)return;_0x1b62a3[_0x489e1c(0x231)]=_0x17b01f;}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Element_Clear',_0x3c56eb=>{const _0x5add12=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x950c96=BattleManager[_0x5add12(0x658)];if(!_0x950c96)return;_0x950c96[_0x5add12(0x1f6)]();}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x608),_0x55f0f=>{const _0x271e47=_0x17f940;if(!SceneManager[_0x271e47(0x2ac)]())return;if(!Imported[_0x271e47(0x83f)])return;VisuMZ[_0x271e47(0x20e)](_0x55f0f,_0x55f0f);const _0x4f6a59=BattleManager['_action'],_0x378771=_0x55f0f[_0x271e47(0xa46)];if(!_0x4f6a59)return;_0x4f6a59[_0x271e47(0x3bf)]=_0x378771;}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x874),_0x18a8ba=>{const _0x1c1b2c=_0x17f940;if(!SceneManager[_0x1c1b2c(0x2ac)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x728422=BattleManager[_0x1c1b2c(0x658)];if(!_0x728422)return;_0x728422[_0x1c1b2c(0x950)]=!![];}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x64a),_0x561b50=>{const _0x540d2e=_0x17f940;if(!Imported[_0x540d2e(0xa4a)])return;if(!SceneManager[_0x540d2e(0x2ac)]())return;VisuMZ[_0x540d2e(0x20e)](_0x561b50,_0x561b50);const _0x714fc2=VisuMZ[_0x540d2e(0x34c)](_0x561b50[_0x540d2e(0x7f5)]);for(const _0x22c37f of _0x714fc2){if('RaRIp'===_0x540d2e(0x720)){if(!_0x22c37f)continue;_0x22c37f[_0x540d2e(0x42d)](_0x540d2e(0xa6b)),_0x22c37f[_0x540d2e(0x42d)](_0x540d2e(0x8ff)),_0x22c37f[_0x540d2e(0x42d)]('tv'),_0x22c37f[_0x540d2e(0x4e5)]();}else this['usePremadeActionSequence'](_0x16d533,_0x4cdf93,_0x5106e6);}$gamePlayer['refresh']();}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0xa60),_0x3fe5c7=>{const _0x1eec12=_0x17f940;if(!Imported[_0x1eec12(0xa4a)])return;if(!SceneManager[_0x1eec12(0x2ac)]())return;VisuMZ[_0x1eec12(0x20e)](_0x3fe5c7,_0x3fe5c7);const _0x20b5fd=VisuMZ[_0x1eec12(0x34c)](_0x3fe5c7['Targets']),_0x47cf9a=_0x1eec12(0x8ff);_0x3fe5c7[_0x1eec12(0x88f)]=Math[_0x1eec12(0x65e)](_0x3fe5c7[_0x1eec12(0x543)]/0x2),_0x3fe5c7[_0x1eec12(0x96a)]=_0x3fe5c7[_0x1eec12(0x543)],_0x3fe5c7['refreshRequest']=!![];for(const _0x646f24 of _0x20b5fd){if(!_0x646f24)continue;_0x646f24[_0x1eec12(0x58d)](_0x47cf9a,_0x3fe5c7);}$gamePlayer['refresh']();}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Horror_GlitchRemove',_0x18284f=>{const _0x4a3f2a=_0x17f940;if(!Imported[_0x4a3f2a(0xa4a)])return;if(!SceneManager[_0x4a3f2a(0x2ac)]())return;VisuMZ['ConvertParams'](_0x18284f,_0x18284f);const _0x4c75d7=VisuMZ[_0x4a3f2a(0x34c)](_0x18284f['Targets']);for(const _0xffc69c of _0x4c75d7){if(!_0xffc69c)continue;_0xffc69c['removeHorrorEffect'](_0x4a3f2a(0x8ff));}$gamePlayer[_0x4a3f2a(0xaae)]();}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x287),_0x46358a=>{const _0x51c0ae=_0x17f940;if(!Imported[_0x51c0ae(0xa4a)])return;if(!SceneManager[_0x51c0ae(0x2ac)]())return;VisuMZ[_0x51c0ae(0x20e)](_0x46358a,_0x46358a);const _0xf6bef9=VisuMZ[_0x51c0ae(0x34c)](_0x46358a['Targets']),_0x3cd399='noise';for(const _0x979b52 of _0xf6bef9){if(_0x51c0ae(0x43e)===_0x51c0ae(0x43e)){if(!_0x979b52)continue;_0x979b52[_0x51c0ae(0x58d)](_0x3cd399,_0x46358a);}else return _0x5272a6[_0x51c0ae(0x427)](_0x2143f1=>_0x2143f1!==_0x15fd86&&!_0x3c6300[_0x51c0ae(0x72d)](_0x2143f1)&&_0x2143f1[_0x51c0ae(0x651)]());}$gamePlayer[_0x51c0ae(0xaae)]();}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0xa2a),_0x1f8618=>{const _0x1b5c95=_0x17f940;if(!Imported[_0x1b5c95(0xa4a)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b5c95(0x20e)](_0x1f8618,_0x1f8618);const _0x4f0668=VisuMZ[_0x1b5c95(0x34c)](_0x1f8618[_0x1b5c95(0x7f5)]);for(const _0xbec063 of _0x4f0668){if(!_0xbec063)continue;_0xbec063[_0x1b5c95(0x42d)](_0x1b5c95(0xa6b));}$gamePlayer['refresh']();}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x5e3),_0x46f842=>{const _0x241316=_0x17f940;if(!Imported[_0x241316(0xa4a)])return;if(!SceneManager[_0x241316(0x2ac)]())return;VisuMZ['ConvertParams'](_0x46f842,_0x46f842);const _0x35ba9c=VisuMZ[_0x241316(0x34c)](_0x46f842[_0x241316(0x7f5)]),_0x54b00a='tv';for(const _0x16119a of _0x35ba9c){if(_0x241316(0x76d)!==_0x241316(0x247)){if(!_0x16119a)continue;_0x16119a[_0x241316(0x58d)](_0x54b00a,_0x46f842);}else{if(_0x3ad627['value'](_0x29d07a))return!![];}}$gamePlayer['refresh']();}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Horror_TVRemove',_0xa72d43=>{const _0x314928=_0x17f940;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x314928(0x2ac)]())return;VisuMZ[_0x314928(0x20e)](_0xa72d43,_0xa72d43);const _0x93d78b=VisuMZ[_0x314928(0x34c)](_0xa72d43[_0x314928(0x7f5)]);for(const _0x373dea of _0x93d78b){if('gmPZi'!==_0x314928(0x8e2))return!![];else{if(!_0x373dea)continue;_0x373dea['removeHorrorEffect']('tv');}}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x17f940(0x512),_0x48a769=>{const _0x53f1cf=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x53f1cf(0x946)])return;const _0x32abaa=SceneManager[_0x53f1cf(0x712)][_0x53f1cf(0x4ab)];if(!_0x32abaa)return;VisuMZ[_0x53f1cf(0x20e)](_0x48a769,_0x48a769);const _0x35bdd0=_0x48a769[_0x53f1cf(0x69f)]||0x1,_0x5d5627=_0x48a769[_0x53f1cf(0x5ad)]||0x1,_0x36154d=_0x48a769[_0x53f1cf(0x6e2)]||_0x53f1cf(0x69c);_0x32abaa['setupRgbSplitImpactFilter'](_0x35bdd0,_0x5d5627,_0x36154d);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x233),_0x5f17b7=>{const _0x504c1e=_0x17f940;if(!SceneManager[_0x504c1e(0x2ac)]())return;if(!Imported[_0x504c1e(0x946)])return;const _0x148744=SceneManager[_0x504c1e(0x712)]['_spriteset'];if(!_0x148744)return;VisuMZ[_0x504c1e(0x20e)](_0x5f17b7,_0x5f17b7);const _0x4d9410=Number(_0x5f17b7['Angle'])||0x0,_0x35491c=Number(_0x5f17b7[_0x504c1e(0x6c0)]),_0xb27f7a=_0x5f17b7[_0x504c1e(0x5ad)]||0x1,_0x428ab3=_0x5f17b7[_0x504c1e(0x6e2)]||'Linear';_0x148744[_0x504c1e(0xa82)](_0x4d9410,_0x35491c,_0xb27f7a,_0x428ab3);}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_Impact_MotionBlurTarget',_0x45de9a=>{const _0x48c90f=_0x17f940;if(!SceneManager[_0x48c90f(0x2ac)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x19c200=SceneManager[_0x48c90f(0x712)]['_spriteset'];if(!_0x19c200)return;VisuMZ['ConvertParams'](_0x45de9a,_0x45de9a);const _0x11d36b=Number(_0x45de9a[_0x48c90f(0x5a0)])||0x0,_0x479c00=Number(_0x45de9a['Rate']),_0x35b196=_0x45de9a[_0x48c90f(0x5ad)]||0x1,_0x5106a8=_0x45de9a[_0x48c90f(0x6e2)]||_0x48c90f(0x69c),_0x5b9a41=VisuMZ[_0x48c90f(0x34c)](_0x45de9a[_0x48c90f(0x7f5)]);for(const _0x1a816e of _0x5b9a41){if(!_0x1a816e)continue;if(!_0x1a816e['battler']())continue;_0x1a816e['battler']()[_0x48c90f(0xa82)](_0x11d36b,_0x479c00,_0x35b196,_0x5106a8);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Impact_MotionTrailCreate',_0x99243c=>{const _0x3de852=_0x17f940;if(!SceneManager[_0x3de852(0x2ac)]())return;if(!Imported[_0x3de852(0x946)])return;VisuMZ[_0x3de852(0x20e)](_0x99243c,_0x99243c);const _0x391361={'delay':_0x99243c[_0x3de852(0x851)],'duration':_0x99243c[_0x3de852(0x79c)],'hue':_0x99243c['hue'],'opacityStart':_0x99243c[_0x3de852(0x546)],'tone':_0x99243c[_0x3de852(0x9c1)],'visible':!![]},_0x1b7c2b=VisuMZ[_0x3de852(0x34c)](_0x99243c[_0x3de852(0x7f5)]);for(const _0x38fd1d of _0x1b7c2b){if(!_0x38fd1d)continue;_0x38fd1d[_0x3de852(0x6d0)](_0x391361);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Impact_MotionTrailRemove',_0x4083a8=>{const _0x6d91d7=_0x17f940;if(!SceneManager[_0x6d91d7(0x2ac)]())return;if(!Imported[_0x6d91d7(0x946)])return;VisuMZ[_0x6d91d7(0x20e)](_0x4083a8,_0x4083a8);const _0x3a52f2=VisuMZ[_0x6d91d7(0x34c)](_0x4083a8[_0x6d91d7(0x7f5)]);for(const _0x494af8 of _0x3a52f2){if(!_0x494af8)continue;_0x494af8['clearBattlerMotionTrailData']();}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x730),_0x1841a4=>{const _0x32bd51=_0x17f940;if(!Imported[_0x32bd51(0x946)])return;const _0x170ced=SceneManager[_0x32bd51(0x712)][_0x32bd51(0x4ab)];if(!_0x170ced)return;VisuMZ[_0x32bd51(0x20e)](_0x1841a4,_0x1841a4);const _0x30d050=_0x1841a4['X']||0x0,_0x257e52=_0x1841a4['Y']||0x0,_0x23d475=_0x1841a4[_0x32bd51(0xa84)]||0x0,_0x2a575b=_0x1841a4['Wave']||0x0,_0x32c59a=_0x1841a4[_0x32bd51(0x5ad)]||0x1;_0x170ced['setupShockwaveImpactFilter'](_0x30d050,_0x257e52,_0x23d475,_0x2a575b,_0x32c59a);}),PluginManager['registerCommand'](pluginData['name'],_0x17f940(0x9b0),_0x371c8c=>{const _0x18e773=_0x17f940;if(!SceneManager[_0x18e773(0x2ac)]())return;if(!Imported[_0x18e773(0x946)])return;const _0x51ec25=SceneManager[_0x18e773(0x712)]['_spriteset'];if(!_0x51ec25)return;VisuMZ[_0x18e773(0x20e)](_0x371c8c,_0x371c8c);const _0x227ace=VisuMZ[_0x18e773(0x34c)](_0x371c8c['Targets']),_0x7dcf5b=_0x371c8c['TargetLocation'],_0x37f343=_0x371c8c[_0x18e773(0x4e9)]||0x0,_0x557fe6=_0x371c8c[_0x18e773(0x99b)]||0x0,_0x228e25=_0x371c8c[_0x18e773(0xa84)]||0x0,_0xaef9d4=_0x371c8c['Wave']||0x0,_0x5cadc2=_0x371c8c[_0x18e773(0x5ad)]||0x1;for(const _0x420bb2 of _0x227ace){if(!_0x420bb2)continue;if(!_0x420bb2[_0x18e773(0x4a6)]())continue;const _0x510bce=_0x420bb2[_0x18e773(0x4a6)]();let _0x2bbd48=_0x510bce[_0x18e773(0x521)],_0x3eaf44=_0x510bce[_0x18e773(0x626)];_0x2bbd48+=(Graphics[_0x18e773(0x67f)]-Graphics[_0x18e773(0xac3)])/0x2,_0x3eaf44+=(Graphics['height']-Graphics[_0x18e773(0x45d)])/0x2;if(_0x7dcf5b[_0x18e773(0x413)](/front/i)){if(_0x18e773(0x252)===_0x18e773(0x252))_0x2bbd48+=(_0x420bb2[_0x18e773(0xae4)]()?0x1:-0x1)*_0x510bce[_0x18e773(0x682)]()/0x2;else{if(_0x2a0c1c['match'](/(.*):[ ](\d+)/i)){const _0x3bd879=_0x61f1d1(_0x8d2bf['$1'])[_0x18e773(0x224)](),_0xaf4859=_0x500866(_0xd5915f['$2']);_0x2ab172[_0x3bd879]=_0xaf4859,_0x4c04b7+=_0xaf4859;}else{if(_0x349369[_0x18e773(0x413)](/(.*):[ ](\d+\.?\d+)/i)){const _0x18dd8f=_0x4bb94d(_0x59ab85['$1'])[_0x18e773(0x224)](),_0x342e0f=_0x50e055(_0x5da90c['$2']);_0x1b3050[_0x18dd8f]=_0x342e0f,_0x3a3483+=_0x342e0f;}else _0x1f1bd2!==''&&(_0x463844[_0x4841f0]=0x1,_0x289d25++);}}}else{if(_0x7dcf5b[_0x18e773(0x413)](/back/i)){if(_0x18e773(0x648)!=='uizoq')_0x2bbd48+=(_0x420bb2['isEnemy']()?-0x1:0x1)*_0x510bce[_0x18e773(0x682)]()/0x2;else{this['frameVisible']=this[_0x18e773(0x95a)]();const _0x5b7009=_0x33aebf['BattleCore'][_0x18e773(0x32c)]['BattleLayout'];_0x5b7009[_0x18e773(0xa6d)]&&(this[_0x18e773(0xac4)]=0x0);}}}if(_0x7dcf5b[_0x18e773(0x413)](/head/i))_0x3eaf44-=_0x510bce[_0x18e773(0xae2)]();else _0x7dcf5b['match'](/center/i)&&(_0x3eaf44-=_0x510bce[_0x18e773(0xae2)]()/0x2);_0x2bbd48+=_0x37f343,_0x3eaf44+=_0x557fe6,_0x51ec25[_0x18e773(0x11d)](_0x2bbd48,_0x3eaf44,_0x228e25,_0xaef9d4,_0x5cadc2);}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x9ec),_0x2b4693=>{const _0x27865f=_0x17f940;if(!SceneManager[_0x27865f(0x2ac)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1e07e9=SceneManager[_0x27865f(0x712)][_0x27865f(0x4ab)];if(!_0x1e07e9)return;VisuMZ[_0x27865f(0x20e)](_0x2b4693,_0x2b4693);const _0x52eb6d=VisuMZ['CreateActionSequenceTargets'](_0x2b4693['Targets']),_0x429bd4=_0x2b4693[_0x27865f(0x63d)],_0x203214=_0x2b4693[_0x27865f(0x4e9)]||0x0,_0x368d97=_0x2b4693[_0x27865f(0x99b)]||0x0,_0x4c0d04=_0x2b4693[_0x27865f(0xa84)]||0x0,_0x2fd881=_0x2b4693[_0x27865f(0x625)]||0x0,_0x53126f=_0x2b4693[_0x27865f(0x5ad)]||0x1,_0x6b0151=Math[_0x27865f(0x1c9)](..._0x52eb6d[_0x27865f(0x296)](_0x225021=>_0x225021[_0x27865f(0x4a6)]()[_0x27865f(0x521)]-_0x225021[_0x27865f(0x4a6)]()['mainSpriteWidth']()/0x2)),_0x575b2d=Math[_0x27865f(0xb2c)](..._0x52eb6d[_0x27865f(0x296)](_0x102d5e=>_0x102d5e[_0x27865f(0x4a6)]()[_0x27865f(0x521)]+_0x102d5e[_0x27865f(0x4a6)]()[_0x27865f(0x682)]()/0x2)),_0x1e591a=Math[_0x27865f(0x1c9)](..._0x52eb6d[_0x27865f(0x296)](_0xf4b706=>_0xf4b706['battler']()[_0x27865f(0x626)]-_0xf4b706[_0x27865f(0x4a6)]()[_0x27865f(0xae2)]())),_0x4096c=Math[_0x27865f(0xb2c)](..._0x52eb6d['map'](_0x394072=>_0x394072[_0x27865f(0x4a6)]()[_0x27865f(0x626)])),_0x264322=_0x52eb6d[_0x27865f(0x427)](_0x23cda4=>_0x23cda4[_0x27865f(0x2b6)]())[_0x27865f(0x702)],_0x216d33=_0x52eb6d['filter'](_0x50ec24=>_0x50ec24[_0x27865f(0xae4)]())['length'];let _0x3cfd41=0x0,_0x28a1f0=0x0;if(_0x429bd4[_0x27865f(0x413)](/front/i)){if(_0x27865f(0x943)!=='XJSOM'){this[_0x27865f(0x9c6)][_0x27865f(0x5e8)](_0x15fe30);if(this['isShownOnBattlePortrait']())_0x46ed01[_0x27865f(0x712)][_0x27865f(0x1e7)]['addDamageSprite'](_0x53de77,this[_0x27865f(0xa3d)]);else{this['damageContainer']()['addChild'](_0xdf24da);if(_0x5134e7[_0x27865f(0x3ed)]())_0x1ca24b[_0x27865f(0x13a)]['x']=-0x1;}}else _0x3cfd41=_0x264322>=_0x216d33?_0x6b0151:_0x575b2d;}else{if(_0x429bd4[_0x27865f(0x413)](/middle/i)){if(_0x27865f(0x2e1)!==_0x27865f(0x2e1))return this[_0x27865f(0x4e8)]();else _0x3cfd41=(_0x6b0151+_0x575b2d)/0x2,melee=-0x1;}else _0x429bd4['match'](/back/i)&&(_0x3cfd41=_0x264322>=_0x216d33?_0x575b2d:_0x6b0151);}if(_0x429bd4['match'](/head/i))'SscWv'!=='SscWv'?this[_0x27865f(0x96b)](...arguments):_0x28a1f0=_0x1e591a;else{if(_0x429bd4[_0x27865f(0x413)](/center/i)){if(_0x27865f(0x7aa)===_0x27865f(0xa0a))return _0x558221[_0x27865f(0x1b6)]();else _0x28a1f0=(_0x1e591a+_0x4096c)/0x2;}else _0x429bd4[_0x27865f(0x413)](/base/i)&&(_0x27865f(0x2c3)===_0x27865f(0x2c3)?_0x28a1f0=_0x4096c:this[_0x27865f(0x1ed)]=_0x2f039a(_0x26d6c7['$1']));}_0x3cfd41+=(Graphics['width']-Graphics[_0x27865f(0xac3)])/0x2,_0x28a1f0+=(Graphics[_0x27865f(0x87c)]-Graphics[_0x27865f(0x45d)])/0x2,_0x3cfd41+=_0x203214,_0x28a1f0+=_0x368d97,_0x1e07e9[_0x27865f(0x11d)](_0x3cfd41,_0x28a1f0,_0x4c0d04,_0x2fd881,_0x53126f);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x45a),_0x45c4df=>{const _0x443cd0=_0x17f940;if(!Imported[_0x443cd0(0x946)])return;const _0x2af731=SceneManager['_scene'][_0x443cd0(0x4ab)];if(!_0x2af731)return;VisuMZ[_0x443cd0(0x20e)](_0x45c4df,_0x45c4df);const _0x290430=_0x45c4df['X']||0x0,_0x51d1c8=_0x45c4df['Y']||0x0,_0x1cbed2=_0x45c4df['Strength']||0x0,_0x37962e=_0x45c4df[_0x443cd0(0x9e9)]||0x0,_0x5188b4=_0x45c4df[_0x443cd0(0x5ad)]||0x1,_0x1fc9dc=_0x45c4df[_0x443cd0(0x6e2)]||_0x443cd0(0x69c);_0x2af731[_0x443cd0(0x74a)](_0x1cbed2,_0x290430,_0x51d1c8,_0x37962e,_0x5188b4,_0x1fc9dc);}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_Impact_ZoomBlurTargetCenter',_0x2638e6=>{const _0x4443b2=_0x17f940;if(!Imported[_0x4443b2(0x946)])return;const _0x1d75fc=SceneManager[_0x4443b2(0x712)]['_spriteset'];if(!_0x1d75fc)return;VisuMZ[_0x4443b2(0x20e)](_0x2638e6,_0x2638e6);const _0x9bf8f9=VisuMZ[_0x4443b2(0x34c)](_0x2638e6['Targets']),_0x4c36a6=_0x2638e6[_0x4443b2(0x63d)],_0x37066f=_0x2638e6[_0x4443b2(0x4e9)]||0x0,_0x15f126=_0x2638e6[_0x4443b2(0x99b)]||0x0,_0x1f4ce8=_0x2638e6['Strength']||0x0,_0x402d3=_0x2638e6['Radius']||0x0,_0x176c2d=_0x2638e6[_0x4443b2(0x5ad)]||0x1,_0x48a330=_0x2638e6[_0x4443b2(0x6e2)]||_0x4443b2(0x69c),_0x13dcce=Math[_0x4443b2(0x1c9)](..._0x9bf8f9[_0x4443b2(0x296)](_0x3283fe=>_0x3283fe['battler']()[_0x4443b2(0x521)]-_0x3283fe[_0x4443b2(0x4a6)]()[_0x4443b2(0x682)]()/0x2)),_0x5a02b2=Math[_0x4443b2(0xb2c)](..._0x9bf8f9[_0x4443b2(0x296)](_0x336d8f=>_0x336d8f[_0x4443b2(0x4a6)]()[_0x4443b2(0x521)]+_0x336d8f[_0x4443b2(0x4a6)]()[_0x4443b2(0x682)]()/0x2)),_0x1940ec=Math[_0x4443b2(0x1c9)](..._0x9bf8f9['map'](_0x39eee8=>_0x39eee8[_0x4443b2(0x4a6)]()['_baseY']-_0x39eee8['battler']()[_0x4443b2(0xae2)]())),_0x50f07c=Math[_0x4443b2(0xb2c)](..._0x9bf8f9['map'](_0x564180=>_0x564180['battler']()[_0x4443b2(0x626)])),_0xfeab05=_0x9bf8f9[_0x4443b2(0x427)](_0x5179ea=>_0x5179ea[_0x4443b2(0x2b6)]())[_0x4443b2(0x702)],_0x2c7144=_0x9bf8f9[_0x4443b2(0x427)](_0x8d62b4=>_0x8d62b4['isEnemy']())[_0x4443b2(0x702)];let _0x3b172a=0x0,_0x2f4ee9=0x0;if(_0x4c36a6[_0x4443b2(0x413)](/front/i))_0x3b172a=_0xfeab05>=_0x2c7144?_0x13dcce:_0x5a02b2;else{if(_0x4c36a6[_0x4443b2(0x413)](/middle/i))_0x3b172a=(_0x13dcce+_0x5a02b2)/0x2,melee=-0x1;else _0x4c36a6[_0x4443b2(0x413)](/back/i)&&(_0x3b172a=_0xfeab05>=_0x2c7144?_0x5a02b2:_0x13dcce);}if(_0x4c36a6[_0x4443b2(0x413)](/head/i))_0x2f4ee9=_0x1940ec;else{if(_0x4c36a6[_0x4443b2(0x413)](/center/i))_0x2f4ee9=(_0x1940ec+_0x50f07c)/0x2;else{if(_0x4c36a6[_0x4443b2(0x413)](/base/i)){if(_0x4443b2(0x13b)===_0x4443b2(0x4c1)){const _0x52c1f2=_0x155206(_0x493daf['$1']);this[_0x4443b2(0xafa)](_0x52c1f2);}else _0x2f4ee9=_0x50f07c;}}}_0x3b172a+=(Graphics[_0x4443b2(0x67f)]-Graphics[_0x4443b2(0xac3)])/0x2,_0x2f4ee9+=(Graphics[_0x4443b2(0x87c)]-Graphics[_0x4443b2(0x45d)])/0x2,_0x3b172a+=_0x37066f,_0x2f4ee9+=_0x15f126,_0x1d75fc['setupZoomBlurImpactFilter'](_0x1f4ce8,_0x3b172a,_0x2f4ee9,_0x402d3,_0x176c2d,_0x48a330);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Mechanics_ActionEffect',_0x461282=>{const _0x2e5888=_0x17f940;if(!SceneManager[_0x2e5888(0x2ac)]())return;VisuMZ[_0x2e5888(0x20e)](_0x461282,_0x461282);const _0x3cd81e=$gameTemp[_0x2e5888(0x258)](),_0x1e8293=BattleManager['_action'],_0x3be947=BattleManager[_0x2e5888(0x128)],_0x250a5e=BattleManager[_0x2e5888(0x8ba)];if(!_0x3cd81e||!_0x1e8293||!_0x3be947)return;if(!_0x1e8293['item']())return;const _0x2b8056=VisuMZ[_0x2e5888(0x34c)](_0x461282['Targets']);for(const _0x2c7600 of _0x2b8056){if(_0x2e5888(0x5c7)!==_0x2e5888(0x5c7))this['_battlePortrait']=_0x593fd8(_0x218fdc['$1']);else{if(!_0x2c7600)continue;_0x250a5e[_0x2e5888(0x5e8)](_0x2e5888(0x12a),_0x3be947,_0x2c7600);}}_0x3cd81e[_0x2e5888(0x6a1)](_0x2e5888(0x91a));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Mechanics_AddBuffDebuff',_0x3c2135=>{const _0x3551a9=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3551a9(0x20e)](_0x3c2135,_0x3c2135);const _0x41194e=[_0x3551a9(0x24a),_0x3551a9(0x367),'ATK',_0x3551a9(0x873),'MAT',_0x3551a9(0x3c8),_0x3551a9(0x126),_0x3551a9(0x704)],_0x1d1f62=_0x3c2135[_0x3551a9(0x575)],_0x2ae0d9=_0x3c2135[_0x3551a9(0xb0c)],_0x2f2d41=_0x3c2135['Turns'],_0x1d9fbd=VisuMZ[_0x3551a9(0x34c)](_0x3c2135['Targets']);for(const _0x386da1 of _0x1d9fbd){if(!_0x386da1)continue;for(const _0x19e9a2 of _0x1d1f62){if(_0x3551a9(0x944)===_0x3551a9(0x944)){const _0x18918d=_0x41194e['indexOf'](_0x19e9a2['toUpperCase']()[_0x3551a9(0x224)]());if(_0x18918d>=0x0&&_0x18918d<=0x7){if('MseZq'!==_0x3551a9(0x100))return _0xdd6d45['BattleCore']['Game_Action_evalDamageFormula'][_0x3551a9(0x14e)](this,_0x51784a);else _0x386da1[_0x3551a9(0x3a1)](_0x18918d,_0x2f2d41);}}else return this['currentAction']()&&this[_0x3551a9(0x3d3)]()[_0x3551a9(0x32b)]()&&!this['currentAction']()[_0x3551a9(0x9f8)]();}for(const _0x21053a of _0x2ae0d9){const _0x5d7c94=_0x41194e[_0x3551a9(0x74c)](_0x21053a[_0x3551a9(0x9cb)]()[_0x3551a9(0x224)]());_0x5d7c94>=0x0&&_0x5d7c94<=0x7&&_0x386da1[_0x3551a9(0xaff)](_0x5d7c94,_0x2f2d41);}}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x973),_0x2056fc=>{const _0x33eeef=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x33eeef(0x20e)](_0x2056fc,_0x2056fc);const _0x2e622c=_0x2056fc[_0x33eeef(0x8c3)],_0x372195=VisuMZ[_0x33eeef(0x34c)](_0x2056fc['Targets']);for(const _0x5bf964 of _0x372195){if(!_0x5bf964)continue;for(const _0x2049c9 of _0x2e622c){_0x5bf964['addState'](_0x2049c9);}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x309),_0x764658=>{const _0x428e40=_0x17f940;if(!SceneManager[_0x428e40(0x2ac)]())return;VisuMZ['ConvertParams'](_0x764658,_0x764658);const _0x8774f7=BattleManager[_0x428e40(0x658)],_0x3c977c={'arPenRate':_0x764658['ArPenRate'],'arPenFlat':_0x764658['ArPenFlat'],'arRedRate':_0x764658['ArRedRate'],'arRedFlat':_0x764658[_0x428e40(0x232)]};_0x8774f7[_0x428e40(0x3dd)]=_0x3c977c;}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x91c),_0x4ae516=>{const _0x588ddd=_0x17f940;if(!SceneManager[_0x588ddd(0x2ac)]())return;if(!Imported[_0x588ddd(0x636)])return;VisuMZ[_0x588ddd(0x20e)](_0x4ae516,_0x4ae516);const _0x254162=VisuMZ[_0x588ddd(0x34c)](_0x4ae516[_0x588ddd(0x7f5)]),_0x23e5fd=_0x4ae516[_0x588ddd(0x5cd)]||0x1;for(const _0x706cf8 of _0x254162){if(_0x588ddd(0x538)===_0x588ddd(0x572)){const _0x1883f5=_0x48f0e6[_0x588ddd(0x7c1)](),_0x4b2ce9=this['actor'](this[_0x588ddd(0x98e)]());if(!_0x1883f5)return!![];if(!_0x1883f5[_0x588ddd(0x32b)]())return!![];const _0x27bbab=_0x1883f5[_0x588ddd(0x32b)]()[_0x588ddd(0x981)];if(_0x27bbab['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x4b2ce9===_0x3ea3ab[_0x588ddd(0x371)]())return![];}return!![];}else{if(!_0x706cf8)continue;if(!_0x706cf8[_0x588ddd(0xae4)]())continue;_0x706cf8[_0x588ddd(0x138)](_0x23e5fd);}}}),PluginManager['registerCommand'](pluginData['name'],_0x17f940(0x613),_0x8dc0cb=>{const _0xdd5861=_0x17f940;if(!SceneManager[_0xdd5861(0x2ac)]())return;if(!Imported[_0xdd5861(0x792)])return;if(!BattleManager[_0xdd5861(0x251)]())return;VisuMZ[_0xdd5861(0x20e)](_0x8dc0cb,_0x8dc0cb);const _0x491165=VisuMZ[_0xdd5861(0x34c)](_0x8dc0cb[_0xdd5861(0x7f5)]),_0xd24269=_0x8dc0cb[_0xdd5861(0x6fc)],_0x338a3c=_0x8dc0cb[_0xdd5861(0x6fc)],_0x367ffa=_0x8dc0cb[_0xdd5861(0x41d)];for(const _0x5174ad of _0x491165){if(!_0x5174ad)continue;if(_0x5174ad[_0xdd5861(0x94f)]()){if(_0xdd5861(0x8e1)!==_0xdd5861(0x834))_0x5174ad['changeAtbChargeTime'](_0xd24269);else{_0x3beb5c['prototype'][_0xdd5861(0x376)]['call'](this);if(!_0x5a94ed[_0xdd5861(0x4b8)]())this[_0xdd5861(0xaae)]();}}else{if(_0x5174ad[_0xdd5861(0x6e0)]()){_0x5174ad[_0xdd5861(0x661)](_0x338a3c);if(_0x367ffa)_0x5174ad['atbInterrupt']();}}}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0xac5),_0x185470=>{const _0x5e933a=_0x17f940;if(!SceneManager[_0x5e933a(0x2ac)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x5e933a(0x20e)](_0x185470,_0x185470);const _0x4ec98a=VisuMZ[_0x5e933a(0x34c)](_0x185470[_0x5e933a(0x7f5)]),_0xbee202=_0x185470[_0x5e933a(0x110)];for(const _0x1f09f7 of _0x4ec98a){if(_0x5e933a(0x836)===_0x5e933a(0x987))_0x420dc2+=(_0x59a1c4[_0x5e933a(0xae4)]()?0x1:-0x1)*_0x1ed134[_0x5e933a(0x682)]()/0x2;else{if(!_0x1f09f7)continue;_0x1f09f7['gainStoredBoostPoints'](_0xbee202);}}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x9d1),_0x282012=>{const _0x6edd2e=_0x17f940;if(!SceneManager[_0x6edd2e(0x2ac)]())return;if(!Imported[_0x6edd2e(0xad3)])return;if(!BattleManager[_0x6edd2e(0x128)])return;VisuMZ[_0x6edd2e(0x20e)](_0x282012,_0x282012);const _0x34241f=_0x282012[_0x6edd2e(0x141)];$gameVariables['setValue'](_0x34241f,BattleManager[_0x6edd2e(0x128)][_0x6edd2e(0x7e8)]());}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0xabe),_0x2bcb61=>{const _0xab2d7d=_0x17f940;if(!SceneManager[_0xab2d7d(0x2ac)]())return;if(!Imported[_0xab2d7d(0x5f8)])return;VisuMZ[_0xab2d7d(0x20e)](_0x2bcb61,_0x2bcb61);const _0x4ed541=VisuMZ[_0xab2d7d(0x34c)](_0x2bcb61[_0xab2d7d(0x7f5)]),_0x469502=_0x2bcb61[_0xab2d7d(0x7dc)];for(const _0x1c07a2 of _0x4ed541){if(_0xab2d7d(0x938)===_0xab2d7d(0x938)){if(!_0x1c07a2)continue;if(_0x1c07a2[_0xab2d7d(0x750)]())continue;if(!_0x1c07a2[_0xab2d7d(0x6ba)]())continue;_0x1c07a2['alterBreakShield'](_0x469502);}else return this['isBattleCoreTargetScope']()&&!this[_0xab2d7d(0x696)]()?this['needsSelectionBattleCore']():_0xc413a7[_0xab2d7d(0x960)][_0xab2d7d(0x4ce)][_0xab2d7d(0x14e)](this);}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x3d7),_0x55ce36=>{const _0x35efd1=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x35efd1(0x5f8)])return;VisuMZ[_0x35efd1(0x20e)](_0x55ce36,_0x55ce36);const _0x5cac89=VisuMZ[_0x35efd1(0x34c)](_0x55ce36[_0x35efd1(0x7f5)]);for(const _0x2deac7 of _0x5cac89){if(!_0x2deac7)continue;if(_0x2deac7[_0x35efd1(0x750)]())continue;if(!_0x2deac7['isAffectedByBreakShield']())continue;_0x2deac7[_0x35efd1(0x5ed)]();}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x431),_0x50cd4a=>{const _0x5b1c55=_0x17f940;if(!SceneManager[_0x5b1c55(0x2ac)]())return;if(!Imported[_0x5b1c55(0x443)])return;if(!BattleManager[_0x5b1c55(0x831)]())return;VisuMZ['ConvertParams'](_0x50cd4a,_0x50cd4a);const _0xf75622=VisuMZ[_0x5b1c55(0x34c)](_0x50cd4a[_0x5b1c55(0x7f5)]),_0x9f87c9=_0x50cd4a['BravePoints'];for(const _0x389c9b of _0xf75622){if(!_0x389c9b)continue;_0x389c9b[_0x5b1c55(0x8a2)](_0x9f87c9);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x5c3),_0x5323df=>{const _0x3081c0=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3081c0(0x20e)](_0x5323df,_0x5323df);const _0x576c94=$gameTemp[_0x3081c0(0x258)](),_0x55964d=BattleManager['_action'],_0x4909fb=BattleManager[_0x3081c0(0x128)];if(!_0x576c94||!_0x55964d||!_0x4909fb)return;if(!_0x55964d['item']())return;const _0x3219ca=VisuMZ['CreateActionSequenceTargets'](_0x5323df[_0x3081c0(0x7f5)]);for(const _0xa7151c of _0x3219ca){if(!_0xa7151c)continue;_0x5323df['ForceDeath']&&(_0xa7151c[_0x3081c0(0x9e3)](),_0xa7151c['addState'](_0xa7151c[_0x3081c0(0x57b)]()));if(_0xa7151c[_0x3081c0(0x556)]()){if(_0x3081c0(0x120)===_0x3081c0(0x120))_0xa7151c['performCollapse']();else return _0x4b3471[_0x3081c0(0xac3)];}}_0x576c94[_0x3081c0(0x6a1)]('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x7a2),_0x4303a3=>{const _0x2a6e97=_0x17f940;if(!SceneManager[_0x2a6e97(0x2ac)]())return;if(!Imported[_0x2a6e97(0x377)])return;if(!BattleManager[_0x2a6e97(0x963)]())return;VisuMZ[_0x2a6e97(0x20e)](_0x4303a3,_0x4303a3);const _0x2d2310=VisuMZ[_0x2a6e97(0x34c)](_0x4303a3['Targets']),_0x787d5c=_0x4303a3[_0x2a6e97(0x70b)];for(const _0x20cc52 of _0x2d2310){if(_0x2a6e97(0x420)!==_0x2a6e97(0x8a6)){if(!_0x20cc52)continue;_0x20cc52[_0x2a6e97(0x33a)](_0x787d5c);}else _0x3723a0+=_0x14939a(_0x15f899['$1']);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x6fb),_0x2d6479=>{const _0x88eb9a=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x88eb9a(0x377)])return;if(!BattleManager[_0x88eb9a(0x963)]())return;VisuMZ['ConvertParams'](_0x2d6479,_0x2d6479);const _0x144315=VisuMZ[_0x88eb9a(0x34c)](_0x2d6479[_0x88eb9a(0x7f5)]),_0x352d94=_0x2d6479['ChargeRate'],_0xa81350=_0x2d6479[_0x88eb9a(0x6fc)];for(const _0x108703 of _0x144315){if('TFxoh'===_0x88eb9a(0x724)){const _0x38fef8=this[_0x88eb9a(0x8d6)](_0x275a4d);if(_0x38fef8['match'](/\\I\[(\d+)\]/i)){const _0x2770fd=this[_0x88eb9a(0x7fe)](_0xe525a2),_0x290946=this[_0x88eb9a(0x799)](_0x38fef8)[_0x88eb9a(0x67f)];return _0x290946<=_0x2770fd['width']?'iconText':_0x88eb9a(0x7e5);}}else{if(!_0x108703)continue;if(_0x108703[_0x88eb9a(0x46b)]==='charging')_0x88eb9a(0x8cd)!==_0x88eb9a(0x8cd)?(_0x114b69[_0x88eb9a(0x25b)]['update']['call'](this),this[_0x88eb9a(0x493)](),this[_0x88eb9a(0x373)](),this[_0x88eb9a(0x27f)](),this[_0x88eb9a(0x86a)]()):_0x108703[_0x88eb9a(0x9b3)](_0x352d94);else _0x108703[_0x88eb9a(0x46b)]===_0x88eb9a(0x804)&&_0x108703[_0x88eb9a(0x42e)](_0xa81350);}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x870),_0x43ac77=>{const _0x102ea2=_0x17f940;if(!SceneManager[_0x102ea2(0x2ac)]())return;VisuMZ[_0x102ea2(0x20e)](_0x43ac77,_0x43ac77);const _0x6d12c1=BattleManager[_0x102ea2(0x658)];if(!_0x6d12c1)return;let _0xb2f9e8=_0x43ac77['Formula'];_0x6d12c1[_0x102ea2(0x9cc)](_0xb2f9e8);}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x88a),_0x6038f8=>{const _0x1602ec=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1602ec(0x20e)](_0x6038f8,_0x6038f8);const _0x1950b2=VisuMZ[_0x1602ec(0x34c)](_0x6038f8[_0x1602ec(0x7f5)]);for(const _0x1e3e88 of _0x1950b2){if(!_0x1e3e88)continue;if(_0x1e3e88['shouldPopupDamage']())_0x1e3e88[_0x1602ec(0x5fc)]();}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x185),_0x14ba46=>{const _0x345617=_0x17f940;if(!SceneManager[_0x345617(0x2ac)]())return;VisuMZ['ConvertParams'](_0x14ba46,_0x14ba46);const _0x56e227=$gameTemp[_0x345617(0x258)](),_0x4d2bdc=BattleManager[_0x345617(0x128)],_0x1273f8=_0x14ba46[_0x345617(0x894)];if(!_0x56e227)return;if(!_0x4d2bdc)return;_0x4d2bdc&&_0x4d2bdc[_0x345617(0x9bf)]()&&_0x1273f8['toUpperCase']()[_0x345617(0x224)]()!=='UNTITLED'&&_0x56e227[_0x345617(0x55a)]([_0x1273f8]);}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],'ActSeq_Mechanics_EnemyEscape',_0x2094ea=>{const _0x5c8e00=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c8e00(0x20e)](_0x2094ea,_0x2094ea);const _0x3767e4=VisuMZ['CreateActionSequenceTargets'](_0x2094ea[_0x5c8e00(0x7f5)]);for(const _0xed6dc5 of _0x3767e4){if(!_0xed6dc5)continue;if(!_0xed6dc5['isEnemy']())continue;_0xed6dc5[_0x5c8e00(0x952)]();}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x9d2),_0x14bbe0=>{const _0x3bac4b=_0x17f940;if(!SceneManager[_0x3bac4b(0x2ac)]())return;if(!Imported[_0x3bac4b(0xa88)])return;if(!BattleManager[_0x3bac4b(0x95b)]())return;VisuMZ['ConvertParams'](_0x14bbe0,_0x14bbe0);const _0x2eed43=_0x14bbe0[_0x3bac4b(0x272)];BattleManager['_subject']&&BattleManager[_0x3bac4b(0x128)]['friendsUnit']()['gainCurrentActionsETB'](_0x2eed43);}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_Mechanics_FtbAction',_0x18d8e0=>{const _0xd448f1=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xd448f1(0x324)])return;if(!BattleManager[_0xd448f1(0x5bd)]())return;VisuMZ['ConvertParams'](_0x18d8e0,_0x18d8e0);const _0x3626c6=_0x18d8e0['ActionCount'];BattleManager['_subject']&&BattleManager[_0xd448f1(0x128)][_0xd448f1(0x52d)]()[_0xd448f1(0x554)](_0x3626c6);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x10f),_0x489a8e=>{const _0x2ab30b=_0x17f940;if(!SceneManager[_0x2ab30b(0x2ac)]())return;VisuMZ[_0x2ab30b(0x20e)](_0x489a8e,_0x489a8e);const _0x118a3d=VisuMZ[_0x2ab30b(0x34c)](_0x489a8e[_0x2ab30b(0x7f5)]),_0x323a5a=_0x489a8e[_0x2ab30b(0x7ac)],_0x77d9c2=_0x489a8e[_0x2ab30b(0x3ca)],_0x8cb535=_0x489a8e['MP_Rate'],_0x24d5f4=_0x489a8e[_0x2ab30b(0x28a)],_0x50663b=_0x489a8e['TP_Rate'],_0x2d44cb=_0x489a8e[_0x2ab30b(0x5ac)],_0x103f8c=_0x489a8e[_0x2ab30b(0x30e)];for(const _0x524cb5 of _0x118a3d){if(!_0x524cb5)continue;const _0x42ad72=_0x524cb5[_0x2ab30b(0x3f0)](),_0x4faca8=Math[_0x2ab30b(0x189)](_0x323a5a*_0x524cb5[_0x2ab30b(0x277)]+_0x77d9c2),_0xe01dbc=Math['round'](_0x8cb535*_0x524cb5[_0x2ab30b(0x7c0)]+_0x24d5f4),_0x716d37=Math[_0x2ab30b(0x189)](_0x50663b*_0x524cb5[_0x2ab30b(0x6ac)]()+_0x2d44cb);if(_0x4faca8!==0x0)_0x524cb5[_0x2ab30b(0x144)](_0x4faca8);if(_0xe01dbc!==0x0)_0x524cb5[_0x2ab30b(0x366)](_0xe01dbc);if(_0x716d37!==0x0)_0x524cb5[_0x2ab30b(0x511)](_0x716d37);if(_0x103f8c)_0x524cb5[_0x2ab30b(0x5fc)]();_0x42ad72&&_0x524cb5[_0x2ab30b(0x9bf)]()&&_0x524cb5[_0x2ab30b(0x934)]();}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Mechanics_Immortal',_0x9075c2=>{const _0x52322e=_0x17f940;if(!SceneManager[_0x52322e(0x2ac)]())return;VisuMZ[_0x52322e(0x20e)](_0x9075c2,_0x9075c2);const _0x4334d1=VisuMZ[_0x52322e(0x34c)](_0x9075c2[_0x52322e(0x7f5)]);for(const _0x1b3a89 of _0x4334d1){if(!_0x1b3a89)continue;_0x1b3a89[_0x52322e(0x456)](_0x9075c2[_0x52322e(0x5b7)]);}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x772),_0x38ce17=>{const _0x597797=_0x17f940;if(!SceneManager[_0x597797(0x2ac)]())return;VisuMZ[_0x597797(0x20e)](_0x38ce17,_0x38ce17);const _0x4873d6=BattleManager['_action'],_0xdc0176={'criticalHitRate':_0x38ce17[_0x597797(0x9bb)],'criticalHitFlat':_0x38ce17[_0x597797(0x9ee)],'criticalDmgRate':_0x38ce17[_0x597797(0x20c)],'criticalDmgFlat':_0x38ce17[_0x597797(0x507)],'damageRate':_0x38ce17['DamageRate'],'damageFlat':_0x38ce17[_0x597797(0x83e)],'hitRate':_0x38ce17[_0x597797(0x320)],'hitFlat':_0x38ce17[_0x597797(0xa85)]};_0x4873d6[_0x597797(0x2be)]=_0xdc0176;}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_Mechanics_OtbOrder',_0x50e212=>{const _0x5df029=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x5df029(0x3a5)]())return;VisuMZ[_0x5df029(0x20e)](_0x50e212,_0x50e212);const _0x4ba056=VisuMZ[_0x5df029(0x34c)](_0x50e212['Targets']);for(const _0x223f32 of _0x4ba056){if('wjCQx'===_0x5df029(0x1b4)){if(!_0x223f32)continue;let _0x581a7e=_0x50e212[_0x5df029(0x386)],_0x2815bd=_0x50e212[_0x5df029(0x29b)],_0x148ec8=_0x50e212[_0x5df029(0x3cf)];if(BattleManager[_0x5df029(0xa53)]['includes'](_0x223f32)){if(_0x5df029(0x9a3)!==_0x5df029(0xa4e))_0x581a7e+=_0x148ec8;else return _0x55de31[_0x5df029(0x16e)]()[_0x5df029(0x702)]||0x1;}else _0x2815bd+=_0x148ec8;BattleManager[_0x5df029(0x1eb)](_0x223f32,-_0x581a7e,![]),BattleManager[_0x5df029(0x1eb)](_0x223f32,-_0x2815bd,!![]);}else{if(this['isTurnBased']())this['processBattleCoreJS'](_0x5df029(0x449));_0x23ea8f[_0x5df029(0x960)][_0x5df029(0x9ac)][_0x5df029(0x14e)](this);if(this[_0x5df029(0x259)]())this[_0x5df029(0x154)](_0x5df029(0x756));}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x6be),_0x4ec202=>{const _0x6181bb=_0x17f940;if(!SceneManager[_0x6181bb(0x2ac)]())return;if(!Imported[_0x6181bb(0x40a)])return;if(!BattleManager[_0x6181bb(0x4c2)]())return;VisuMZ[_0x6181bb(0x20e)](_0x4ec202,_0x4ec202);const _0x24bc02=BattleManager[_0x6181bb(0x128)][_0x6181bb(0x52d)](),_0x3babce=_0x4ec202[_0x6181bb(0x394)],_0x2e9f68=_0x4ec202[_0x6181bb(0x916)]||_0x6181bb(0x9a4),_0x3504a0=_0x4ec202[_0x6181bb(0x2ca)]||_0x6181bb(0x9a4),_0x538a8c=_0x4ec202[_0x6181bb(0x1a4)]||0x0,_0x1f0f86=_0x4ec202[_0x6181bb(0x26e)]||0x0;(_0x24bc02[_0x6181bb(0xa15)]()||_0x3babce)&&(_0x3babce&&(_0x24bc02[_0x6181bb(0x96d)]=_0x24bc02[_0x6181bb(0x96d)]||{},_0x24bc02['_ptbActionCost']['priority']=0x0),_0x24bc02[_0x6181bb(0x16d)](_0x2e9f68,_0x3504a0,_0x538a8c,_0x1f0f86));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x794),_0x8ad245=>{const _0x3d2b79=_0x17f940;if(!SceneManager[_0x3d2b79(0x2ac)]())return;if(!Imported[_0x3d2b79(0x40a)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x3d2b79(0x20e)](_0x8ad245,_0x8ad245);const _0xe3f723=BattleManager[_0x3d2b79(0x128)][_0x3d2b79(0x52d)]();let _0x1f4418=Math[_0x3d2b79(0xb2c)](_0x8ad245[_0x3d2b79(0x84c)],0x0),_0x1c7fee=_0xe3f723[_0x3d2b79(0x8e6)](),_0x30753e=_0xe3f723[_0x3d2b79(0x70d)]();while(_0x1f4418--){if(_0x1c7fee<=0x0&&_0x30753e<=0x0)break;else _0x1c7fee>0x0?(_0x1c7fee--,_0x30753e++):_0x30753e--;}_0xe3f723[_0x3d2b79(0xa7c)](_0x1c7fee),_0xe3f723[_0x3d2b79(0x518)](_0x30753e);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0xa7b),_0x384e11=>{const _0x54f244=_0x17f940;if(!SceneManager[_0x54f244(0x2ac)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x54f244(0x4c2)]())return;VisuMZ['ConvertParams'](_0x384e11,_0x384e11);const _0x5b5c50=BattleManager[_0x54f244(0x128)][_0x54f244(0x52d)]();let _0x1936f7=_0x384e11[_0x54f244(0x847)],_0x4ffc9a=_0x384e11[_0x54f244(0xa19)];_0x5b5c50[_0x54f244(0x9c3)](_0x1936f7),_0x5b5c50['gainHalfActionsPTB'](_0x4ffc9a);}),PluginManager['registerCommand'](pluginData['name'],_0x17f940(0x904),_0x405c59=>{const _0x3e793a=_0x17f940;if(!SceneManager[_0x3e793a(0x2ac)]())return;VisuMZ[_0x3e793a(0x20e)](_0x405c59,_0x405c59);const _0x288d4c=['MAXHP',_0x3e793a(0x367),_0x3e793a(0x7b9),_0x3e793a(0x873),_0x3e793a(0x326),_0x3e793a(0x3c8),'AGI',_0x3e793a(0x704)],_0x52d8d7=_0x405c59['Buffs'],_0x2b26ad=_0x405c59[_0x3e793a(0xb0c)],_0x47bc8f=VisuMZ['CreateActionSequenceTargets'](_0x405c59[_0x3e793a(0x7f5)]);for(const _0x21af7b of _0x47bc8f){if(_0x3e793a(0x1f0)==='ORsQv'){if(!_0x21af7b)continue;for(const _0x30ebb8 of _0x52d8d7){if(_0x3e793a(0x8f9)!==_0x3e793a(0x8f9)){const _0x4fb237=_0x58e0dc[_0x3e793a(0x23a)]();_0x4eff83[_0x3e793a(0x281)]===_0x25855f[_0x3e793a(0x57b)]()&&_0x525488[_0x3e793a(0x456)](![]),_0x1a2e56['BattleCore'][_0x3e793a(0x1d0)][_0x3e793a(0x14e)](this,_0x244651,_0x2f1e0a),_0x21175f[_0x3e793a(0x456)](_0x4fb237);}else{const _0x38a768=_0x288d4c[_0x3e793a(0x74c)](_0x30ebb8[_0x3e793a(0x9cb)]()[_0x3e793a(0x224)]());_0x38a768>=0x0&&_0x38a768<=0x7&&_0x21af7b[_0x3e793a(0x4eb)](_0x38a768)&&_0x21af7b[_0x3e793a(0x832)](_0x38a768);}}for(const _0x113275 of _0x2b26ad){if('JWwSS'!==_0x3e793a(0x821)){const _0x290f75=_0x288d4c['indexOf'](_0x113275[_0x3e793a(0x9cb)]()['trim']());_0x290f75>=0x0&&_0x290f75<=0x7&&_0x21af7b[_0x3e793a(0x448)](_0x290f75)&&_0x21af7b[_0x3e793a(0x832)](_0x290f75);}else{if(this[_0x3e793a(0x39b)][_0x3e793a(0xa13)](_0x418a3f=>_0x418a3f['item']()&&_0x418a3f[_0x3e793a(0x9f8)]()))return!![];}}}else{if(!this[_0x3e793a(0xb02)])this[_0x3e793a(0xfe)]();return this[_0x3e793a(0xb02)]['length']>0x0;}}}),PluginManager['registerCommand'](pluginData['name'],_0x17f940(0x401),_0x46e23a=>{const _0x109fa5=_0x17f940;if(!SceneManager[_0x109fa5(0x2ac)]())return;VisuMZ[_0x109fa5(0x20e)](_0x46e23a,_0x46e23a);const _0x147870=_0x46e23a[_0x109fa5(0x8c3)],_0x396819=VisuMZ[_0x109fa5(0x34c)](_0x46e23a[_0x109fa5(0x7f5)]);for(const _0xd7a0c4 of _0x396819){if(!_0xd7a0c4)continue;for(const _0x39841d of _0x147870){_0xd7a0c4[_0x109fa5(0x155)](_0x39841d);}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x5dd),_0x303673=>{const _0x16819e=_0x17f940;if(!SceneManager[_0x16819e(0x2ac)]())return;if(!Imported[_0x16819e(0xa4b)])return;if(!BattleManager[_0x16819e(0x825)]())return;VisuMZ[_0x16819e(0x20e)](_0x303673,_0x303673);const _0x5b7bea=_0x303673[_0x16819e(0x381)],_0x5543e3=VisuMZ[_0x16819e(0x34c)](_0x303673[_0x16819e(0x7f5)]),_0x509ca1=_0x303673[_0x16819e(0x4e4)],_0x4b7301=_0x303673[_0x16819e(0x30c)],_0x3ed39e=_0x303673[_0x16819e(0x450)],_0x2fc4fa=BattleManager['_action'];if(_0x5b7bea)for(const _0x20978a of _0x5543e3){if(!_0x20978a)continue;if(_0x20978a===user)continue;if(_0x509ca1)_0x20978a[_0x16819e(0x153)](![]);_0x20978a[_0x16819e(0x819)](BattleManager[_0x16819e(0x128)],_0x2fc4fa);}if(_0x4b7301&&BattleManager[_0x16819e(0x128)]){if(_0x16819e(0xaf5)!==_0x16819e(0xaf5))this[_0x16819e(0x96b)](...arguments);else{if(_0x3ed39e)BattleManager[_0x16819e(0x128)][_0x16819e(0x153)](![]);const _0xffd579=_0x5543e3[0x0];BattleManager['performSTBExploiter'](_0xffd579,_0x2fc4fa);}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x652),_0x10e438=>{const _0x334215=_0x17f940;if(!SceneManager[_0x334215(0x2ac)]())return;if(!Imported[_0x334215(0xa4b)])return;if(!BattleManager[_0x334215(0x825)]())return;VisuMZ[_0x334215(0x20e)](_0x10e438,_0x10e438);const _0x260b59=_0x10e438[_0x334215(0xaf3)];BattleManager[_0x334215(0x128)]&&(_0x334215(0xb15)===_0x334215(0x729)?_0x4b1f09['wtypeId']=_0x507ddc[_0x334215(0x12b)](_0x3d4e35['$1']):BattleManager[_0x334215(0x128)][_0x334215(0x989)](_0x260b59));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x6b8),_0x381806=>{const _0xb30604=_0x17f940;if(!SceneManager[_0xb30604(0x2ac)]())return;if(!Imported[_0xb30604(0xa4b)])return;if(!BattleManager[_0xb30604(0x825)]())return;VisuMZ[_0xb30604(0x20e)](_0x381806,_0x381806);let _0x4492b7=_0x381806[_0xb30604(0xaf3)];if(BattleManager[_0xb30604(0x128)]){if(_0xb30604(0xb1a)!==_0xb30604(0x52a)){BattleManager[_0xb30604(0x128)]['_actions']=BattleManager[_0xb30604(0x128)][_0xb30604(0x39b)]||[];while(_0x4492b7--){if(_0xb30604(0x862)!==_0xb30604(0x862))_0x24ae3c[_0xb30604(0x960)][_0xb30604(0xa2e)][_0xb30604(0x14e)](this),this['createWeather'](),this[_0xb30604(0x61f)](),this[_0xb30604(0x771)]();else{if(BattleManager[_0xb30604(0x128)][_0xb30604(0x39b)][_0xb30604(0x702)]<=0x0)break;BattleManager[_0xb30604(0x128)][_0xb30604(0x39b)][_0xb30604(0x4d1)]();}}}else{if(!(_0x5b29d0[_0xb30604(0x960)][_0xb30604(0x32c)][_0xb30604(0x7a1)][_0xb30604(0x9ad)]??!![]))return;const _0x114492=this[_0xb30604(0x63c)](_0x147380);if(![_0xb30604(0x764),_0xb30604(0x59c),_0xb30604(0x4fb)][_0xb30604(0x72d)](_0x114492))return;const _0x3b8951=this[_0xb30604(0x7fe)](_0x5e1883);let _0x1c166d=null;if(_0x114492===_0xb30604(0x764))_0x1c166d=_0x2c05e2[this[_0xb30604(0x6af)]['attackSkillId']()];else _0x114492==='guard'?_0x1c166d=_0x24d46e[this[_0xb30604(0x6af)][_0xb30604(0x4ed)]()]:_0x1c166d=_0x462773[this[_0xb30604(0x5de)][_0x396990][_0xb30604(0x773)]];this[_0xb30604(0x4e7)](this['_actor'],_0x1c166d,_0x3b8951['x'],_0x3b8951['y'],_0x3b8951[_0xb30604(0x67f)]);}}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x4cf),_0x445f96=>{const _0x570165=_0x17f940;if(!SceneManager[_0x570165(0x2ac)]())return;if(!Imported[_0x570165(0x23b)])return;VisuMZ[_0x570165(0x20e)](_0x445f96,_0x445f96);const _0x4efcac=VisuMZ[_0x570165(0x34c)](_0x445f96[_0x570165(0x7f5)]),_0x1f716c=_0x445f96[_0x570165(0x663)];for(const _0x5cf12f of _0x4efcac){if('HEcNe'!==_0x570165(0x5cf))_0x3ae5b7[_0x570165(0x4a6)]()[_0x570165(0xa6f)]();else{if(!_0x5cf12f)continue;if(!_0x5cf12f[_0x570165(0x2b6)]())continue;_0x5cf12f[_0x570165(0x984)](_0x1f716c);}}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x70a),_0x856620=>{const _0x3f13a7=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3f13a7(0x20e)](_0x856620,_0x856620);const _0xbaa27e=VisuMZ[_0x3f13a7(0x34c)](_0x856620['Targets']),_0x42a9ba=_0x856620[_0x3f13a7(0x8bb)],_0x5b7867={'textColor':ColorManager[_0x3f13a7(0xb08)](_0x856620[_0x3f13a7(0x9b9)]),'flashColor':_0x856620[_0x3f13a7(0x3ec)],'flashDuration':_0x856620[_0x3f13a7(0x7fc)]};for(const _0x2b1ac6 of _0xbaa27e){if(_0x3f13a7(0x49d)!==_0x3f13a7(0x1b5)){if(!_0x2b1ac6)continue;_0x2b1ac6[_0x3f13a7(0x9f3)](_0x42a9ba,_0x5b7867);}else _0x6fc96b=_0x1c28aa*this[_0x3f13a7(0x2be)]['damageRate'],_0x28ef56+=this[_0x3f13a7(0x2be)][_0x3f13a7(0x14a)]*(_0x6629e1>=0x0?0x1:-0x1),_0x252c14=this[_0x3f13a7(0x5b6)]('PreDamage%1JS',_0x7d5cc5,_0x2151ee,![]),_0x2d76ac=this[_0x3f13a7(0x1ec)](_0x2be0bf),_0x34b751=_0x1ce87d[_0x3f13a7(0x189)](_0x464c4c),this['_executedValue']=_0x360685,this[_0x3f13a7(0x340)]=this[_0x3f13a7(0x340)]||0x0,this['_totalValue']+=_0x2a1a42,_0x5f4fb[_0x3f13a7(0x960)][_0x3f13a7(0x9a8)][_0x3f13a7(0x14e)](this,_0x21c9c0,_0x46563f),this[_0x3f13a7(0x5b6)](_0x3f13a7(0x369),_0x51c143,_0x10c997,!![]);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x45e),_0x45ac28=>{const _0x57ebe9=_0x17f940;if(!SceneManager[_0x57ebe9(0x2ac)]())return;VisuMZ['ConvertParams'](_0x45ac28,_0x45ac28);const _0x19d09a=VisuMZ[_0x57ebe9(0x34c)](_0x45ac28[_0x57ebe9(0x7f5)]);let _0x364505=$gameVariables[_0x57ebe9(0x9fb)](_0x45ac28[_0x57ebe9(0x3a8)]);Imported[_0x57ebe9(0xa8c)]&&_0x45ac28[_0x57ebe9(0xa08)]&&(_0x57ebe9(0x132)!==_0x57ebe9(0x132)?(_0x1eb7b7-=this[_0x57ebe9(0x69b)],_0x351f98-=this[_0x57ebe9(0x911)]):_0x364505=VisuMZ['GroupDigits'](_0x364505));const _0x1fdbd2=String(_0x364505),_0x15a3d6={'textColor':ColorManager[_0x57ebe9(0xb08)](_0x45ac28[_0x57ebe9(0x9b9)]),'flashColor':_0x45ac28[_0x57ebe9(0x3ec)],'flashDuration':_0x45ac28[_0x57ebe9(0x7fc)]};for(const _0x44e6d8 of _0x19d09a){if(_0x57ebe9(0x94e)===_0x57ebe9(0x53b))this[_0x57ebe9(0x151)](!![]);else{if(!_0x44e6d8)continue;_0x44e6d8['setupTextPopup'](_0x1fdbd2,_0x15a3d6);}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x1d2),_0x2b1286=>{const _0xea7606=_0x17f940;if(!SceneManager[_0xea7606(0x2ac)]())return;const _0x53cf3b=$gameTemp[_0xea7606(0x258)]();if(!_0x53cf3b)return;_0x53cf3b[_0xea7606(0x6a1)](_0xea7606(0xa10));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x5a5),_0x5c07f7=>{const _0x168a36=_0x17f940;if(!SceneManager[_0x168a36(0x2ac)]())return;VisuMZ[_0x168a36(0x20e)](_0x5c07f7,_0x5c07f7);const _0x5910a2=VisuMZ['CreateActionSequenceTargets'](_0x5c07f7[_0x168a36(0x7f5)]);for(const _0x1de568 of _0x5910a2){if('Emzsi'===_0x168a36(0x68a))_0x53194f[_0x168a36(0x960)][_0x168a36(0xb1c)]&&_0x445cf8[_0x168a36(0x960)][_0x168a36(0xb1c)][_0x168a36(0x14e)](this,_0x45980c),_0x3bf106[_0x168a36(0x960)]['Parse_Notetags_Action'](_0x5ebfba),_0x31a37e[_0x168a36(0x960)][_0x168a36(0x6f3)](_0x5d7ed0);else{if(!_0x1de568)continue;_0x1de568['clearFreezeMotion']();}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x230),_0x113c3b=>{const _0x4318bc=_0x17f940;if(!SceneManager[_0x4318bc(0x2ac)]())return;VisuMZ[_0x4318bc(0x20e)](_0x113c3b,_0x113c3b);const _0x5ca215=VisuMZ[_0x4318bc(0x34c)](_0x113c3b[_0x4318bc(0x7f5)]),_0x437be3=_0x113c3b[_0x4318bc(0x59a)][_0x4318bc(0x8cf)]()[_0x4318bc(0x224)](),_0x3bd1d5=_0x113c3b[_0x4318bc(0x2e3)],_0x501fb5=_0x113c3b[_0x4318bc(0x27e)];for(const _0x29a697 of _0x5ca215){if(!_0x29a697)continue;_0x29a697['freezeMotion'](_0x437be3,_0x3bd1d5,_0x501fb5);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Motion_MotionType',_0x193fa8=>{const _0x3c07a2=_0x17f940;if(!SceneManager[_0x3c07a2(0x2ac)]())return;VisuMZ[_0x3c07a2(0x20e)](_0x193fa8,_0x193fa8);const _0xe56df8=VisuMZ[_0x3c07a2(0x34c)](_0x193fa8[_0x3c07a2(0x7f5)]),_0x2dde92=_0x193fa8['MotionType'][_0x3c07a2(0x8cf)]()[_0x3c07a2(0x224)](),_0x134d83=_0x193fa8[_0x3c07a2(0x2e3)];for(const _0x554b4e of _0xe56df8){if(!_0x554b4e)continue;if(_0x2dde92[_0x3c07a2(0x413)](/ATTACK[ ](\d+)/i))_0x3c07a2(0x125)!=='KpJXm'?this[_0x3c07a2(0x784)]()?this[_0x3c07a2(0x4f6)]():_0x42802e[_0x3c07a2(0x960)][_0x3c07a2(0x7ed)][_0x3c07a2(0x14e)](this):_0x554b4e[_0x3c07a2(0x753)](Number(RegExp['$1']));else _0x2dde92===_0x3c07a2(0x764)?_0x554b4e['performAttack']():_0x554b4e[_0x3c07a2(0x3cd)](_0x2dde92);if(!_0x134d83)_0x554b4e['startWeaponAnimation'](0x0);else{if(_0x134d83&&['thrust',_0x3c07a2(0x85a),_0x3c07a2(0x923)][_0x3c07a2(0x72d)](_0x2dde92)){}}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x293),_0x29608d=>{const _0x5b31cd=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b31cd(0x20e)](_0x29608d,_0x29608d);const _0x1fe8cb=BattleManager[_0x5b31cd(0x658)];if(!_0x1fe8cb)return;if(!_0x1fe8cb[_0x5b31cd(0x32b)]())return;const _0xd3e59e=VisuMZ[_0x5b31cd(0x34c)](_0x29608d['Targets']);for(const _0x3b328e of _0xd3e59e){if(!_0x3b328e)continue;_0x3b328e[_0x5b31cd(0x3e3)](_0x1fe8cb);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x8e3),_0x5f16f9=>{const _0x2d3319=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2d3319(0x20e)](_0x5f16f9,_0x5f16f9);const _0x2f09d4=VisuMZ[_0x2d3319(0x34c)](_0x5f16f9[_0x2d3319(0x7f5)]);for(const _0x3a7a2e of _0x2f09d4){if(!_0x3a7a2e)continue;if(!_0x3a7a2e[_0x2d3319(0x4a6)]())continue;_0x3a7a2e[_0x2d3319(0x4a6)]()['refreshMotion']();}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x6f0),_0x210595=>{const _0xb6c1db=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb6c1db(0x20e)](_0x210595,_0x210595);const _0x2e904a=$gameTemp[_0xb6c1db(0x258)](),_0x136abd=_0x210595[_0xb6c1db(0x823)]*Sprite_Battler[_0xb6c1db(0x708)];_0x2e904a['wait'](_0x136abd);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x9eb),_0x3abe2e=>{const _0x43e048=_0x17f940;if(!SceneManager[_0x43e048(0x2ac)]())return;VisuMZ[_0x43e048(0x20e)](_0x3abe2e,_0x3abe2e);const _0x32c105=$gameTemp[_0x43e048(0x258)](),_0x1b4c08=BattleManager[_0x43e048(0x658)];if(!_0x32c105||!_0x1b4c08)return;if(!_0x1b4c08[_0x43e048(0x32b)]())return;const _0x4890be=VisuMZ[_0x43e048(0x34c)](_0x3abe2e[_0x43e048(0x7f5)]);for(const _0x4c2f77 of _0x4890be){if(!_0x4c2f77)continue;_0x4c2f77[_0x43e048(0x73f)](_0x1b4c08);}if(_0x3abe2e[_0x43e048(0x980)])_0x32c105[_0x43e048(0x6a1)](_0x43e048(0x3d4));}),PluginManager['registerCommand'](pluginData['name'],_0x17f940(0x87b),_0x22ca8d=>{const _0x223e02=_0x17f940;if(!SceneManager[_0x223e02(0x2ac)]())return;if(!$gameSystem[_0x223e02(0x4b8)]())return;VisuMZ[_0x223e02(0x20e)](_0x22ca8d,_0x22ca8d);const _0x41f7b1=VisuMZ[_0x223e02(0x34c)](_0x22ca8d['Targets']);let _0x42a41b=_0x22ca8d[_0x223e02(0x270)][_0x223e02(0x413)](/back/i);for(const _0x5d3d1b of _0x41f7b1){if(!_0x5d3d1b)continue;if(_0x22ca8d[_0x223e02(0x270)][_0x223e02(0x413)](/rand/i))_0x42a41b=Math['randomInt'](0x2);_0x5d3d1b[_0x223e02(0xa5d)](!!_0x42a41b);}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],'ActSeq_Movement_FacePoint',_0x3b4305=>{const _0x1aed3c=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x3b4305,_0x3b4305);const _0xfb5bed=VisuMZ['CreateActionSequenceTargets'](_0x3b4305[_0x1aed3c(0x7f5)]);let _0x4affaa=_0x3b4305[_0x1aed3c(0x216)];const _0x1d93a6=_0x3b4305[_0x1aed3c(0x36a)];for(const _0x1d5d47 of _0xfb5bed){if(_0x1aed3c(0x558)!=='tObXx')return _0x1b6d3a['BattleCore'][_0x1aed3c(0x32c)][_0x1aed3c(0x99a)][_0x1aed3c(0x29c)];else{if(!_0x1d5d47)continue;let _0x3db33a=_0x1d5d47[_0x1aed3c(0x4a6)]()[_0x1aed3c(0x521)],_0x8eea1c=_0x1d5d47[_0x1aed3c(0x4a6)]()[_0x1aed3c(0x626)];if(_0x4affaa['match'](/home/i)){if(_0x1aed3c(0x86f)===_0x1aed3c(0x86f))_0x3db33a=_0x1d5d47[_0x1aed3c(0x4a6)]()['_homeX'],_0x8eea1c=_0x1d5d47[_0x1aed3c(0x4a6)]()[_0x1aed3c(0x1ac)];else return this[_0x1aed3c(0xa20)]()?this[_0x1aed3c(0x7a3)][_0x1aed3c(0x5f9)]():!![];}else{if(_0x4affaa[_0x1aed3c(0x413)](/center/i))_0x3db33a=Graphics[_0x1aed3c(0xac3)]/0x2,_0x8eea1c=Graphics[_0x1aed3c(0x45d)]/0x2;else{if(_0x4affaa['match'](/point (\d+), (\d+)/i)){if(_0x1aed3c(0x36c)==='JCzcf'){if(this[_0x1aed3c(0x39b)][_0x1aed3c(0xa13)](_0x4dde30=>_0x4dde30[_0x1aed3c(0x32b)]()&&_0x4dde30[_0x1aed3c(0x639)]()))return!![];}else _0x3db33a=Number(RegExp['$1']),_0x8eea1c=Number(RegExp['$2']);}}}_0x1d5d47[_0x1aed3c(0x760)](Math['round'](_0x3db33a),Math['round'](_0x8eea1c),!!_0x1d93a6);}}}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0x536),_0x153f09=>{const _0x1f1d97=_0x17f940;if(!SceneManager[_0x1f1d97(0x2ac)]())return;if(!$gameSystem[_0x1f1d97(0x4b8)]())return;VisuMZ[_0x1f1d97(0x20e)](_0x153f09,_0x153f09);const _0x294466=VisuMZ['CreateActionSequenceTargets'](_0x153f09[_0x1f1d97(0x7d5)]),_0x50d79a=VisuMZ[_0x1f1d97(0x34c)](_0x153f09[_0x1f1d97(0x5c2)]),_0x4bae32=_0x50d79a[_0x1f1d97(0x296)](_0x4ab8c6=>_0x4ab8c6&&_0x4ab8c6['battler']()?_0x4ab8c6['battler']()[_0x1f1d97(0x521)]:0x0)/(_0x50d79a[_0x1f1d97(0x702)]||0x1),_0x474990=_0x50d79a[_0x1f1d97(0x296)](_0x16a5e4=>_0x16a5e4&&_0x16a5e4['battler']()?_0x16a5e4[_0x1f1d97(0x4a6)]()['_baseY']:0x0)/(_0x50d79a[_0x1f1d97(0x702)]||0x1),_0x2418b1=_0x153f09['FaceAway'];for(const _0x37a39c of _0x294466){if(!_0x37a39c)continue;_0x37a39c[_0x1f1d97(0x760)](Math['round'](_0x4bae32),Math['round'](_0x474990),!!_0x2418b1);}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x685),_0x366ecc=>{const _0x47e2b0=_0x17f940;if(!SceneManager[_0x47e2b0(0x2ac)]())return;VisuMZ['ConvertParams'](_0x366ecc,_0x366ecc);const _0x238fa8=$gameTemp[_0x47e2b0(0x258)](),_0x3f93d2=VisuMZ[_0x47e2b0(0x34c)](_0x366ecc[_0x47e2b0(0x7f5)]),_0x2e08a3=_0x366ecc[_0x47e2b0(0xac2)],_0x26375b=_0x366ecc[_0x47e2b0(0x5ad)],_0x39ced3=_0x366ecc[_0x47e2b0(0x6e2)],_0x23335e=_0x366ecc[_0x47e2b0(0x31a)];if(!_0x238fa8)return;for(const _0xa0677f of _0x3f93d2){if(_0x47e2b0(0x48d)!==_0x47e2b0(0x747)){if(!_0xa0677f)continue;_0xa0677f[_0x47e2b0(0x9d7)](_0x2e08a3,_0x26375b,_0x39ced3);}else this[_0x47e2b0(0x599)]=_0x57dbf7;}if(_0x23335e)_0x238fa8[_0x47e2b0(0x6a1)](_0x47e2b0(0x84e));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x948),_0x57c352=>{const _0x485177=_0x17f940;if(!SceneManager[_0x485177(0x2ac)]())return;VisuMZ['ConvertParams'](_0x57c352,_0x57c352);const _0x45a959=$gameTemp[_0x485177(0x258)]();if(!_0x45a959)return;const _0xd4836=VisuMZ[_0x485177(0x34c)](_0x57c352[_0x485177(0x7f5)]);for(const _0x4580a4 of _0xd4836){if(!_0x4580a4)continue;_0x4580a4['performActionEndMembers']();}BattleManager[_0x485177(0x128)]&&BattleManager[_0x485177(0x128)][_0x485177(0x4f1)]();if(_0x57c352[_0x485177(0x980)])_0x45a959['setWaitMode'](_0x485177(0x3d4));}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],'ActSeq_Movement_Jump',_0x1ad04d=>{const _0x17e2e6=_0x17f940;if(!SceneManager[_0x17e2e6(0x2ac)]())return;VisuMZ[_0x17e2e6(0x20e)](_0x1ad04d,_0x1ad04d);const _0x397f29=$gameTemp[_0x17e2e6(0x258)](),_0x38be2a=VisuMZ[_0x17e2e6(0x34c)](_0x1ad04d[_0x17e2e6(0x7f5)]),_0x1eac7e=_0x1ad04d['Height'],_0x40eabc=_0x1ad04d[_0x17e2e6(0x5ad)],_0x54847f=_0x1ad04d[_0x17e2e6(0x644)];if(!_0x397f29)return;for(const _0x3e67e8 of _0x38be2a){if(_0x17e2e6(0x56e)===_0x17e2e6(0x56e)){if(!_0x3e67e8)continue;_0x3e67e8['jumpBattler'](_0x1eac7e,_0x40eabc);}else{const _0x1a6c05=_0x350b39[_0x17e2e6(0x457)](_0x4a17ac['x'],_0x30c819['y']);if(this['_regionBattleback1']&&this['_regionBattleback1'][_0x1a6c05])return this['_regionBattleback1'][_0x1a6c05];}}if(_0x54847f)_0x397f29[_0x17e2e6(0x6a1)](_0x17e2e6(0x866));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0xaf2),_0x37e045=>{const _0xa374f=_0x17f940;if(!SceneManager[_0xa374f(0x2ac)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x37e045,_0x37e045);const _0x1d2f77=$gameTemp['getLastPluginCommandInterpreter'](),_0x1307df=VisuMZ['CreateActionSequenceTargets'](_0x37e045[_0xa374f(0x7f5)]),_0x175d68=_0x37e045['DistanceAdjust'],_0x1697dc=_0x37e045[_0xa374f(0x7af)],_0x2211b2=_0x37e045[_0xa374f(0x15b)],_0x41dd0c=_0x37e045[_0xa374f(0x5ad)],_0x41d4f2=_0x37e045['FaceDirection'],_0x3274ce=_0x37e045[_0xa374f(0x6e2)],_0x446092=_0x37e045['MotionType'],_0x122039=_0x37e045['WaitForMovement'];if(!_0x1d2f77)return;for(const _0x1066c8 of _0x1307df){if(_0xa374f(0x64d)===_0xa374f(0x1ef)){if(!_0x13ae1e[_0xa374f(0x2ac)]())return;if(!_0x31ced8[_0xa374f(0x660)])return;const _0x3e7aa6=_0x1d7d64[_0xa374f(0x258)]();if(!_0x3e7aa6)return;_0x3e7aa6[_0xa374f(0x6a1)]('battleSkew');}else{if(!_0x1066c8)continue;let _0x40d32f=_0x1697dc,_0x11f9de=_0x2211b2;if(_0x175d68[_0xa374f(0x413)](/horz/i))_0x40d32f*=_0x1066c8[_0xa374f(0x2b6)]()?-0x1:0x1;if(_0x175d68[_0xa374f(0x413)](/vert/i))_0x11f9de*=_0x1066c8[_0xa374f(0x2b6)]()?-0x1:0x1;_0x1066c8[_0xa374f(0xa40)](_0x40d32f,_0x11f9de,_0x41dd0c,_0x41d4f2,_0x3274ce),_0x1066c8[_0xa374f(0x3cd)](_0x446092);}}if(_0x122039)_0x1d2f77[_0xa374f(0x6a1)](_0xa374f(0x3d4));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0xa06),_0x542180=>{const _0x2978be=_0x17f940;if(!SceneManager[_0x2978be(0x2ac)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x542180,_0x542180);const _0x58db9c=$gameTemp[_0x2978be(0x258)](),_0x5bfc2f=VisuMZ[_0x2978be(0x34c)](_0x542180[_0x2978be(0x7f5)]),_0x1c50a2=_0x542180[_0x2978be(0x34f)],_0xbed767=_0x542180[_0x2978be(0x5c4)],_0x14b52b=_0x542180[_0x2978be(0x4e9)],_0x1406a7=_0x542180[_0x2978be(0x99b)],_0x435f07=_0x542180[_0x2978be(0x5ad)],_0x4a421d=_0x542180['FaceDirection'],_0x331084=_0x542180[_0x2978be(0x6e2)],_0x385b40=_0x542180['MotionType'],_0x152ac5=_0x542180[_0x2978be(0x980)];if(!_0x58db9c)return;for(const _0x4170e6 of _0x5bfc2f){if(!_0x4170e6)continue;let _0x134bef=_0x4170e6[_0x2978be(0x4a6)]()[_0x2978be(0x521)],_0x36368b=_0x4170e6[_0x2978be(0x4a6)]()['_baseY'];if(_0x1c50a2[_0x2978be(0x413)](/home/i))_0x134bef=_0x4170e6[_0x2978be(0x4a6)]()[_0x2978be(0x716)],_0x36368b=_0x4170e6[_0x2978be(0x4a6)]()['_homeY'];else{if(_0x1c50a2[_0x2978be(0x413)](/center/i))_0x134bef=Graphics['boxWidth']/0x2,_0x36368b=Graphics[_0x2978be(0x45d)]/0x2;else _0x1c50a2[_0x2978be(0x413)](/point (\d+), (\d+)/i)&&(_0x134bef=Number(RegExp['$1']),_0x36368b=Number(RegExp['$2']));}if(_0xbed767[_0x2978be(0x413)](/none/i))_0x2978be(0xac6)===_0x2978be(0xac6)?(_0x134bef+=_0x14b52b,_0x36368b+=_0x1406a7):!_0x45cc2e['isDeathStateAffected']()&&(_0x4ed44a[_0x2978be(0x6ec)](_0x301107[0x2],_0x542dac[0x3]),_0x5684f1[_0x2978be(0x6ec)](_0x58fa92));else{if(_0xbed767['match'](/horz/i)&&_0xbed767[_0x2978be(0x413)](/vert/i))_0x134bef+=_0x4170e6[_0x2978be(0x2b6)]()?-_0x14b52b:_0x14b52b,_0x36368b+=_0x4170e6[_0x2978be(0x2b6)]()?-_0x1406a7:_0x1406a7;else{if(_0xbed767[_0x2978be(0x413)](/horz/i))_0x134bef+=_0x4170e6['isActor']()?-_0x14b52b:_0x14b52b,_0x36368b+=_0x1406a7;else _0xbed767['match'](/vert/i)&&(_0x134bef+=_0x14b52b,_0x36368b+=_0x4170e6[_0x2978be(0x2b6)]()?-_0x1406a7:_0x1406a7);}}_0x4170e6['moveBattlerToPoint'](_0x134bef,_0x36368b,_0x435f07,_0x4a421d,_0x331084,-0x1),_0x4170e6[_0x2978be(0x3cd)](_0x385b40);}if(_0x152ac5)_0x58db9c[_0x2978be(0x6a1)]('battleMove');}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x275),_0x443227=>{const _0x63aaa5=_0x17f940;if(!SceneManager[_0x63aaa5(0x2ac)]())return;if(!$gameSystem[_0x63aaa5(0x4b8)]())return;VisuMZ['ConvertParams'](_0x443227,_0x443227);const _0x2e14a6=$gameTemp[_0x63aaa5(0x258)](),_0x4c0a04=VisuMZ['CreateActionSequenceTargets'](_0x443227[_0x63aaa5(0x7d5)]),_0x2f1445=VisuMZ[_0x63aaa5(0x34c)](_0x443227[_0x63aaa5(0x5c2)]),_0x43322b=_0x443227[_0x63aaa5(0x63d)];let _0x1ac9bc=_0x443227['MeleeDistance'];const _0x587efe=_0x443227[_0x63aaa5(0x5c4)],_0xed21cd=_0x443227['OffsetX'],_0x37091d=_0x443227['OffsetY'],_0x24165e=_0x443227[_0x63aaa5(0x5ad)],_0x58ebf2=_0x443227['FaceDirection'],_0x18a99a=_0x443227['EasingType'],_0x6fd969=_0x443227[_0x63aaa5(0x59a)],_0x46c82c=_0x443227[_0x63aaa5(0x980)],_0xa24d4e=Math[_0x63aaa5(0x1c9)](..._0x2f1445[_0x63aaa5(0x296)](_0x197b7d=>_0x197b7d[_0x63aaa5(0x4a6)]()[_0x63aaa5(0x521)]-_0x197b7d['battler']()[_0x63aaa5(0x682)]()/0x2)),_0x26960d=Math[_0x63aaa5(0xb2c)](..._0x2f1445['map'](_0x1a0747=>_0x1a0747[_0x63aaa5(0x4a6)]()[_0x63aaa5(0x521)]+_0x1a0747[_0x63aaa5(0x4a6)]()[_0x63aaa5(0x682)]()/0x2)),_0x481e3f=Math['min'](..._0x2f1445[_0x63aaa5(0x296)](_0x591b91=>_0x591b91['battler']()[_0x63aaa5(0x626)]-_0x591b91[_0x63aaa5(0x4a6)]()[_0x63aaa5(0xae2)]())),_0x5709d2=Math[_0x63aaa5(0xb2c)](..._0x2f1445[_0x63aaa5(0x296)](_0x46dcad=>_0x46dcad[_0x63aaa5(0x4a6)]()[_0x63aaa5(0x626)])),_0x565c72=_0x2f1445['filter'](_0x27276e=>_0x27276e[_0x63aaa5(0x2b6)]())['length'],_0x5890b=_0x2f1445[_0x63aaa5(0x427)](_0x5ee3a0=>_0x5ee3a0['isEnemy']())[_0x63aaa5(0x702)];let _0x12d5b1=0x0,_0x194403=0x0;if(_0x43322b[_0x63aaa5(0x413)](/front/i))_0x12d5b1=_0x565c72>=_0x5890b?_0xa24d4e:_0x26960d;else{if(_0x43322b[_0x63aaa5(0x413)](/middle/i))_0x12d5b1=(_0xa24d4e+_0x26960d)/0x2,_0x1ac9bc=-0x1;else _0x43322b[_0x63aaa5(0x413)](/back/i)&&(_0x12d5b1=_0x565c72>=_0x5890b?_0x26960d:_0xa24d4e);}if(_0x43322b[_0x63aaa5(0x413)](/head/i)){if(_0x63aaa5(0x878)!==_0x63aaa5(0x878)){if(this[_0x63aaa5(0x2fc)]()!=='')return this[_0x63aaa5(0x2fc)]();else{if(_0x2391e6['VisuMZ_1_MainMenuCore']&&this[_0x63aaa5(0x85f)]()!=='')return this[_0x63aaa5(0x85f)]();}return'';}else _0x194403=_0x481e3f;}else{if(_0x43322b[_0x63aaa5(0x413)](/center/i))'MccIT'!==_0x63aaa5(0x5d3)?_0x194403=(_0x481e3f+_0x5709d2)/0x2:(this[_0x63aaa5(0x404)][_0x63aaa5(0x1f3)]['x']=this['_targetSkewX'],this[_0x63aaa5(0x404)][_0x63aaa5(0x1f3)]['y']=this[_0x63aaa5(0x9e7)]);else _0x43322b[_0x63aaa5(0x413)](/base/i)&&(_0x194403=_0x5709d2);}if(!_0x2e14a6)return;for(const _0xd654f4 of _0x4c0a04){if(!_0xd654f4)continue;let _0x2e45c9=_0x12d5b1,_0x2f16db=_0x194403;if(_0x587efe[_0x63aaa5(0x413)](/none/i))_0x2e45c9+=_0xed21cd,_0x2f16db+=_0x37091d;else{if(_0x587efe[_0x63aaa5(0x413)](/horz/i)&&_0x587efe['match'](/vert/i))_0x2e45c9+=_0xd654f4[_0x63aaa5(0x2b6)]()?-_0xed21cd:_0xed21cd,_0x2f16db+=_0xd654f4['isActor']()?-_0x37091d:_0x37091d;else{if(_0x587efe[_0x63aaa5(0x413)](/horz/i))_0x2e45c9+=_0xd654f4[_0x63aaa5(0x2b6)]()?-_0xed21cd:_0xed21cd,_0x2f16db+=_0x37091d;else{if(_0x587efe[_0x63aaa5(0x413)](/vert/i)){if(_0x63aaa5(0x844)===_0x63aaa5(0x844))_0x2e45c9+=_0xed21cd,_0x2f16db+=_0xd654f4[_0x63aaa5(0x2b6)]()?-_0x37091d:_0x37091d;else{if(!_0x4259fd[_0x63aaa5(0x960)][_0x63aaa5(0x32c)]['BattleLog'][_0x63aaa5(0x8ce)])return;_0xe931a5['BattleCore'][_0x63aaa5(0x905)][_0x63aaa5(0x14e)](this,_0x53b5c7);}}}}}_0xd654f4['moveBattlerToPoint'](_0x2e45c9,_0x2f16db,_0x24165e,_0x58ebf2,_0x18a99a,_0x1ac9bc),_0xd654f4[_0x63aaa5(0x3cd)](_0x6fd969);}if(_0x46c82c)_0x2e14a6[_0x63aaa5(0x6a1)]('battleMove');}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x496),_0x5e9b1e=>{const _0xc46ce6=_0x17f940;if(!SceneManager[_0xc46ce6(0x2ac)]())return;VisuMZ[_0xc46ce6(0x20e)](_0x5e9b1e,_0x5e9b1e);const _0x35dcfa=$gameTemp['getLastPluginCommandInterpreter'](),_0x37ed4b=VisuMZ[_0xc46ce6(0x34c)](_0x5e9b1e[_0xc46ce6(0x7f5)]),_0x4bd853=_0x5e9b1e['Opacity'],_0x3b0a27=_0x5e9b1e[_0xc46ce6(0x5ad)],_0x133987=_0x5e9b1e[_0xc46ce6(0x6e2)],_0x17b763=_0x5e9b1e[_0xc46ce6(0x2f2)];if(!_0x35dcfa)return;for(const _0x4f9a72 of _0x37ed4b){if(_0xc46ce6(0x192)!==_0xc46ce6(0xa7e)){if(!_0x4f9a72)continue;_0x4f9a72[_0xc46ce6(0xb22)](_0x4bd853,_0x3b0a27,_0x133987);}else _0x4bc6e9[_0xc46ce6(0xb00)](0x0,0x0,_0x4403c4[_0xc46ce6(0x242)]['width'],this[_0xc46ce6(0x242)]['height']);}if(_0x17b763)_0x35dcfa['setWaitMode'](_0xc46ce6(0x67a));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_Scale',_0x98c7da=>{const _0x3da644=_0x17f940;if(!SceneManager[_0x3da644(0x2ac)]())return;VisuMZ['ConvertParams'](_0x98c7da,_0x98c7da);const _0x32e27d=$gameTemp[_0x3da644(0x258)](),_0x50f386=VisuMZ[_0x3da644(0x34c)](_0x98c7da[_0x3da644(0x7f5)]),_0x5e6bec=_0x98c7da[_0x3da644(0x302)],_0x27bf8d=_0x98c7da[_0x3da644(0x562)],_0x314c8c=_0x98c7da['Duration'],_0x42f72e=_0x98c7da[_0x3da644(0x6e2)],_0x40f357=_0x98c7da['WaitForScale'];if(!_0x32e27d)return;for(const _0x290e21 of _0x50f386){if('WrUrc'!=='WrUrc')this[_0x3da644(0x73b)](_0x3da644(0x3c2));else{if(!_0x290e21)continue;_0x290e21[_0x3da644(0x7b1)](_0x5e6bec,_0x27bf8d,_0x314c8c,_0x42f72e);}}if(_0x40f357)_0x32e27d[_0x3da644(0x6a1)]('battleGrow');}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x58a),_0x40bb28=>{const _0x432581=_0x17f940;if(!SceneManager[_0x432581(0x2ac)]())return;VisuMZ['ConvertParams'](_0x40bb28,_0x40bb28);const _0x45d0b7=$gameTemp[_0x432581(0x258)](),_0x1442ac=VisuMZ[_0x432581(0x34c)](_0x40bb28[_0x432581(0x7f5)]),_0x29f4aa=_0x40bb28['SkewX'],_0x32e0b7=_0x40bb28[_0x432581(0x7d9)],_0x48395a=_0x40bb28[_0x432581(0x5ad)],_0x58c8ac=_0x40bb28['EasingType'],_0x1daab7=_0x40bb28[_0x432581(0x89e)];if(!_0x45d0b7)return;for(const _0x29a4e5 of _0x1442ac){if(!_0x29a4e5)continue;_0x29a4e5[_0x432581(0x6fd)](_0x29f4aa,_0x32e0b7,_0x48395a,_0x58c8ac);}if(_0x1daab7)_0x45d0b7[_0x432581(0x6a1)]('battleSpriteSkew');}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Movement_Spin',_0x446d2b=>{const _0x5b667f=_0x17f940;if(!SceneManager[_0x5b667f(0x2ac)]())return;VisuMZ[_0x5b667f(0x20e)](_0x446d2b,_0x446d2b);const _0x565005=$gameTemp[_0x5b667f(0x258)](),_0x5c34e0=VisuMZ['CreateActionSequenceTargets'](_0x446d2b['Targets']),_0x4a1540=_0x446d2b[_0x5b667f(0x5a0)],_0x4ff651=_0x446d2b['Duration'],_0x5b1e17=_0x446d2b[_0x5b667f(0x6e2)],_0x4dc0bd=_0x446d2b['RevertAngle'],_0x2bffc4=_0x446d2b[_0x5b667f(0x7f1)];if(!_0x565005)return;for(const _0x441c20 of _0x5c34e0){if(_0x5b667f(0x1be)===_0x5b667f(0x1be)){if(!_0x441c20)continue;_0x441c20[_0x5b667f(0x4c4)](_0x4a1540,_0x4ff651,_0x5b1e17,_0x4dc0bd);}else{if(this[_0x5b667f(0x371)]()[_0x5b667f(0x981)][_0x5b667f(0x413)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x445957(_0x503fcb['$1']);else{if(this[_0x5b667f(0x371)]()[_0x5b667f(0x981)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x58aab6(_0x5e94cc['$1']);}return 0x0;}}if(_0x2bffc4)_0x565005[_0x5b667f(0x6a1)](_0x5b667f(0x101));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x6d5),_0x19b499=>{const _0x456af7=_0x17f940;if(!SceneManager[_0x456af7(0x2ac)]())return;const _0x2171f9=$gameTemp[_0x456af7(0x258)]();if(!_0x2171f9)return;_0x2171f9[_0x456af7(0x6a1)](_0x456af7(0x84e));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x8e4),_0xe53331=>{const _0x159cce=_0x17f940;if(!SceneManager[_0x159cce(0x2ac)]())return;const _0x5798cf=$gameTemp[_0x159cce(0x258)]();if(!_0x5798cf)return;_0x5798cf[_0x159cce(0x6a1)](_0x159cce(0x866));}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0xa17),_0x226b16=>{const _0x166862=_0x17f940;if(!SceneManager['isSceneBattle']())return;const _0x2d1b08=$gameTemp[_0x166862(0x258)]();if(!_0x2d1b08)return;_0x2d1b08[_0x166862(0x6a1)](_0x166862(0x3d4));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Movement_WaitForOpacity',_0x2a5f63=>{const _0x255ca5=_0x17f940;if(!SceneManager['isSceneBattle']())return;const _0x3f6207=$gameTemp[_0x255ca5(0x258)]();if(!_0x3f6207)return;_0x3f6207['setWaitMode'](_0x255ca5(0x67a));}),PluginManager['registerCommand'](pluginData['name'],_0x17f940(0xaf4),_0x26b0b4=>{const _0x571b7a=_0x17f940;if(!SceneManager[_0x571b7a(0x2ac)]())return;const _0xc9c7f1=$gameTemp[_0x571b7a(0x258)]();if(!_0xc9c7f1)return;_0xc9c7f1[_0x571b7a(0x6a1)]('battleGrow');}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x77d),_0x215afd=>{const _0x10732b=_0x17f940;if(!SceneManager[_0x10732b(0x2ac)]())return;const _0x4140f8=$gameTemp[_0x10732b(0x258)]();if(!_0x4140f8)return;_0x4140f8[_0x10732b(0x6a1)](_0x10732b(0x2c9));}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_Movement_WaitForSpin',_0x56d9d7=>{const _0x3b6ed9=_0x17f940;if(!SceneManager[_0x3b6ed9(0x2ac)]())return;const _0xeef7a3=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xeef7a3)return;_0xeef7a3[_0x3b6ed9(0x6a1)](_0x3b6ed9(0x101));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Projectile_Animation',_0x18fb36=>{const _0x117ccc=_0x17f940;if(!SceneManager[_0x117ccc(0x2ac)]())return;if(!Imported[_0x117ccc(0xa1d)])return;VisuMZ[_0x117ccc(0x20e)](_0x18fb36,_0x18fb36);const _0x4de24e=$gameTemp['getLastPluginCommandInterpreter'](),_0xcaada6=_0x18fb36['WaitForProjectile'];if(!_0x4de24e)return;const _0x55014=BattleManager[_0x117ccc(0x4ab)];if(!_0x55014)return;_0x55014[_0x117ccc(0x643)](_0x18fb36);if(_0xcaada6)_0x4de24e[_0x117ccc(0x6a1)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],'ActSeq_Projectile_Icon',_0x27134d=>{const _0x400623=_0x17f940;if(!SceneManager[_0x400623(0x2ac)]())return;if(!Imported[_0x400623(0xa1d)])return;VisuMZ['ConvertParams'](_0x27134d,_0x27134d);const _0x5a9979=$gameTemp[_0x400623(0x258)](),_0x5e2d6e=_0x27134d[_0x400623(0x932)];if(!_0x5a9979)return;const _0xb7383d=BattleManager[_0x400623(0x4ab)];if(!_0xb7383d)return;_0xb7383d[_0x400623(0x643)](_0x27134d);if(_0x5e2d6e)_0x5a9979['setWaitMode'](_0x400623(0x5f6));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x62a),_0x185d8b=>{const _0x3687ee=_0x17f940;if(!SceneManager[_0x3687ee(0x2ac)]())return;if(!Imported[_0x3687ee(0xa1d)])return;VisuMZ['ConvertParams'](_0x185d8b,_0x185d8b);const _0x391f2b=$gameTemp[_0x3687ee(0x258)](),_0x12a012=_0x185d8b['WaitForProjectile'];if(!_0x391f2b)return;const _0x273a6d=BattleManager[_0x3687ee(0x4ab)];if(!_0x273a6d)return;_0x273a6d[_0x3687ee(0x643)](_0x185d8b);if(_0x12a012)_0x391f2b['setWaitMode'](_0x3687ee(0x5f6));}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_ChangeSkew',_0xcbe19b=>{const _0x2ebdd0=_0x17f940;if(!SceneManager[_0x2ebdd0(0x2ac)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2ebdd0(0x20e)](_0xcbe19b,_0xcbe19b);const _0x159db1=$gameTemp[_0x2ebdd0(0x258)](),_0x37e48e=_0xcbe19b['WaitForSkew'];if(!_0x159db1)return;$gameScreen[_0x2ebdd0(0x3e0)](_0xcbe19b[_0x2ebdd0(0x759)],_0xcbe19b[_0x2ebdd0(0x7d9)],_0xcbe19b['Duration'],_0xcbe19b[_0x2ebdd0(0x6e2)]);if(_0x37e48e)_0x159db1[_0x2ebdd0(0x6a1)]('battleSkew');}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x5a7),_0x39e52e=>{const _0x2a4ec8=_0x17f940;if(!SceneManager[_0x2a4ec8(0x2ac)]())return;if(!Imported[_0x2a4ec8(0x660)])return;VisuMZ[_0x2a4ec8(0x20e)](_0x39e52e,_0x39e52e);const _0x38b402=$gameTemp[_0x2a4ec8(0x258)](),_0x43c5ae=_0x39e52e[_0x2a4ec8(0x89e)];if(!_0x38b402)return;$gameScreen[_0x2a4ec8(0x3e0)](0x0,0x0,_0x39e52e[_0x2a4ec8(0x5ad)],_0x39e52e[_0x2a4ec8(0x6e2)]);if(_0x43c5ae)_0x38b402[_0x2a4ec8(0x6a1)]('battleSkew');}),PluginManager['registerCommand'](pluginData[_0x17f940(0x8d0)],_0x17f940(0xab8),_0x4a923a=>{const _0x2a1c75=_0x17f940;if(!SceneManager[_0x2a1c75(0x2ac)]())return;if(!Imported[_0x2a1c75(0x660)])return;const _0x614a0d=$gameTemp[_0x2a1c75(0x258)]();if(!_0x614a0d)return;_0x614a0d[_0x2a1c75(0x6a1)](_0x2a1c75(0x306));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x6d7),_0x1d1790=>{const _0x54bd14=_0x17f940;if(!SceneManager[_0x54bd14(0x2ac)]())return;VisuMZ[_0x54bd14(0x20e)](_0x1d1790,_0x1d1790);const _0x2ec54c=$gameTemp[_0x54bd14(0x258)](),_0x22c89e=_0x1d1790[_0x54bd14(0xafd)],_0x43aa63=_0x1d1790[_0x54bd14(0x894)];if(!_0x2ec54c)return;BattleManager[_0x54bd14(0x933)]=_0x22c89e,BattleManager[_0x54bd14(0x2e4)]=BattleManager[_0x54bd14(0x5ce)]?BattleManager[_0x54bd14(0x5ce)][BattleManager[_0x54bd14(0x933)]]||null:null,BattleManager['_target']&&_0x43aa63[_0x54bd14(0x9cb)]()[_0x54bd14(0x224)]()!=='UNTITLED'&&(_0x54bd14(0xa11)!==_0x54bd14(0x21b)?_0x2ec54c['command119']([_0x43aa63]):(this[_0x54bd14(0x820)]=new _0x4c488d(),this[_0x54bd14(0xb27)][_0x54bd14(0x1cc)](this[_0x54bd14(0x820)])));}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x71c),_0x24764d=>{const _0xb51ac3=_0x17f940;if(!SceneManager[_0xb51ac3(0x2ac)]())return;VisuMZ[_0xb51ac3(0x20e)](_0x24764d,_0x24764d);const _0x2448aa=$gameTemp[_0xb51ac3(0x258)](),_0x5ce708=_0x24764d[_0xb51ac3(0x894)];if(!_0x2448aa)return;BattleManager[_0xb51ac3(0x933)]++,BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0xb51ac3(0x933)]]||null,BattleManager[_0xb51ac3(0x2e4)]&&_0x5ce708[_0xb51ac3(0x9cb)]()[_0xb51ac3(0x224)]()!=='UNTITLED'&&(_0xb51ac3(0x540)===_0xb51ac3(0x540)?_0x2448aa[_0xb51ac3(0x55a)]([_0x5ce708]):_0xef7062['BattleCore'][_0xb51ac3(0xaa8)][_0xb51ac3(0x14e)](this,_0x53ff4b));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Target_PrevTarget',_0x37e93f=>{const _0x1c90dc=_0x17f940;if(!SceneManager[_0x1c90dc(0x2ac)]())return;VisuMZ[_0x1c90dc(0x20e)](_0x37e93f,_0x37e93f);const _0x393bd9=$gameTemp['getLastPluginCommandInterpreter'](),_0x294ea5=_0x37e93f[_0x1c90dc(0x894)];if(!_0x393bd9)return;BattleManager['_targetIndex']--,BattleManager['_target']=BattleManager[_0x1c90dc(0x5ce)][BattleManager[_0x1c90dc(0x933)]]||null;if(BattleManager[_0x1c90dc(0x2e4)]&&_0x294ea5[_0x1c90dc(0x9cb)]()[_0x1c90dc(0x224)]()!==_0x1c90dc(0x532)){if(_0x1c90dc(0x3dc)!==_0x1c90dc(0x40d))_0x393bd9['command119']([_0x294ea5]);else{const _0xb8b2c0=_0x5c38bb[_0x1c90dc(0x371)]();if(_0xb8b2c0&&_0xb8b2c0[_0x1c90dc(0x4a6)])_0xb8b2c0['battler']()['stepBack']();_0x10ab5b['BattleCore'][_0x1c90dc(0x164)][_0x1c90dc(0x14e)](this);}}}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x5b8),_0x2113be=>{const _0xbeec33=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xbeec33(0x20e)](_0x2113be,_0x2113be);const _0xf6912b=$gameTemp[_0xbeec33(0x258)](),_0x5958d3=_0x2113be[_0xbeec33(0x8f5)],_0x5734ce=_0x2113be[_0xbeec33(0x894)];if(!_0xf6912b)return;const _0x2e1b62=BattleManager['_targetIndex'];for(;;){BattleManager[_0xbeec33(0x933)]=Math[_0xbeec33(0x9d5)](BattleManager[_0xbeec33(0x5ce)]['length']);if(!_0x5958d3)break;if(BattleManager[_0xbeec33(0x933)]!==_0x2e1b62)break;if(BattleManager[_0xbeec33(0x5ce)][_0xbeec33(0x702)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager['_target']=BattleManager[_0xbeec33(0x5ce)][BattleManager[_0xbeec33(0x933)]]||null,BattleManager[_0xbeec33(0x2e4)]&&_0x5734ce[_0xbeec33(0x9cb)]()[_0xbeec33(0x224)]()!=='UNTITLED'&&_0xf6912b['command119']([_0x5734ce]);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],'ActSeq_Weapon_ClearActiveWeapon',_0x54a84d=>{const _0x4603fc=_0x17f940;if(!SceneManager[_0x4603fc(0x2ac)]())return;VisuMZ[_0x4603fc(0x20e)](_0x54a84d,_0x54a84d);const _0xb99dd7=VisuMZ[_0x4603fc(0x34c)](_0x54a84d[_0x4603fc(0x7f5)]);for(const _0x4953cf of _0xb99dd7){if(!_0x4953cf)continue;if(!_0x4953cf['isActor']())continue;_0x4953cf[_0x4603fc(0x637)]();}}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x1c1),_0x506538=>{const _0x1fe4e5=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1fe4e5(0x20e)](_0x506538,_0x506538);const _0x4a3f24=$gameTemp[_0x1fe4e5(0x258)]();let _0xa619c5=![];const _0x48b493=_0x506538[_0x1fe4e5(0x894)],_0x41f88f=VisuMZ[_0x1fe4e5(0x34c)](_0x506538[_0x1fe4e5(0x7f5)]);for(const _0x4a1779 of _0x41f88f){if(!_0x4a1779)continue;if(!_0x4a1779[_0x1fe4e5(0x2b6)]())continue;_0x4a1779[_0x1fe4e5(0x3e2)](),_0x4a1779[_0x1fe4e5(0x16e)]()[_0x1fe4e5(0x702)]>0x0?_0xa619c5=!![]:_0x4a1779['clearActiveWeaponSlot']();}_0xa619c5&&_0x48b493['toUpperCase']()[_0x1fe4e5(0x224)]()!==_0x1fe4e5(0x532)&&_0x4a3f24[_0x1fe4e5(0x55a)]([_0x48b493]);}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x9f4),_0x2fe3f0=>{const _0x21f991=_0x17f940;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2fe3f0,_0x2fe3f0);let _0x56a153=_0x2fe3f0[_0x21f991(0x1e4)];_0x56a153--,_0x56a153=Math[_0x21f991(0xb2c)](_0x56a153,0x0);const _0x484e20=VisuMZ['CreateActionSequenceTargets'](_0x2fe3f0['Targets']);for(const _0x3a2199 of _0x484e20){if(!_0x3a2199)continue;if(!_0x3a2199[_0x21f991(0x2b6)]())continue;_0x3a2199[_0x21f991(0x1e3)](_0x56a153);}}),PluginManager[_0x17f940(0x723)](pluginData['name'],'ActSeq_Zoom_Scale',_0x307ac3=>{const _0x4dbb68=_0x17f940;if(!SceneManager[_0x4dbb68(0x2ac)]())return;if(!Imported[_0x4dbb68(0x660)])return;VisuMZ[_0x4dbb68(0x20e)](_0x307ac3,_0x307ac3);const _0x2fb310=$gameTemp[_0x4dbb68(0x258)](),_0x12eeb0=_0x307ac3[_0x4dbb68(0x5f0)];if(!_0x2fb310)return;$gameScreen[_0x4dbb68(0x37c)](_0x307ac3['Scale'],_0x307ac3[_0x4dbb68(0x5ad)],_0x307ac3['EasingType']);if(_0x12eeb0)_0x2fb310[_0x4dbb68(0x6a1)](_0x4dbb68(0x8ac));}),PluginManager[_0x17f940(0x723)](pluginData[_0x17f940(0x8d0)],_0x17f940(0x900),_0x9eb9e7=>{const _0x2e2622=_0x17f940;if(!SceneManager[_0x2e2622(0x2ac)]())return;if(!Imported[_0x2e2622(0x660)])return;VisuMZ[_0x2e2622(0x20e)](_0x9eb9e7,_0x9eb9e7);const _0x20cf9c=$gameTemp[_0x2e2622(0x258)](),_0x1d654c=_0x9eb9e7[_0x2e2622(0x5f0)];if(!_0x20cf9c)return;$gameScreen[_0x2e2622(0x37c)](0x1,_0x9eb9e7[_0x2e2622(0x5ad)],_0x9eb9e7['EasingType']);if(_0x1d654c)_0x20cf9c[_0x2e2622(0x6a1)](_0x2e2622(0x8ac));}),PluginManager[_0x17f940(0x723)](pluginData['name'],_0x17f940(0x87a),_0x178c89=>{const _0x2ed9bd=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ed9bd(0x660)])return;const _0x3ad392=$gameTemp[_0x2ed9bd(0x258)]();if(!_0x3ad392)return;_0x3ad392[_0x2ed9bd(0x6a1)]('battleZoom');}),VisuMZ[_0x17f940(0x960)][_0x17f940(0xa77)]=Scene_Boot[_0x17f940(0x25b)]['onDatabaseLoaded'],Scene_Boot[_0x17f940(0x25b)]['onDatabaseLoaded']=function(){const _0x38d5df=_0x17f940;this[_0x38d5df(0x967)](),this[_0x38d5df(0xa04)](),this[_0x38d5df(0x435)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ['BattleCore'][_0x38d5df(0xa77)][_0x38d5df(0x14e)](this),this['process_VisuMZ_BattleCore_Notetags'](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x38d5df(0x79f)]();},Scene_Boot[_0x17f940(0x25b)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x185cb7=_0x17f940;if(VisuMZ[_0x185cb7(0x226)])return;this[_0x185cb7(0x920)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x185cb7(0x271)]();},Scene_Boot[_0x17f940(0x25b)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x3c5d20=_0x17f940,_0x21c6aa=$dataSystem['weaponTypes']['length'];for(let _0x56c473=0x0;_0x56c473<_0x21c6aa;_0x56c473++){if('wfJhK'!==_0x3c5d20(0x74f)){if(!_0x31563f['isSideView']())return;const _0x352880=this[_0x3c5d20(0x4a6)]();if(!_0x352880)return;_0x352880[_0x3c5d20(0x805)](_0x3754a6,_0x5607c1);}else{const _0x51548c=$dataSystem[_0x3c5d20(0x7eb)][_0x56c473];if(_0x51548c)continue;$dataSystem['attackMotions'][_0x56c473]=JsonEx[_0x3c5d20(0xa38)]($dataSystem[_0x3c5d20(0x7eb)][0x0]);}}},Scene_Boot[_0x17f940(0x25b)][_0x17f940(0xa04)]=function(){const _0x48e51f=_0x17f940,_0x8e52ef=VisuMZ[_0x48e51f(0x960)][_0x48e51f(0x32c)];_0x8e52ef[_0x48e51f(0x176)][_0x48e51f(0x7d0)]===undefined&&(_0x8e52ef[_0x48e51f(0x176)]['PopupPosition']='base');_0x8e52ef['Actor']['SmoothImage']===undefined&&(_0x8e52ef[_0x48e51f(0x36b)]['SmoothImage']=![]);if(_0x8e52ef[_0x48e51f(0x99a)][_0x48e51f(0x29c)]===undefined){if('LBUKh'!=='YbWlv')_0x8e52ef[_0x48e51f(0x99a)]['SmoothImage']=!![];else{if(!_0x20b479['value'](_0x3f8319))return![];}}_0x8e52ef['Actor'][_0x48e51f(0x88d)]===undefined&&(_0x8e52ef[_0x48e51f(0x36b)]['PrioritySortActive']=![]),_0x8e52ef[_0x48e51f(0x36b)][_0x48e51f(0x14c)]===undefined&&(_0x8e52ef[_0x48e51f(0x36b)][_0x48e51f(0x14c)]=!![]);},VisuMZ[_0x17f940(0x221)]={},Scene_Boot[_0x17f940(0x25b)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x56fd5e=_0x17f940;for(const _0x2cc596 of VisuMZ[_0x56fd5e(0x960)]['Settings'][_0x56fd5e(0x176)]['DamageStyleList']){if('ZgkVl'!==_0x56fd5e(0x769)){if(!_0x2cc596)continue;const _0x21d7df=_0x2cc596['Name']['toUpperCase']()[_0x56fd5e(0x224)]();VisuMZ[_0x56fd5e(0x221)][_0x21d7df]=_0x2cc596;}else return _0x2245d3[_0x56fd5e(0x960)][_0x56fd5e(0x32c)][_0x56fd5e(0x36b)]['Shadow'];}},VisuMZ[_0x17f940(0x960)][_0x17f940(0x352)]={},Scene_Boot[_0x17f940(0x25b)][_0x17f940(0x2df)]=function(){const _0x23ba16=_0x17f940,_0x3d68bb=VisuMZ[_0x23ba16(0x960)][_0x23ba16(0x352)],_0x119f6b='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x1506b1=[['Pre',_0x23ba16(0x337)],['Post',_0x23ba16(0x81a)]],_0x4e1292=[[_0x23ba16(0x612),_0x23ba16(0x1cf)],[_0x23ba16(0x634),_0x23ba16(0xa33)]],_0x525549=[['',''],[_0x23ba16(0x474),_0x23ba16(0x703)],[_0x23ba16(0xa76),'AS\x20TARGET']];for(const _0x51afac of _0x4e1292){if(_0x23ba16(0x81e)==='lAErH')for(const _0x48b020 of _0x525549){if(_0x23ba16(0x380)!==_0x23ba16(0x380))_0x5c0a0c=_0x23ba16(0x64f);else for(const _0x53ee67 of _0x1506b1){if('xQgWP'!==_0x23ba16(0x1a1)){const _0x4ec69f=_0x51afac[0x0]['format'](_0x53ee67[0x0],_0x48b020[0x0]),_0x2ebde8=_0x51afac[0x1][_0x23ba16(0x8a4)](_0x53ee67[0x1],_0x48b020[0x1])['trim'](),_0x2016c3=new RegExp(_0x119f6b[_0x23ba16(0x8a4)](_0x2ebde8),'i');_0x3d68bb[_0x4ec69f]=_0x2016c3;}else for(const _0x5078a6 of _0x5007a5){const _0x1e4989=_0xbe271[0x0][_0x23ba16(0x8a4)](_0x5078a6[0x0]),_0x222d55=_0x380d05[0x1][_0x23ba16(0x8a4)](_0x5078a6[0x1]),_0x315f87=new _0x19579f(_0x2dba5d[_0x23ba16(0x8a4)](_0x222d55),'i');_0x572d95[_0x1e4989]=_0x315f87;}}}else{let _0xc6d35a=_0x5566c9[_0x23ba16(0xa38)](_0x1bf05b['BattleCore']['Game_Map_encounterList'][_0x23ba16(0x14e)](this));return _0x5c8b42[_0x23ba16(0x960)][_0x23ba16(0x129)](_0xc6d35a);}}const _0x1b0305=[[_0x23ba16(0x5b1),_0x23ba16(0x6c6)],[_0x23ba16(0xa1c),_0x23ba16(0x463)]];for(const _0x3dd462 of _0x1b0305){for(const _0x49e4e3 of _0x1506b1){if(_0x23ba16(0x971)!==_0x23ba16(0x971))this[_0x23ba16(0x658)][_0x23ba16(0x38c)]=_0x4a290f,this[_0x23ba16(0x8ba)][_0x23ba16(0x10e)](_0x17f002),this[_0x23ba16(0x8ba)][_0x23ba16(0xa31)](_0x1d44cc,this['_action']),this[_0x23ba16(0x658)][_0x23ba16(0x475)](_0x58121a),this[_0x23ba16(0x8ba)][_0x23ba16(0x7a0)](_0x4bb9f0,_0x214555);else{const _0x5cbb47=_0x3dd462[0x0][_0x23ba16(0x8a4)](_0x49e4e3[0x0]),_0x5231ac=_0x3dd462[0x1][_0x23ba16(0x8a4)](_0x49e4e3[0x1]),_0x3f304c=new RegExp(_0x119f6b[_0x23ba16(0x8a4)](_0x5231ac),'i');_0x3d68bb[_0x5cbb47]=_0x3f304c;}}}const _0x523fcc=[[_0x23ba16(0x438),_0x23ba16(0x786)],['%1EndBattleJS',_0x23ba16(0x241)],[_0x23ba16(0x864),_0x23ba16(0x9ff)],['BattleDefeatJS',_0x23ba16(0x2b4)],[_0x23ba16(0xb17),'JS\x20ESCAPE\x20SUCCESS'],[_0x23ba16(0x6bb),_0x23ba16(0x993)],[_0x23ba16(0x1ee),'JS\x20%1START\x20TURN'],[_0x23ba16(0x283),_0x23ba16(0x822)],['%1RegenerateJS',_0x23ba16(0x186)]];for(const _0xdc9a42 of _0x523fcc){for(const _0x43a9b2 of _0x1506b1){if(_0x23ba16(0xa29)!==_0x23ba16(0x681)){const _0x43dab2=_0xdc9a42[0x0][_0x23ba16(0x8a4)](_0x43a9b2[0x0]),_0x346fba=_0xdc9a42[0x1]['format'](_0x43a9b2[0x1]),_0x39304f=new RegExp(_0x119f6b[_0x23ba16(0x8a4)](_0x346fba),'i');_0x3d68bb[_0x43dab2]=_0x39304f;}else _0x2b71e1[_0x23ba16(0x960)][_0x23ba16(0x755)]['call'](this),this[_0x23ba16(0x8f2)]();}}},Scene_Boot[_0x17f940(0x25b)][_0x17f940(0x920)]=function(){const _0x9148ed=_0x17f940,_0x2a34fa=$dataSkills[_0x9148ed(0x872)]($dataItems);for(const _0xfb5cc5 of _0x2a34fa){if(_0x9148ed(0x4d0)!=='QYkHC'){if(!_0xfb5cc5)continue;VisuMZ[_0x9148ed(0x960)][_0x9148ed(0x837)](_0xfb5cc5);}else return 0x0;}},Scene_Boot[_0x17f940(0x25b)][_0x17f940(0x657)]=function(){const _0x21f38a=_0x17f940,_0x1c20e7=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x4c8ef3 of _0x1c20e7){if(_0x21f38a(0x31d)!==_0x21f38a(0x31d))return _0x3c76e9[_0x21f38a(0x708)];else{if(!_0x4c8ef3)continue;VisuMZ[_0x21f38a(0x960)][_0x21f38a(0x889)](_0x4c8ef3);}}},Scene_Boot[_0x17f940(0x25b)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x242081=_0x17f940,_0x3225b0=VisuMZ[_0x242081(0x960)][_0x242081(0x32c)]['Mechanics'][_0x242081(0x8f7)],_0x2f0346=[];for(const _0x59298b of _0x3225b0){const _0xa35843=$dataTroops[_0x59298b];if(_0xa35843)_0x2f0346['push'](JsonEx[_0x242081(0xa38)](_0xa35843));}for(const _0x1ba15f of $dataTroops){if(!_0x1ba15f)continue;for(const _0x5a25c2 of _0x2f0346){if(_0x242081(0x877)!=='qEHrT'){if(this[_0x242081(0x6a5)]<=0x0)return;const _0x12865d=this[_0x242081(0x6a5)],_0x56c19a=this[_0x242081(0x9f9)],_0x51159e=this[_0x242081(0x2e9)];_0x428c4a[_0x242081(0xa8c)]?this['_floatHeight']=this[_0x242081(0x2f7)](this[_0x242081(0x69b)],this[_0x242081(0x5b4)],_0x12865d,_0x56c19a,_0x51159e):this['_floatHeight']=(this[_0x242081(0x69b)]*(_0x12865d-0x1)+this[_0x242081(0x5b4)])/_0x12865d;this[_0x242081(0x6a5)]--;if(this[_0x242081(0x6a5)]<=0x0)this['onFloatEnd']();}else{if(_0x5a25c2['id']===_0x1ba15f['id'])continue;_0x1ba15f[_0x242081(0xad2)]=_0x1ba15f['pages'][_0x242081(0x872)](_0x5a25c2[_0x242081(0xad2)]);}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x461b38=_0x17f940,_0x5bdecf=VisuMZ[_0x461b38(0x960)][_0x461b38(0x32c)][_0x461b38(0xa9e)];if(_0x5bdecf[_0x461b38(0x1db)]>0x0&&$dataCommonEvents[_0x5bdecf['BattleStartEvent']]){const _0x5f5aef=$dataCommonEvents[_0x5bdecf[_0x461b38(0x1db)]],_0x4502ac=_0x5f5aef[_0x461b38(0x5a8)]['length']-0x2,_0x3c285e=_0x5f5aef[_0x461b38(0x5a8)][_0x4502ac];if(_0x3c285e[_0x461b38(0x616)]!==0xe6){const _0x46adcd={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0xe75d8b=_0x5f5aef[_0x461b38(0x5a8)][_0x461b38(0x2bb)]();_0x5f5aef[_0x461b38(0x5a8)][_0x461b38(0xabc)](_0x46adcd),_0x5f5aef[_0x461b38(0x5a8)][_0x461b38(0xabc)](_0xe75d8b);}}},Scene_Boot[_0x17f940(0x25b)][_0x17f940(0x271)]=function(){const _0x5b79cd=_0x17f940,_0x358f98=$dataSkills[_0x5b79cd(0x872)]($dataItems);for(const _0x493aa4 of _0x358f98){if(!_0x493aa4)continue;VisuMZ['BattleCore'][_0x5b79cd(0x6f3)](_0x493aa4);}},VisuMZ['BattleCore'][_0x17f940(0x4f4)]=VisuMZ[_0x17f940(0x4f4)],VisuMZ[_0x17f940(0x4f4)]=function(_0x374e5b){const _0x550c62=_0x17f940;if(VisuMZ[_0x550c62(0x960)]['ParseActorNotetags']){if(_0x550c62(0x8f3)!==_0x550c62(0x84b))VisuMZ[_0x550c62(0x960)][_0x550c62(0x4f4)]['call'](this,_0x374e5b);else return this[_0x550c62(0x676)];}VisuMZ[_0x550c62(0x960)][_0x550c62(0x889)](_0x374e5b);},VisuMZ['BattleCore'][_0x17f940(0x24b)]=VisuMZ[_0x17f940(0x24b)],VisuMZ[_0x17f940(0x24b)]=function(_0x5cbd2a){const _0x476b63=_0x17f940;VisuMZ['BattleCore']['ParseClassNotetags']&&VisuMZ[_0x476b63(0x960)][_0x476b63(0x24b)]['call'](this,_0x5cbd2a),VisuMZ[_0x476b63(0x960)][_0x476b63(0x889)](_0x5cbd2a);},VisuMZ['BattleCore'][_0x17f940(0xb1c)]=VisuMZ[_0x17f940(0xb1c)],VisuMZ[_0x17f940(0xb1c)]=function(_0x3fb0ca){const _0x26598e=_0x17f940;VisuMZ['BattleCore']['ParseSkillNotetags']&&VisuMZ[_0x26598e(0x960)][_0x26598e(0xb1c)][_0x26598e(0x14e)](this,_0x3fb0ca),VisuMZ['BattleCore'][_0x26598e(0x837)](_0x3fb0ca),VisuMZ[_0x26598e(0x960)][_0x26598e(0x6f3)](_0x3fb0ca);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x98c)]=VisuMZ[_0x17f940(0x98c)],VisuMZ['ParseItemNotetags']=function(_0x291cd7){const _0x4ff33c=_0x17f940;if(VisuMZ[_0x4ff33c(0x960)]['ParseItemNotetags']){if(_0x4ff33c(0x330)!==_0x4ff33c(0x330)){if(!_0x3901e8[_0x4ff33c(0x2ac)]())return;const _0x4297c6=_0x2d993b[_0x4ff33c(0x258)]();if(!_0x4297c6)return;_0x4297c6['setWaitMode'](_0x4ff33c(0x84e));}else VisuMZ['BattleCore'][_0x4ff33c(0x98c)][_0x4ff33c(0x14e)](this,_0x291cd7);}VisuMZ['BattleCore'][_0x4ff33c(0x837)](_0x291cd7),VisuMZ[_0x4ff33c(0x960)]['Parse_Notetags_Targets'](_0x291cd7);},VisuMZ['BattleCore'][_0x17f940(0x442)]=VisuMZ[_0x17f940(0x442)],VisuMZ['ParseWeaponNotetags']=function(_0x398759){const _0x139d9d=_0x17f940;VisuMZ[_0x139d9d(0x960)][_0x139d9d(0x442)]&&VisuMZ[_0x139d9d(0x960)][_0x139d9d(0x442)][_0x139d9d(0x14e)](this,_0x398759),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x398759);},VisuMZ[_0x17f940(0x960)]['ParseArmorNotetags']=VisuMZ[_0x17f940(0x7fd)],VisuMZ[_0x17f940(0x7fd)]=function(_0x5482c7){const _0x51e29a=_0x17f940;VisuMZ['BattleCore'][_0x51e29a(0x7fd)]&&('MdRAi'==='LMVbg'?!this[_0x51e29a(0x1c0)]()&&!this[_0x51e29a(0x8ba)][_0x51e29a(0x329)]()&&(this['_phase']=_0x51e29a(0x927)):VisuMZ[_0x51e29a(0x960)][_0x51e29a(0x7fd)][_0x51e29a(0x14e)](this,_0x5482c7)),VisuMZ[_0x51e29a(0x960)][_0x51e29a(0x889)](_0x5482c7);},VisuMZ['BattleCore']['ParseEnemyNotetags']=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x17f940(0x7cb)]=function(_0x1728f5){const _0x210532=_0x17f940;VisuMZ['BattleCore'][_0x210532(0x7cb)]&&VisuMZ[_0x210532(0x960)][_0x210532(0x7cb)]['call'](this,_0x1728f5),VisuMZ[_0x210532(0x960)]['Parse_Notetags_TraitObjects'](_0x1728f5);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x8b9)]=VisuMZ[_0x17f940(0x8b9)],VisuMZ[_0x17f940(0x8b9)]=function(_0x4176f2){const _0x14f93c=_0x17f940;VisuMZ[_0x14f93c(0x960)][_0x14f93c(0x8b9)]&&VisuMZ[_0x14f93c(0x960)][_0x14f93c(0x8b9)][_0x14f93c(0x14e)](this,_0x4176f2),VisuMZ['BattleCore'][_0x14f93c(0x889)](_0x4176f2);},VisuMZ['BattleCore']['Parse_Notetags_Action']=function(_0x993e17){const _0x43862d=_0x17f940,_0x30b503=[_0x43862d(0x364),_0x43862d(0xa63),_0x43862d(0x1b9),_0x43862d(0x684),_0x43862d(0xb16),_0x43862d(0x361),_0x43862d(0x700),_0x43862d(0x4d2)];for(const _0x1c94bf of _0x30b503){_0x43862d(0xa42)!==_0x43862d(0xa42)?(_0x16d67e['prototype'][_0x43862d(0x762)][_0x43862d(0x14e)](this),this[_0x43862d(0x3cd)]('evade')):VisuMZ[_0x43862d(0x960)][_0x43862d(0x266)](_0x993e17,_0x1c94bf);}const _0x259f0b=_0x993e17[_0x43862d(0x981)];_0x259f0b[_0x43862d(0x413)](/<ALWAYS CRITICAL/i)&&(_0x43862d(0x6e7)!==_0x43862d(0x6e7)?this['_animationContainer'][_0x43862d(0x783)](_0x557f1d):_0x993e17[_0x43862d(0x203)]['critical']=!![]),_0x259f0b[_0x43862d(0x413)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x43862d(0x446)===_0x43862d(0x6f2)?(_0x1dab3d=_0x35adc7(_0x59a0bf['$1']),_0x1e8aa3=_0x38109e(_0x2466a5['$2'])):_0x993e17[_0x43862d(0x88c)]=Math[_0x43862d(0xb2c)](0x1,Number(RegExp['$1']))),_0x259f0b[_0x43862d(0x413)](/<TARGET:[ ](.*)>/i)&&(_0x993e17[_0x43862d(0x5d4)]=String(RegExp['$1'])[_0x43862d(0x9cb)]()['trim']());},VisuMZ[_0x17f940(0x960)][_0x17f940(0x889)]=function(_0x5c90e0){const _0x380df4=_0x17f940,_0x2722de=['PreApplyAsUserJS',_0x380df4(0x49a),_0x380df4(0x22c),_0x380df4(0x4fc),_0x380df4(0x997),'PostApplyAsTargetJS',_0x380df4(0xb0e),_0x380df4(0xa99),_0x380df4(0xb16),_0x380df4(0x361),'PreEndActionJS',_0x380df4(0x4d2),_0x380df4(0x8c8),'PostStartBattleJS',_0x380df4(0x4a0),_0x380df4(0x399),_0x380df4(0x864),_0x380df4(0x3c1),_0x380df4(0xb17),_0x380df4(0x6bb),'PreStartTurnJS',_0x380df4(0x756),_0x380df4(0x152),_0x380df4(0x6d2),_0x380df4(0x5d5),'PostRegenerateJS'];for(const _0x161f77 of _0x2722de){VisuMZ[_0x380df4(0x960)][_0x380df4(0x266)](_0x5c90e0,_0x161f77);}},VisuMZ[_0x17f940(0x960)][_0x17f940(0x6f3)]=function(_0x1c0b03){const _0x31c4ff=_0x17f940,_0x329149=_0x1c0b03[_0x31c4ff(0x981)];if(_0x329149[_0x31c4ff(0x413)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x471a0f=String(RegExp['$1']),_0x4757bb=VisuMZ[_0x31c4ff(0x960)][_0x31c4ff(0x8a9)](_0x1c0b03,_0x31c4ff(0x7f5));VisuMZ[_0x31c4ff(0x960)]['createTargetsJS'](_0x471a0f,_0x4757bb);}if(_0x329149[_0x31c4ff(0x413)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x31c4ff(0x213)===_0x31c4ff(0x6e9))_0x1e95a8[_0x31c4ff(0x25b)][_0x31c4ff(0xfd)][_0x31c4ff(0x14e)](this,_0x10792c);else{const _0x4a2def=String(RegExp['$1']),_0x1c8819=VisuMZ[_0x31c4ff(0x960)]['createKeyJS'](_0x1c0b03,_0x31c4ff(0x2cd));VisuMZ['BattleCore'][_0x31c4ff(0xad1)](_0x4a2def,_0x1c8819);}}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x17f940(0x960)]['createJS']=function(_0x4f26eb,_0x1e822a){const _0x42e4d4=_0x17f940,_0x3e830f=_0x4f26eb[_0x42e4d4(0x981)];if(_0x3e830f[_0x42e4d4(0x413)](VisuMZ[_0x42e4d4(0x960)]['RegExp'][_0x1e822a])){if(_0x42e4d4(0x405)!=='KIkau'){if(_0x216529['ParseAllNotetags'])return;this[_0x42e4d4(0x920)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x42e4d4(0x271)]();}else{const _0x2026ee=RegExp['$1'],_0x1eafca=_0x42e4d4(0x77c)[_0x42e4d4(0x8a4)](_0x2026ee),_0x36c33=VisuMZ[_0x42e4d4(0x960)]['createKeyJS'](_0x4f26eb,_0x1e822a);VisuMZ[_0x42e4d4(0x960)]['JS'][_0x36c33]=new Function(_0x1eafca);}}},VisuMZ[_0x17f940(0x960)][_0x17f940(0x8a9)]=function(_0x301b86,_0x5bfed8){const _0x2514a6=_0x17f940;let _0x11eb9c='';if($dataActors[_0x2514a6(0x72d)](_0x301b86))_0x11eb9c='Actor-%1-%2'[_0x2514a6(0x8a4)](_0x301b86['id'],_0x5bfed8);if($dataClasses[_0x2514a6(0x72d)](_0x301b86))_0x11eb9c='Class-%1-%2'[_0x2514a6(0x8a4)](_0x301b86['id'],_0x5bfed8);if($dataSkills['includes'](_0x301b86))_0x11eb9c=_0x2514a6(0x13f)[_0x2514a6(0x8a4)](_0x301b86['id'],_0x5bfed8);if($dataItems[_0x2514a6(0x72d)](_0x301b86))_0x11eb9c=_0x2514a6(0xa07)['format'](_0x301b86['id'],_0x5bfed8);if($dataWeapons[_0x2514a6(0x72d)](_0x301b86))_0x11eb9c=_0x2514a6(0x453)[_0x2514a6(0x8a4)](_0x301b86['id'],_0x5bfed8);if($dataArmors['includes'](_0x301b86))_0x11eb9c=_0x2514a6(0x196)['format'](_0x301b86['id'],_0x5bfed8);if($dataEnemies[_0x2514a6(0x72d)](_0x301b86))_0x11eb9c=_0x2514a6(0x1e9)['format'](_0x301b86['id'],_0x5bfed8);if($dataStates['includes'](_0x301b86))_0x11eb9c='State-%1-%2'['format'](_0x301b86['id'],_0x5bfed8);return _0x11eb9c;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x3e4)]=function(_0x2338bd,_0x56d63){const _0x9512f8=_0x17f940,_0x1833df=_0x9512f8(0x314)['format'](_0x2338bd);VisuMZ['BattleCore']['JS'][_0x56d63]=new Function(_0x1833df);},VisuMZ[_0x17f940(0x960)][_0x17f940(0xad1)]=function(_0x2d6155,_0x2f1a8a){const _0x5e43de=_0x17f940,_0x2eefe1=_0x5e43de(0x983)[_0x5e43de(0x8a4)](_0x2d6155);VisuMZ[_0x5e43de(0x960)]['JS'][_0x2f1a8a]=new Function(_0x2eefe1);},TextManager[_0x17f940(0x707)]=VisuMZ[_0x17f940(0x960)][_0x17f940(0x32c)][_0x17f940(0x6e8)][_0x17f940(0x806)],TextManager[_0x17f940(0x109)]=VisuMZ[_0x17f940(0x960)][_0x17f940(0x32c)][_0x17f940(0x5c5)][_0x17f940(0x182)],TextManager[_0x17f940(0xa12)]=VisuMZ['BattleCore'][_0x17f940(0x32c)][_0x17f940(0x5c5)][_0x17f940(0x53d)],TextManager[_0x17f940(0x627)]=VisuMZ[_0x17f940(0x960)][_0x17f940(0x32c)][_0x17f940(0x5ba)][_0x17f940(0x6a7)],ColorManager[_0x17f940(0xb08)]=function(_0x4192dc){const _0x4f74a6=_0x17f940;return _0x4192dc=String(_0x4192dc),_0x4192dc[_0x4f74a6(0x413)](/#(.*)/i)?_0x4f74a6(0x691)[_0x4f74a6(0x8a4)](String(RegExp['$1'])):this['textColor'](Number(_0x4192dc));},DataManager['getDamageStyle']=function(_0x1cb369){const _0x543a6f=_0x17f940;if(_0x1cb369[_0x543a6f(0x981)][_0x543a6f(0x413)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x543a6f(0x206)!==_0x543a6f(0x206)){_0xee0ec0[_0x543a6f(0x25b)][_0x543a6f(0x535)]['call'](this);const _0x55302e=this[_0x543a6f(0xade)]()||this;if(!_0x55302e)return;!_0x55302e['bitmap']&&(_0x55302e[_0x543a6f(0x242)]=new _0xcf8de9(this['width'],this[_0x543a6f(0x87c)])),this['_effectType']==='bossCollapse'?this['_mainSprite'][_0x543a6f(0xb00)](0x0,0x0,this['_mainSprite'][_0x543a6f(0x67f)],this[_0x543a6f(0x432)]):_0x55302e[_0x543a6f(0xb00)](0x0,0x0,_0x55302e[_0x543a6f(0x242)][_0x543a6f(0x67f)],this[_0x543a6f(0x242)][_0x543a6f(0x87c)]);}else{const _0xc81f9f=String(RegExp['$1'])[_0x543a6f(0x9cb)]()[_0x543a6f(0x224)]();if(_0xc81f9f==='MANUAL')return _0x543a6f(0x52c);if(VisuMZ[_0x543a6f(0x221)][_0xc81f9f])return _0xc81f9f;}}const _0x5d2e5f=VisuMZ[_0x543a6f(0x960)][_0x543a6f(0x32c)][_0x543a6f(0x176)][_0x543a6f(0x8ef)][_0x543a6f(0x9cb)]()[_0x543a6f(0x224)]();if(VisuMZ[_0x543a6f(0x221)][_0x5d2e5f])return _0x5d2e5f;return'MANUAL';},DataManager['getStypeIdWithName']=function(_0x7e9f17){const _0x40bbc3=_0x17f940;_0x7e9f17=_0x7e9f17[_0x40bbc3(0x9cb)]()['trim'](),this[_0x40bbc3(0x7cf)]=this[_0x40bbc3(0x7cf)]||{};if(this[_0x40bbc3(0x7cf)][_0x7e9f17])return this[_0x40bbc3(0x7cf)][_0x7e9f17];for(let _0x215d22=0x1;_0x215d22<0x64;_0x215d22++){if(_0x40bbc3(0x90d)===_0x40bbc3(0x4a8))_0x2adf31['bitmap']=new _0x4c401f(this['width'],this['height']);else{if(!$dataSystem[_0x40bbc3(0xb18)][_0x215d22])continue;let _0x1e493a=$dataSystem[_0x40bbc3(0xb18)][_0x215d22][_0x40bbc3(0x9cb)]()['trim']();_0x1e493a=_0x1e493a[_0x40bbc3(0xa30)](/\x1I\[(\d+)\]/gi,''),_0x1e493a=_0x1e493a[_0x40bbc3(0xa30)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x1e493a]=_0x215d22;}}return this[_0x40bbc3(0x7cf)][_0x7e9f17]||0x0;},DataManager[_0x17f940(0x1a5)]=function(_0x49ac74){const _0x384a62=_0x17f940;_0x49ac74=_0x49ac74[_0x384a62(0x9cb)]()['trim'](),this[_0x384a62(0xab0)]=this[_0x384a62(0xab0)]||{};if(this['_skillIDs'][_0x49ac74])return this[_0x384a62(0xab0)][_0x49ac74];for(const _0x26cf28 of $dataSkills){if(_0x384a62(0x741)===_0x384a62(0x741)){if(!_0x26cf28)continue;this[_0x384a62(0xab0)][_0x26cf28['name']['toUpperCase']()[_0x384a62(0x224)]()]=_0x26cf28['id'];}else{if(this[_0x384a62(0x4f3)]>0x0)this[_0x384a62(0x4f3)]-=0x10;}}return this[_0x384a62(0xab0)][_0x49ac74]||0x0;},DataManager[_0x17f940(0x552)]=function(_0x5bf281){const _0x35ff9f=_0x17f940;_0x5bf281=_0x5bf281[_0x35ff9f(0x9cb)]()['trim'](),this[_0x35ff9f(0x69d)]=this[_0x35ff9f(0x69d)]||{};if(this[_0x35ff9f(0x69d)][_0x5bf281])return this[_0x35ff9f(0x69d)][_0x5bf281];for(const _0x57495f of $dataEnemies){if(!_0x57495f)continue;this[_0x35ff9f(0x69d)][_0x57495f['name'][_0x35ff9f(0x9cb)]()[_0x35ff9f(0x224)]()]=_0x57495f['id'];}return this[_0x35ff9f(0x69d)][_0x5bf281]||0x0;},DataManager[_0x17f940(0x12b)]=function(_0x51d457){const _0x4d9374=_0x17f940;_0x51d457=_0x51d457[_0x4d9374(0x9cb)]()[_0x4d9374(0x224)](),this[_0x4d9374(0x16c)]=this[_0x4d9374(0x16c)]||{};if(this[_0x4d9374(0x16c)][_0x51d457])return this['_wtypeIDs'][_0x51d457];for(let _0x39bea1=0x1;_0x39bea1<0x64;_0x39bea1++){if(!$dataSystem[_0x4d9374(0x56d)][_0x39bea1])continue;let _0x1d6198=$dataSystem[_0x4d9374(0x56d)][_0x39bea1]['toUpperCase']()['trim']();_0x1d6198=_0x1d6198[_0x4d9374(0xa30)](/\x1I\[(\d+)\]/gi,''),_0x1d6198=_0x1d6198[_0x4d9374(0xa30)](/\\I\[(\d+)\]/gi,''),this[_0x4d9374(0x16c)][_0x1d6198]=_0x39bea1;}return this[_0x4d9374(0x16c)][_0x4d9374(0x709)]=0x0,this[_0x4d9374(0x16c)][_0x51d457]||0x0;},DataManager['battleDisplayText']=function(_0x4430a2){const _0x3521af=_0x17f940,_0x32200d=_0x3521af(0x633);let _0x343e1b=_0x4430a2['iconIndex'],_0x3d55e1=_0x4430a2['name'];const _0x2fb679=_0x4430a2[_0x3521af(0x981)];if(_0x2fb679[_0x3521af(0x413)](/<DISPLAY ICON: (\d+)>/i)){if(_0x3521af(0x6e3)===_0x3521af(0xab5)){const _0x186124=_0x5d46b7(_0x1a2996['$1']);return[_0x2fc31f[_0x3521af(0x371)](_0x186124)];}else _0x343e1b=Number(RegExp['$1']);}return _0x2fb679[_0x3521af(0x413)](/<DISPLAY TEXT: (.*)>/i)&&(_0x3d55e1=String(RegExp['$1'])),_0x32200d['format'](_0x343e1b,_0x3d55e1);},DataManager[_0x17f940(0x4ae)]=function(_0x5caf43){const _0x130203=_0x17f940;return _0x5caf43[_0x130203(0x981)][_0x130203(0x413)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x5caf43['name'];},DataManager['battleCommandIcon']=function(_0x322107){const _0x265632=_0x17f940;return _0x322107[_0x265632(0x981)][_0x265632(0x413)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x322107['iconIndex'];},DataManager[_0x17f940(0xaf7)]=function(_0x5e91d9){const _0x4fb69a=_0x17f940,_0x28ca7b=$dataEnemies[_0x5e91d9];if(_0x28ca7b){if(_0x28ca7b['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x2d71cc=String(RegExp['$1'])[_0x4fb69a(0x618)](/[\r\n]+/)['remove'](''),_0x1367e=this[_0x4fb69a(0x746)](_0x2d71cc);_0x5e91d9=this[_0x4fb69a(0x552)](_0x1367e)||_0x5e91d9,_0x5e91d9=DataManager[_0x4fb69a(0xaf7)](_0x5e91d9);}}return _0x5e91d9;},DataManager[_0x17f940(0x746)]=function(_0x5650d8){const _0x594b5a=_0x17f940;let _0x12cd3b=0x0;const _0x41c406={};for(const _0x36a6db of _0x5650d8){if(_0x594b5a(0x6d4)===_0x594b5a(0x9c2)){if(!_0xa1acc3[_0x594b5a(0x2ac)]())return;if(!_0x286c43[_0x594b5a(0x660)])return;const _0x5be5ca=_0x11839e[_0x594b5a(0x258)]();if(!_0x5be5ca)return;_0x5be5ca[_0x594b5a(0x6a1)](_0x594b5a(0x8ac));}else{if(_0x36a6db['match'](/(.*):[ ](\d+)/i)){const _0x51a17c=String(RegExp['$1'])['trim'](),_0x422941=Number(RegExp['$2']);_0x41c406[_0x51a17c]=_0x422941,_0x12cd3b+=_0x422941;}else{if(_0x36a6db['match'](/(.*):[ ](\d+\.?\d+)/i)){if('aNrkz'!==_0x594b5a(0x150)){if(!_0x21352b[_0x594b5a(0x9fb)](_0x39523e))return!![];}else{const _0x2df0d0=String(RegExp['$1'])[_0x594b5a(0x224)](),_0x2b5c03=Number(RegExp['$2']);_0x41c406[_0x2df0d0]=_0x2b5c03,_0x12cd3b+=_0x2b5c03;}}else _0x36a6db!==''&&(_0x41c406[_0x36a6db]=0x1,_0x12cd3b++);}}}if(_0x12cd3b<=0x0)return'';let _0x39e7b5=Math[_0x594b5a(0x56c)]()*_0x12cd3b;for(const _0x5a0e8a in _0x41c406){if(_0x594b5a(0x205)==='OghTI')_0x370355[_0x594b5a(0x426)](_0x15fa67[_0x594b5a(0x8be)],![]);else{_0x39e7b5-=_0x41c406[_0x5a0e8a];if(_0x39e7b5<=0x0)return _0x5a0e8a;}}return'';},DataManager[_0x17f940(0x4fe)]=function(_0x206515){const _0x47b57e=_0x17f940;if(!_0x206515)return![];if(!VisuMZ[_0x47b57e(0x960)][_0x47b57e(0x32c)][_0x47b57e(0x664)]['AutoNotetag'])return![];if(_0x206515['note'][_0x47b57e(0x413)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x206515[_0x47b57e(0x981)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x54909b of _0x206515['effects']){if(!_0x54909b)continue;if(_0x54909b['code']===Game_Action[_0x47b57e(0x56a)])return!![];}return![];},DataManager['createTroopNote']=function(_0x219861){const _0x58cbac=_0x17f940,_0x3e346b=$dataTroops[_0x219861];if(!_0x3e346b)return'';let _0x1efa32='';_0x1efa32+=_0x3e346b[_0x58cbac(0x8d0)];for(const _0x29ba92 of _0x3e346b[_0x58cbac(0xad2)]){for(const _0x4e80ec of _0x29ba92['list']){[0x6c,0x198][_0x58cbac(0x72d)](_0x4e80ec[_0x58cbac(0x616)])&&(_0x58cbac(0x677)!==_0x58cbac(0x416)?(_0x1efa32+='\x0a',_0x1efa32+=_0x4e80ec[_0x58cbac(0x99f)][0x0]):_0x3770a3[_0x58cbac(0x5e8)](this[_0x58cbac(0x6fa)]()['trueRandomTarget']()));}}return _0x1efa32;},ConfigManager[_0x17f940(0x341)]=ConfigManager[_0x17f940(0x341)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x17f940(0x627)]=ConfigManager[_0x17f940(0x627)]??!![],VisuMZ['BattleCore']['ConfigManager_makeData']=ConfigManager[_0x17f940(0xa80)],ConfigManager[_0x17f940(0xa80)]=function(){const _0x349196=_0x17f940,_0x167ed9=VisuMZ['BattleCore']['ConfigManager_makeData']['call'](this);return _0x167ed9[_0x349196(0x341)]=this['autoBattleAtStart'],_0x167ed9[_0x349196(0x455)]=this['autoBattleUseSkills'],_0x167ed9[_0x349196(0x627)]=this['visualHpGauge'],_0x167ed9;},VisuMZ['BattleCore']['ConfigManager_applyData']=ConfigManager['applyData'],ConfigManager['applyData']=function(_0x2c2203){const _0x3d4823=_0x17f940;VisuMZ[_0x3d4823(0x960)][_0x3d4823(0xa4f)]['call'](this,_0x2c2203);_0x3d4823(0x341)in _0x2c2203?'wLOIn'==='wLOIn'?this[_0x3d4823(0x341)]=_0x2c2203[_0x3d4823(0x341)]:this[_0x3d4823(0x3cd)]('thrust'):this[_0x3d4823(0x341)]=![];if(_0x3d4823(0x455)in _0x2c2203){if('HsItZ'!==_0x3d4823(0x6d8))this['autoBattleUseSkills']=_0x2c2203[_0x3d4823(0x455)];else{if(!_0x301cf7[_0x3d4823(0x2ac)]())return;if(!_0x350c80['VisuMZ_3_ActSeqCamera'])return;_0x1ac185[_0x3d4823(0x20e)](_0x36ff7b,_0x2e777c);const _0xc38649=_0x170764[_0x3d4823(0x258)](),_0x34dc0f=_0x170626[_0x3d4823(0x5f0)];if(!_0xc38649)return;_0x218ce2[_0x3d4823(0x37c)](0x1,_0x4c3fe1[_0x3d4823(0x5ad)],_0x250f33['EasingType']);if(_0x34dc0f)_0xc38649[_0x3d4823(0x6a1)](_0x3d4823(0x8ac));}}else this[_0x3d4823(0x455)]=![];if(_0x3d4823(0x627)in _0x2c2203)this[_0x3d4823(0x627)]=_0x2c2203[_0x3d4823(0x627)];else{if(_0x3d4823(0x8bc)!==_0x3d4823(0x103))this['visualHpGauge']=!![];else{if(_0x513c63[_0x3d4823(0x4ab)][_0x3d4823(0x105)]())return!![];this[_0x3d4823(0x945)]='';}}},VisuMZ[_0x17f940(0x960)]['BattleManager_initMembers']=BattleManager['initMembers'],BattleManager[_0x17f940(0x460)]=function(){const _0x251176=_0x17f940;VisuMZ['BattleCore'][_0x251176(0x888)][_0x251176(0x14e)](this),this[_0x251176(0x7f7)]=[];},BattleManager['refreshStatusWindow']=function(){const _0x4b5f31=_0x17f940;if(!SceneManager[_0x4b5f31(0x2ac)]())return;const _0x535857=SceneManager[_0x4b5f31(0x712)][_0x4b5f31(0x1e7)];if(_0x535857)_0x535857[_0x4b5f31(0x163)]();},BattleManager['battleSys']=function(){const _0x122e68=_0x17f940;if(BattleManager[_0x122e68(0x7ca)]())return _0x122e68(0x36d);return'DTB';},BattleManager[_0x17f940(0x65b)]=function(_0x210a17){const _0x43d7e6=_0x17f940;return _0x210a17=_0x210a17[_0x43d7e6(0x9cb)]()[_0x43d7e6(0x224)](),this['battleSys']()===_0x210a17;},BattleManager['isDTB']=function(){const _0x88b0f8=_0x17f940;return this[_0x88b0f8(0x65b)](_0x88b0f8(0x9e4));},BattleManager['isTurnBased']=function(){const _0x3f9128=_0x17f940;return this[_0x3f9128(0x574)]();},BattleManager['isTickBased']=function(){const _0x2d1140=_0x17f940;return!this[_0x2d1140(0x259)]();},BattleManager[_0x17f940(0x570)]=function(){const _0x673bb2=_0x17f940;return!this[_0x673bb2(0x259)]()&&!this[_0x673bb2(0x5e0)]();},BattleManager[_0x17f940(0x154)]=function(_0x86819c){const _0xc37eff=_0x17f940;$gameParty[_0xc37eff(0x154)](_0x86819c),$gameTroop[_0xc37eff(0x154)](_0x86819c);},VisuMZ[_0x17f940(0x960)]['BattleManager_startBattle']=BattleManager['startBattle'],BattleManager[_0x17f940(0x621)]=function(){const _0x19136a=_0x17f940;this[_0x19136a(0x1bd)]=![],this[_0x19136a(0x8da)]=ConfigManager['autoBattleAtStart'],this[_0x19136a(0x154)](_0x19136a(0x8c8)),VisuMZ[_0x19136a(0x960)][_0x19136a(0x25f)]['call'](this),this['processBattleCoreJS'](_0x19136a(0x8bd));},BattleManager[_0x17f940(0x4b1)]=function(_0x55a514){const _0x20524b=_0x17f940,_0x514442=VisuMZ[_0x20524b(0x960)][_0x20524b(0x32c)][_0x20524b(0xa9e)];_0x514442[_0x20524b(0x4cd)]&&VisuMZ[_0x20524b(0x960)][_0x20524b(0xa32)](_0x514442[_0x20524b(0x4cd)])&&$gameTemp['reserveCommonEvent'](_0x514442[_0x20524b(0x4cd)]);const _0x9c1f2=_0x20524b(0xadb)[_0x20524b(0x8a4)](_0x55a514);_0x514442[_0x9c1f2]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x514442[_0x9c1f2])&&$gameTemp[_0x20524b(0x2db)](_0x514442[_0x9c1f2]);},VisuMZ[_0x17f940(0x960)][_0x17f940(0xaea)]=BattleManager[_0x17f940(0x22e)],BattleManager[_0x17f940(0x22e)]=function(){const _0x5e11ec=_0x17f940;this[_0x5e11ec(0x154)](_0x5e11ec(0x864)),VisuMZ['BattleCore'][_0x5e11ec(0xaea)][_0x5e11ec(0x14e)](this),this[_0x5e11ec(0x4b1)](_0x5e11ec(0xa89));},VisuMZ[_0x17f940(0x960)][_0x17f940(0x82b)]=BattleManager[_0x17f940(0x3ac)],BattleManager[_0x17f940(0x3ac)]=function(){const _0x2dddfe=_0x17f940;this[_0x2dddfe(0x154)](_0x2dddfe(0x3c1)),VisuMZ['BattleCore']['BattleManager_processDefeat'][_0x2dddfe(0x14e)](this),this[_0x2dddfe(0x4b1)](_0x2dddfe(0x80b));},VisuMZ[_0x17f940(0x960)][_0x17f940(0x421)]=BattleManager[_0x17f940(0x1d7)],BattleManager[_0x17f940(0x1d7)]=function(_0x4ced58){const _0x1d0ae8=_0x17f940;this[_0x1d0ae8(0x1bd)]=!![],this[_0x1d0ae8(0x8da)]=![],this[_0x1d0ae8(0x154)](_0x1d0ae8(0x4a0)),VisuMZ['BattleCore'][_0x1d0ae8(0x421)]['call'](this,_0x4ced58),this['processBattleCoreJS'](_0x1d0ae8(0x399));},VisuMZ[_0x17f940(0x960)][_0x17f940(0x9ac)]=BattleManager[_0x17f940(0x840)],BattleManager['startTurn']=function(){const _0x3d26f3=_0x17f940;if(this[_0x3d26f3(0x259)]())this[_0x3d26f3(0x154)](_0x3d26f3(0x449));VisuMZ['BattleCore'][_0x3d26f3(0x9ac)][_0x3d26f3(0x14e)](this);if(this[_0x3d26f3(0x259)]())this['processBattleCoreJS']('PostStartTurnJS');},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa67)]=BattleManager[_0x17f940(0x778)],BattleManager[_0x17f940(0x778)]=function(){const _0x32bb27=_0x17f940,_0x1c9714=this['_subject'][_0x32bb27(0x3d3)]();if(_0x1c9714)_0x1c9714[_0x32bb27(0x629)]('PreStartActionJS');VisuMZ['BattleCore']['BattleManager_startAction']['call'](this);if(_0x1c9714)_0x1c9714['actionBattleCoreJS'](_0x32bb27(0x361));},VisuMZ[_0x17f940(0x960)][_0x17f940(0x879)]=BattleManager[_0x17f940(0x7e6)],BattleManager[_0x17f940(0x7e6)]=function(){const _0x5068d7=_0x17f940,_0x7da032=this['_action'];_0x7da032&&_0x7da032[_0x5068d7(0x629)]('PreEndActionJS'),VisuMZ[_0x5068d7(0x960)][_0x5068d7(0x879)]['call'](this),_0x7da032&&_0x7da032[_0x5068d7(0x629)](_0x5068d7(0x4d2)),this[_0x5068d7(0x5dc)](this['allBattleMembers']());},BattleManager[_0x17f940(0x5dc)]=function(_0x56a04a){const _0x39b5ed=_0x17f940;for(const _0x2295b7 of _0x56a04a){if(!_0x2295b7)continue;if(!_0x2295b7[_0x39b5ed(0x4a6)]())continue;_0x2295b7[_0x39b5ed(0x4a6)]()['refreshMotion']();}},BattleManager['updateAction']=function(){const _0x36334e=_0x17f940;!this[_0x36334e(0x8ba)][_0x36334e(0x329)]()&&(_0x36334e(0x3b1)==='bHFmh'?_0x4fbb71=!_0x5d6eff:this[_0x36334e(0x7e6)]());},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x3cb)]=function(){const _0x3880e4=_0x17f940;this['clearResult']();if(Imported[_0x3880e4(0x4b9)]){if(_0x3880e4(0xb01)!==_0x3880e4(0xae0)){const _0x2e46d8=VisuMZ[_0x3880e4(0x85e)][_0x3880e4(0x32c)]['States'];_0x2e46d8&&_0x2e46d8[_0x3880e4(0x172)]===![]&&this['removeStatesAuto'](0x1);}else return this[_0x3880e4(0x1ed)]||0x0;}else this[_0x3880e4(0x6a9)](0x1);this[_0x3880e4(0x793)]();},BattleManager[_0x17f940(0x7ae)]=function(){const _0x1383c0=_0x17f940;this['_escapeRatio']=VisuMZ['BattleCore']['Settings'][_0x1383c0(0xa9e)][_0x1383c0(0x3d0)][_0x1383c0(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x8c6)]=BattleManager[_0x17f940(0x16b)],BattleManager[_0x17f940(0x16b)]=function(){const _0x581b17=_0x17f940;this[_0x581b17(0x154)](_0x581b17(0xb17)),BattleManager[_0x581b17(0x4ab)][_0x581b17(0x49c)](),VisuMZ[_0x581b17(0x960)][_0x581b17(0x8c6)]['call'](this),this['processPostBattleCommonEvents'](_0x581b17(0x478));},VisuMZ[_0x17f940(0x960)][_0x17f940(0x557)]=BattleManager['onEscapeFailure'],BattleManager[_0x17f940(0x2dd)]=function(){const _0xcef506=_0x17f940;this[_0xcef506(0x154)]('EscapeFailureJS');const _0x7fdf63=this[_0xcef506(0x3f5)];VisuMZ['BattleCore']['BattleManager_onEscapeFailure'][_0xcef506(0x14e)](this),this[_0xcef506(0x3f5)]=_0x7fdf63+VisuMZ['BattleCore'][_0xcef506(0x32c)][_0xcef506(0xa9e)][_0xcef506(0x886)]['call'](this),this[_0xcef506(0x4b1)](_0xcef506(0x899));},BattleManager[_0x17f940(0x8a5)]=function(){const _0x24a8d0=_0x17f940;let _0x4e32ee=![];if(this[_0x24a8d0(0x335)]()){if(_0x24a8d0(0x1ea)==='WDDpN')_0x2369d6[_0x24a8d0(0x960)]['Game_Battler_clearDamagePopup']['call'](this),this[_0x24a8d0(0xb02)]=[];else for(const _0x307242 of $gameTroop[_0x24a8d0(0x3d2)]()){this[_0x24a8d0(0x8ba)][_0x24a8d0(0x5e8)](_0x24a8d0(0xa81),TextManager[_0x24a8d0(0x7bd)]['format'](_0x307242)),this['_logWindow'][_0x24a8d0(0x5e8)](_0x24a8d0(0x3c3)),_0x4e32ee=!![];}}if(this['_preemptive'])this[_0x24a8d0(0x8ba)]['push']('addText',TextManager[_0x24a8d0(0x975)][_0x24a8d0(0x8a4)]($gameParty[_0x24a8d0(0x8d0)]())),this['_logWindow'][_0x24a8d0(0x5e8)](_0x24a8d0(0x3c3));else this[_0x24a8d0(0xafc)]&&('NTWLw'!=='NTWLw'?this[_0x24a8d0(0x917)]['addChild'](_0x12e33d):(this[_0x24a8d0(0x8ba)]['push'](_0x24a8d0(0xa81),TextManager[_0x24a8d0(0x3bd)][_0x24a8d0(0x8a4)]($gameParty[_0x24a8d0(0x8d0)]())),this[_0x24a8d0(0x8ba)][_0x24a8d0(0x5e8)](_0x24a8d0(0x3c3))));_0x4e32ee&&(this[_0x24a8d0(0x8ba)]['push'](_0x24a8d0(0x3c3)),this[_0x24a8d0(0x8ba)][_0x24a8d0(0x5e8)]('clear')),this[_0x24a8d0(0x7ca)]()&&this[_0x24a8d0(0x113)]()&&(this[_0x24a8d0(0x970)]=![]);},BattleManager[_0x17f940(0x335)]=function(){const _0x4df550=_0x17f940;if(BattleManager[_0x4df550(0x8da)])return![];return VisuMZ['BattleCore'][_0x4df550(0x32c)]['Enemy'][_0x4df550(0xaaa)];},VisuMZ[_0x17f940(0x960)]['BattleManager_startInput']=BattleManager[_0x17f940(0xa8e)],BattleManager[_0x17f940(0xa8e)]=function(){const _0x337b8e=_0x17f940;VisuMZ[_0x337b8e(0x960)][_0x337b8e(0x719)][_0x337b8e(0x14e)](this),this['isDTB']()&&this[_0x337b8e(0x113)]()&&!this[_0x337b8e(0xafc)]&&$gameParty[_0x337b8e(0x411)]()&&this[_0x337b8e(0x83a)]();},BattleManager[_0x17f940(0x113)]=function(){const _0x192a35=_0x17f940;return VisuMZ[_0x192a35(0x960)]['Settings'][_0x192a35(0x6e8)][_0x192a35(0xb20)];},BattleManager[_0x17f940(0x32d)]=function(){const _0x71ae0b=_0x17f940;this[_0x71ae0b(0x510)]()&&this['selectNextCommand']();},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa01)]=Scene_Battle[_0x17f940(0x25b)]['startActorCommandSelection'],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x19d)]=function(){const _0x1bf13f=_0x17f940;VisuMZ[_0x1bf13f(0x960)][_0x1bf13f(0xa01)][_0x1bf13f(0x14e)](this),BattleManager[_0x1bf13f(0x7ca)]()&&BattleManager[_0x1bf13f(0x970)]&&(BattleManager[_0x1bf13f(0x970)]=![],this['actorCommandCancelTPB']());},BattleManager['invokeMagicReflection']=function(_0x5c1f7e,_0x4432d1){const _0x4a0244=_0x17f940;this[_0x4a0244(0x658)][_0x4a0244(0x38c)]=_0x4432d1,this['_logWindow']['displayReflection'](_0x4432d1),this[_0x4a0244(0x8ba)][_0x4a0244(0xa31)](_0x5c1f7e,this[_0x4a0244(0x658)]),this[_0x4a0244(0x658)][_0x4a0244(0x475)](_0x5c1f7e),this[_0x4a0244(0x8ba)][_0x4a0244(0x7a0)](_0x5c1f7e,_0x5c1f7e);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x344)]=BattleManager['makeActionOrders'],BattleManager[_0x17f940(0x509)]=function(){const _0x1523d2=_0x17f940;VisuMZ['BattleCore'][_0x1523d2(0x344)][_0x1523d2(0x14e)](this),this[_0x1523d2(0xa53)]=this[_0x1523d2(0xa53)][_0x1523d2(0x427)](_0x495573=>_0x495573&&_0x495573[_0x1523d2(0x67d)]());},VisuMZ[_0x17f940(0x960)][_0x17f940(0xaa8)]=BattleManager[_0x17f940(0x95c)],BattleManager['updatePhase']=function(_0x51484b){const _0x2ac1e7=_0x17f940;if(this['_phase']==='custom'){if(_0x2ac1e7(0x6eb)===_0x2ac1e7(0xae9)){return _0x5658a9[_0x2ac1e7(0x960)][_0x2ac1e7(0x95e)][_0x2ac1e7(0x14e)](this);;}else this[_0x2ac1e7(0x201)]();}else this[_0x2ac1e7(0x75d)]===_0x2ac1e7(0x6ec)?this[_0x2ac1e7(0x2f4)]():VisuMZ['BattleCore'][_0x2ac1e7(0xaa8)][_0x2ac1e7(0x14e)](this,_0x51484b);},BattleManager[_0x17f940(0x4d7)]=function(){const _0x3c8132=_0x17f940;this['_allTargets']=this['_targets'][_0x3c8132(0x10b)](0x0),this[_0x3c8132(0x933)]=0x0,this[_0x3c8132(0x2e4)]=this['_allTargets'][0x0]||null,this['_phase']=_0x3c8132(0x94b);},BattleManager[_0x17f940(0x201)]=function(){const _0x56814d=_0x17f940;!this['updateEventMain']()&&!this['_logWindow'][_0x56814d(0x329)]()&&(this[_0x56814d(0x75d)]=_0x56814d(0x927));},BattleManager[_0x17f940(0x6ec)]=function(_0x1f2e85){const _0x145b9f=_0x17f940;this[_0x145b9f(0xa53)]['remove'](_0x1f2e85);if(_0x1f2e85===this['_subject'])return;const _0x1f9ad1=JsonEx[_0x145b9f(0xa38)](_0x1f2e85[_0x145b9f(0x3d3)]());this[_0x145b9f(0x7f7)][_0x145b9f(0x5e8)]([_0x1f2e85,_0x1f9ad1]);},BattleManager[_0x17f940(0xad8)]=function(){},BattleManager[_0x17f940(0x89d)]=function(){const _0x2b8ee0=_0x17f940;if(this[_0x2b8ee0(0x7ca)]())this[_0x2b8ee0(0x75d)]=_0x2b8ee0(0x533);else this[_0x2b8ee0(0x7f7)][_0x2b8ee0(0x702)]>0x0?this[_0x2b8ee0(0x75d)]=_0x2b8ee0(0x533):this[_0x2b8ee0(0xa8e)]();},BattleManager[_0x17f940(0x15d)]=function(){const _0x7b5a00=_0x17f940,_0x3f832d=this['_subject'];_0x3f832d&&this[_0x7b5a00(0x7ca)]()&&_0x3f832d[_0x7b5a00(0x929)](_0x7b5a00(0x40f));for(;;){const _0x3c7e2d=this[_0x7b5a00(0x686)]();if(!_0x3c7e2d)return null;if(_0x3c7e2d[_0x7b5a00(0x3f9)]()&&_0x3c7e2d['isAlive']())return _0x3c7e2d;}},BattleManager['getNextSubjectFromPool']=function(){const _0x5dd595=_0x17f940;if(this[_0x5dd595(0x7f7)]['length']>0x0){if(_0x5dd595(0x3f2)!==_0x5dd595(0x3f2))return this[_0x5dd595(0xaed)][_0x5dd595(0x789)]===0x0&&this[_0x5dd595(0xaed)]['_offsetY']===0x0;else{const _0x29ef63=this[_0x5dd595(0x7f7)][_0x5dd595(0x4d1)](),_0x2b170d=_0x29ef63[0x0];return _0x2b170d[_0x5dd595(0x39b)]=_0x2b170d['_actions']||[],_0x2b170d['_actions'][0x0]=_0x29ef63[0x1],_0x2b170d;}}else{if(_0x5dd595(0x3ae)!==_0x5dd595(0x2b2))return this[_0x5dd595(0xa53)]['shift']();else{const _0x32223a=/<BYPASS DAMAGE CAP>/i;if(this['item']()['note'][_0x5dd595(0x413)](_0x32223a))return!![];if(this[_0x5dd595(0xaa6)]()['traitObjects']()[_0x5dd595(0xa13)](_0x2ef7c8=>_0x2ef7c8&&_0x2ef7c8['note'][_0x5dd595(0x413)](_0x32223a)))return!![];return!_0x5f2fcc['BattleCore'][_0x5dd595(0x32c)]['Damage'][_0x5dd595(0x38e)];}}},VisuMZ['BattleCore'][_0x17f940(0x2fa)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0x6ec)],Game_Battler[_0x17f940(0x25b)][_0x17f940(0x6ec)]=function(_0x589c6b,_0x1ef3e1){const _0x327b66=_0x17f940;VisuMZ[_0x327b66(0x960)][_0x327b66(0x2fa)][_0x327b66(0x14e)](this,_0x589c6b,_0x1ef3e1),this[_0x327b66(0x39b)][this[_0x327b66(0x39b)]['length']-0x1]['_forceAction']=!![];},Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x41c)]=function(_0x4f618c){const _0x42eb8=_0x17f940;return this[_0x42eb8(0xa37)](_0x4f618c[0x0],_0x4f618c[0x1],_0x20c2dc=>{const _0x344dd3=_0x42eb8;if(!_0x20c2dc[_0x344dd3(0x556)]()){if('GCyiY'!==_0x344dd3(0x122))_0x20c2dc['forceAction'](_0x4f618c[0x2],_0x4f618c[0x3]),BattleManager[_0x344dd3(0x6ec)](_0x20c2dc);else{if(!_0x2ab2c4['BattleCore'][_0x344dd3(0x32c)][_0x344dd3(0x5ba)][_0x344dd3(0x8ad)])return;const _0x13be83=_0x418090[_0x344dd3(0x627)],_0x2cba3a=_0x344dd3(0x627);this['addCommand'](_0x13be83,_0x2cba3a);}}}),!![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0xac0)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0xa49)],Game_Battler[_0x17f940(0x25b)][_0x17f940(0xa49)]=function(){const _0x3ac506=_0x17f940;VisuMZ['BattleCore']['Game_Battler_makeSpeed']['call'](this);if(this[_0x3ac506(0x39b)]['length']<=0x0){if(_0x3ac506(0x81b)===_0x3ac506(0x81b))this['_speed']=Number[_0x3ac506(0x1b3)];else return this[_0x3ac506(0x86e)]();}},VisuMZ[_0x17f940(0x960)][_0x17f940(0x52e)]=BattleManager['selectNextCommand'],BattleManager[_0x17f940(0x83a)]=function(){const _0x1c8a09=_0x17f940;this['isTpb']()?'ZjsPs'!=='JjBNk'?this[_0x1c8a09(0x6c8)]():this[_0x1c8a09(0x72b)]=(this[_0x1c8a09(0x72b)]+0x1)%0x4:VisuMZ[_0x1c8a09(0x960)][_0x1c8a09(0x52e)][_0x1c8a09(0x14e)](this);},BattleManager[_0x17f940(0x6c8)]=function(){const _0x31ab71=_0x17f940;if(this['_currentActor']){if(this['_currentActor'][_0x31ab71(0x83a)]())return;this['finishActorInput'](),this[_0x31ab71(0x6d3)](),!this[_0x31ab71(0x128)]&&!this[_0x31ab71(0x3e8)]&&SceneManager['_scene']['updateBattleProcess']();}else{if(!this['_subject']){if(_0x31ab71(0x2b9)===_0x31ab71(0x515)){if(!this['_battler'][_0x31ab71(0x73a)]())return;const _0x3c8779=_0x322739['BattleCore'][_0x31ab71(0x32c)][_0x31ab71(0x176)],_0x57168e=new _0x36eebe();_0x57168e[_0x31ab71(0x586)]=_0x3c8779['PopupDuration'],this[_0x31ab71(0x195)](_0x57168e),_0x57168e[_0x31ab71(0x898)](_0x5444eb,_0x55a5df,_0x5c7990),this[_0x31ab71(0x13e)](_0x57168e);}else this[_0x31ab71(0x8f1)]();}}},BattleManager['checkTpbInputClose']=function(){const _0x3ccca6=_0x17f940;if(!this[_0x3ccca6(0x510)]()||this[_0x3ccca6(0xa05)]()){if(this[_0x3ccca6(0x8cb)]){if(!$gameParty[_0x3ccca6(0x550)]()['includes'](this[_0x3ccca6(0x8cb)])){if(_0x3ccca6(0x88b)===_0x3ccca6(0x2ab))return this[_0x3ccca6(0x901)]();else this[_0x3ccca6(0x8cb)]=null;}}!this[_0x3ccca6(0x8cb)]?_0x3ccca6(0x1a2)===_0x3ccca6(0x910)?this[_0x3ccca6(0xa83)]()?this['performTpbActiveCheckSwitch']():this[_0x3ccca6(0x519)]():(this[_0x3ccca6(0x4b2)](),this[_0x3ccca6(0x3e8)]=null,this[_0x3ccca6(0x124)]=![]):_0x3ccca6(0x51d)==='TmEyz'?(_0x306f6f['BattleCore'][_0x3ccca6(0x6df)]['call'](this),this['performFlinch']()):this[_0x3ccca6(0x5a4)]();}},BattleManager['revertTpbCachedActor']=function(){const _0x4d9c6a=_0x17f940;!$gameParty['battleMembers']()[_0x4d9c6a(0x72d)](this[_0x4d9c6a(0x8cb)])&&(this['_tpbSceneChangeCacheActor']=null),this[_0x4d9c6a(0x8cb)]?(this['_currentActor']=this[_0x4d9c6a(0x8cb)],this[_0x4d9c6a(0x3e8)][_0x4d9c6a(0x46b)]=_0x4d9c6a(0x77a),this['_inputting']=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0x4d9c6a(0x4b2)](),this['_currentActor']=null,this[_0x4d9c6a(0x124)]=![]);},VisuMZ[_0x17f940(0x960)]['BattleManager_isTpbMainPhase']=BattleManager[_0x17f940(0x240)],BattleManager['isTpbMainPhase']=function(){const _0x742bb3=_0x17f940;if(this[_0x742bb3(0x75d)]===_0x742bb3(0x94b)){if(_0x742bb3(0x26d)!=='BPlwO'){if(this[_0x742bb3(0x371)]()[_0x742bb3(0x981)][_0x742bb3(0x413)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x5ea87c(_0x1d4005['$1']);else{if(this[_0x742bb3(0x371)]()[_0x742bb3(0x981)][_0x742bb3(0x413)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x57fda0(_0xef001d['$2']);}return 0x0;}else return this[_0x742bb3(0x926)]();}else{if(_0x742bb3(0xadd)!=='Dyije')this[_0x742bb3(0xac4)]=0x0;else return VisuMZ[_0x742bb3(0x960)][_0x742bb3(0x659)][_0x742bb3(0x14e)](this);}},BattleManager[_0x17f940(0x926)]=function(){const _0x350c14=_0x17f940;return this[_0x350c14(0xa27)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x7e7)]=BattleManager[_0x17f940(0x4b2)],BattleManager[_0x17f940(0x4b2)]=function(){const _0x560e81=_0x17f940;this[_0x560e81(0x7ca)]()&&this[_0x560e81(0x75d)]==='battleEnd'&&(this['_currentActor']=null),VisuMZ['BattleCore'][_0x560e81(0x7e7)]['call'](this);},VisuMZ['BattleCore']['BattleManager_inputtingAction']=BattleManager[_0x17f940(0x7c1)],BattleManager[_0x17f940(0x7c1)]=function(){const _0x97f186=_0x17f940,_0x2885b6=this[_0x97f186(0x3e8)];if(_0x2885b6&&!_0x2885b6[_0x97f186(0x7c1)]()){if(_0x97f186(0xa9a)!==_0x97f186(0x5e4)){const _0x23ed59=_0x2885b6['_actionInputIndex'];_0x2885b6[_0x97f186(0x39b)][_0x23ed59]=new Game_Action(_0x2885b6);}else{const _0x5b3c96=this['_commandNameWindow'],_0x30df7d=_0x5232f6[_0x97f186(0x610)](),_0x2c7dc0=_0x33cce2['x']+_0x70fac5[_0x97f186(0x143)](_0xee8c56[_0x97f186(0x67f)]/0x2)+_0x30df7d;_0x5b3c96['x']=_0x5b3c96[_0x97f186(0x67f)]/-0x2+_0x2c7dc0,_0x5b3c96['y']=_0x5710cf[_0x97f186(0x143)](_0x117402[_0x97f186(0x87c)]/0x2);}}return VisuMZ[_0x97f186(0x960)][_0x97f186(0x86d)][_0x97f186(0x14e)](this);},SceneManager['isSceneBattle']=function(){const _0x5a7f3e=_0x17f940;return this['_scene']&&this[_0x5a7f3e(0x712)]['constructor']===Scene_Battle;},SceneManager[_0x17f940(0x3ed)]=function(){const _0x3628a1=_0x17f940;return Spriteset_Battle[_0x3628a1(0x25b)][_0x3628a1(0x650)]();},SceneManager[_0x17f940(0x1dd)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager[_0x17f940(0x8c0)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x397)]=Game_Temp[_0x17f940(0x25b)][_0x17f940(0x54c)],Game_Temp[_0x17f940(0x25b)][_0x17f940(0x54c)]=function(_0x136955,_0x57ad4e,_0x6d7841){const _0x433d5c=_0x17f940;_0x136955=_0x136955[_0x433d5c(0x427)]((_0x17cb8b,_0x50ec81,_0x1c0717)=>_0x1c0717[_0x433d5c(0x74c)](_0x17cb8b)===_0x50ec81),SceneManager[_0x433d5c(0x2ac)]()&&SceneManager[_0x433d5c(0x3ed)]()&&(_0x6d7841=!_0x6d7841),VisuMZ[_0x433d5c(0x960)][_0x433d5c(0x397)][_0x433d5c(0x14e)](this,_0x136955,_0x57ad4e,_0x6d7841),SceneManager[_0x433d5c(0x2ac)]()&&BattleManager[_0x433d5c(0x4ab)]['processAnimationRequests']();},Game_Temp[_0x17f940(0x25b)]['setLastPluginCommandInterpreter']=function(_0xb2921e){const _0xba02=_0x17f940;this[_0xba02(0x599)]=_0xb2921e;},Game_Temp['prototype']['getLastPluginCommandInterpreter']=function(){const _0x32d2b1=_0x17f940;return this[_0x32d2b1(0x599)];},Game_Temp[_0x17f940(0x25b)][_0x17f940(0x7ef)]=function(){const _0x490a3b=_0x17f940;this[_0x490a3b(0x9ab)]=undefined;},Game_Temp[_0x17f940(0x25b)][_0x17f940(0xa3a)]=function(_0x4946ea){const _0x1642c7=_0x17f940;$gameMap&&$dataMap&&$dataMap[_0x1642c7(0x981)]&&this[_0x1642c7(0x22b)]($dataMap[_0x1642c7(0x981)]);const _0x146271=$dataTroops[_0x4946ea];if(_0x146271){let _0x523fc6=DataManager[_0x1642c7(0x2ec)](_0x146271['id']);this[_0x1642c7(0x22b)](_0x523fc6);}},Game_Temp[_0x17f940(0x25b)][_0x17f940(0x22b)]=function(_0x532cc6){const _0x370586=_0x17f940;if(!_0x532cc6)return;if(_0x532cc6[_0x370586(0x413)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x370586(0x9bd)!==_0x370586(0x77e)){const _0x50bd5e=String(RegExp['$1']);if(_0x50bd5e[_0x370586(0x413)](/DEFAULT/i))this['_forcedBattleLayout']=_0x370586(0x387);else{if(_0x50bd5e[_0x370586(0x413)](/LIST/i))this[_0x370586(0x9ab)]=_0x370586(0x5a8);else{if(_0x50bd5e['match'](/XP/i))this[_0x370586(0x9ab)]='xp';else{if(_0x50bd5e[_0x370586(0x413)](/PORTRAIT/i))this[_0x370586(0x9ab)]=_0x370586(0xaa2);else{if(_0x50bd5e[_0x370586(0x413)](/BORDER/i))'oJCCF'!==_0x370586(0x90b)?this[_0x370586(0x384)]():this[_0x370586(0x9ab)]=_0x370586(0x735);else _0x50bd5e['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x370586(0x7d6)]?this[_0x370586(0x9ab)]=_0x370586(0x409):this[_0x370586(0x9ab)]='default');}}}}}else{const _0x4cce08=_0x314d37[_0x31af10];if(!_0x4cce08)return![];if(_0x4cce08['list'][_0x370586(0x702)]<=0x1)return![];return!![];}}},VisuMZ['BattleCore'][_0x17f940(0x3b4)]=Game_System[_0x17f940(0x25b)][_0x17f940(0x96b)],Game_System[_0x17f940(0x25b)]['initialize']=function(){const _0x596ec2=_0x17f940;VisuMZ['BattleCore'][_0x596ec2(0x3b4)]['call'](this),this[_0x596ec2(0x1fa)]();},Game_System[_0x17f940(0x25b)][_0x17f940(0x1fa)]=function(){const _0xee3ce5=_0x17f940;this['_defeatedEnemies']=this[_0xee3ce5(0x502)]||[];},Game_System['prototype']['getDefeatedEnemies']=function(){const _0x3c4a93=_0x17f940;if(this[_0x3c4a93(0x502)]===undefined)this['initBattleCore']();return this[_0x3c4a93(0x502)];},Game_System[_0x17f940(0x25b)][_0x17f940(0x6a4)]=function(_0x40d846){const _0x34fac9=_0x17f940;if(this[_0x34fac9(0x502)]===undefined)this[_0x34fac9(0x1fa)]();if(!_0x40d846)return;if(this['_defeatedEnemies'][_0x34fac9(0x72d)](_0x40d846))return;this[_0x34fac9(0x502)]['push'](_0x40d846),this[_0x34fac9(0x502)][_0x34fac9(0x9d9)]((_0x1c1a78,_0xd27461)=>_0x1c1a78-_0xd27461);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x97c)]=Game_BattlerBase['prototype'][_0x17f940(0x561)],Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x561)]=function(_0x2b62b4){const _0x11019d=_0x17f940,_0x1a095e=this['isAlive'](),_0x5ba9a6=this[_0x11019d(0x6ee)]();VisuMZ[_0x11019d(0x960)][_0x11019d(0x97c)][_0x11019d(0x14e)](this,_0x2b62b4);if(this[_0x11019d(0xae4)]()&&_0x1a095e&&this['isDead']()){if(_0x11019d(0x77f)!==_0x11019d(0x857))this[_0x11019d(0x988)]=!this[_0x11019d(0x4ff)](),$gameSystem[_0x11019d(0x6a4)](this[_0x11019d(0x72e)]());else{const _0x4c279d=this[_0x11019d(0x16e)]();_0x2f75a6=_0x4c279d[_0x47e97e]?_0x4c279d[_0x2e758d][_0x11019d(0x555)]:0x0;}}SceneManager[_0x11019d(0x2ac)]()&&_0x5ba9a6!==this[_0x11019d(0x6ee)]()&&(this['battler']()&&('glPdT'!==_0x11019d(0x678)?this[_0x11019d(0x4a6)]()[_0x11019d(0x1e1)]():_0x264d3c[_0x11019d(0x368)]?this['battleCorePreBattleCommonEvent']():_0x444021[_0x11019d(0x960)][_0x11019d(0x811)][_0x11019d(0x14e)](this)));},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x4ff)]=function(){const _0x531e90=_0x17f940;return $gameSystem[_0x531e90(0x347)]()['includes'](this['_enemyId']);},VisuMZ['BattleCore']['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x69a)],Game_BattlerBase['prototype'][_0x17f940(0x69a)]=function(_0x4659ec){const _0x21d9bb=_0x17f940;VisuMZ[_0x21d9bb(0x960)][_0x21d9bb(0x62c)][_0x21d9bb(0x14e)](this,_0x4659ec),this['isEnemy']()&&_0x4659ec===this[_0x21d9bb(0x57b)]()&&this[_0x21d9bb(0x3f0)]()&&(_0x21d9bb(0x2e2)==='DepkJ'?this[_0x21d9bb(0x6a1)](_0x21d9bb(0x30f)):this[_0x21d9bb(0x988)]=![]),!this[_0x21d9bb(0x9dd)]&&!this[_0x21d9bb(0x876)]&&SceneManager['isSceneBattle']()&&this[_0x21d9bb(0x204)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa7d)]=Game_Action[_0x17f940(0x25b)][_0x17f940(0x84a)],Game_Action[_0x17f940(0x25b)][_0x17f940(0x84a)]=function(){const _0x4e6576=_0x17f940;VisuMZ[_0x4e6576(0x960)][_0x4e6576(0xa7d)][_0x4e6576(0x14e)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4e6576(0x2be)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4e6576(0x953)]=_0x4e6576(0x387);},Game_Action['prototype'][_0x17f940(0x239)]=function(_0x2d6fd2,_0x180250){const _0x32bd4b=_0x17f940;return VisuMZ[_0x32bd4b(0x960)]['Settings'][_0x32bd4b(0x176)]['OverallFormulaJS'][_0x32bd4b(0x14e)](this,_0x2d6fd2,_0x180250);},Game_Action[_0x17f940(0x25b)][_0x17f940(0x27d)]=function(_0x1ae520,_0x23be94){const _0x529bad=_0x17f940;return VisuMZ[_0x529bad(0x960)][_0x529bad(0x32c)][_0x529bad(0x176)]['VarianceFormulaJS'][_0x529bad(0x14e)](this,_0x1ae520,_0x23be94);},Game_Action[_0x17f940(0x25b)][_0x17f940(0xaf1)]=function(_0x4fbdba,_0x5a367d){const _0x3aff53=_0x17f940;return VisuMZ[_0x3aff53(0x960)][_0x3aff53(0x32c)][_0x3aff53(0x176)][_0x3aff53(0x516)][_0x3aff53(0x14e)](this,_0x4fbdba,_0x5a367d);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x17f940(0x25b)][_0x17f940(0x6b5)],Game_Action[_0x17f940(0x25b)][_0x17f940(0x6b5)]=function(_0x44fc4c){const _0x18093b=_0x17f940,_0x31efd=this[_0x18093b(0x32b)]()['note'];if(_0x31efd['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x31efd['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x18093b(0x3ab)!==_0x18093b(0x179))return Number(RegExp['$1'])/0x64;else _0x47b1a7[_0x18093b(0x456)](![]);}else{if('QCLRW'===_0x18093b(0x5ae)){let _0x491bd3=VisuMZ[_0x18093b(0x960)][_0x18093b(0x391)][_0x18093b(0x14e)](this,_0x44fc4c);return _0x491bd3=this[_0x18093b(0x2be)][_0x18093b(0x816)]*_0x491bd3+this[_0x18093b(0x2be)]['hitFlat'],_0x491bd3;}else{const _0x5509c7=this[_0x18093b(0xa3d)];_0x90fe2[_0x18093b(0x960)][_0x18093b(0x895)][_0x18093b(0x14e)](this,_0x56c349),this[_0x18093b(0x43f)](_0x2ec99a);if(_0x5509c7!==_0x49aaf1)this['updateShadowScale']();}}}},Game_Action['prototype'][_0x17f940(0x3df)]=function(_0x1b735c){const _0x5c6503=_0x17f940;if(!this[_0x5c6503(0x32b)]()[_0x5c6503(0x203)]['critical'])return 0x0;let _0x3454ea=VisuMZ[_0x5c6503(0x960)][_0x5c6503(0x32c)][_0x5c6503(0x176)][_0x5c6503(0x2b0)][_0x5c6503(0x14e)](this,_0x1b735c);return _0x3454ea=this['_multipliers']['criticalHitRate']*_0x3454ea+this[_0x5c6503(0x2be)][_0x5c6503(0xa73)],_0x3454ea;},Game_Action[_0x17f940(0x25b)][_0x17f940(0x977)]=function(_0x5327c3){const _0x288913=_0x17f940;return _0x5327c3=VisuMZ[_0x288913(0x960)][_0x288913(0x32c)][_0x288913(0x176)]['CriticalHitMultiplier']['call'](this,_0x5327c3),_0x5327c3=this[_0x288913(0x2be)]['criticalDmgRate']*_0x5327c3+this[_0x288913(0x2be)][_0x288913(0x62b)],_0x5327c3;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x3db)]=Game_Action[_0x17f940(0x25b)][_0x17f940(0x137)],Game_Action['prototype']['evalDamageFormula']=function(_0x2b45c3){const _0x73cbe5=_0x17f940;if(this[_0x73cbe5(0x953)]!==_0x73cbe5(0x387)){if('ZYWvb'!==_0x73cbe5(0x31e))_0x283008[_0x73cbe5(0x960)][_0x73cbe5(0x2a9)]['call'](this,_0x2ee00d);else return this[_0x73cbe5(0x2a6)](_0x2b45c3);}else return DataManager[_0x73cbe5(0x4d4)](this[_0x73cbe5(0x32b)]())==='MANUAL'?VisuMZ[_0x73cbe5(0x960)][_0x73cbe5(0x3db)][_0x73cbe5(0x14e)](this,_0x2b45c3):this[_0x73cbe5(0x2b5)](_0x2b45c3);},Game_Action['prototype'][_0x17f940(0x9cc)]=function(_0x5c66d8){this['_customDamageFormula']=_0x5c66d8;},Game_Action[_0x17f940(0x25b)]['customDamageFormula']=function(_0x5041be){const _0x54d7df=_0x17f940,_0x2d0c8b=this['item'](),_0x42414a=_0x2d0c8b['damage'][_0x54d7df(0x44a)];_0x2d0c8b[_0x54d7df(0x203)]['formula']=this[_0x54d7df(0x953)];let _0x460dbe=VisuMZ[_0x54d7df(0x960)]['Game_Action_evalDamageFormula'][_0x54d7df(0x14e)](this,_0x5041be);return _0x2d0c8b['damage'][_0x54d7df(0x44a)]=_0x42414a,_0x460dbe;},Game_Action[_0x17f940(0x25b)]['damageStyle']=function(){const _0x3b476a=_0x17f940;if(this[_0x3b476a(0x32b)]()[_0x3b476a(0x981)][_0x3b476a(0x413)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x16f90d=String(RegExp['$1'])[_0x3b476a(0x9cb)]()[_0x3b476a(0x224)]();return _0x16f90d;}return'MANUAL';},Game_Action['prototype'][_0x17f940(0x2b5)]=function(_0x4930a1){const _0x555e54=_0x17f940,_0x231ecf=DataManager[_0x555e54(0x4d4)](this[_0x555e54(0x32b)]()),_0x16dde7=VisuMZ[_0x555e54(0x221)][_0x231ecf];try{return _0x16dde7[_0x555e54(0x350)][_0x555e54(0x14e)](this,_0x4930a1);}catch(_0x3bf0fb){if('bSuGg'==='bSuGg'){if($gameTemp['isPlaytest']())console[_0x555e54(0x4bf)](_0x3bf0fb);return VisuMZ[_0x555e54(0x960)]['Game_Action_evalDamageFormula'][_0x555e54(0x14e)](this);}else _0x58aa0c=_0x2933df>=_0x14b242?_0x28e106:_0x5e7b73;}},Game_Action['prototype']['applyArmorModifiers']=function(_0x5a458c,_0x465659){const _0x59b465=_0x17f940;if(this[_0x59b465(0x11e)]())return _0x465659;const _0x5c94b5=this['subject'](),_0x2a0317=_0x5a458c;let _0x380e2f=[],_0x5ef698=[];_0x380e2f[_0x59b465(0x5e8)](this['_armorPenetration'][_0x59b465(0x982)],this[_0x59b465(0x3dd)][_0x59b465(0x181)]),_0x5ef698[_0x59b465(0x5e8)](this[_0x59b465(0x3dd)][_0x59b465(0x1e5)],this[_0x59b465(0x3dd)][_0x59b465(0x841)]);const _0x15eaa2=this[_0x59b465(0x359)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x341f6b=this[_0x59b465(0x359)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x26b641=this[_0x59b465(0x359)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1f0bcc=this[_0x59b465(0x359)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x380e2f=_0x380e2f[_0x59b465(0x872)](_0x2a0317[_0x59b465(0x112)]()['map'](_0x14d9f4=>_0x14d9f4&&_0x14d9f4[_0x59b465(0x981)][_0x59b465(0x413)](_0x15eaa2)?Number(RegExp['$1']):0x0)),_0x5ef698=_0x5ef698[_0x59b465(0x872)](_0x2a0317[_0x59b465(0x112)]()[_0x59b465(0x296)](_0x2075f6=>_0x2075f6&&_0x2075f6[_0x59b465(0x981)]['match'](_0x341f6b)?Number(RegExp['$1'])/0x64:0x0)),_0x380e2f=_0x380e2f['concat'](_0x5c94b5['traitObjects']()[_0x59b465(0x296)](_0x4e1aa6=>_0x4e1aa6&&_0x4e1aa6['note'][_0x59b465(0x413)](_0x26b641)?Number(RegExp['$1']):0x0)),_0x5ef698=_0x5ef698[_0x59b465(0x872)](_0x5c94b5[_0x59b465(0x112)]()[_0x59b465(0x296)](_0x41cf65=>_0x41cf65&&_0x41cf65['note']['match'](_0x1f0bcc)?Number(RegExp['$1'])/0x64:0x0)),this[_0x59b465(0x32b)]()[_0x59b465(0x981)][_0x59b465(0x413)](_0x26b641)&&(_0x59b465(0x50d)!=='nYlWL'?_0x380e2f[_0x59b465(0x5e8)](Number(RegExp['$1'])):this['_phase']=_0x59b465(0x533)),this['item']()[_0x59b465(0x981)][_0x59b465(0x413)](_0x1f0bcc)&&('wFfAR'!==_0x59b465(0x121)?(_0x3bde6c=_0x31dd26[_0x59b465(0x4a6)]()[_0x59b465(0x716)],_0x2017e5=_0x4b5057['battler']()[_0x59b465(0x1ac)]):_0x5ef698[_0x59b465(0x5e8)](Number(RegExp['$1']))),_0x465659=_0x380e2f[_0x59b465(0x553)]((_0x1e63bd,_0x36862f)=>_0x1e63bd-_0x36862f,_0x465659),_0x465659>0x0&&(_0x465659=_0x5ef698[_0x59b465(0x553)]((_0x3e192f,_0x31e5e7)=>_0x3e192f*(0x1-_0x31e5e7),_0x465659)),_0x465659;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x9a8)]=Game_Action[_0x17f940(0x25b)]['executeDamage'],Game_Action[_0x17f940(0x25b)][_0x17f940(0x46e)]=function(_0x131f81,_0x57d595){const _0x399d69=_0x17f940;_0x57d595=_0x57d595*this[_0x399d69(0x2be)][_0x399d69(0xa51)],_0x57d595+=this[_0x399d69(0x2be)][_0x399d69(0x14a)]*(_0x57d595>=0x0?0x1:-0x1),_0x57d595=this[_0x399d69(0x5b6)](_0x399d69(0x8fc),_0x131f81,_0x57d595,![]),_0x57d595=this[_0x399d69(0x1ec)](_0x57d595),_0x57d595=Math[_0x399d69(0x189)](_0x57d595),this[_0x399d69(0x937)]=_0x57d595,this[_0x399d69(0x340)]=this['_totalValue']||0x0,this[_0x399d69(0x340)]+=_0x57d595,VisuMZ[_0x399d69(0x960)][_0x399d69(0x9a8)][_0x399d69(0x14e)](this,_0x131f81,_0x57d595),this[_0x399d69(0x5b6)](_0x399d69(0x369),_0x131f81,_0x57d595,!![]);},Game_Action[_0x17f940(0x25b)][_0x17f940(0x1ec)]=function(_0x1b0f34){const _0x34d623=_0x17f940;if(this[_0x34d623(0x4aa)]())return _0x1b0f34;return _0x1b0f34=this[_0x34d623(0x695)](_0x1b0f34),_0x1b0f34=this[_0x34d623(0x173)](_0x1b0f34),_0x1b0f34;},Game_Action['prototype']['isBypassDamageCap']=function(){const _0x5359bb=_0x17f940,_0x34025b=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x5359bb(0x981)][_0x5359bb(0x413)](_0x34025b))return!![];if(this[_0x5359bb(0xaa6)]()[_0x5359bb(0x112)]()['some'](_0x2fd8d1=>_0x2fd8d1&&_0x2fd8d1[_0x5359bb(0x981)]['match'](_0x34025b)))return!![];return!VisuMZ[_0x5359bb(0x960)]['Settings'][_0x5359bb(0x176)][_0x5359bb(0x38e)];},Game_Action[_0x17f940(0x25b)]['applySoftDamageCap']=function(_0x3af925){const _0x1500ec=_0x17f940;if(!VisuMZ[_0x1500ec(0x960)]['Settings'][_0x1500ec(0x176)][_0x1500ec(0x743)])return _0x3af925;const _0x1b80c1=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note']['match'](_0x1b80c1))return!![];if(this[_0x1500ec(0xaa6)]()['traitObjects']()[_0x1500ec(0xa13)](_0x3aa70f=>_0x3aa70f&&_0x3aa70f[_0x1500ec(0x981)][_0x1500ec(0x413)](_0x1b80c1)))return!![];const _0x274424=_0x3af925<0x0?-0x1:0x1;_0x3af925=Math['abs'](_0x3af925);let _0x15e31d=this[_0x1500ec(0xaa6)]()['softDamageCapRate']();if(this[_0x1500ec(0x32b)]()[_0x1500ec(0x981)][_0x1500ec(0x413)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)){if(_0x1500ec(0x883)===_0x1500ec(0x20b)){if(!this[_0x1500ec(0xa3d)])return;if(!this[_0x1500ec(0x3d8)])return;const _0x50b0b2=_0x33f623[_0x1500ec(0x960)]['Settings'][_0x1500ec(0x5ba)],_0x26b769=this['_hpGaugeSprite'];_0x26b769['visible']=this[_0x1500ec(0x473)]();const _0x45bbb6=_0x50b0b2[_0x1500ec(0x4e9)],_0x5135c1=_0x50b0b2[_0x1500ec(0x99b)];_0x26b769['x']=_0x45bbb6,_0x26b769['x']+=this[_0x1500ec(0xa3d)][_0x1500ec(0x563)](),_0x26b769['y']=-this['height']+_0x5135c1,_0x26b769['y']+=this['_battler'][_0x1500ec(0x2e8)]();}else _0x15e31d+=Number(RegExp['$1'])/0x64;}_0x15e31d=_0x15e31d[_0x1500ec(0x167)](0.01,0x1);const _0x2b6f92=this[_0x1500ec(0x276)](),_0x2e4632=_0x15e31d*_0x2b6f92;if(_0x3af925>_0x2e4632&&_0x2b6f92>_0x2e4632){if(_0x1500ec(0x728)===_0x1500ec(0x3de))_0x33b7b5=_0x5825a8['max'](_0x524d39,_0x1df581);else{_0x3af925-=_0x2e4632;const _0x47966b=VisuMZ[_0x1500ec(0x960)][_0x1500ec(0x32c)][_0x1500ec(0x176)][_0x1500ec(0x942)],_0x194ac1=Math[_0x1500ec(0xb2c)](0x1-_0x3af925/((_0x2b6f92-_0x2e4632)*_0x47966b+_0x3af925),0.01);_0x3af925*=_0x194ac1,_0x3af925+=_0x2e4632;}}return _0x3af925*_0x274424;},Game_Action[_0x17f940(0x25b)][_0x17f940(0x276)]=function(){const _0x1a97b0=_0x17f940;return this[_0x1a97b0(0x32b)]()[_0x1a97b0(0x981)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x1a97b0(0xaa6)]()[_0x1a97b0(0x98d)]();},Game_Action[_0x17f940(0x25b)][_0x17f940(0x173)]=function(_0x617d65){const _0xe4d4fd=_0x17f940;let _0xb64a3a=this[_0xe4d4fd(0x276)]();return _0x617d65[_0xe4d4fd(0x167)](-_0xb64a3a,_0xb64a3a);},VisuMZ['BattleCore'][_0x17f940(0x256)]=Game_Action[_0x17f940(0x25b)]['apply'],Game_Action[_0x17f940(0x25b)][_0x17f940(0x475)]=function(_0x25dd93){const _0x52b11f=_0x17f940;this[_0x52b11f(0x5b6)](_0x52b11f(0x966),_0x25dd93,0x0,!![]),VisuMZ[_0x52b11f(0x960)][_0x52b11f(0x256)][_0x52b11f(0x14e)](this,_0x25dd93),this[_0x52b11f(0x5b6)](_0x52b11f(0x9db),_0x25dd93,this[_0x52b11f(0x937)]||0x0,!![]),this[_0x52b11f(0x13d)](_0x25dd93);},Game_Action['prototype'][_0x17f940(0x5b6)]=function(_0x36dc2e,_0x448987,_0x7a3ae9,_0x5662cd){const _0x418843=_0x17f940;if(this[_0x418843(0x876)]||this[_0x418843(0x9dd)])return;_0x7a3ae9=_0x7a3ae9||0x0;const _0x20c1b7=_0x7a3ae9,_0x103910=VisuMZ[_0x418843(0x960)][_0x418843(0x32c)][_0x418843(0xa9e)],_0x5577af=_0x36dc2e[_0x418843(0x8a4)]('');if(_0x103910[_0x5577af]){if(_0x418843(0x407)===_0x418843(0x8d2))this['_growX']=this['applyEasing'](this['_growX'],this[_0x418843(0xae8)],_0x540caf,_0x3ccff3,_0xedae6a),this['_growY']=this[_0x418843(0x2f7)](this['_growY'],this[_0x418843(0x280)],_0x555421,_0x122b71,_0xcc3999);else{_0x7a3ae9=_0x103910[_0x5577af][_0x418843(0x14e)](this,_0x7a3ae9,_0x448987);if(_0x5662cd)_0x7a3ae9=_0x20c1b7;}}let _0x4e87b4=VisuMZ[_0x418843(0x960)][_0x418843(0x8a9)](this[_0x418843(0x32b)](),_0x36dc2e[_0x418843(0x8a4)](''));if(VisuMZ[_0x418843(0x960)]['JS'][_0x4e87b4]){_0x7a3ae9=VisuMZ[_0x418843(0x960)]['JS'][_0x4e87b4][_0x418843(0x14e)](this,this[_0x418843(0xaa6)](),_0x448987,this[_0x418843(0x32b)](),_0x7a3ae9);if(_0x5662cd)_0x7a3ae9=_0x20c1b7;}for(const _0x13224f of this['subject']()[_0x418843(0x112)]()){if('KZPvU'==='KZPvU'){if(!_0x13224f)continue;_0x4e87b4=VisuMZ[_0x418843(0x960)][_0x418843(0x8a9)](_0x13224f,_0x36dc2e[_0x418843(0x8a4)](_0x418843(0x474)));if(VisuMZ[_0x418843(0x960)]['JS'][_0x4e87b4]){_0x7a3ae9=VisuMZ['BattleCore']['JS'][_0x4e87b4]['call'](this,this['subject'](),_0x448987,_0x13224f,_0x7a3ae9);if(_0x5662cd)_0x7a3ae9=_0x20c1b7;}}else this[_0x418843(0x71d)]=this['_targetGrowX'],this[_0x418843(0x5bb)]=this[_0x418843(0x280)];}for(const _0x37b181 of _0x448987[_0x418843(0x112)]()){if(!_0x37b181)continue;_0x4e87b4=VisuMZ[_0x418843(0x960)][_0x418843(0x8a9)](_0x37b181,_0x36dc2e[_0x418843(0x8a4)](_0x418843(0xa76)));if(VisuMZ[_0x418843(0x960)]['JS'][_0x4e87b4]){if(_0x418843(0x902)!=='vyReH'){_0x7a3ae9=VisuMZ[_0x418843(0x960)]['JS'][_0x4e87b4][_0x418843(0x14e)](this,this['subject'](),_0x448987,_0x37b181,_0x7a3ae9);if(_0x5662cd)_0x7a3ae9=_0x20c1b7;}else _0x30a3f4[_0x418843(0x25b)][_0x418843(0xa79)][_0x418843(0x14e)](this),this[_0x418843(0x93e)]();}}return _0x7a3ae9;},Game_Action[_0x17f940(0x25b)][_0x17f940(0x629)]=function(_0x153a22){const _0x583ea7=_0x17f940,_0x51eb44=this[_0x583ea7(0x340)]||0x0,_0x49572b=VisuMZ[_0x583ea7(0x960)]['Settings'][_0x583ea7(0xa9e)],_0x54e659=_0x153a22['format']('');_0x49572b[_0x54e659]&&_0x49572b[_0x54e659][_0x583ea7(0x14e)](this,_0x51eb44);let _0x3b30c8=VisuMZ[_0x583ea7(0x960)]['createKeyJS'](this['item'](),_0x153a22);if(VisuMZ['BattleCore']['JS'][_0x3b30c8]){if(_0x583ea7(0x7c6)===_0x583ea7(0x90e)){if(_0x36d06e[_0x583ea7(0x8da)]&&!_0x210790['autoBattleUseSkills'])return this[_0x583ea7(0x6b0)]();else{return _0x5319a9[_0x583ea7(0x960)]['Game_Actor_makeActionList'][_0x583ea7(0x14e)](this);;}}else VisuMZ['BattleCore']['JS'][_0x3b30c8][_0x583ea7(0x14e)](this,this[_0x583ea7(0xaa6)](),this['subject'](),this['item'](),_0x51eb44);}for(const _0x25ed81 of this['subject']()['traitObjects']()){if('WjvEj'!==_0x583ea7(0xa3f))return _0x3d694d[_0x583ea7(0x708)];else{if(!_0x25ed81)continue;_0x3b30c8=VisuMZ['BattleCore'][_0x583ea7(0x8a9)](_0x25ed81,_0x153a22),VisuMZ[_0x583ea7(0x960)]['JS'][_0x3b30c8]&&VisuMZ[_0x583ea7(0x960)]['JS'][_0x3b30c8]['call'](this,this[_0x583ea7(0xaa6)](),this[_0x583ea7(0xaa6)](),_0x25ed81,_0x51eb44);}}},Game_Action[_0x17f940(0x25b)]['speed']=function(){const _0x116ec5=_0x17f940;return VisuMZ[_0x116ec5(0x960)][_0x116ec5(0x32c)][_0x116ec5(0xa9e)][_0x116ec5(0x210)][_0x116ec5(0x14e)](this);},Game_Action[_0x17f940(0x25b)][_0x17f940(0xaef)]=function(){const _0x4299a1=_0x17f940;return VisuMZ[_0x4299a1(0x960)][_0x4299a1(0x32c)][_0x4299a1(0xa9e)][_0x4299a1(0x1f5)];},Game_Action[_0x17f940(0x25b)][_0x17f940(0x696)]=function(){const _0x1ac71e=_0x17f940;return this[_0x1ac71e(0x32b)]()['note'][_0x1ac71e(0x413)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x17f940(0x33d)]=function(){const _0x4f1c3c=_0x17f940;if(!this[_0x4f1c3c(0xaf8)]&&this[_0x4f1c3c(0xaa6)]()[_0x4f1c3c(0x6c3)]())return![];if(this[_0x4f1c3c(0x696)]())return!![];return typeof this['item']()['scope']==='string';},VisuMZ[_0x17f940(0x960)]['Game_Action_isForOpponent']=Game_Action['prototype'][_0x17f940(0xabb)],Game_Action[_0x17f940(0x25b)][_0x17f940(0xabb)]=function(){const _0x1bb385=_0x17f940;return this[_0x1bb385(0x33d)]()&&!this[_0x1bb385(0x696)]()?this[_0x1bb385(0x86e)]():VisuMZ['BattleCore'][_0x1bb385(0x8c5)][_0x1bb385(0x14e)](this);},Game_Action[_0x17f940(0x25b)][_0x17f940(0x86e)]=function(){const _0x3a791d=_0x17f940,_0x4711f6=this['item']()[_0x3a791d(0x5d4)];return _0x4711f6[_0x3a791d(0x413)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x6dc)]=Game_Action[_0x17f940(0x25b)][_0x17f940(0xa8a)],Game_Action[_0x17f940(0x25b)]['isForFriend']=function(){const _0x22cccd=_0x17f940;if(this[_0x22cccd(0x33d)]()&&!this[_0x22cccd(0x696)]())return this[_0x22cccd(0x4e8)]();else{if(_0x22cccd(0x581)!==_0x22cccd(0x7e1))return VisuMZ[_0x22cccd(0x960)][_0x22cccd(0x6dc)]['call'](this);else{const _0x380f52=_0x3cf34e['_actionInputIndex'];_0x392bcc[_0x22cccd(0x39b)][_0x380f52]=new _0x156f89(_0x30523a);}}},Game_Action[_0x17f940(0x25b)]['isForFriendBattleCore']=function(){const _0x3b44ba=_0x17f940,_0x42d0fb=this[_0x3b44ba(0x32b)]()[_0x3b44ba(0x5d4)];return _0x42d0fb[_0x3b44ba(0x413)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore'][_0x17f940(0x8fa)]=Game_Action[_0x17f940(0x25b)][_0x17f940(0x809)],Game_Action[_0x17f940(0x25b)][_0x17f940(0x809)]=function(){const _0x5a270e=_0x17f940;return this[_0x5a270e(0x33d)]()&&!this['isCustomBattleScope']()?this[_0x5a270e(0x585)]():VisuMZ[_0x5a270e(0x960)]['Game_Action_isForRandom']['call'](this);},Game_Action[_0x17f940(0x25b)][_0x17f940(0x585)]=function(){const _0x5bf9bf=_0x17f940,_0x167d7d=this[_0x5bf9bf(0x32b)]()[_0x5bf9bf(0x5d4)];return _0x167d7d[_0x5bf9bf(0x413)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x4ce)]=Game_Action[_0x17f940(0x25b)]['needsSelection'],Game_Action[_0x17f940(0x25b)][_0x17f940(0x92b)]=function(){const _0x405807=_0x17f940;return this[_0x405807(0x33d)]()&&!this[_0x405807(0x696)]()?this[_0x405807(0x8df)]():VisuMZ[_0x405807(0x960)]['Game_Action_needsSelection'][_0x405807(0x14e)](this);},Game_Action[_0x17f940(0x25b)][_0x17f940(0x8df)]=function(){const _0x3b4542=_0x17f940,_0x53c7a5=this['item']()[_0x3b4542(0x5d4)];if(_0x53c7a5[_0x3b4542(0x413)](/RANDOM/i))return![];if(_0x53c7a5[_0x3b4542(0x413)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x53c7a5['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x3b4542(0x4ce)][_0x3b4542(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x9df)]=Game_Action[_0x17f940(0x25b)]['makeTargets'],Game_Action['prototype']['makeTargets']=function(){const _0x20eb56=_0x17f940;let _0x4e74dd=[];if(this['isBattleCoreTargetScope']())_0x4e74dd=this[_0x20eb56(0x4e1)]();else{if(_0x20eb56(0x97b)!=='JyAuH')_0x4e74dd=VisuMZ[_0x20eb56(0x960)][_0x20eb56(0x9df)][_0x20eb56(0x14e)](this);else{const _0x400eef=this[_0x20eb56(0x4a6)]();if(_0x400eef&&_0x25fd9b)_0x400eef['stepForward']();return;}}return _0x4e74dd=this['applyTargetFilters'](_0x4e74dd),_0x4e74dd;},Game_Action[_0x17f940(0x25b)][_0x17f940(0x4e1)]=function(){const _0xe97c7e=_0x17f940;let _0x215164=[];const _0x950df5=String(this[_0xe97c7e(0x32b)]()[_0xe97c7e(0x5d4)]),_0x59ccc4=VisuMZ[_0xe97c7e(0x960)][_0xe97c7e(0x8a9)](this[_0xe97c7e(0x32b)](),_0xe97c7e(0x7f5));if(VisuMZ[_0xe97c7e(0x960)]['JS'][_0x59ccc4]){if('fHfzV'!=='fHfzV'){const _0x28f9d2=this[_0xe97c7e(0x4a6)]();_0x28f9d2&&(_0x28f9d2[_0xe97c7e(0x37a)](_0x3edf49),['swing','thrust','missile'][_0xe97c7e(0x72d)](_0x2c79d3)&&this[_0xe97c7e(0x4a2)]());}else{_0x215164=VisuMZ['BattleCore'][_0xe97c7e(0x9df)]['call'](this);const _0x21ac24=VisuMZ[_0xe97c7e(0x960)][_0xe97c7e(0x8a9)](this[_0xe97c7e(0x32b)](),_0xe97c7e(0x7f5));return _0x215164=VisuMZ[_0xe97c7e(0x960)]['JS'][_0x21ac24][_0xe97c7e(0x14e)](this,this[_0xe97c7e(0xaa6)](),_0x215164),this[_0xe97c7e(0x962)](_0x215164);}}if(_0x950df5[_0xe97c7e(0x413)](/(\d+) RANDOM ANY/i)){let _0x5e5936=Number(RegExp['$1']);while(_0x5e5936--){if(_0xe97c7e(0x3b7)!==_0xe97c7e(0x893)){const _0x433c4d=Math[_0xe97c7e(0x9d5)](0x2)===0x0?this[_0xe97c7e(0x6fa)]():this[_0xe97c7e(0x52d)]();_0x215164['push'](_0x433c4d[_0xe97c7e(0x18c)]());}else this[_0xe97c7e(0x911)]=0x0;}return this['repeatTargets'](_0x215164);}if(_0x950df5[_0xe97c7e(0x413)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0xe97c7e(0x9c8)==='hSBoh')return _0xe97c7e(0x7e5);else{let _0x4b6bff=Number(RegExp['$1']);while(_0x4b6bff--){if(_0xe97c7e(0xa87)===_0xe97c7e(0x265)){if(!_0x3b22e5['isSideView']())return;const _0xc54a64=this[_0xe97c7e(0x4a6)]();if(!_0xc54a64)return;_0xc54a64['startOpacity'](_0x4306ac,_0x2a8bc0,_0x57261b);}else _0x215164['push'](this['opponentsUnit']()[_0xe97c7e(0x18c)]());}return this['repeatTargets'](_0x215164);}}if(_0x950df5[_0xe97c7e(0x413)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if('HPKQL'!==_0xe97c7e(0x30b)){let _0x338b1c=0x0;return this[_0xe97c7e(0xa3d)]&&!this[_0xe97c7e(0xa3d)][_0xe97c7e(0x3c6)]()&&(_0x338b1c-=this[_0xe97c7e(0x69b)],_0x338b1c-=this[_0xe97c7e(0x911)]),_0x338b1c;}else{let _0x42a3b0=Number(RegExp['$1']);while(_0x42a3b0--){_0x215164[_0xe97c7e(0x5e8)](this['friendsUnit']()[_0xe97c7e(0x18c)]());}return this[_0xe97c7e(0x962)](_0x215164);}}if(_0x950df5['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x215164[_0xe97c7e(0x5e8)](...this['friendsUnit']()[_0xe97c7e(0x6f6)]()[_0xe97c7e(0x427)](_0x270f54=>_0x270f54!==this[_0xe97c7e(0xaa6)]())),this[_0xe97c7e(0x962)](_0x215164);return VisuMZ[_0xe97c7e(0x960)][_0xe97c7e(0x9df)][_0xe97c7e(0x14e)](this);},Game_Action[_0x17f940(0x25b)][_0x17f940(0x60e)]=function(_0x42efce){const _0x3f21d5=[];for(let _0x4f95e9=0x0;_0x4f95e9<this['numTargets']();_0x4f95e9++){_0x3f21d5['push'](_0x42efce['trueRandomTarget']());}return _0x3f21d5;},Game_Action['prototype'][_0x17f940(0x3e5)]=function(_0x541c20){const _0x318bfb=_0x17f940;if(!this[_0x318bfb(0x32b)]())return _0x541c20;const _0x7aa129=this[_0x318bfb(0x32b)]()[_0x318bfb(0x981)];return _0x7aa129[_0x318bfb(0x413)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&(_0x318bfb(0x548)!==_0x318bfb(0x548)?this[_0x318bfb(0x242)][_0x318bfb(0x92c)]=_0x150ade[_0x318bfb(0x960)][_0x318bfb(0x32c)][_0x318bfb(0x36b)]['SmoothImage']:_0x541c20[_0x318bfb(0x646)](this[_0x318bfb(0xaa6)]())),_0x541c20;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x234)]=Game_Action[_0x17f940(0x25b)][_0x17f940(0x317)],Game_Action['prototype'][_0x17f940(0x317)]=function(_0xc8c856,_0x122567){const _0x4b5e06=_0x17f940,_0x44991c=_0xc8c856[_0x4b5e06(0x23a)]();this[_0x4b5e06(0xaa6)]()['attackStates']()[_0x4b5e06(0x72d)](_0xc8c856['deathStateId']())&&(_0x4b5e06(0x310)!=='ytQOv'?_0xe801be[_0x4b5e06(0x637)]():_0xc8c856[_0x4b5e06(0x456)](![])),VisuMZ[_0x4b5e06(0x960)]['Game_Action_itemEffectAddAttackState'][_0x4b5e06(0x14e)](this,_0xc8c856,_0x122567),_0xc8c856[_0x4b5e06(0x456)](_0x44991c);},VisuMZ[_0x17f940(0x960)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x17f940(0x25b)]['itemEffectAddNormalState'],Game_Action[_0x17f940(0x25b)][_0x17f940(0x3b9)]=function(_0x2f08de,_0x469d80){const _0x900052=_0x17f940,_0x283ce6=_0x2f08de[_0x900052(0x23a)]();if(_0x469d80[_0x900052(0x281)]===_0x2f08de[_0x900052(0x57b)]()){if('xxCYh'==='LwKYr')return _0x256194(_0x192642['$1'])||0x0;else _0x2f08de[_0x900052(0x456)](![]);}VisuMZ[_0x900052(0x960)][_0x900052(0x1d0)]['call'](this,_0x2f08de,_0x469d80),_0x2f08de[_0x900052(0x456)](_0x283ce6);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x680)]=Game_Action[_0x17f940(0x25b)][_0x17f940(0x849)],Game_Action['prototype'][_0x17f940(0x849)]=function(){const _0x41fe33=_0x17f940;VisuMZ[_0x41fe33(0x960)]['Game_Action_applyGlobal'][_0x41fe33(0x14e)](this),this[_0x41fe33(0xae1)](),this[_0x41fe33(0x978)]();},Game_Action[_0x17f940(0x25b)][_0x17f940(0xae1)]=function(){const _0x2debff=_0x17f940;if(!SceneManager[_0x2debff(0x2ac)]())return;const _0x4fd085=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x3b5b31=this[_0x2debff(0x32b)]()[_0x2debff(0x981)][_0x2debff(0x413)](_0x4fd085);if(_0x3b5b31)for(const _0x546100 of _0x3b5b31){if(_0x2debff(0x4a7)!==_0x2debff(0x295)){if(!_0x546100)continue;_0x546100[_0x2debff(0x413)](_0x4fd085);const _0x5dfa97=String(RegExp['$1'])['split'](',')[_0x2debff(0x296)](_0x525675=>String(_0x525675)[_0x2debff(0x224)]()),_0x4763da=_0x5dfa97[_0x2debff(0x296)](_0x58ad7a=>DataManager[_0x2debff(0x72f)](_0x58ad7a));for(const _0x27ed39 of _0x4763da){const _0x4b5452=$dataCommonEvents[_0x27ed39];_0x4b5452&&(_0x2debff(0x222)==='MFheO'?(_0x13fb6a['prototype'][_0x2debff(0x559)][_0x2debff(0x14e)](this),this['contents'][_0x2debff(0x931)]=_0x57232a[_0x2debff(0x960)][_0x2debff(0x32c)][_0x2debff(0x99a)]['NameFontSize']):$gameTemp[_0x2debff(0x2db)](_0x27ed39));}}else _0xa77125[_0x2debff(0x960)]['createJS'](_0x3f12df,_0x8153ef);}},DataManager[_0x17f940(0x72f)]=function(_0x57c0d5){const _0x46db91=_0x17f940;_0x57c0d5=_0x57c0d5[_0x46db91(0x9cb)]()[_0x46db91(0x224)](),this['_commonEventIDs']=this[_0x46db91(0x2bd)]||{};if(this['_commonEventIDs'][_0x57c0d5])return this[_0x46db91(0x2bd)][_0x57c0d5];for(const _0x12fc34 of $dataCommonEvents){if(!_0x12fc34)continue;let _0x175c21=_0x12fc34[_0x46db91(0x8d0)];_0x175c21=_0x175c21[_0x46db91(0xa30)](/\x1I\[(\d+)\]/gi,''),_0x175c21=_0x175c21[_0x46db91(0xa30)](/\\I\[(\d+)\]/gi,''),this[_0x46db91(0x2bd)][_0x175c21[_0x46db91(0x9cb)]()['trim']()]=_0x12fc34['id'];}return this['_commonEventIDs'][_0x57c0d5]||0x0;},Game_Action[_0x17f940(0x25b)][_0x17f940(0x978)]=function(){const _0x1aaba5=_0x17f940;if(!SceneManager[_0x1aaba5(0x2ac)]())return;const _0x569d69=VisuMZ['BattleCore'][_0x1aaba5(0x32c)][_0x1aaba5(0xa9e)];_0x569d69[_0x1aaba5(0x6db)]&&$gameSwitches[_0x1aaba5(0x426)](_0x569d69[_0x1aaba5(0x6db)],![]),_0x569d69['SwitchMissEvade']&&(_0x1aaba5(0x97a)===_0x1aaba5(0x97a)?$gameSwitches[_0x1aaba5(0x426)](_0x569d69[_0x1aaba5(0x8be)],![]):this['removeImmortal']()),_0x569d69[_0x1aaba5(0x9b2)]&&$gameVariables[_0x1aaba5(0x426)](_0x569d69[_0x1aaba5(0x9b2)],0x0),_0x569d69['VariableHeal']&&$gameVariables['setValue'](_0x569d69[_0x1aaba5(0x8b0)],0x0);},Game_Action[_0x17f940(0x25b)][_0x17f940(0x13d)]=function(_0x37df28){const _0xc5fd23=_0x17f940;if(!SceneManager['isSceneBattle']())return;if(!_0x37df28)return;const _0x3e229e=_0x37df28[_0xc5fd23(0x75b)](),_0x1a9d71=VisuMZ[_0xc5fd23(0x960)]['Settings'][_0xc5fd23(0xa9e)];_0x1a9d71[_0xc5fd23(0x6db)]&&_0x3e229e[_0xc5fd23(0x91f)]&&(_0xc5fd23(0xaad)!=='rPmxT'?_0x5ce994=(_0x7dc58f+_0x170c41)/0x2:$gameSwitches[_0xc5fd23(0x426)](_0x1a9d71[_0xc5fd23(0x6db)],!![]));_0x1a9d71[_0xc5fd23(0x8be)]&&(_0x3e229e[_0xc5fd23(0x2ed)]||_0x3e229e[_0xc5fd23(0x8ab)])&&$gameSwitches[_0xc5fd23(0x426)](_0x1a9d71['SwitchMissEvade'],!![]);if(_0x1a9d71[_0xc5fd23(0x9b2)]){let _0x180492=$gameVariables[_0xc5fd23(0x9fb)](_0x1a9d71[_0xc5fd23(0x9b2)]);_0x3e229e[_0xc5fd23(0x979)]>0x0&&(_0xc5fd23(0x525)===_0xc5fd23(0x4cb)?this[_0xc5fd23(0x3b0)](_0x42fc9e)?_0x1d4455[_0xc5fd23(0x4d7)]():this[_0xc5fd23(0x47e)](_0xcb2e56,_0x2e491e,_0x159ba8):_0x180492+=Math['abs'](_0x3e229e[_0xc5fd23(0x979)])),$gameVariables[_0xc5fd23(0x426)](_0x1a9d71[_0xc5fd23(0x9b2)],_0x180492);}if(_0x1a9d71[_0xc5fd23(0x8b0)]){let _0xf73fda=$gameVariables['value'](_0x1a9d71[_0xc5fd23(0x8b0)]);_0x3e229e['hpDamage']<0x0&&(_0xc5fd23(0x92d)===_0xc5fd23(0x92d)?_0xf73fda+=Math[_0xc5fd23(0x1ca)](_0x3e229e['hpDamage']):this['_branch'][this[_0xc5fd23(0x2e7)]]=_0x11f13b),$gameVariables[_0xc5fd23(0x426)](_0x1a9d71[_0xc5fd23(0x8b0)],_0xf73fda);}},VisuMZ[_0x17f940(0x960)][_0x17f940(0x197)]=Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x460)],Game_BattlerBase['prototype'][_0x17f940(0x460)]=function(){const _0x560dee=_0x17f940;VisuMZ['BattleCore'][_0x560dee(0x197)]['call'](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0xaab)]=function(){this['_immortal']=![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x43d)]=Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0xaae)],Game_BattlerBase[_0x17f940(0x25b)]['refresh']=function(){const _0x241c1b=_0x17f940;this[_0x241c1b(0x32a)]={},VisuMZ[_0x241c1b(0x960)]['Game_BattlerBase_refresh'][_0x241c1b(0x14e)](this);},Game_BattlerBase['prototype'][_0x17f940(0x972)]=function(_0x5ec733){const _0x152a3c=_0x17f940;return this[_0x152a3c(0x32a)]=this[_0x152a3c(0x32a)]||{},this[_0x152a3c(0x32a)][_0x5ec733]!==undefined;},Game_BattlerBase['prototype'][_0x17f940(0x98d)]=function(){const _0x323ce0=_0x17f940;if(this[_0x323ce0(0x32a)][_0x323ce0(0x98d)]!==undefined)return this[_0x323ce0(0x32a)][_0x323ce0(0x98d)];const _0x378fee=/<DAMAGE CAP:[ ](\d+)>/i,_0x3bbe17=this[_0x323ce0(0x112)]()[_0x323ce0(0x296)](_0x2de874=>_0x2de874&&_0x2de874[_0x323ce0(0x981)][_0x323ce0(0x413)](_0x378fee)?Number(RegExp['$1']):0x0);let _0x53ccd9=_0x3bbe17['length']>0x0?Math[_0x323ce0(0xb2c)](..._0x3bbe17):0x0;if(_0x53ccd9<=0x0)_0x53ccd9=VisuMZ[_0x323ce0(0x960)]['Settings'][_0x323ce0(0x176)]['DefaultHardCap'];return this[_0x323ce0(0x32a)]['hardDamageCap']=_0x53ccd9,this[_0x323ce0(0x32a)][_0x323ce0(0x98d)];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x5fa)]=function(){const _0x5e6a9a=_0x17f940;if(this[_0x5e6a9a(0x32a)][_0x5e6a9a(0x14d)]!==undefined)return this[_0x5e6a9a(0x32a)][_0x5e6a9a(0x14d)];let _0x1706b0=VisuMZ[_0x5e6a9a(0x960)][_0x5e6a9a(0x32c)][_0x5e6a9a(0x176)][_0x5e6a9a(0x96e)];const _0x3c24c8=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x41288d=this['traitObjects']()['map'](_0x136d29=>_0x136d29&&_0x136d29[_0x5e6a9a(0x981)]['match'](_0x3c24c8)?Number(RegExp['$1'])/0x64:0x0);return _0x1706b0=_0x41288d[_0x5e6a9a(0x553)]((_0x50c976,_0x446386)=>_0x50c976+_0x446386,_0x1706b0),this[_0x5e6a9a(0x32a)][_0x5e6a9a(0x14d)]=_0x1706b0,this[_0x5e6a9a(0x32a)][_0x5e6a9a(0x14d)][_0x5e6a9a(0x167)](0.01,0x1);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x146)]=Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x8d1)],Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x8d1)]=function(){const _0xfd2eeb=_0x17f940;VisuMZ['BattleCore'][_0xfd2eeb(0x146)][_0xfd2eeb(0x14e)](this),SceneManager[_0xfd2eeb(0x2ac)]()&&this[_0xfd2eeb(0x3cd)](_0xfd2eeb(0x82c));},Game_BattlerBase[_0x17f940(0x25b)]['battler']=function(){const _0x5e9091=_0x17f940;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager['_scene'][_0x5e9091(0x4ab)])return null;return SceneManager[_0x5e9091(0x712)][_0x5e9091(0x4ab)][_0x5e9091(0x70e)](this);},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x61d)]=function(){const _0x29f058=_0x17f940;return VisuMZ[_0x29f058(0x960)][_0x29f058(0x32c)][_0x29f058(0x36b)][_0x29f058(0x93c)];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x733)]=function(){const _0x51c1fe=_0x17f940;return VisuMZ[_0x51c1fe(0x960)][_0x51c1fe(0x32c)][_0x51c1fe(0x36b)][_0x51c1fe(0x38b)];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0xaec)]=function(){const _0x5c18c5=_0x17f940;return this[_0x5c18c5(0x2b6)]&&this[_0x5c18c5(0x2b6)]()?VisuMZ['BattleCore'][_0x5c18c5(0x32c)]['Actor'][_0x5c18c5(0x7da)]:VisuMZ[_0x5c18c5(0x960)][_0x5c18c5(0x32c)][_0x5c18c5(0x99a)][_0x5c18c5(0x7da)];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x5ef)]=function(){return!![];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x563)]=function(){return 0x0;},Game_BattlerBase[_0x17f940(0x25b)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x73e)]=function(_0x267a51){const _0x22a963=_0x17f940;if(!_0x267a51)return 0x0;let _0x45d613=0x0;const _0x641adb=_0x267a51[_0x22a963(0x981)];if(_0x641adb[_0x22a963(0x413)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if('UuVdV'==='UuVdV')_0x45d613+=Number(RegExp['$1']);else{if(this[_0x22a963(0x27b)]!==_0x35de85)return![];if(!_0x3a266f[_0x22a963(0x2ac)]())return![];return _0x422ad0[_0x22a963(0x960)][_0x22a963(0x32c)][_0x22a963(0x334)][_0x22a963(0xb13)];}}return _0x641adb['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x22a963(0x9fc)!==_0x22a963(0x57f)?_0x45d613+=Number(RegExp['$1']):_0x5d887a[_0x22a963(0x203)][_0x22a963(0x91f)]=!![]),_0x45d613;},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x7c5)]=function(_0x36db4e){const _0x4f333b=_0x17f940;if(!_0x36db4e)return 0x0;let _0x3dc80a=0x0;const _0x4a2358=_0x36db4e[_0x4f333b(0x981)];return _0x4a2358[_0x4f333b(0x413)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x3dc80a+=Number(RegExp['$1'])),_0x4a2358['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3dc80a+=Number(RegExp['$2'])),_0x3dc80a;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x775)]=Game_BattlerBase[_0x17f940(0x25b)]['isStateResist'],Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x54b)]=function(_0x477a49){const _0x24bddf=_0x17f940;if(_0x477a49===this['deathStateId']()&&this[_0x24bddf(0x23a)]())return!![];return VisuMZ[_0x24bddf(0x960)][_0x24bddf(0x775)][_0x24bddf(0x14e)](this,_0x477a49);},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x23a)]=function(){return this['_immortal'];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x456)]=function(_0x4c6fe7){_0x4c6fe7?this['addImmortal']():this['removeImmortal']();},Game_BattlerBase['prototype'][_0x17f940(0x860)]=function(){const _0x51630b=_0x17f940;if(this[_0x51630b(0x9bf)]())return;this[_0x51630b(0x676)]=!![];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x9e3)]=function(){const _0x4c3f19=_0x17f940,_0x9c85b3=this[_0x4c3f19(0x3f0)]();this[_0x4c3f19(0x676)]=![],this[_0x4c3f19(0xaae)](),this['isDead']()&&_0x9c85b3&&(this['performCollapse'](),this[_0x4c3f19(0x204)]());},VisuMZ['BattleCore']['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x178)],Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x178)]=function(){const _0x597aae=_0x17f940;if(!this[_0x597aae(0x6cb)]())return![];return VisuMZ['BattleCore'][_0x597aae(0x220)][_0x597aae(0x14e)](this);},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x6cb)]=function(){const _0x297e72=_0x17f940;for(const _0x525fcd of this['traitObjects']()){if(_0x297e72(0x40b)===_0x297e72(0x40b)){if(!_0x525fcd)continue;if(_0x525fcd[_0x297e72(0x981)][_0x297e72(0x413)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else this[_0x297e72(0xa3d)][_0x297e72(0x73a)]()&&this[_0x297e72(0x9a9)]();}return!![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x42c)]=Game_BattlerBase[_0x17f940(0x25b)]['canGuard'],Game_BattlerBase['prototype'][_0x17f940(0x1f7)]=function(){const _0x579ad9=_0x17f940;if(!this[_0x579ad9(0x318)]())return![];return VisuMZ[_0x579ad9(0x960)][_0x579ad9(0x42c)][_0x579ad9(0x14e)](this);},Game_BattlerBase['prototype'][_0x17f940(0x318)]=function(){const _0x4ae74c=_0x17f940;for(const _0x361f2e of this[_0x4ae74c(0x112)]()){if(!_0x361f2e)continue;if(_0x361f2e['note'][_0x4ae74c(0x413)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x50c)]=function(){const _0x7b7760=_0x17f940;for(const _0x3e0c8b of this[_0x7b7760(0x112)]()){if(!_0x3e0c8b)continue;if(_0x3e0c8b[_0x7b7760(0x981)][_0x7b7760(0x413)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler['prototype'][_0x17f940(0xaef)]=function(){const _0x127a02=_0x17f940;return VisuMZ[_0x127a02(0x960)]['Settings'][_0x127a02(0xa9e)][_0x127a02(0x1f5)];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x6bf)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0x499)],Game_Battler[_0x17f940(0x25b)][_0x17f940(0x499)]=function(){const _0x137fdb=_0x17f940;if(SceneManager[_0x137fdb(0x2ac)]()&&$gameTroop[_0x137fdb(0x2f1)]()<=0x0)return;if(SceneManager[_0x137fdb(0x2ac)]()&&BattleManager[_0x137fdb(0x7ca)]()&&this[_0x137fdb(0x11a)]===Graphics[_0x137fdb(0x469)])return;this[_0x137fdb(0x11a)]=Graphics[_0x137fdb(0x469)],this[_0x137fdb(0x154)]('PreRegenerateJS'),VisuMZ['BattleCore'][_0x137fdb(0x6bf)]['call'](this),this['regenerateAllBattleCore'](),this[_0x137fdb(0x154)](_0x137fdb(0xa21));},Game_Battler[_0x17f940(0x25b)]['regenerateAllBattleCore']=function(){const _0x49a10e=_0x17f940;if(SceneManager[_0x49a10e(0x2ac)]())for(const _0x5d277f of this[_0x49a10e(0x112)]()){if(_0x49a10e(0x157)===_0x49a10e(0x35d))this[_0x49a10e(0x3cd)](_0x49a10e(0x85a));else{if(!_0x5d277f)continue;this[_0x49a10e(0x4d5)](_0x5d277f);}}},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x4d5)]=function(_0x47bf63){const _0x2ea444=_0x17f940;if(!Imported[_0x2ea444(0xa8c)])return;if(!SceneManager[_0x2ea444(0x2ac)]())return;if(this[_0x2ea444(0x9bf)]())return;if(this[_0x2ea444(0x51a)]())return;if(_0x47bf63[_0x2ea444(0x981)][_0x2ea444(0x413)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x2ea444(0x77b)===_0x2ea444(0x47d))_0xd3d5f5=!![];else{const _0x32df37=Number(RegExp['$1']);$gameTemp[_0x2ea444(0x8f6)]([this],_0x32df37,![],![]);}}},VisuMZ[_0x17f940(0x960)][_0x17f940(0x97d)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0x865)],Game_Battler[_0x17f940(0x25b)][_0x17f940(0x865)]=function(){const _0x37ccbf=_0x17f940;this['processBattleCoreJS'](_0x37ccbf(0x449)),VisuMZ[_0x37ccbf(0x960)]['Game_Battler_startTpbTurn'][_0x37ccbf(0x14e)](this),this[_0x37ccbf(0x154)](_0x37ccbf(0x756));},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa50)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0x315)],Game_Battler[_0x17f940(0x25b)][_0x17f940(0x315)]=function(){const _0x38da2d=_0x17f940;this[_0x38da2d(0x154)]('PreEndTurnJS'),VisuMZ[_0x38da2d(0x960)][_0x38da2d(0xa50)][_0x38da2d(0x14e)](this),this[_0x38da2d(0x154)](_0x38da2d(0x6d2));},Game_Battler['prototype'][_0x17f940(0x154)]=function(_0x2d5928){const _0x53d3c5=_0x17f940;if(this[_0x53d3c5(0x876)]||this[_0x53d3c5(0x9dd)])return;const _0x54e41a=VisuMZ[_0x53d3c5(0x960)][_0x53d3c5(0x32c)]['Mechanics'];if(_0x54e41a[_0x2d5928])_0x54e41a[_0x2d5928]['call'](this);for(const _0x113d24 of this['traitObjects']()){if(_0x53d3c5(0x785)!==_0x53d3c5(0x790)){if(!_0x113d24)continue;key=VisuMZ[_0x53d3c5(0x960)][_0x53d3c5(0x8a9)](_0x113d24,_0x2d5928),VisuMZ[_0x53d3c5(0x960)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key][_0x53d3c5(0x14e)](this,this,this,_0x113d24,0x0);}else{if(_0x21e612[_0x53d3c5(0xabd)]()[_0x53d3c5(0x282)]>0x0)return!![];if(_0x3917e4['battleCameraData']()[_0x53d3c5(0x9e2)]>0x0)return!![];this[_0x53d3c5(0x945)]='';}}},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x3ef)]=function(){const _0x4e4d1c=_0x17f940;return VisuMZ[_0x4e4d1c(0x960)][_0x4e4d1c(0x32c)][_0x4e4d1c(0x36b)][_0x4e4d1c(0x3b5)]||![];},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x6b1)]=function(){const _0x16d6da=_0x17f940;if(this[_0x16d6da(0x54f)]()){if(this[_0x16d6da(0x3ef)]()){if(this[_0x16d6da(0x39b)][_0x16d6da(0xa13)](_0x210741=>_0x210741[_0x16d6da(0x32b)]()&&_0x210741[_0x16d6da(0x9f8)]())){if(_0x16d6da(0x6b2)===_0x16d6da(0x218))_0x303b26[_0x16d6da(0x8da)]=!![],_0x7dac69['makeActions'](),this['selectNextCommand'](),_0x2facc1[_0x16d6da(0x7ca)]()&&(_0x1a351d[_0x16d6da(0x124)]=![]);else return!![];}}else{if('gPlNi'==='zuDgJ'){const _0x25f1ef=_0x1ce830[_0x261808];if(_0x25f1ef)_0x888f61[_0x16d6da(0x5e8)](_0x33872b[_0x16d6da(0xa38)](_0x25f1ef));}else{if(this[_0x16d6da(0x39b)][_0x16d6da(0xa13)](_0x20befe=>_0x20befe[_0x16d6da(0x32b)]()&&_0x20befe['isMagicSkill']()))return!![];}}}if(BattleManager[_0x16d6da(0x7ca)]()&&this[_0x16d6da(0x46b)]===_0x16d6da(0x804)){if(_0x16d6da(0x40e)!==_0x16d6da(0x40e)){const _0x209f0a=_0x4840bc['prototype'][_0x16d6da(0x701)](),_0x205f89=_0x4a61f5[_0x16d6da(0xac3)],_0x208355=this[_0x16d6da(0x758)]()+_0x209f0a,_0x358fe5=0x0,_0x198deb=_0x16c2bf[_0x16d6da(0x45d)]-_0x208355+_0x209f0a;return new _0x531085(_0x358fe5,_0x198deb,_0x205f89,_0x208355);}else{if(this[_0x16d6da(0x3ef)]()){if('FfYIy'==='FfYIy')return this['currentAction']()&&this[_0x16d6da(0x3d3)]()[_0x16d6da(0x32b)]()&&this[_0x16d6da(0x3d3)]()[_0x16d6da(0x9f8)]();else{if(!this[_0x16d6da(0x6c3)]()&&_0xefa43e[_0x16d6da(0x8da)])return!![];return _0x143a74['prototype'][_0x16d6da(0x57c)][_0x16d6da(0x14e)](this);}}else{if(_0x16d6da(0xa68)===_0x16d6da(0xa68))return this[_0x16d6da(0x3d3)]()&&this[_0x16d6da(0x3d3)]()[_0x16d6da(0x32b)]()&&this[_0x16d6da(0x3d3)]()[_0x16d6da(0x639)]();else{if(!_0x24187b['VisuMZ_3_ActSeqImpact'])return;const _0xca72ac=_0x10c51e[_0x16d6da(0x712)]['_spriteset'];if(!_0xca72ac)return;_0x48c6f9['ConvertParams'](_0x401f8e,_0x1f5278);const _0x3d391e=_0x58fe54['X']||0x0,_0x248d14=_0x681fad['Y']||0x0,_0x55c4a4=_0x5cf9a7['Amp']||0x0,_0x312128=_0x200741['Wave']||0x0,_0x371f41=_0x5c7027[_0x16d6da(0x5ad)]||0x1;_0xca72ac[_0x16d6da(0x11d)](_0x3d391e,_0x248d14,_0x55c4a4,_0x312128,_0x371f41);}}}}return![];},Game_Battler['prototype'][_0x17f940(0x209)]=function(){const _0x2ce2c7=_0x17f940;if(BattleManager[_0x2ce2c7(0x7ca)]()&&this[_0x2ce2c7(0x46b)]===_0x2ce2c7(0x804)){if(this['chantStyle']()){if(_0x2ce2c7(0x1d3)===_0x2ce2c7(0x10d)){if(this[_0x2ce2c7(0xaed)])this[_0x2ce2c7(0xaed)]['startMove'](_0x3c0195,_0x5dff61,_0x22d859);}else return this[_0x2ce2c7(0x3d3)]()&&this[_0x2ce2c7(0x3d3)]()[_0x2ce2c7(0x32b)]()&&!this['currentAction']()[_0x2ce2c7(0x9f8)]();}else return this['currentAction']()&&this['currentAction']()[_0x2ce2c7(0x32b)]()&&!this[_0x2ce2c7(0x3d3)]()['isMagicSkill']();}return![];},VisuMZ['BattleCore'][_0x17f940(0x2c6)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0xfe)],Game_Battler[_0x17f940(0x25b)][_0x17f940(0xfe)]=function(){const _0x240e47=_0x17f940;VisuMZ[_0x240e47(0x960)][_0x240e47(0x2c6)][_0x240e47(0x14e)](this),this['_damagePopupArray']=[];},Game_Battler[_0x17f940(0x25b)]['isDamagePopupRequested']=function(){const _0x391c0c=_0x17f940;if(!this[_0x391c0c(0xb02)])this['clearDamagePopup']();return this['_damagePopupArray'][_0x391c0c(0x702)]>0x0;},Game_Battler['prototype'][_0x17f940(0x5fc)]=function(){const _0x2e42b9=_0x17f940;if(!SceneManager[_0x2e42b9(0x2ac)]())return;if(!this[_0x2e42b9(0xb02)])this[_0x2e42b9(0xfe)]();this[_0x2e42b9(0x48c)]();const _0x2cd50b=this[_0x2e42b9(0x4a6)]();if(_0x2cd50b)_0x2cd50b['setupDamagePopup']();},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x48c)]=function(){const _0x516892=_0x17f940,_0x5416a5=this[_0x516892(0x75b)]();if(_0x5416a5[_0x516892(0x2ed)]||_0x5416a5[_0x516892(0x8ab)]){const _0x463e85=JsonEx[_0x516892(0xa38)](_0x5416a5);_0x463e85[_0x516892(0xa9b)]=![],_0x463e85['mpDamage']=0x0,this[_0x516892(0xb02)]['push'](_0x463e85);}if(_0x5416a5[_0x516892(0xa9b)]){if(_0x516892(0xadc)===_0x516892(0xadc)){const _0x564320=JsonEx[_0x516892(0xa38)](_0x5416a5);_0x564320['missed']=![],_0x564320[_0x516892(0x8ab)]=![],_0x564320[_0x516892(0x763)]=0x0,this[_0x516892(0xb02)]['push'](_0x564320);}else{const _0x389912=_0x5687c8['prototype'][_0x516892(0x10b)][_0x516892(0x14e)](arguments,0x1),_0x5b3129={'name':_0x4d4693,'params':_0x389912},_0x2bdbe6=this['_methods']['map'](_0x592868=>_0x592868[_0x516892(0x8d0)])[_0x516892(0x74c)](_0x516892(0x56f));_0x2bdbe6>=0x0?this[_0x516892(0x6c5)][_0x516892(0x104)](_0x2bdbe6,0x0,_0x5b3129):this[_0x516892(0x6c5)]['push'](_0x5b3129);}}if(_0x5416a5['mpDamage']!==0x0){const _0xaf9452=JsonEx['makeDeepCopy'](_0x5416a5);_0xaf9452[_0x516892(0x2ed)]=![],_0xaf9452[_0x516892(0x8ab)]=![],_0xaf9452['hpAffected']=![],this[_0x516892(0xb02)][_0x516892(0x5e8)](_0xaf9452);}},Game_Battler['prototype'][_0x17f940(0x60d)]=function(){const _0x708be4=_0x17f940;if(!this[_0x708be4(0xb02)])this['clearDamagePopup']();return VisuMZ[_0x708be4(0x960)][_0x708be4(0x32c)][_0x708be4(0x176)][_0x708be4(0x869)]?this['_damagePopupArray'][_0x708be4(0x4d1)]():this[_0x708be4(0xb02)][_0x708be4(0x2bb)]();},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x9f3)]=function(_0x285fa6,_0x578ba6){const _0x5e9795=_0x17f940;if(!SceneManager[_0x5e9795(0x2ac)]())return;if(!this[_0x5e9795(0x4a6)]())return;if(_0x285fa6[_0x5e9795(0x702)]<=0x0)return;_0x578ba6=_0x578ba6||{},_0x578ba6[_0x5e9795(0x955)]=_0x578ba6['textColor']||_0x5e9795(0x374),_0x578ba6[_0x5e9795(0x17e)]=_0x578ba6[_0x5e9795(0x17e)]||[0x0,0x0,0x0,0x0],_0x578ba6[_0x5e9795(0x54d)]=_0x578ba6[_0x5e9795(0x54d)]||0x0,this[_0x5e9795(0x4a6)]()[_0x5e9795(0x9f3)](_0x285fa6,_0x578ba6);},Game_Battler[_0x17f940(0x25b)]['setupIconTextPopup']=function(_0x544bf5,_0x5e781b,_0xa21aab){const _0x22e57b=_0x17f940;if(!SceneManager[_0x22e57b(0x2ac)]())return;if(!this['battler']())return;if(_0x5e781b[_0x22e57b(0x702)]<=0x0)return;_0xa21aab=_0xa21aab||{},_0xa21aab[_0x22e57b(0x955)]=_0xa21aab[_0x22e57b(0x955)]||_0x22e57b(0x374),_0xa21aab[_0x22e57b(0x17e)]=_0xa21aab[_0x22e57b(0x17e)]||[0x0,0x0,0x0,0x0],_0xa21aab['flashDuration']=_0xa21aab[_0x22e57b(0x54d)]||0x0,this[_0x22e57b(0x4a6)]()[_0x22e57b(0x898)](_0x544bf5,_0x5e781b,_0xa21aab);},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x651)]=function(){const _0x3ceea3=_0x17f940;if(this[_0x3ceea3(0x51a)]())return![];if(this[_0x3ceea3(0x3f0)]()&&this[_0x3ceea3(0x67d)]())return!![];if(this[_0x3ceea3(0xae4)]()&&this[_0x3ceea3(0xa20)]()){if(this[_0x3ceea3(0x9bf)]()&&this[_0x3ceea3(0x5f9)]())return![];}else{if(this[_0x3ceea3(0x9bf)]()){if('ZzwLV'===_0x3ceea3(0x1e0))return![];else _0x23c69e=_0x522145['boxWidth']/0x2,_0x9f9a72=_0x29cff3[_0x3ceea3(0x45d)]/0x2;}}return!![];},VisuMZ[_0x17f940(0x960)]['Game_Battler_clearMotion']=Game_Battler[_0x17f940(0x25b)][_0x17f940(0x1b0)],Game_Battler['prototype'][_0x17f940(0x1b0)]=function(){const _0x5ef3b8=_0x17f940;VisuMZ[_0x5ef3b8(0x960)]['Game_Battler_clearMotion'][_0x5ef3b8(0x14e)](this),this[_0x5ef3b8(0x2b3)]();},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x582)]=function(){return!![];},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x3c6)]=function(){return![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x466)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0x9f7)],Game_Battler[_0x17f940(0x25b)]['onBattleStart']=function(_0x5d7865){const _0xd6d6b8=_0x17f940;VisuMZ['BattleCore']['Game_Battler_onBattleStart']['call'](this,_0x5d7865),this[_0xd6d6b8(0x861)](_0x5d7865);},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x861)]=function(_0x1c38cc){const _0x1b98c3=_0x17f940;this[_0x1b98c3(0xa5d)](![]);},VisuMZ[_0x17f940(0x960)]['Game_Battler_performActionStart']=Game_Battler['prototype'][_0x17f940(0x73f)],Game_Battler[_0x17f940(0x25b)][_0x17f940(0x73f)]=function(_0x287c0b){const _0x58ec00=_0x17f940;VisuMZ['BattleCore'][_0x58ec00(0x867)][_0x58ec00(0x14e)](this,_0x287c0b);if(!_0x287c0b[_0x58ec00(0xb23)]()){const _0x5b4ae9=this['battler']();_0x5b4ae9&&('uZPRe'!==_0x58ec00(0x8d7)?_0x5b4ae9[_0x58ec00(0xa6f)]():(_0x176773[_0x58ec00(0x242)]=_0xec6b5,_0x5c8ec1[_0x58ec00(0x242)]=_0x18b917,_0x596350[_0x58ec00(0x8ec)](),_0x46be8f[_0x58ec00(0x8ec)]()));}this['setBattlerFlip'](![]);},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x81f)]=function(){const _0x106643=_0x17f940,_0x15c96b=this[_0x106643(0x44c)];this['_flinched']=![];if(BattleManager[_0x106643(0xa27)]()&&this['isInputting']()){const _0xf80914=this['battler']();if(_0xf80914&&_0x15c96b)_0xf80914[_0x106643(0xa6f)]();return;}const _0x2f70e7=this['battler']();if(_0x2f70e7)_0x2f70e7['stepBack']();this[_0x106643(0xa5d)](![]),this[_0x106643(0x204)]();},Game_Battler[_0x17f940(0x25b)][_0x17f940(0xb05)]=function(_0x3e07c0){const _0x5b4877=_0x17f940;if(_0x3e07c0[_0x5b4877(0x1c8)]())'FpOcV'==='eoaUY'?(_0x2de4d1*=-0x1,_0x4c69bf*=-0x1):this[_0x5b4877(0x37f)]();else{if(_0x3e07c0[_0x5b4877(0xb23)]())this[_0x5b4877(0x3cd)](_0x5b4877(0x59c));else{if(_0x3e07c0[_0x5b4877(0x9f8)]())this[_0x5b4877(0x3cd)]('spell');else{if(_0x3e07c0[_0x5b4877(0x68e)]()){if(_0x5b4877(0x615)===_0x5b4877(0x74e)){_0x50aa2f[_0x5b4877(0x960)][_0x5b4877(0x165)][_0x5b4877(0x14e)](this,_0x335e5b),this[_0x5b4877(0x5c6)](),this[_0x5b4877(0x551)]();const _0x2fb88c=this[_0x5b4877(0x4a6)]();if(_0x2fb88c)_0x2fb88c[_0x5b4877(0x46d)](this);}else{if(_0x3e07c0[_0x5b4877(0x32b)]()[_0x5b4877(0x203)][_0x5b4877(0x523)]>0x0)this[_0x5b4877(0x37f)]();else{if(_0x5b4877(0xac9)==='UdLJi'){const _0x4ea4c4=_0x3b2855[_0x5b4877(0x960)][_0x5b4877(0x32c)]['Enemy'];this[_0x5b4877(0x1ed)]=_0x4ea4c4[_0x5b4877(0x183)],this['_svBattlerData']={};}else this[_0x5b4877(0x3cd)](_0x5b4877(0x9c7));}}}else _0x3e07c0[_0x5b4877(0x8b6)]()&&this[_0x5b4877(0x3cd)]('item');}}}},Game_Battler['prototype'][_0x17f940(0x7c8)]=function(){const _0x325d3f=_0x17f940;return $dataSystem[_0x325d3f(0x7eb)][0x0];},Game_Battler[_0x17f940(0x25b)][_0x17f940(0xa7a)]=function(){const _0x40ab81=_0x17f940,_0x460897=this[_0x40ab81(0x7c8)]();return _0x460897?_0x460897[_0x40ab81(0x498)]:0x0;},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x1ad)]=function(_0x419586){const _0x149214=_0x17f940;if(!$gameSystem['isSideView']())return;const _0xc2dd1=this['battler'](),_0x3f2e1f=_0x419586['battler']();if(!_0xc2dd1||!_0x3f2e1f)return;const _0x1d1e2f=_0x3f2e1f[_0x149214(0x521)],_0x4f520d=_0x3f2e1f['_baseY'];this[_0x149214(0x38f)](_0x1d1e2f,_0x4f520d,0x0,![],'Linear',-0x1),_0xc2dd1[_0x149214(0x373)]();const _0x465e89=VisuMZ[_0x149214(0x960)]['Settings'][_0x149214(0x664)];let _0xc60311=(_0x3f2e1f['width']+_0xc2dd1['width'])/0x2;_0xc60311*=this[_0x149214(0x2b6)]()?0x1:-0x1;let _0x3cb178=_0x465e89[_0x149214(0xae3)]*(this[_0x149214(0x2b6)]()?0x1:-0x1);_0x419586[_0x149214(0xa40)](_0xc60311,_0x3cb178,0x0,![],_0x149214(0x69c)),_0x3f2e1f[_0x149214(0x373)]();},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x3cd)]=function(_0x2ef2e7){const _0x5b807a=_0x17f940;if(SceneManager[_0x5b807a(0x2ac)]()){const _0x4e7f42=this[_0x5b807a(0x4a6)]();_0x4e7f42&&(_0x4e7f42[_0x5b807a(0x37a)](_0x2ef2e7),[_0x5b807a(0x85a),_0x5b807a(0xa6c),_0x5b807a(0x26a)]['includes'](_0x2ef2e7)&&('oBxWn'===_0x5b807a(0xb26)?this[_0x5b807a(0x4a2)]():_0x4ec4ad+=_0x534805[_0x5b807a(0x67f)]-_0x4e8e85));}this[_0x5b807a(0x2b3)]();},Game_Battler[_0x17f940(0x25b)]['performWeaponAnimation']=function(){},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x788)]=function(_0x24fe10){const _0x5da7ee=_0x17f940;if(SceneManager[_0x5da7ee(0x2ac)]()){if(_0x5da7ee(0x99c)==='GWLMH'){if(_0x13e232===_0x34f537[_0x5da7ee(0x371)]())return![];}else{const _0x1a4a05=this['battler']();if(_0x1a4a05)_0x1a4a05[_0x5da7ee(0x752)](_0x24fe10);}}},Game_Battler['prototype'][_0x17f940(0x29f)]=function(){const _0x3a24c0=_0x17f940;if(SceneManager[_0x3a24c0(0x2ac)]()){const _0x343b23=this['getAttackWeaponAnimationId']();this[_0x3a24c0(0x788)](_0x343b23);}},Game_Battler[_0x17f940(0x25b)][_0x17f940(0xad9)]=function(_0xa4fd15,_0x3aca86){const _0x72cb2a=_0x17f940;if(!_0xa4fd15)return;if(!_0xa4fd15[_0x72cb2a(0x32b)]())return;if(_0xa4fd15['isAttack']())return;if(_0xa4fd15[_0x72cb2a(0xb23)]())return;if(_0xa4fd15[_0x72cb2a(0x8b6)]())return;let _0x2176ba=0x0;const _0x2b4bc6=VisuMZ[_0x72cb2a(0x960)][_0x72cb2a(0x32c)]['ActionSequence'],_0x7fe146=_0xa4fd15[_0x72cb2a(0x32b)]()[_0x72cb2a(0x981)];if(_0x7fe146[_0x72cb2a(0x413)](/<CAST ANIMATION: (\d+)>/i))_0x2176ba=Number(RegExp['$1']);else{if(_0x7fe146[_0x72cb2a(0x413)](/<NO CAST ANIMATION>/i))return;else{if(_0xa4fd15[_0x72cb2a(0x11e)]())_0x2176ba=_0x2b4bc6[_0x72cb2a(0x9fe)];else{if(_0xa4fd15[_0x72cb2a(0x359)]())_0x2176ba=_0x2b4bc6[_0x72cb2a(0x55d)];else _0xa4fd15[_0x72cb2a(0x9f8)]()&&(_0x2176ba=_0x2b4bc6['CastMagical']);}}}if(_0x2176ba>0x0){if(_0x72cb2a(0x52b)!==_0x72cb2a(0x52b)){this[_0x72cb2a(0x34a)][_0x72cb2a(0xac4)]=0x0;return;}else $gameTemp[_0x72cb2a(0x54c)]([this],_0x2176ba,!!_0x3aca86);}},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x6c7)]=function(){const _0xc102aa=_0x17f940;SoundManager[_0xc102aa(0x7df)]();let _0x3d637c=VisuMZ[_0xc102aa(0x960)]['Settings'][_0xc102aa(0x664)][_0xc102aa(0xb03)];_0x3d637c>0x0&&(_0xc102aa(0x48f)!==_0xc102aa(0x3d5)?Imported[_0xc102aa(0xa8c)]?$gameTemp[_0xc102aa(0x8f6)]([this],_0x3d637c):$gameTemp['requestAnimation']([this],_0x3d637c):this[_0xc102aa(0x9c4)]['x']=-this[_0xc102aa(0x9c4)][_0xc102aa(0x67f)]-0x4);},VisuMZ['BattleCore'][_0x17f940(0x6df)]=Game_Battler[_0x17f940(0x25b)]['performDamage'],Game_Battler[_0x17f940(0x25b)][_0x17f940(0x8a7)]=function(){const _0x4baf93=_0x17f940;VisuMZ[_0x4baf93(0x960)]['Game_Battler_performDamage']['call'](this),this[_0x4baf93(0x624)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0xb1f)]=Game_Battler['prototype'][_0x17f940(0x390)],Game_Battler['prototype'][_0x17f940(0x390)]=function(){const _0x382a96=_0x17f940;VisuMZ[_0x382a96(0x960)]['Game_Battler_performMiss'][_0x382a96(0x14e)](this),this[_0x382a96(0x624)]();},VisuMZ['BattleCore'][_0x17f940(0x1a0)]=Game_Battler[_0x17f940(0x25b)][_0x17f940(0x762)],Game_Battler[_0x17f940(0x25b)]['performEvasion']=function(){const _0x4d4648=_0x17f940;VisuMZ[_0x4d4648(0x960)]['Game_Battler_performEvasion'][_0x4d4648(0x14e)](this),this[_0x4d4648(0x624)]();},Game_Battler[_0x17f940(0x25b)]['performFlinch']=function(){const _0x18c188=_0x17f940;if(!$gameSystem[_0x18c188(0x4b8)]())return;if(this[_0x18c188(0x44c)])return;this[_0x18c188(0x44c)]=!![];const _0x2cd72a=this['battler']();if(_0x2cd72a)_0x2cd72a[_0x18c188(0xaeb)]();},Game_Battler[_0x17f940(0x25b)]['requestMotionRefresh']=function(){const _0x2083c0=_0x17f940;if(this[_0x2083c0(0x9bf)]()&&this['_motionType']!=='dead'){this[_0x2083c0(0x3cd)](_0x2083c0(0x82c));return;}if(this[_0x2083c0(0x9bf)]()&&this[_0x2083c0(0x921)]===_0x2083c0(0x82c))return;if(!!this[_0x2083c0(0xa02)])return;if(this['isEnemy']()){if(!this[_0x2083c0(0x3c5)]()&&this!==BattleManager[_0x2083c0(0x128)]){if(this[_0x2083c0(0x4a6)]())this['battler']()[_0x2083c0(0x1e1)]();}this[_0x2083c0(0x2b3)]();return;}if(this[_0x2083c0(0x921)]===_0x2083c0(0x699))return;if(this[_0x2083c0(0x921)]===_0x2083c0(0x952)&&!BattleManager[_0x2083c0(0x17d)]())return;if(this['_motionType']===_0x2083c0(0x59c)&&!BattleManager['isInputting']())return;this['clearMotion']();if(this[_0x2083c0(0x4a6)]()&&BattleManager[_0x2083c0(0x17d)]()){if('Yrcoy'!=='lfFXg'){this[_0x2083c0(0x4a6)]()[_0x2083c0(0x1e1)](),this['clearFreezeMotion']();return;}else _0x1cafcc[_0x2083c0(0x25b)][_0x2083c0(0x148)]['call'](this),this[_0x2083c0(0x4ab)]&&this[_0x2083c0(0x4ab)][_0x2083c0(0x106)](),_0x1a1dc6[_0x2083c0(0x8cb)]&&_0x34efad[_0x2083c0(0x5a4)]();}},Game_Enemy[_0x17f940(0x25b)]['isDuringNonLoopingMotion']=function(){const _0x394ab1=_0x17f940;if(!this[_0x394ab1(0xa20)]())return![];const _0x1808f9=this[_0x394ab1(0x4a6)]();if(!_0x1808f9)return![];const _0x2448fc=_0x1808f9[_0x394ab1(0xa1f)];if(!_0x2448fc)return![];const _0x1adce1=_0x2448fc['_motion'];return _0x1adce1&&!_0x1adce1[_0x394ab1(0x1bc)];},Game_Battler['prototype'][_0x17f940(0x6a8)]=function(){const _0x23dbe4=_0x17f940;return this[_0x23dbe4(0x3f3)];},Game_Battler[_0x17f940(0x25b)][_0x17f940(0xa5d)]=function(_0x4b7aea){const _0x1e44fd=_0x17f940;if(!$gameSystem[_0x1e44fd(0x4b8)]())return;this[_0x1e44fd(0x3f3)]=_0x4b7aea;const _0x2e6ec8=this[_0x1e44fd(0x4a6)]();if(_0x2e6ec8)_0x2e6ec8[_0x1e44fd(0x858)]();},Game_Battler['prototype'][_0x17f940(0x760)]=function(_0x1028b8,_0x2c7d26,_0x289555){const _0x54cb4a=_0x17f940;if(!$gameSystem['isSideView']())return;const _0x1c9b71=this['battler']();if(!_0x1c9b71)return;if(_0x1028b8===_0x1c9b71[_0x54cb4a(0x521)])return;let _0x28dbfd=![];if(this['isActor']()){if(_0x54cb4a(0x255)!==_0x54cb4a(0x8cc)){if(_0x1028b8>_0x1c9b71['_baseX'])_0x28dbfd=!![];if(_0x1028b8<_0x1c9b71['_baseX'])_0x28dbfd=![];}else return this[_0x54cb4a(0xa53)][_0x54cb4a(0x4d1)]();}else{if(this[_0x54cb4a(0xae4)]()){if('IcrVN'===_0x54cb4a(0x166)){if(_0x1028b8>_0x1c9b71[_0x54cb4a(0x521)])_0x28dbfd=![];if(_0x1028b8<_0x1c9b71[_0x54cb4a(0x521)])_0x28dbfd=!![];}else{const _0x1292d5=_0xd0ddec(_0x1eb158['$1'])[_0x54cb4a(0x618)](/[\r\n]+/)[_0x54cb4a(0x646)]('');_0x5c2f38[_0x54cb4a(0x8d0)]=_0x5df0f6['processRandomizedData'](_0x1292d5);}}};this[_0x54cb4a(0xa5d)](_0x289555?!_0x28dbfd:_0x28dbfd),_0x1c9b71[_0x54cb4a(0x858)]();},Game_Battler[_0x17f940(0x25b)][_0x17f940(0xa40)]=function(_0x4736eb,_0x255e68,_0x438072,_0x409e9a,_0x4ac8c5){const _0x50c5a4=_0x17f940;if(!$gameSystem[_0x50c5a4(0x4b8)]())return;const _0x3ea263=this[_0x50c5a4(0x4a6)]();if(!_0x3ea263)return;if(_0x409e9a)this[_0x50c5a4(0x760)](_0x4736eb+_0x3ea263[_0x50c5a4(0x521)],_0x255e68+_0x3ea263[_0x50c5a4(0x626)],![]);_0x4736eb+=_0x3ea263[_0x50c5a4(0x521)]-_0x3ea263[_0x50c5a4(0x716)],_0x255e68+=_0x3ea263[_0x50c5a4(0x626)]-_0x3ea263[_0x50c5a4(0x1ac)],_0x3ea263[_0x50c5a4(0x7db)](_0x4736eb,_0x255e68,_0x438072);if(Imported['VisuMZ_0_CoreEngine'])_0x3ea263[_0x50c5a4(0x133)](_0x4ac8c5||_0x50c5a4(0x69c));},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x38f)]=function(_0x8870c8,_0x5a4cbe,_0x428e9c,_0x2bc177,_0x483081,_0x549cd5){const _0x3972c1=_0x17f940;if(!$gameSystem[_0x3972c1(0x4b8)]())return;const _0x1f2048=this['battler']();if(!_0x1f2048)return;_0x549cd5=_0x549cd5||0x0;if(_0x549cd5>0x0){if(_0x3972c1(0x414)===_0x3972c1(0x215))_0x33b7a6+=_0x4d778f(_0x450798['$1']);else{if(_0x1f2048['_baseX']>_0x8870c8)_0x8870c8+=_0x1f2048[_0x3972c1(0x67f)]/0x2+_0x549cd5;if(_0x1f2048[_0x3972c1(0x521)]<_0x8870c8)_0x8870c8-=_0x1f2048[_0x3972c1(0x67f)]/0x2+_0x549cd5;}}if(_0x2bc177)this[_0x3972c1(0x760)](_0x8870c8,_0x5a4cbe,![]);_0x8870c8-=_0x1f2048[_0x3972c1(0x716)],_0x5a4cbe-=_0x1f2048[_0x3972c1(0x1ac)],_0x1f2048['startMove'](_0x8870c8,_0x5a4cbe,_0x428e9c);if(Imported['VisuMZ_0_CoreEngine'])_0x1f2048[_0x3972c1(0x133)](_0x483081||_0x3972c1(0x69c));},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x9d7)]=function(_0x223316,_0x4121b1,_0x483937){const _0x45728e=_0x17f940;if(!$gameSystem[_0x45728e(0x4b8)]())return;const _0x11485b=this[_0x45728e(0x4a6)]();if(!_0x11485b)return;_0x11485b['startFloat'](_0x223316,_0x4121b1,_0x483937);},Game_Battler[_0x17f940(0x25b)]['jumpBattler']=function(_0x1646bc,_0x416828){const _0x2807ae=_0x17f940;if(!$gameSystem[_0x2807ae(0x4b8)]())return;const _0x53b50c=this[_0x2807ae(0x4a6)]();if(!_0x53b50c)return;_0x53b50c[_0x2807ae(0x805)](_0x1646bc,_0x416828);},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x4c4)]=function(_0x48a8a8,_0x21b93f,_0x1f043a,_0x17e795){const _0xbd4e32=_0x17f940;if(!$gameSystem['isSideView']())return;const _0x501b66=this['battler']();if(!_0x501b66)return;_0x501b66[_0xbd4e32(0x22d)](_0x48a8a8,_0x21b93f,_0x1f043a,_0x17e795);},Game_Battler[_0x17f940(0x25b)]['skewBattler']=function(_0x38c6ba,_0x46e4f4,_0xae6901,_0x5e31fc){const _0x4d5b91=_0x17f940;if(!$gameSystem[_0x4d5b91(0x4b8)]())return;const _0x138dd6=this[_0x4d5b91(0x4a6)]();if(!_0x138dd6)return;this[_0x4d5b91(0x2b6)]()&&(_0x38c6ba*=-0x1,_0x46e4f4*=-0x1),_0x138dd6[_0x4d5b91(0xaf0)](_0x38c6ba,_0x46e4f4,_0xae6901,_0x5e31fc);},Game_Battler[_0x17f940(0x25b)]['growBattler']=function(_0x2ec711,_0x5255fb,_0xc071dc,_0x2e23f6){const _0x41ed73=_0x17f940;if(!$gameSystem[_0x41ed73(0x4b8)]())return;const _0x206cf5=this['battler']();if(!_0x206cf5)return;_0x206cf5[_0x41ed73(0x57a)](_0x2ec711,_0x5255fb,_0xc071dc,_0x2e23f6);},Game_Battler['prototype'][_0x17f940(0xb22)]=function(_0x556bdb,_0x1c8b0f,_0x514053){const _0x39dab0=_0x17f940;if(!$gameSystem[_0x39dab0(0x4b8)]())return;const _0x6115a7=this[_0x39dab0(0x4a6)]();if(!_0x6115a7)return;_0x6115a7['startOpacity'](_0x556bdb,_0x1c8b0f,_0x514053);},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x2b3)]=function(){const _0x15e913=_0x17f940,_0x539fdb=!!this[_0x15e913(0xa02)];this[_0x15e913(0xa02)]=undefined,_0x539fdb&&(_0x15e913(0x9ba)!==_0x15e913(0x9ba)?(this['_callSceneOptions']=!![],this[_0x15e913(0x8ba)][_0x15e913(0x5e8)]('addText',_0x8dbad1[_0x15e913(0x960)][_0x15e913(0x32c)][_0x15e913(0x6e8)][_0x15e913(0x2b1)])):(this[_0x15e913(0x204)](),this['clearFreezeMotionForWeapons']()));},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x484)]=function(){const _0x440d42=_0x17f940;if(!SceneManager['isSceneBattle']())return;const _0x1ba9d3=this[_0x440d42(0x4a6)]();if(!_0x1ba9d3)return;let _0x2d8266=this[_0x440d42(0x2b6)]()?_0x1ba9d3[_0x440d42(0x744)]:_0x1ba9d3['_svBattlerSprite']['_weaponSprite'];if(_0x2d8266){if('kDhPR'===_0x440d42(0x93b))_0x2d8266[_0x440d42(0x4bb)](0x0);else{if(_0x2012d1['isSceneBattle']()){const _0x1fdc69=this['battler']();_0x1fdc69&&(_0x1fdc69['forceMotion'](_0x1cb460),[_0x440d42(0x85a),_0x440d42(0xa6c),_0x440d42(0x26a)][_0x440d42(0x72d)](_0x53a9db)&&this[_0x440d42(0x4a2)]());}this[_0x440d42(0x2b3)]();}}},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x32f)]=function(_0x39ae1a,_0x28afc8,_0x59cd85){const _0x51067d=_0x17f940;if(this[_0x51067d(0xae4)]()&&!this[_0x51067d(0xa20)]())return;let _0x317fe1=0x0,_0x1a083c=0x0;if(_0x39ae1a['match'](/ATTACK[ ](\d+)/i)){if(_0x51067d(0x667)!==_0x51067d(0x2d2))_0x1a083c=Number(RegExp['$1']),_0x1a083c--;else return this[_0x51067d(0x4ac)]>0x0;}if(this['isActor']()){const _0xb7f043=this['weapons']();_0x317fe1=_0xb7f043[_0x1a083c]?_0xb7f043[_0x1a083c][_0x51067d(0x555)]:0x0;}else this[_0x51067d(0xae4)]()&&(_0x317fe1=this['svBattlerData']()[_0x51067d(0x555)]||0x0);const _0x1d5449=$dataSystem[_0x51067d(0x7eb)][_0x317fe1];_0x39ae1a[_0x51067d(0x413)](/attack/i)&&(_0x39ae1a=[_0x51067d(0xa6c),_0x51067d(0x85a),'missile'][_0x1d5449[_0x51067d(0x523)]]||_0x51067d(0x85a)),this['_freezeMotionData']={'motionType':_0x39ae1a,'weaponImageId':_0x28afc8?_0x1d5449[_0x51067d(0x498)]:0x0,'pattern':_0x59cd85};},Game_Battler[_0x17f940(0x25b)][_0x17f940(0xb29)]=function(_0x55f2a5){const _0x52363f=_0x17f940;if(!_0x55f2a5)return![];return _0x55f2a5[_0x52363f(0x52d)]()===this[_0x52363f(0x52d)]();},Game_Battler[_0x17f940(0x25b)]['isOpponent']=function(_0x4d21d3){const _0x394d42=_0x17f940;if(!_0x4d21d3)return![];return _0x4d21d3[_0x394d42(0x6fa)]()===this['friendsUnit']();},VisuMZ[_0x17f940(0x960)]['Game_Actor_setup']=Game_Actor[_0x17f940(0x25b)][_0x17f940(0x4bb)],Game_Actor['prototype'][_0x17f940(0x4bb)]=function(_0x23a64b){const _0x3acb2f=_0x17f940;VisuMZ[_0x3acb2f(0x960)]['Game_Actor_setup'][_0x3acb2f(0x14e)](this,_0x23a64b),this[_0x3acb2f(0x9a0)]();},Game_Actor['prototype'][_0x17f940(0x9a0)]=function(){const _0x4409f9=_0x17f940;this[_0x4409f9(0x2a3)]='',this[_0x4409f9(0x371)]()&&this[_0x4409f9(0x371)]()['note'][_0x4409f9(0x413)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x422)]=function(){const _0x1a569a=_0x17f940;if(this[_0x1a569a(0x2fc)]()!==''){if(_0x1a569a(0x363)==='zcijx')_0x44a881[_0x1a569a(0x154)](_0x2eb9f3),_0x4804b9[_0x1a569a(0x154)](_0x2e093f);else return this[_0x1a569a(0x2fc)]();}else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x1a569a(0x85f)]()!==''){if(_0x1a569a(0x7a8)!==_0x1a569a(0x5ff))return this[_0x1a569a(0x85f)]();else this[_0x1a569a(0x8aa)]();}}return'';},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x2fc)]=function(){const _0x3beeb2=_0x17f940;if(this[_0x3beeb2(0x2a3)]===undefined)this['initBattlePortrait']();return this[_0x3beeb2(0x2a3)];},Game_Actor['prototype'][_0x17f940(0x11b)]=function(_0x3da680){const _0x1b7d18=_0x17f940;if(this[_0x1b7d18(0x2a3)]===undefined)this[_0x1b7d18(0x9a0)]();this[_0x1b7d18(0x2a3)]=_0x3da680;if(SceneManager[_0x1b7d18(0x2ac)]()&&$gameParty['battleMembers']()[_0x1b7d18(0x72d)](this)){if(_0x1b7d18(0x768)==='LduhP'){const _0x5a8e2c=SceneManager[_0x1b7d18(0x712)]['_statusWindow'];if(_0x5a8e2c)_0x5a8e2c['refreshActorPortrait'](this);}else{if(_0x4cc744['type']===0x0)this[_0x1b7d18(0x3cd)](_0x1b7d18(0xa6c));else{if(_0x52f838[_0x1b7d18(0x523)]===0x1)this[_0x1b7d18(0x3cd)]('swing');else _0xdcd2e0[_0x1b7d18(0x523)]===0x2&&this[_0x1b7d18(0x3cd)](_0x1b7d18(0x26a));}this['startWeaponAnimation'](_0x4043a2[_0x1b7d18(0x498)]);}}},Game_Actor[_0x17f940(0x25b)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x57c)]=function(){const _0x588895=_0x17f940;if(!this[_0x588895(0x6c3)]()&&BattleManager[_0x588895(0x8da)])return!![];return Game_Battler['prototype'][_0x588895(0x57c)]['call'](this);},VisuMZ['BattleCore'][_0x17f940(0x95e)]=Game_Actor[_0x17f940(0x25b)]['makeActionList'],Game_Actor[_0x17f940(0x25b)]['makeActionList']=function(){const _0x3d959d=_0x17f940;if(BattleManager[_0x3d959d(0x8da)]&&!ConfigManager['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{if(_0x3d959d(0x402)!=='kxDKM'){return VisuMZ[_0x3d959d(0x960)]['Game_Actor_makeActionList'][_0x3d959d(0x14e)](this);;}else return _0x180657[_0x3d959d(0x843)]-_0x522c59[_0x3d959d(0x843)];}},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x6b0)]=function(){const _0x318516=[],_0xf71ddb=new Game_Action(this);return _0xf71ddb['setAttack'](),_0x318516['push'](_0xf71ddb),_0x318516;},Game_Actor['prototype']['battleCommands']=function(){const _0x571f80=_0x17f940;return this[_0x571f80(0x767)]()[_0x571f80(0x981)][_0x571f80(0x413)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x571f80(0x618)](/[\r\n]+/):VisuMZ['BattleCore'][_0x571f80(0x32c)][_0x571f80(0x7a1)][_0x571f80(0x6f5)];},Game_Actor[_0x17f940(0x25b)]['svBattlerAnchorX']=function(){const _0x43ba45=_0x17f940;if(this['_cache'][_0x43ba45(0x5a6)]!==undefined)return this[_0x43ba45(0x32a)]['svAnchorX'];return this[_0x43ba45(0x371)]()[_0x43ba45(0x981)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x43ba45(0x32a)][_0x43ba45(0x5a6)]=eval(RegExp['$1']),this[_0x43ba45(0x32a)][_0x43ba45(0x82d)]=eval(RegExp['$2'])):this[_0x43ba45(0x32a)]['svAnchorX']=Game_Battler[_0x43ba45(0x25b)][_0x43ba45(0x61d)][_0x43ba45(0x14e)](this),this[_0x43ba45(0x32a)][_0x43ba45(0x5a6)];},Game_Actor[_0x17f940(0x25b)]['svBattlerAnchorY']=function(){const _0x577a77=_0x17f940;if(this[_0x577a77(0x32a)]['svAnchorY']!==undefined)return this[_0x577a77(0x32a)][_0x577a77(0x82d)];return this[_0x577a77(0x371)]()[_0x577a77(0x981)][_0x577a77(0x413)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x577a77(0x32a)]['svAnchorX']=eval(RegExp['$1']),this[_0x577a77(0x32a)][_0x577a77(0x82d)]=eval(RegExp['$2'])):this[_0x577a77(0x32a)]['svAnchorY']=Game_Battler[_0x577a77(0x25b)][_0x577a77(0x733)][_0x577a77(0x14e)](this),this[_0x577a77(0x32a)][_0x577a77(0x82d)];},Game_Actor[_0x17f940(0x25b)][_0x17f940(0xaec)]=function(){const _0x544d44=_0x17f940;if(this['_cache'][_0x544d44(0x63b)]!==undefined)return this['_cache'][_0x544d44(0x63b)];if(this[_0x544d44(0x371)]()[_0x544d44(0x981)][_0x544d44(0x413)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x544d44(0x32a)][_0x544d44(0x63b)]=!![];else{if(this[_0x544d44(0x371)]()[_0x544d44(0x981)][_0x544d44(0x413)](/<SIDEVIEW HIDE SHADOW>/i))_0x544d44(0x3fc)===_0x544d44(0x5aa)?_0x48f4f8[_0x544d44(0x960)][_0x544d44(0x63e)][_0x544d44(0x14e)](this):this[_0x544d44(0x32a)][_0x544d44(0x63b)]=![];else{if(_0x544d44(0x7b5)==='mUKZL'){const _0x38f204=[];for(let _0x5bb57b=0x0;_0x5bb57b<this[_0x544d44(0x6c4)]();_0x5bb57b++){_0x38f204[_0x544d44(0x5e8)](_0x46cf14[_0x544d44(0x18c)]());}return _0x38f204;}else this[_0x544d44(0x32a)][_0x544d44(0x63b)]=Game_Battler[_0x544d44(0x25b)]['svBattlerShadowVisible'][_0x544d44(0x14e)](this);}}return this[_0x544d44(0x32a)][_0x544d44(0x63b)];},Game_Actor['prototype']['battlerSmoothImage']=function(){const _0xed3861=_0x17f940;return VisuMZ['BattleCore'][_0xed3861(0x32c)][_0xed3861(0x36b)][_0xed3861(0x29c)];},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x4a2)]=function(){const _0x520153=_0x17f940,_0xb0f126=this[_0x520153(0x16e)](),_0xcdc9fd=_0xb0f126[0x0]?_0xb0f126[0x0]['wtypeId']:0x0,_0x457ab4=$dataSystem[_0x520153(0x7eb)][_0xcdc9fd];_0x457ab4&&this[_0x520153(0x788)](_0x457ab4[_0x520153(0x498)]);},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x3e3)]=function(_0x3b63c8){const _0x4c1ebe=_0x17f940;Game_Battler[_0x4c1ebe(0x25b)][_0x4c1ebe(0x3e3)]['call'](this,_0x3b63c8),this['performActionMotions'](_0x3b63c8);},Game_Actor['prototype'][_0x17f940(0x7c8)]=function(){const _0x19af0e=_0x17f940,_0x323b59=this[_0x19af0e(0x16e)](),_0x33317f=_0x323b59[0x0]?_0x323b59[0x0][_0x19af0e(0x555)]:0x0;return $dataSystem[_0x19af0e(0x7eb)][_0x33317f];},Game_Actor['prototype'][_0x17f940(0x207)]=function(_0x54708a){const _0x470e4c=_0x17f940;_0x54708a=_0x54708a||0x1,_0x54708a--;const _0x321651=this[_0x470e4c(0x16e)]();return _0x321651[_0x54708a]?_0x321651[_0x54708a][_0x470e4c(0xab3)]:0x0;},Game_Actor['prototype'][_0x17f940(0x96c)]=function(_0x1d05ba){const _0x9cff90=_0x17f940;_0x1d05ba=_0x1d05ba||0x1,_0x1d05ba--;const _0x35ddab=this[_0x9cff90(0x16e)](),_0x34700e=_0x35ddab[_0x1d05ba]?_0x35ddab[_0x1d05ba]['wtypeId']:0x0;return $dataSystem[_0x9cff90(0x7eb)][_0x34700e];},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x753)]=function(_0x3ba848){const _0x260d01=_0x17f940;_0x3ba848=_0x3ba848||0x1,_0x3ba848--;const _0x409c37=this[_0x260d01(0x16e)](),_0x46fb97=_0x409c37[_0x3ba848]?_0x409c37[_0x3ba848][_0x260d01(0x555)]:0x0,_0x57f43d=$dataSystem[_0x260d01(0x7eb)][_0x46fb97];if(_0x57f43d){if(_0x260d01(0x7bc)==='ZFwOu'){_0x34a6e6[_0x260d01(0x25b)][_0x260d01(0x506)][_0x260d01(0x14e)](this);if(this[_0x260d01(0x289)])this[_0x260d01(0x896)]();}else{if(_0x57f43d[_0x260d01(0x523)]===0x0){if(_0x260d01(0xff)!==_0x260d01(0xff)){let _0x58dae2=_0x56e360[_0x260d01(0x2ec)](_0xfdab1a['id']);this[_0x260d01(0x22b)](_0x58dae2);}else this[_0x260d01(0x3cd)](_0x260d01(0xa6c));}else{if(_0x57f43d[_0x260d01(0x523)]===0x1){if(_0x260d01(0x1fc)!==_0x260d01(0x1fc))return _0x3bf08d[_0x260d01(0x347)]()['includes'](this[_0x260d01(0x2fb)]);else this['requestMotion']('swing');}else _0x57f43d['type']===0x2&&this[_0x260d01(0x3cd)]('missile');}this[_0x260d01(0x788)](_0x57f43d[_0x260d01(0x498)]);}}},Game_Battler['prototype'][_0x17f940(0x1e3)]=function(_0x5b4a2a){this['_activeWeaponSlot']=_0x5b4a2a||0x0;},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x3e2)]=function(){const _0x2a8f57=_0x17f940;this[_0x2a8f57(0x670)]=this['_activeWeaponSlot']||0x0,this[_0x2a8f57(0x670)]++;},Game_Battler[_0x17f940(0x25b)][_0x17f940(0x637)]=function(){const _0x564acb=_0x17f940;this[_0x564acb(0x670)]=undefined;},VisuMZ['BattleCore'][_0x17f940(0x619)]=Game_Actor['prototype'][_0x17f940(0x267)],Game_Actor[_0x17f940(0x25b)][_0x17f940(0x267)]=function(){const _0x55e8b9=_0x17f940;let _0x5c9525=VisuMZ['BattleCore'][_0x55e8b9(0x619)][_0x55e8b9(0x14e)](this);if(this['_tempEquipCheck'])return _0x5c9525;if(this[_0x55e8b9(0x670)]!==undefined){this['_tempEquipCheck']=!![];const _0x2e655a=this[_0x55e8b9(0x8c7)]();for(let _0x11c069=0x0;_0x11c069<_0x2e655a['length'];_0x11c069++){_0x2e655a[_0x11c069]===0x1&&this[_0x55e8b9(0x670)]!==_0x11c069&&(_0x5c9525[_0x11c069]=null);}this[_0x55e8b9(0x86b)]=undefined;}return _0x5c9525;},Window_BattleLog['prototype'][_0x17f940(0x75e)]=function(_0x176f19){const _0x71c441=_0x17f940;if(_0x176f19[_0x71c441(0x2b6)]())return _0x176f19[_0x71c441(0x16e)]()[_0x71c441(0x702)]||0x1;else{if('tpsLu'==='tpsLu')return 0x1;else _0x22f194['BattleCore'][_0x71c441(0x304)][_0x71c441(0x14e)](this);}},Window_BattleLog[_0x17f940(0x25b)]['setActiveWeaponSet']=function(_0x47c392,_0x346f6c){const _0x330d98=_0x17f940;_0x47c392&&_0x47c392[_0x330d98(0x2b6)]()&&(_0x330d98(0x461)!==_0x330d98(0x461)?this[_0x330d98(0x24d)](_0xb24435,_0x4ff9ea,_0x31aebc):_0x47c392[_0x330d98(0x1e3)](_0x346f6c)),this[_0x330d98(0x245)]();},Window_BattleLog['prototype'][_0x17f940(0x66b)]=function(_0x1ef280){const _0x5076a1=_0x17f940;_0x1ef280&&_0x1ef280['isActor']()&&_0x1ef280[_0x5076a1(0x637)](),this[_0x5076a1(0x245)]();},Game_Actor[_0x17f940(0x25b)][_0x17f940(0x563)]=function(){const _0x200c68=_0x17f940;let _0x1dcbe0=_0x200c68(0x563);if(this[_0x200c68(0x972)](_0x1dcbe0))return this['_cache'][_0x1dcbe0];return this[_0x200c68(0x32a)][_0x1dcbe0]=this[_0x200c68(0x73e)](this[_0x200c68(0x371)]()),this[_0x200c68(0x32a)][_0x1dcbe0];},Game_Actor['prototype'][_0x17f940(0x2e8)]=function(){const _0x270da2=_0x17f940;let _0x5c84f0=_0x270da2(0x2e8);if(this['checkCacheKey'](_0x5c84f0))return this['_cache'][_0x5c84f0];return this['_cache'][_0x5c84f0]=this[_0x270da2(0x7c5)](this['actor']()),this['_cache'][_0x5c84f0];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x236)]=Game_Enemy[_0x17f940(0x25b)]['setup'],Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x4bb)]=function(_0x44595a,_0x574bc4,_0x90b40c){const _0x107c96=_0x17f940;_0x44595a=DataManager[_0x107c96(0xaf7)](_0x44595a),VisuMZ[_0x107c96(0x960)][_0x107c96(0x236)][_0x107c96(0x14e)](this,_0x44595a,_0x574bc4,_0x90b40c);if(Imported[_0x107c96(0x83f)]){if(_0x107c96(0x51e)===_0x107c96(0x4be)){if(!_0x14d5a0[_0x107c96(0x9fb)](_0x30f833))return![];}else this[_0x107c96(0x774)]();}this[_0x107c96(0x5c6)](),this['setupBattleCoreData'](),Imported[_0x107c96(0x83f)]&&this[_0x107c96(0x384)]();},Game_Enemy['prototype'][_0x17f940(0x5c6)]=function(){const _0x7a558d=_0x17f940,_0x33d93d=VisuMZ[_0x7a558d(0x960)][_0x7a558d(0x32c)]['Enemy'];this['_attackAnimationId']=_0x33d93d['AttackAnimation'],this[_0x7a558d(0x726)]={};},Game_Enemy['prototype']['setupBattleCoreData']=function(){const _0x436ff3=_0x17f940,_0x91fd8e=VisuMZ['BattleCore'][_0x436ff3(0x32c)][_0x436ff3(0x99a)],_0x2f39e2=this[_0x436ff3(0x1c2)]()['note'];this['_svBattlerData']={'name':'','wtypeId':_0x91fd8e[_0x436ff3(0x225)],'collapse':_0x91fd8e[_0x436ff3(0x1d6)],'motionIdle':_0x91fd8e[_0x436ff3(0x5c1)],'width':_0x91fd8e[_0x436ff3(0x6ff)]||0x40,'height':_0x91fd8e[_0x436ff3(0xac2)]||0x40,'anchorX':_0x91fd8e[_0x436ff3(0x93c)]||0x0,'anchorY':_0x91fd8e[_0x436ff3(0x38b)]||0x0,'shadow':_0x91fd8e[_0x436ff3(0x7da)]};_0x2f39e2[_0x436ff3(0x413)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x436ff3(0x1ed)]=Number(RegExp['$1']));const _0x16be28=this[_0x436ff3(0x726)];if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x436ff3(0x8c4)===_0x436ff3(0x24c)){const _0x20a147=this[_0x436ff3(0xa3d)]&&this[_0x436ff3(0xa3d)][_0x436ff3(0x6a8)]();this['_flipScaleX']=(_0x20a147?-0x1:0x1)*_0x42ce7a[_0x436ff3(0x1ca)](this['scale']['x']);}else _0x16be28[_0x436ff3(0x8d0)]=String(RegExp['$1']);}else{if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x4245ca=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x436ff3(0x646)]('');_0x16be28[_0x436ff3(0x8d0)]=DataManager['processRandomizedData'](_0x4245ca);}}_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x16be28['anchorX']=eval(RegExp['$1']),_0x16be28['anchorY']=eval(RegExp['$2']));if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW COLLAPSE>/i))_0x16be28[_0x436ff3(0x8d3)]=!![];else{if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x436ff3(0x33c)!==_0x436ff3(0x2a5))_0x16be28['collapse']=![];else{if(!_0x509f69[_0x436ff3(0x2ac)]())return;if(!_0x17f1c1[_0x436ff3(0x660)])return;_0x306f0f[_0x436ff3(0x20e)](_0x61462d,_0x17ca32);const _0x1cfc75=_0x5e4065['getLastPluginCommandInterpreter'](),_0x5dc75b=_0x4551fc[_0x436ff3(0x89e)];if(!_0x1cfc75)return;_0x5a9a1c[_0x436ff3(0x3e0)](_0x3bea6d[_0x436ff3(0x759)],_0x16c7d9[_0x436ff3(0x7d9)],_0x274fc8[_0x436ff3(0x5ad)],_0x5acf12[_0x436ff3(0x6e2)]);if(_0x5dc75b)_0x1cfc75[_0x436ff3(0x6a1)](_0x436ff3(0x306));}}}if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW SHOW SHADOW>/i))_0x16be28['shadow']=!![];else _0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x16be28[_0x436ff3(0x576)]=![]);if(_0x2f39e2['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x16be28['motionIdle']=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x436ff3(0x8ed)!==_0x436ff3(0xad0)){const _0x5d7733=String(RegExp['$1'])[_0x436ff3(0x618)](/[\r\n]+/)[_0x436ff3(0x646)]('');_0x16be28[_0x436ff3(0x357)]=DataManager[_0x436ff3(0x746)](_0x5d7733);}else{if(!_0x521621['isSceneBattle']())return;if(!_0x47958['VisuMZ_3_ActSeqCamera'])return;_0x2261ab[_0x436ff3(0x20e)](_0x555376,_0x8ad33e);const _0x5dbb8f=_0x3d7ec9['getLastPluginCommandInterpreter'](),_0xff5779=_0x43ff46[_0x436ff3(0x2fd)],_0x228a86=_0x58a46f[_0x436ff3(0x96f)],_0x46d9c0=_0x3b4f4e[_0x436ff3(0x4d9)];if(_0xff5779){const _0x38db09=_0x6d90a6['round'](_0x15c137[_0x436ff3(0x67f)]/0x2),_0x3670d6=_0x4e42f[_0x436ff3(0x189)](_0x5c240d['height']/0x2);_0x1b1946['setBattleCameraPoint'](_0x38db09,_0x3670d6,_0x435cb1['Duration'],_0x22d4c1['EasingType']);}_0x228a86&&_0x45123a[_0x436ff3(0x64c)](0x0,0x0,_0x8b443a[_0x436ff3(0x5ad)],_0x262d4b['EasingType']);if(_0x46d9c0)_0x5dbb8f['setWaitMode'](_0x436ff3(0x83b));}}}_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x16be28[_0x436ff3(0x67f)]=Number(RegExp['$1']),_0x16be28[_0x436ff3(0x87c)]=Number(RegExp['$2']));if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW WEAPON: (.*)>/i))_0x16be28[_0x436ff3(0x555)]=DataManager[_0x436ff3(0x12b)](RegExp['$1']);else{if(_0x2f39e2[_0x436ff3(0x413)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x436ff3(0x5f1)===_0x436ff3(0x5f1)){const _0x55700e=String(RegExp['$1'])[_0x436ff3(0x618)](/[\r\n]+/)[_0x436ff3(0x646)](''),_0x4c2934=DataManager[_0x436ff3(0x746)](_0x55700e);_0x16be28[_0x436ff3(0x555)]=DataManager[_0x436ff3(0x12b)](_0x4c2934);}else this[_0x436ff3(0x780)](_0x2b562e,_0x20c6ac['x']+_0x1b7a73['width']-_0x2a04fc,_0x31f6c3['y'],_0x2bf969);}}if(Imported['VisuMZ_1_ElementStatusCore']){if(_0x436ff3(0x41e)===_0x436ff3(0x41e)){const _0x5e11f0=this[_0x436ff3(0x4a1)]();for(const _0x2d4160 of _0x5e11f0){const _0x3c4689=this[_0x436ff3(0x1ab)](_0x2d4160)[_0x436ff3(0x6a7)]['toUpperCase']()[_0x436ff3(0x224)](),_0x5d4cbb=_0x2d4160[_0x436ff3(0x9cb)]()[_0x436ff3(0x224)]();if(_0x2f39e2[_0x436ff3(0x413)](VisuMZ[_0x436ff3(0x2cb)][_0x436ff3(0x352)][_0x436ff3(0x918)[_0x436ff3(0x8a4)](_0x5d4cbb,_0x3c4689)]))_0x436ff3(0x2ba)!==_0x436ff3(0x72c)?_0x16be28[_0x436ff3(0x8d0)]=String(RegExp['$1']):(_0x2a1974[_0x436ff3(0x960)]['Sprite_Enemy_setBattler'][_0x436ff3(0x14e)](this,_0x13c25b),this[_0x436ff3(0x211)](_0x4f60c2));else{if(_0x2f39e2[_0x436ff3(0x413)](VisuMZ['ElementStatusCore'][_0x436ff3(0x352)][_0x436ff3(0x880)[_0x436ff3(0x8a4)](_0x5d4cbb,_0x3c4689)])){const _0x3c4d3a=String(RegExp['$1'])[_0x436ff3(0x618)](/[\r\n]+/)['remove']('');_0x16be28['name']=DataManager[_0x436ff3(0x746)](_0x3c4d3a);}}if(_0x2f39e2['match'](VisuMZ[_0x436ff3(0x2cb)][_0x436ff3(0x352)][_0x436ff3(0x7f8)[_0x436ff3(0x8a4)](_0x5d4cbb,_0x3c4689)]))_0x16be28[_0x436ff3(0x555)]=DataManager[_0x436ff3(0x12b)](RegExp['$1']);else{if(_0x2f39e2[_0x436ff3(0x413)](VisuMZ[_0x436ff3(0x2cb)]['RegExp']['SvWeaponMass-%1-%2'[_0x436ff3(0x8a4)](_0x5d4cbb,_0x3c4689)])){if(_0x436ff3(0x5f5)!==_0x436ff3(0x79b)){const _0x3f710e=String(RegExp['$1'])[_0x436ff3(0x618)](/[\r\n]+/)[_0x436ff3(0x646)](''),_0x59a138=DataManager[_0x436ff3(0x746)](_0x3f710e);_0x16be28[_0x436ff3(0x555)]=DataManager['getWtypeIdWithName'](_0x59a138);}else{const _0x2e8363=_0xff46f(_0x411b77['$1'])[_0x436ff3(0x9cb)]()['trim']();return _0x2e8363;}}}if(_0x2f39e2[_0x436ff3(0x413)](VisuMZ['ElementStatusCore'][_0x436ff3(0x352)][_0x436ff3(0x594)[_0x436ff3(0x8a4)](_0x5d4cbb,_0x3c4689)]))_0x16be28[_0x436ff3(0x357)]=String(RegExp['$1'])['toLowerCase']()[_0x436ff3(0x224)]();else{if(_0x2f39e2[_0x436ff3(0x413)](VisuMZ['ElementStatusCore'][_0x436ff3(0x352)][_0x436ff3(0x8f8)[_0x436ff3(0x8a4)](_0x5d4cbb,_0x3c4689)])){const _0x2a62be=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x436ff3(0x646)]('');_0x16be28[_0x436ff3(0x357)]=DataManager[_0x436ff3(0x746)](_0x2a62be);}}}}else _0x212cad*=this[_0x436ff3(0x6dd)]();}},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x9aa)]=function(){const _0x48fbb3=_0x17f940;return this[_0x48fbb3(0x1ed)]||0x0;},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x912)]=function(){const _0x58a92b=_0x17f940;return this[_0x58a92b(0x9aa)]();},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x207)]=function(_0x4d9acd){const _0x4f423d=_0x17f940;return this[_0x4f423d(0x9aa)]();},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x582)]=function(){const _0x244d70=_0x17f940;if(this[_0x244d70(0x1c2)]()[_0x244d70(0x981)][_0x244d70(0x413)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x244d70(0x582)][_0x244d70(0x14e)](this);},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x3c6)]=function(){const _0x436b95=_0x17f940;if(this[_0x436b95(0x1c2)]()[_0x436b95(0x981)][_0x436b95(0x413)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x11c)]=function(){const _0x82a3=_0x17f940,_0x4227c0=[];for(const _0x3f94fe of this[_0x82a3(0x1c2)]()[_0x82a3(0x434)]){const _0x4defe0=$dataSkills[_0x3f94fe[_0x82a3(0x6fe)]];if(_0x4defe0&&!_0x4227c0[_0x82a3(0x72d)](_0x4defe0))_0x4227c0[_0x82a3(0x5e8)](_0x4defe0);}return _0x4227c0;},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x563)]=function(){const _0x4de07c=_0x17f940;let _0x2e07a2=_0x4de07c(0x563);if(this['checkCacheKey'](_0x2e07a2))return this[_0x4de07c(0x32a)][_0x2e07a2];return this[_0x4de07c(0x32a)][_0x2e07a2]=this[_0x4de07c(0x73e)](this['enemy']()),this[_0x4de07c(0x32a)][_0x2e07a2];},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x2e8)]=function(){const _0x73f878=_0x17f940;let _0x50e4bf=_0x73f878(0x2e8);if(this[_0x73f878(0x972)](_0x50e4bf))return this[_0x73f878(0x32a)][_0x50e4bf];return this[_0x73f878(0x32a)][_0x50e4bf]=this['createBattleUIOffsetY'](this[_0x73f878(0x1c2)]()),this[_0x73f878(0x32a)][_0x50e4bf];},Game_Enemy[_0x17f940(0x25b)]['svBattlerData']=function(){const _0x34788d=_0x17f940;if(this[_0x34788d(0x726)]!==undefined)return this[_0x34788d(0x726)];return this['setupBattleCoreData'](),this[_0x34788d(0x726)];},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0xa20)]=function(){const _0x4f59dc=_0x17f940;return this[_0x4f59dc(0x8d5)]()[_0x4f59dc(0x8d0)]!=='';},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x645)]=function(){const _0x3c6f94=_0x17f940;return this[_0x3c6f94(0x8d5)]()[_0x3c6f94(0x8d0)];},Game_Enemy['prototype'][_0x17f940(0x5ef)]=function(){const _0xffb698=_0x17f940;if(this['hasSvBattler']())return _0xffb698(0x64e)===_0xffb698(0x1c3)?_0x58d8b7[_0xffb698(0x960)][_0xffb698(0x32c)][_0xffb698(0x334)][_0xffb698(0x81d)]:VisuMZ['BattleCore']['Settings'][_0xffb698(0x36b)][_0xffb698(0x29c)];else{if('tZbxR'!==_0xffb698(0x770))return VisuMZ[_0xffb698(0x960)][_0xffb698(0x32c)][_0xffb698(0x99a)]['SmoothImage'];else _0x817ca4=_0x26a652[_0xffb698(0x960)][_0xffb698(0x9df)][_0xffb698(0x14e)](this);}},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x3e3)]=function(_0x1cb71b){const _0x4f3558=_0x17f940;Game_Battler[_0x4f3558(0x25b)][_0x4f3558(0x3e3)][_0x4f3558(0x14e)](this,_0x1cb71b);if(this[_0x4f3558(0xa20)]())this[_0x4f3558(0xb05)](_0x1cb71b);},Game_Enemy[_0x17f940(0x25b)]['performAttack']=function(){const _0x4ae2a=_0x17f940,_0x1de795=this[_0x4ae2a(0x8d5)]()[_0x4ae2a(0x555)]||0x0,_0x40c2ff=$dataSystem['attackMotions'][_0x1de795];if(_0x40c2ff){if(_0x40c2ff[_0x4ae2a(0x523)]===0x0){if('aDvYQ'===_0x4ae2a(0x168))this[_0x4ae2a(0x3cd)]('thrust');else{const _0x34f911=this['battleLayoutStyle']();if(_0x1f40e6&&['xp','portrait'][_0x4ae2a(0x72d)](_0x34f911))this[_0x4ae2a(0x92e)](_0x31ba78);else _0xe8d54a&&['border'][_0x4ae2a(0x72d)](_0x34f911)&&(this[_0x4ae2a(0xa5b)](_0x4f4a61),this[_0x4ae2a(0x8aa)]());_0x6bf1a6[_0x4ae2a(0x960)][_0x4ae2a(0xaba)][_0x4ae2a(0x14e)](this,_0x494c72),_0x479647&&_0x76e35e['aliveMembers']()['length']>0x0&&_0x3d6760['battler']()&&_0x318ca4[_0x4ae2a(0x4a6)]()[_0x4ae2a(0xa6f)]();}}else{if(_0x40c2ff[_0x4ae2a(0x523)]===0x1){if(_0x4ae2a(0x2f5)!==_0x4ae2a(0x46a))this['requestMotion']('swing');else{if(!_0x46264c)return;if(!this[_0x4ae2a(0x871)])return;this[_0x4ae2a(0x871)][_0x4ae2a(0x6ce)]['x']=this['_actor']['svBattlerAnchorX'](),this[_0x4ae2a(0x871)]['anchor']['y']=this[_0x4ae2a(0x6af)]['svBattlerAnchorY'](),this['updateShadowVisibility']();}}else _0x40c2ff[_0x4ae2a(0x523)]===0x2&&(_0x4ae2a(0x79a)==='zbSpE'?this[_0x4ae2a(0x697)]=!![]:this[_0x4ae2a(0x3cd)]('missile'));}}},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x4a2)]=function(){const _0x4b1d7e=_0x17f940,_0x4fb865=this[_0x4b1d7e(0x8d5)]()[_0x4b1d7e(0x555)]||0x0,_0x41dc9f=$dataSystem[_0x4b1d7e(0x7eb)][_0x4fb865];_0x41dc9f&&this[_0x4b1d7e(0x788)](_0x41dc9f[_0x4b1d7e(0x498)]);},Game_Enemy['prototype'][_0x17f940(0x7c8)]=function(){const _0x4c0bcf=_0x17f940,_0x3519d7=this['svBattlerData']()[_0x4c0bcf(0x555)]||0x0;return $dataSystem['attackMotions'][_0x3519d7];},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x96c)]=function(_0x1afe38){const _0x202974=_0x17f940;return this[_0x202974(0x7c8)]();},Game_Enemy['prototype'][_0x17f940(0x8a7)]=function(){const _0x1acbf8=_0x17f940;Game_Battler['prototype'][_0x1acbf8(0x8a7)][_0x1acbf8(0x14e)](this),this['isSpriteVisible']()&&this[_0x1acbf8(0xa20)]()&&this[_0x1acbf8(0x3cd)](_0x1acbf8(0x203)),SoundManager[_0x1acbf8(0x49e)]();},Game_Enemy[_0x17f940(0x25b)]['performEvasion']=function(){const _0x2adbd9=_0x17f940;Game_Battler[_0x2adbd9(0x25b)][_0x2adbd9(0x762)]['call'](this),this['requestMotion']('evade');},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x4b6)]=function(){const _0x29816f=_0x17f940;Game_Battler[_0x29816f(0x25b)][_0x29816f(0x4b6)][_0x29816f(0x14e)](this),this['requestMotion']('evade');},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x4c3)]=function(){const _0x45cba1=_0x17f940;Game_Battler[_0x45cba1(0x25b)][_0x45cba1(0x4c3)][_0x45cba1(0x14e)](this),this['performAttack']();},Game_Enemy[_0x17f940(0x25b)]['allowCollapse']=function(){const _0x3ef6b6=_0x17f940;if(this[_0x3ef6b6(0xa20)]()){if('pbWbX'===_0x3ef6b6(0x655))return _0x599b31[_0x3ef6b6(0x1b6)]();else{if(this[_0x3ef6b6(0xa47)]()>=0x1)return!![];return this['svBattlerData']()[_0x3ef6b6(0x8d3)];}}else return!![];},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0x61d)]=function(){const _0x3b2f0f=_0x17f940;return this[_0x3b2f0f(0x8d5)]()[_0x3b2f0f(0x631)];},Game_Enemy[_0x17f940(0x25b)]['svBattlerAnchorY']=function(){const _0x4d50d9=_0x17f940;return this[_0x4d50d9(0x8d5)]()['anchorY'];},Game_Enemy[_0x17f940(0x25b)][_0x17f940(0xaec)]=function(){const _0x3f1496=_0x17f940;return this[_0x3f1496(0x8d5)]()[_0x3f1496(0x576)];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x165)]=Game_Enemy[_0x17f940(0x25b)]['transform'],Game_Enemy['prototype'][_0x17f940(0x45b)]=function(_0x213775){const _0x4d9845=_0x17f940;VisuMZ[_0x4d9845(0x960)]['Game_Enemy_transform']['call'](this,_0x213775),this[_0x4d9845(0x5c6)](),this[_0x4d9845(0x551)]();const _0x43d5d8=this['battler']();if(_0x43d5d8)_0x43d5d8[_0x4d9845(0x46d)](this);},Game_Unit['prototype']['processBattleCoreJS']=function(_0x50fed8){const _0x3b34e2=_0x17f940;for(const _0x538348 of this[_0x3b34e2(0x587)]()){if(_0x538348)_0x538348[_0x3b34e2(0x154)](_0x50fed8);}},Game_Unit[_0x17f940(0x25b)][_0x17f940(0x18c)]=function(){const _0x19fde1=_0x17f940,_0x2f9065=this[_0x19fde1(0x6f6)]();return _0x2f9065[Math[_0x19fde1(0x9d5)](_0x2f9065[_0x19fde1(0x702)])];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x33f)]=Game_Party['prototype'][_0x17f940(0x1a3)],Game_Party[_0x17f940(0x25b)][_0x17f940(0x1a3)]=function(_0x25d572){const _0x198dff=_0x17f940;VisuMZ[_0x198dff(0x960)][_0x198dff(0x33f)][_0x198dff(0x14e)](this,_0x25d572),BattleManager[_0x198dff(0x8b4)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x84d)]=Game_Party[_0x17f940(0x25b)]['removeActor'],Game_Party[_0x17f940(0x25b)][_0x17f940(0x544)]=function(_0x216397){const _0x10a39b=_0x17f940;VisuMZ[_0x10a39b(0x960)]['Game_Party_removeActor']['call'](this,_0x216397),BattleManager['refreshStatusWindow']();},VisuMZ['BattleCore']['Game_Troop_setup']=Game_Troop[_0x17f940(0x25b)][_0x17f940(0x4bb)],Game_Troop[_0x17f940(0x25b)]['setup']=function(_0x4c1ad7){const _0x4cd689=_0x17f940;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x4cd689(0xa3a)](_0x4c1ad7),VisuMZ[_0x4cd689(0x960)][_0x4cd689(0x9e0)][_0x4cd689(0x14e)](this,_0x4c1ad7);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x485)]=Game_Troop[_0x17f940(0x25b)][_0x17f940(0x593)],Game_Troop[_0x17f940(0x25b)]['expTotal']=function(){const _0x5da6eb=_0x17f940;let _0x4f8a64=VisuMZ[_0x5da6eb(0x960)][_0x5da6eb(0x485)]['call'](this);return this[_0x5da6eb(0x6dd)]&&(_0x4f8a64*=this[_0x5da6eb(0x6dd)]()),Math[_0x5da6eb(0x65e)](_0x4f8a64);},Game_Troop[_0x17f940(0x25b)][_0x17f940(0x6dd)]=function(){return 0x1;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x5d6)]=Game_Map[_0x17f940(0x25b)][_0x17f940(0xad5)],Game_Map[_0x17f940(0x25b)][_0x17f940(0xad5)]=function(){const _0x5218db=_0x17f940;VisuMZ[_0x5218db(0x960)][_0x5218db(0x5d6)][_0x5218db(0x14e)](this),this[_0x5218db(0x505)]();},Game_Map[_0x17f940(0x25b)][_0x17f940(0x505)]=function(){const _0x59bbcb=_0x17f940;this[_0x59bbcb(0x757)]={},this[_0x59bbcb(0x601)]={};if(!$dataMap)return;const _0x56e7db=$dataMap[_0x59bbcb(0x981)];if(!_0x56e7db)return;const _0x4201fa=_0x56e7db[_0x59bbcb(0x413)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x4201fa)for(const _0x45178a of _0x4201fa){_0x45178a[_0x59bbcb(0x413)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4b749b=Number(RegExp['$1']),_0x1fc6db=Number(RegExp['$2']),_0x4dc1bd=_0x1fc6db===0x1?this[_0x59bbcb(0x757)]:this[_0x59bbcb(0x601)],_0x71b0b4=String(RegExp['$3']);_0x4dc1bd[_0x4b749b]=_0x71b0b4;}},VisuMZ[_0x17f940(0x960)]['Game_Map_battleback1Name']=Game_Map['prototype'][_0x17f940(0x202)],Game_Map[_0x17f940(0x25b)][_0x17f940(0x202)]=function(){const _0x44b1da=_0x17f940;if(!BattleManager[_0x44b1da(0x66f)]()){const _0x3de139=$gamePlayer[_0x44b1da(0x457)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x44b1da(0x757)]&&this[_0x44b1da(0x757)][_0x3de139]){if('WpYPH'!=='WpYPH'){let _0xac1b57=this[_0x44b1da(0x228)](_0x35555c);const _0x18befd=this[_0x44b1da(0x931)](),_0x269efd=_0x343743['floor'](_0x18befd*0.75);for(let _0x199667=0x0;_0x199667<_0xac1b57['length'];_0x199667++){const _0xf404ed=this['createChildSprite'](_0x269efd,_0x18befd);_0xf404ed[_0x44b1da(0x242)][_0x44b1da(0x850)](_0xac1b57[_0x199667],0x0,0x0,_0x269efd,_0x18befd,_0x44b1da(0x936)),_0xf404ed['x']=(_0x199667-(_0xac1b57[_0x44b1da(0x702)]-0x1)/0x2)*_0x269efd,_0xf404ed['dy']=-_0x199667;}}else return this['_regionBattleback1'][_0x3de139];}}return VisuMZ['BattleCore'][_0x44b1da(0x654)][_0x44b1da(0x14e)](this);},VisuMZ['BattleCore'][_0x17f940(0x136)]=Game_Map[_0x17f940(0x25b)][_0x17f940(0x31f)],Game_Map[_0x17f940(0x25b)]['battleback2Name']=function(){const _0x597f47=_0x17f940;if(!BattleManager['isBattleTest']()){if(_0x597f47(0x5ec)===_0x597f47(0xaa9))this[_0x597f47(0x96b)](...arguments);else{const _0xec3f46=$gamePlayer[_0x597f47(0x457)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x597f47(0x757)]&&this['_regionBattleback2'][_0xec3f46])return this[_0x597f47(0x601)][_0xec3f46];}}return VisuMZ['BattleCore'][_0x597f47(0x136)][_0x597f47(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x7a5)]=Game_Map[_0x17f940(0x25b)][_0x17f940(0x606)],Game_Map['prototype']['encounterList']=function(){const _0x7e1238=_0x17f940;let _0x252753=JsonEx[_0x7e1238(0xa38)](VisuMZ[_0x7e1238(0x960)][_0x7e1238(0x7a5)]['call'](this));return VisuMZ[_0x7e1238(0x960)]['ShuffleArray'](_0x252753);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x129)]=function(_0x3b3c55){const _0x47984c=_0x17f940;var _0x5edb82,_0x5970bc,_0x5afa33;for(_0x5afa33=_0x3b3c55['length']-0x1;_0x5afa33>0x0;_0x5afa33--){_0x5edb82=Math[_0x47984c(0x143)](Math['random']()*(_0x5afa33+0x1)),_0x5970bc=_0x3b3c55[_0x5afa33],_0x3b3c55[_0x5afa33]=_0x3b3c55[_0x5edb82],_0x3b3c55[_0x5edb82]=_0x5970bc;}return _0x3b3c55;},VisuMZ['BattleCore'][_0x17f940(0x947)]=Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x7d1)],Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x7d1)]=function(_0x255044){const _0x404e23=_0x17f940;return $gameTemp[_0x404e23(0x6da)](this),VisuMZ[_0x404e23(0x960)][_0x404e23(0x947)]['call'](this,_0x255044);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x6de)]=Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x15c)],Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x15c)]=function(){const _0x3cfc38=_0x17f940;if(SceneManager[_0x3cfc38(0x2ac)]())switch(this[_0x3cfc38(0x945)]){case'battleAngle':if(Imported[_0x3cfc38(0x660)]){if(_0x3cfc38(0xa6e)!=='lyiuR')this[_0x3cfc38(0x3f5)]=_0x534dd7[_0x3cfc38(0x960)][_0x3cfc38(0x32c)][_0x3cfc38(0xa9e)][_0x3cfc38(0x3d0)][_0x3cfc38(0x14e)](this);else{if($gameScreen[_0x3cfc38(0xabd)]()[_0x3cfc38(0x5a1)]>0x0)return!![];this[_0x3cfc38(0x945)]='';}}break;case _0x3cfc38(0xacd):if(BattleManager[_0x3cfc38(0x4ab)]['isAnimationPlaying']())return!![];this[_0x3cfc38(0x945)]='';break;case _0x3cfc38(0x83b):if(Imported[_0x3cfc38(0x660)]){if(_0x3cfc38(0x706)===_0x3cfc38(0x706)){if($gameScreen[_0x3cfc38(0xabd)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x3cfc38(0xabd)]()['cameraOffsetDuration']>0x0)return!![];this[_0x3cfc38(0x945)]='';}else this[_0x3cfc38(0x670)]=_0x84d0b8||0x0;}break;case _0x3cfc38(0xa10):if(BattleManager[_0x3cfc38(0x4ab)]['isEffecting']())return!![];this['_waitMode']='';break;case _0x3cfc38(0x84e):if(BattleManager['_spriteset']['isAnyoneFloating']())return!![];this['_waitMode']='';break;case _0x3cfc38(0x866):if(BattleManager['_spriteset'][_0x3cfc38(0x29d)]())return!![];this[_0x3cfc38(0x945)]='';break;case'battlelog':if(BattleManager['_logWindow'][_0x3cfc38(0x329)]())return!![];this[_0x3cfc38(0x945)]='';break;case _0x3cfc38(0x3d4):if(BattleManager[_0x3cfc38(0x4ab)][_0x3cfc38(0xa94)]())return!![];this['_waitMode']='';break;case'battleOpacity':if(BattleManager[_0x3cfc38(0x4ab)]['isAnyoneChangingOpacity']())return!![];this[_0x3cfc38(0x945)]='';break;case _0x3cfc38(0x336):if(BattleManager[_0x3cfc38(0x4ab)][_0x3cfc38(0x47c)]())return!![];this['_waitMode']='';break;case _0x3cfc38(0x2c9):if(BattleManager[_0x3cfc38(0x4ab)]['isAnyoneSkewing']())return!![];this[_0x3cfc38(0x945)]='';break;case'battleProjectiles':if(Imported[_0x3cfc38(0xa1d)]){if(BattleManager['_spriteset'][_0x3cfc38(0x105)]())return!![];this[_0x3cfc38(0x945)]='';}break;case _0x3cfc38(0x306):if(Imported['VisuMZ_3_ActSeqCamera']){if('iOqqh'!=='iOqqh')return _0x82e054['BattleCore'][_0x3cfc38(0x32c)][_0x3cfc38(0x6e8)][_0x3cfc38(0x97e)];else{if($gameScreen[_0x3cfc38(0xabd)]()[_0x3cfc38(0x76e)]>0x0)return!![];this[_0x3cfc38(0x945)]='';}}break;case _0x3cfc38(0x101):if(BattleManager['_spriteset'][_0x3cfc38(0x2d4)]())return!![];this[_0x3cfc38(0x945)]='';break;case _0x3cfc38(0x8ac):if(Imported[_0x3cfc38(0x660)]){if($gameScreen[_0x3cfc38(0xabd)]()['zoomDuration']>0x0)return!![];this['_waitMode']='';}break;}return VisuMZ[_0x3cfc38(0x960)][_0x3cfc38(0x6de)][_0x3cfc38(0x14e)](this);},VisuMZ['BattleCore'][_0x17f940(0x9a7)]=Game_Interpreter['prototype']['command301'],Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x909)]=function(_0x12fc8c){const _0x529a1c=_0x17f940;return!$gameParty[_0x529a1c(0xacb)]()?this[_0x529a1c(0xa2b)](_0x12fc8c):VisuMZ[_0x529a1c(0x960)][_0x529a1c(0x9a7)][_0x529a1c(0x14e)](this,_0x12fc8c);},Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x3ea)]=function(_0xfadcb0){const _0xac9ed0=_0x17f940;return VisuMZ[_0xac9ed0(0x960)][_0xac9ed0(0x9a7)][_0xac9ed0(0x14e)](this,_0xfadcb0),BattleManager[_0xac9ed0(0x24e)](_0x2141b6=>{const _0x30934f=_0xac9ed0;if(_0x30934f(0x7ad)===_0x30934f(0x7ad))this[_0x30934f(0xafb)][this[_0x30934f(0x2e7)]]=_0x2141b6;else{if(!_0x5aa2d4[_0x30934f(0x2ac)]())return;_0x32d48b[_0x30934f(0x20e)](_0x5549ea,_0x86e5bb);const _0x4b1731=_0xd2e245[_0x30934f(0x207)](_0x1de1ea['Slot']);if(_0x4b1731<=0x0)return;const _0x5811c6=_0x4482e4['getLastPluginCommandInterpreter'](),_0xd2e245=_0x4935e6[_0x30934f(0x128)],_0x486b7b=_0x5f58c8[_0x30934f(0x34c)](_0x70d07b[_0x30934f(0x7f5)]),_0x2c2847=_0x5b9f99[_0x30934f(0x611)],_0x4f0357=_0x3157db[_0x30934f(0x8ba)];if(!_0x5811c6||!_0xd2e245)return;_0xf8ee9d[_0x30934f(0x54c)](_0x486b7b,_0x4b1731,_0x2c2847),_0x368f97[_0x30934f(0x356)]&&_0x5811c6[_0x30934f(0x6a1)](_0x30934f(0xacd));}}),!![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa32)]=function(_0x2918a8){const _0x4628d3=_0x17f940,_0x2c52e6=$dataCommonEvents[_0x2918a8];if(!_0x2c52e6)return![];if(_0x2c52e6['list'][_0x4628d3(0x702)]<=0x1)return![];return!![];},Game_Interpreter[_0x17f940(0x25b)]['command301_PreBattleEvent']=function(_0x5a701c){const _0x40cf36=_0x17f940,_0x437e92=VisuMZ[_0x40cf36(0x960)][_0x40cf36(0x32c)]['Mechanics'],_0x130260=_0x437e92[_0x40cf36(0x1db)],_0x2c7c9b=$dataCommonEvents[_0x130260];if(_0x2c7c9b&&VisuMZ[_0x40cf36(0x960)][_0x40cf36(0xa32)](_0x130260)){const _0x10c696=this[_0x40cf36(0x2f9)]()?this[_0x40cf36(0x76b)]:0x0,_0x45f411=_0x2c7c9b[_0x40cf36(0x5a8)];this[_0x40cf36(0x19c)](_0x45f411,_0x10c696),this[_0x40cf36(0x5de)]=JsonEx[_0x40cf36(0xa38)](this[_0x40cf36(0x5de)]);const _0x359a58={'code':0xbc3,'indent':this[_0x40cf36(0x2e7)],'parameters':JsonEx[_0x40cf36(0xa38)](_0x5a701c)};return this[_0x40cf36(0x5de)][_0x40cf36(0x104)](this[_0x40cf36(0x298)]+0x1,0x0,_0x359a58),!![];}else return VisuMZ[_0x40cf36(0x960)][_0x40cf36(0x9a7)][_0x40cf36(0x14e)](this,_0x5a701c);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x1d1)]=BattleManager[_0x17f940(0x7c3)],BattleManager['onEncounter']=function(){const _0x5a4a5f=_0x17f940;VisuMZ['BattleCore']['BattleManager_onEncounter'][_0x5a4a5f(0x14e)](this),this[_0x5a4a5f(0x88e)]();},BattleManager[_0x17f940(0x88e)]=function(){const _0x340e82=_0x17f940,_0x35a11c=VisuMZ[_0x340e82(0x960)][_0x340e82(0x32c)]['Mechanics'],_0x31625e=_0x35a11c['BattleStartEvent'];_0x31625e&&VisuMZ[_0x340e82(0x960)][_0x340e82(0xa32)](_0x31625e)&&(_0x340e82(0x114)===_0x340e82(0x114)?(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x340e82(0x2db)](_0x35a11c[_0x340e82(0x1db)]),$gameMap[_0x340e82(0xa0c)](),$gameMap[_0x340e82(0x83d)][_0x340e82(0x3f4)]=!![]):this[_0x340e82(0x854)](_0x33dba4,_0x40be69,_0x359f9a));if(_0x35a11c['DefeatEvent']>0x0){if(_0x340e82(0x403)!==_0x340e82(0x28b))this[_0x340e82(0x727)]=!![];else return _0x245edd[_0x340e82(0x8d0)];}},VisuMZ['BattleCore'][_0x17f940(0x754)]=Scene_Map['prototype'][_0x17f940(0x815)],Scene_Map[_0x17f940(0x25b)][_0x17f940(0x815)]=function(){const _0x28dd81=_0x17f940;if(BattleManager[_0x28dd81(0x368)])return;VisuMZ[_0x28dd81(0x960)][_0x28dd81(0x754)][_0x28dd81(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x811)]=Scene_Map['prototype'][_0x17f940(0x9a1)],Scene_Map[_0x17f940(0x25b)][_0x17f940(0x9a1)]=function(){const _0x4d6001=_0x17f940;BattleManager[_0x4d6001(0x368)]?this['battleCorePreBattleCommonEvent']():VisuMZ['BattleCore']['Scene_Map_launchBattle']['call'](this);},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x3a0d74=_0x17f940;this[_0x3a0d74(0x7b7)]=!![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x323)]=SceneManager[_0x17f940(0x930)],SceneManager['isSceneChanging']=function(){const _0x5df7d1=_0x17f940;if(BattleManager[_0x5df7d1(0x368)])return![];return VisuMZ['BattleCore'][_0x5df7d1(0x323)][_0x5df7d1(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x59b)]=Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x92a)],Game_Interpreter[_0x17f940(0x25b)]['terminate']=function(){const _0x13234c=_0x17f940;VisuMZ[_0x13234c(0x960)][_0x13234c(0x59b)]['call'](this),this[_0x13234c(0x3f4)]&&(this[_0x13234c(0x3f4)]=undefined,SceneManager[_0x13234c(0x712)][_0x13234c(0x583)]());},Scene_Map['prototype']['battleCoreResumeLaunchBattle']=function(){const _0x2e7f7f=_0x17f940;BattleManager[_0x2e7f7f(0x368)]=undefined,BattleManager[_0x2e7f7f(0x17a)]=!![],this[_0x2e7f7f(0x62f)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x4af)]=Scene_Map['prototype']['initialize'],Scene_Map[_0x17f940(0x25b)]['initialize']=function(){const _0x1c156d=_0x17f940;VisuMZ[_0x1c156d(0x960)][_0x1c156d(0x4af)][_0x1c156d(0x14e)](this),BattleManager['_battleCoreBattleResumeAfter']&&('lyMpp'!=='XNxZf'?(this['_active']=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined):this[_0x1c156d(0x9ab)]=_0x1c156d(0x409));},VisuMZ['BattleCore'][_0x17f940(0x425)]=Scene_Map[_0x17f940(0x25b)][_0x17f940(0x96b)],Scene_Map[_0x17f940(0x25b)][_0x17f940(0x96b)]=function(){const _0x2b8375=_0x17f940;VisuMZ[_0x2b8375(0x960)][_0x2b8375(0x425)][_0x2b8375(0x14e)](this),$gameTemp[_0x2b8375(0x7ef)]();},VisuMZ['BattleCore'][_0x17f940(0x698)]=Scene_ItemBase[_0x17f940(0x25b)][_0x17f940(0x620)],Scene_ItemBase[_0x17f940(0x25b)][_0x17f940(0x620)]=function(){const _0x462212=_0x17f940;VisuMZ['BattleCore']['Scene_ItemBase_applyItem'][_0x462212(0x14e)](this);this['item']()[_0x462212(0x981)][_0x462212(0x413)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x462212(0x675)]=[]);if(DataManager[_0x462212(0x4fe)](this['item']())){if(_0x462212(0xa2c)===_0x462212(0x50a))return[_0x3e60c1];else $gameTemp[_0x462212(0x675)]=[];}},VisuMZ['BattleCore']['Scene_Options_maxCommands']=Scene_Options[_0x17f940(0x25b)][_0x17f940(0x5f7)],Scene_Options[_0x17f940(0x25b)][_0x17f940(0x5f7)]=function(){const _0x1eba3e=_0x17f940;let _0x407fa7=VisuMZ['BattleCore'][_0x1eba3e(0x7f2)][_0x1eba3e(0x14e)](this);const _0x1a8026=VisuMZ[_0x1eba3e(0x960)]['Settings'];if(_0x1a8026[_0x1eba3e(0x5c5)][_0x1eba3e(0x237)]&&_0x1a8026[_0x1eba3e(0x5c5)][_0x1eba3e(0x7cc)])_0x407fa7+=0x2;if(_0x1a8026['HpGauge'][_0x1eba3e(0x237)]&&_0x1a8026[_0x1eba3e(0x5ba)][_0x1eba3e(0x7cc)])_0x407fa7+=0x1;return _0x407fa7;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x7f9)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x148)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x148)]=function(){const _0x47d611=_0x17f940;SceneManager[_0x47d611(0x1dd)]()?(Scene_Message['prototype'][_0x47d611(0x148)]['call'](this),this[_0x47d611(0x4ab)]&&this[_0x47d611(0x4ab)][_0x47d611(0x106)](),BattleManager[_0x47d611(0x8cb)]&&BattleManager[_0x47d611(0x5a4)]()):VisuMZ['BattleCore'][_0x47d611(0x7f9)][_0x47d611(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x63e)]=Scene_Battle['prototype'][_0x17f940(0x62f)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x62f)]=function(){const _0x1ad7b1=_0x17f940;SceneManager[_0x1ad7b1(0x8c0)]()?Scene_Message[_0x1ad7b1(0x25b)][_0x1ad7b1(0x62f)]['call'](this):VisuMZ['BattleCore'][_0x1ad7b1(0x63e)][_0x1ad7b1(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa5a)]=Scene_Battle['prototype'][_0x17f940(0x92a)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x92a)]=function(){const _0x9fbcff=_0x17f940;SceneManager[_0x9fbcff(0x8c0)]()?Scene_Message['prototype'][_0x9fbcff(0x92a)][_0x9fbcff(0x14e)](this):VisuMZ['BattleCore'][_0x9fbcff(0xa5a)][_0x9fbcff(0x14e)](this);},Scene_Battle['prototype'][_0x17f940(0x140)]=function(){const _0x26dd9f=_0x17f940;if(ConfigManager[_0x26dd9f(0x2e6)]&&ConfigManager[_0x26dd9f(0x1fd)]!==undefined){if(_0x26dd9f(0x7f3)!==_0x26dd9f(0x7f3))_0x5ea9ce+=_0x302da2;else return ConfigManager[_0x26dd9f(0x1fd)];}else{if(this['battleLayoutStyle']()===_0x26dd9f(0x735))return![];else{return Scene_Message[_0x26dd9f(0x25b)][_0x26dd9f(0x140)]['call'](this);;}}},VisuMZ[_0x17f940(0x960)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x49b)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x49b)]=function(){const _0x44be4e=_0x17f940;this[_0x44be4e(0x345)](),VisuMZ[_0x44be4e(0x960)]['Scene_Battle_createAllWindows'][_0x44be4e(0x14e)](this),this['createAutoBattleWindow']();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x73d)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x85c)],Scene_Battle['prototype'][_0x17f940(0x85c)]=function(){const _0x85653d=_0x17f940;VisuMZ[_0x85653d(0x960)][_0x85653d(0x73d)]['call'](this),this[_0x85653d(0x346)]()===_0x85653d(0x735)&&this[_0x85653d(0x7e0)]();},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x7a4)]=function(_0x521b48){const _0x31f9f0=_0x17f940;if(_0x521b48)'mTfpR'===_0x31f9f0(0x887)?this['_tpbNeedsPartyCommand']=![]:(this[_0x31f9f0(0x398)]['x']=(Graphics[_0x31f9f0(0x67f)]-Graphics[_0x31f9f0(0xac3)])/0x2,this[_0x31f9f0(0x398)]['y']=(Graphics[_0x31f9f0(0x87c)]-Graphics[_0x31f9f0(0x45d)])/0x2);else{if(_0x31f9f0(0x35f)!=='puPUB')this['_windowLayer']['x']=Graphics[_0x31f9f0(0x67f)]*0xa,this[_0x31f9f0(0x398)]['y']=Graphics[_0x31f9f0(0x87c)]*0xa;else return this['getAttackMotion']();}},VisuMZ['BattleCore'][_0x17f940(0x672)]=Scene_Battle[_0x17f940(0x25b)]['selectNextCommand'],Scene_Battle[_0x17f940(0x25b)]['selectNextCommand']=function(){const _0x12d73c=_0x17f940,_0x2f267c=BattleManager[_0x12d73c(0x371)]();VisuMZ['BattleCore'][_0x12d73c(0x672)][_0x12d73c(0x14e)](this);if(_0x2f267c){if(_0x2f267c===BattleManager['actor']())return;if(_0x2f267c===BattleManager[_0x12d73c(0x128)])return;if(_0x2f267c['battler']())_0x2f267c[_0x12d73c(0x4a6)]()[_0x12d73c(0x2d8)]();}},VisuMZ['BattleCore'][_0x17f940(0x164)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x53f)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x53f)]=function(){const _0x581e24=_0x17f940,_0x21bba5=BattleManager[_0x581e24(0x371)]();if(_0x21bba5&&_0x21bba5['battler'])_0x21bba5[_0x581e24(0x4a6)]()['stepBack']();VisuMZ[_0x581e24(0x960)][_0x581e24(0x164)][_0x581e24(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x54a)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x66d)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x66d)]=function(){const _0x646951=_0x17f940;if(VisuMZ[_0x646951(0x960)]['Settings'][_0x646951(0x5df)][_0x646951(0x812)]){if(_0x646951(0x2c4)!==_0x646951(0x279))return VisuMZ[_0x646951(0x960)][_0x646951(0x32c)]['BattleLog'][_0x646951(0x812)][_0x646951(0x14e)](this);else delete _0x1434c3[_0x646951(0x8a3)][_0x646951(0x194)];}return VisuMZ[_0x646951(0x960)][_0x646951(0x54a)][_0x646951(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x755)]=Scene_Battle['prototype']['createPartyCommandWindow'],Scene_Battle[_0x17f940(0x25b)]['createPartyCommandWindow']=function(){const _0x1fa22c=_0x17f940;VisuMZ[_0x1fa22c(0x960)]['Scene_Battle_createPartyCommandWindow'][_0x1fa22c(0x14e)](this),this[_0x1fa22c(0x8f2)]();},Scene_Battle['prototype'][_0x17f940(0x8f2)]=function(){const _0x3852a3=_0x17f940,_0x54b5d1=this['_partyCommandWindow'];_0x54b5d1[_0x3852a3(0x44f)](_0x3852a3(0x707),this[_0x3852a3(0x4ca)]['bind'](this)),_0x54b5d1['setHandler']('options',this['commandOptions'][_0x3852a3(0x539)](this));const _0x492fe0=this['battleLayoutStyle']();switch(_0x492fe0){case'xp':case _0x3852a3(0xaa2):return this['_partyCommandWindow'][_0x3852a3(0x53a)](0x1);break;}},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x4ca)]=function(){const _0x2cba9=_0x17f940;BattleManager[_0x2cba9(0x8da)]=!![],$gameParty['makeActions'](),this[_0x2cba9(0x83a)]();if(BattleManager[_0x2cba9(0x7ca)]()){if(_0x2cba9(0x21a)!==_0x2cba9(0x382))BattleManager[_0x2cba9(0x124)]=![];else{if(!this[_0x2cba9(0xa3d)])return![];if(this['_battler']['isActor']())return!![];const _0x135201=this[_0x2cba9(0xa3d)][_0x2cba9(0x1c2)]()[_0x2cba9(0x981)];if(_0x135201[_0x2cba9(0x413)](/<SHOW HP GAUGE>/i))return!![];if(_0x135201[_0x2cba9(0x413)](/<HIDE HP GAUGE>/i))return![];const _0x2f03ba=_0x4fdd00[_0x2cba9(0x960)][_0x2cba9(0x32c)]['HpGauge'];if(_0x2f03ba[_0x2cba9(0x2ff)]){if(_0x2f03ba['BTestBypass']&&_0x517002['isBattleTest']())return!![];if(this[_0x2cba9(0xa3d)]['_visualHpGauge_JustDied'])return![];return this['_battler']['hasBeenDefeatedBefore']();}return!![];}}},Scene_Battle['prototype'][_0x17f940(0x5eb)]=function(){const _0x5bded5=_0x17f940;this['isQueueOptionsMenu']()?(this['_callSceneOptions']=!![],this['_logWindow'][_0x5bded5(0x5e8)]('addText',VisuMZ['BattleCore'][_0x5bded5(0x32c)][_0x5bded5(0x6e8)][_0x5bded5(0x2b1)])):_0x5bded5(0x3e1)!=='uxSda'?this[_0x5bded5(0x777)]():this[_0x5bded5(0x537)]();},Scene_Battle[_0x17f940(0x25b)]['isQueueOptionsMenu']=function(){return BattleManager['isActiveTpb']();},Scene_Battle['prototype']['callOptions']=function(){const _0x4a826e=_0x17f940;this[_0x4a826e(0x2de)]=![],this[_0x4a826e(0x4ab)]['update'](),this['_windowLayer'][_0x4a826e(0x57d)]=![];if(BattleManager['isBattleTest']())($dataSystem[_0x4a826e(0x202)]||$dataSystem[_0x4a826e(0x31f)])&&SceneManager[_0x4a826e(0x717)]();else($gameMap[_0x4a826e(0x202)]()||$gameMap[_0x4a826e(0x31f)]())&&SceneManager[_0x4a826e(0x717)]();SceneManager[_0x4a826e(0x5e8)](Scene_Options),BattleManager[_0x4a826e(0x7ca)]()&&(BattleManager[_0x4a826e(0x8cb)]=BattleManager[_0x4a826e(0x371)]());},VisuMZ[_0x17f940(0x960)][_0x17f940(0x1b8)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x18e)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x18e)]=function(){const _0x3bd831=_0x17f940;VisuMZ['BattleCore'][_0x3bd831(0x1b8)]['call'](this);if(this['_callSceneOptions']&&!BattleManager[_0x3bd831(0x128)])this[_0x3bd831(0x537)]();},Scene_Battle['prototype'][_0x17f940(0x97f)]=function(){const _0x13b00b=_0x17f940,_0x1ed028=this[_0x13b00b(0x358)]();this[_0x13b00b(0x170)]=new Window_AutoBattleCancel(_0x1ed028),this['_autoBattleWindow'][_0x13b00b(0x161)](),this[_0x13b00b(0x1cc)](this[_0x13b00b(0x170)]);},Scene_Battle['prototype'][_0x17f940(0x358)]=function(){const _0x490b9f=_0x17f940;return VisuMZ[_0x490b9f(0x960)][_0x490b9f(0x32c)][_0x490b9f(0x5c5)][_0x490b9f(0x725)]['call'](this);},Scene_Battle[_0x17f940(0x25b)]['isPartyCommandWindowDisabled']=function(){const _0x46d2e1=_0x17f940;return VisuMZ[_0x46d2e1(0x960)][_0x46d2e1(0x32c)][_0x46d2e1(0x6e8)][_0x46d2e1(0x97e)];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x7ed)]=Scene_Battle['prototype'][_0x17f940(0x378)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x378)]=function(){const _0x10e338=_0x17f940;if(this['isPartyCommandWindowDisabled']())this['onDisabledPartyCommandSelection']();else{if('kwTBA'===_0x10e338(0x362))VisuMZ['BattleCore'][_0x10e338(0x7ed)][_0x10e338(0x14e)](this);else{if(this['constructor']===_0x448e1e&&!_0x432602[_0x10e338(0xa20)]())return;}}},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x4f6)]=function(){const _0x493f46=_0x17f940;if(BattleManager[_0x493f46(0x574)]())this[_0x493f46(0x83a)]();else BattleManager[_0x493f46(0x7ca)]()&&VisuMZ[_0x493f46(0x960)][_0x493f46(0x7ed)][_0x493f46(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x7ff)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x673)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x673)]=function(){const _0x27a587=_0x17f940;BattleManager[_0x27a587(0x7ca)]()?_0x27a587(0x61a)===_0x27a587(0x61a)?(this['tpbCommandFight'](),this[_0x27a587(0x19d)]()):_0x2488b8['repeats']=_0x54278c[_0x27a587(0xb2c)](0x1,_0x1df6c9(_0x4a2f9b['$1'])):_0x27a587(0x254)!==_0x27a587(0xad6)?VisuMZ[_0x27a587(0x960)][_0x27a587(0x7ff)][_0x27a587(0x14e)](this):this[_0x27a587(0x3cd)](_0x27a587(0x59c));},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x1ba)]=function(){const _0x420f61=_0x17f940;if(!VisuMZ[_0x420f61(0x960)]['TpbActiveChangeEnabled'])return;if(Imported[_0x420f61(0x377)]&&BattleManager[_0x420f61(0x963)]())return;const _0x5da799=$gameParty[_0x420f61(0x6f6)]()[_0x420f61(0x427)](_0x456644=>_0x456644['isTpbCharged']()&&_0x456644[_0x420f61(0x411)]());BattleManager[_0x420f61(0x3e8)]=_0x5da799[0x0]||null,BattleManager[_0x420f61(0x3e8)]&&(_0x420f61(0x4bd)==='sVGBp'?(this['isAnimationShownOnBattlePortrait'](_0xa648b4)?this[_0x420f61(0x748)]()['addChild'](_0x476a36):this[_0x420f61(0x4c0)][_0x420f61(0x1cc)](_0x373a52),this['_animationSprites'][_0x420f61(0x5e8)](_0x23fc21)):BattleManager[_0x420f61(0x3e8)][_0x420f61(0x929)]('inputting'));},VisuMZ['BattleCore'][_0x17f940(0x2d3)]=Scene_Battle['prototype']['createActorCommandWindow'],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x4dd)]=function(){const _0xcd655f=_0x17f940;VisuMZ[_0xcd655f(0x960)][_0xcd655f(0x2d3)][_0xcd655f(0x14e)](this),this[_0xcd655f(0x1c7)]();},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x1c7)]=function(){const _0x384948=_0x17f940,_0x4cdcc9=this[_0x384948(0xacc)];_0x4cdcc9[_0x384948(0x44f)](_0x384948(0x952),this[_0x384948(0x1af)]['bind'](this)),_0x4cdcc9[_0x384948(0x44f)](_0x384948(0x707),this[_0x384948(0xaaf)][_0x384948(0x539)](this)),_0x4cdcc9[_0x384948(0x44f)]('singleSkill',this['actorCommandSingleSkill']['bind'](this));if(BattleManager['isTpb']()){if(_0x384948(0x68f)!=='WDGlc'){if(_0x2cddd2[_0x384948(0x981)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x33b3d1=_0x428200(_0x5d7ee8['$1'])['toUpperCase']()[_0x384948(0x224)]();if(_0x33b3d1===_0x384948(0x52c))return _0x384948(0x52c);if(_0x378922[_0x384948(0x221)][_0x33b3d1])return _0x33b3d1;}const _0x594429=_0x5e0448[_0x384948(0x960)]['Settings'][_0x384948(0x176)][_0x384948(0x8ef)][_0x384948(0x9cb)]()['trim']();if(_0x1ef487[_0x384948(0x221)][_0x594429])return _0x594429;return'MANUAL';}else this[_0x384948(0x784)]()?delete _0x4cdcc9['_handlers'][_0x384948(0x194)]:_0x4cdcc9[_0x384948(0x44f)](_0x384948(0x194),this[_0x384948(0x39e)]['bind'](this));}},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x1af)]=function(){const _0x5bdd36=_0x17f940;this[_0x5bdd36(0x79e)]();},Scene_Battle[_0x17f940(0x25b)]['actorCommandAutoBattle']=function(){const _0x30f530=_0x17f940;BattleManager[_0x30f530(0x371)]()[_0x30f530(0x58b)](),BattleManager[_0x30f530(0x642)](),BattleManager['selectNextActor'](),this['changeInputWindow']();},Scene_Battle['prototype'][_0x17f940(0x393)]=function(){const _0x1fe1dc=_0x17f940,_0x441699=BattleManager['inputtingAction']();_0x441699['setSkill'](this[_0x1fe1dc(0xacc)][_0x1fe1dc(0x284)]()),this[_0x1fe1dc(0x6c9)]();},Scene_Battle[_0x17f940(0x25b)]['actorCommandCancelTPB']=function(){const _0x9b27c6=_0x17f940;this[_0x9b27c6(0xa83)]()?this[_0x9b27c6(0xaf6)]():this['processActorCommandCancelTPB']();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x528)]=![],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0xa83)]=function(){const _0x4ca233=_0x17f940;if(Imported[_0x4ca233(0x377)]&&BattleManager[_0x4ca233(0x963)]())return![];else{if(_0x4ca233(0x732)!==_0x4ca233(0x60c)){if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return![];const _0x47cb7f=$gameParty[_0x4ca233(0x6f6)]()['filter'](_0x91916=>_0x91916[_0x4ca233(0x26f)]()&&_0x91916[_0x4ca233(0x411)]());return _0x47cb7f['length']>0x0&&BattleManager[_0x4ca233(0x371)]()!==_0x47cb7f[_0x47cb7f[_0x4ca233(0x702)]-0x1];}else{const _0x1c03b3=this[_0x4ca233(0x289)];_0x1c03b3[_0x4ca233(0x8af)]['clear']();const _0x11ae5b=this['commandStyleCheck'](this[_0x4ca233(0x98e)]());if(_0x11ae5b==='icon'&&this[_0x4ca233(0x4e3)]()>0x0){const _0x74e13a=this[_0x4ca233(0x7fe)](this[_0x4ca233(0x98e)]());let _0x49ff89=this[_0x4ca233(0x8d6)](this[_0x4ca233(0x98e)]());_0x49ff89=_0x49ff89['replace'](/\\I\[(\d+)\]/gi,''),_0x1c03b3[_0x4ca233(0x559)](),this['commandNameWindowDrawBackground'](_0x49ff89,_0x74e13a),this['commandNameWindowDrawText'](_0x49ff89,_0x74e13a),this['commandNameWindowCenter'](_0x49ff89,_0x74e13a);}}}},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0xaf6)]=function(){const _0x2980f2=_0x17f940,_0x18cbfe=BattleManager['actor'](),_0x17c4dd=_0x18cbfe['battler']();if(_0x17c4dd)_0x17c4dd['stepBack']();const _0x591f77=$gameParty[_0x2980f2(0x6f6)]()[_0x2980f2(0x427)](_0x516130=>_0x516130['isTpbCharged']()&&_0x516130[_0x2980f2(0x411)]()),_0x573be8=_0x591f77['indexOf'](_0x18cbfe),_0x5d1d99=_0x591f77[_0x573be8+0x1];BattleManager[_0x2980f2(0x3e8)]=_0x5d1d99||null;if(_0x5d1d99)_0x5d1d99[_0x2980f2(0x929)](_0x2980f2(0x5b9));_0x18cbfe[_0x2980f2(0x929)]('undecided'),this[_0x2980f2(0x299)]();},Scene_Battle[_0x17f940(0x25b)]['processActorCommandCancelTPB']=function(){const _0x8594c8=_0x17f940;this[_0x8594c8(0x2aa)]['setup'](),this[_0x8594c8(0xacc)][_0x8594c8(0x71e)]();if(!VisuMZ[_0x8594c8(0x960)]['TpbActiveChangeEnabled'])return;if(Imported[_0x8594c8(0x377)]&&BattleManager[_0x8594c8(0x963)]())return;if(BattleManager[_0x8594c8(0x3e8)]){if(_0x8594c8(0x235)!==_0x8594c8(0x452)){BattleManager[_0x8594c8(0x3e8)][_0x8594c8(0x929)]('undecided');const _0x1a010f=BattleManager[_0x8594c8(0x3e8)][_0x8594c8(0x4a6)]();if(_0x1a010f)_0x1a010f[_0x8594c8(0x2d8)]();}else{const _0xa11f70=_0x12538a[this[_0x8594c8(0x6af)][_0x8594c8(0x4ed)]()];if(!_0xa11f70)return;if(!this[_0x8594c8(0x23e)](_0xa11f70))return;const _0x16a35f=this[_0x8594c8(0x665)](),_0x187c35=_0x24e871['battleCommandName'](_0xa11f70),_0x47030a=_0x4d2913['battleCommandIcon'](_0xa11f70),_0x21372d=_0x16a35f==='text'?_0x187c35:_0x8594c8(0x633)['format'](_0x47030a,_0x187c35);this['addCommand'](_0x21372d,_0x8594c8(0x59c),this['_actor'][_0x8594c8(0x1f7)]());}}BattleManager[_0x8594c8(0x3e8)]=null;},VisuMZ[_0x17f940(0x960)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x8dd)],Scene_Battle[_0x17f940(0x25b)]['createHelpWindow']=function(){const _0x5bb57d=_0x17f940;VisuMZ[_0x5bb57d(0x960)][_0x5bb57d(0x198)][_0x5bb57d(0x14e)](this),this[_0x5bb57d(0x808)]();},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x808)]=function(){const _0x246157=_0x17f940;this[_0x246157(0xacc)]['setHelpWindow'](this[_0x246157(0x598)]),this[_0x246157(0x2aa)][_0x246157(0xb10)](this['_helpWindow']);},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x346)]=function(){const _0x4a6c61=_0x17f940;if($gameTemp[_0x4a6c61(0x9ab)]!==undefined)return $gameTemp[_0x4a6c61(0x9ab)];if(this['_battleLayoutStyle'])return this[_0x4a6c61(0xa96)];return this[_0x4a6c61(0xa96)]=VisuMZ[_0x4a6c61(0x960)][_0x4a6c61(0x32c)][_0x4a6c61(0x334)][_0x4a6c61(0xa0f)][_0x4a6c61(0x8cf)]()['trim'](),this['_battleLayoutStyle']===_0x4a6c61(0x409)&&!Imported[_0x4a6c61(0x7d6)]&&(this[_0x4a6c61(0xa96)]=_0x4a6c61(0x387)),this[_0x4a6c61(0xa96)];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x59d)]=Scene_Battle[_0x17f940(0x25b)]['windowAreaHeight'],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x758)]=function(){const _0x1755a7=_0x17f940,_0x24aeba=this[_0x1755a7(0x346)]();switch(_0x24aeba){case'list':return this[_0x1755a7(0x5e7)](Math[_0x1755a7(0xb2c)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x1755a7(0x960)][_0x1755a7(0x59d)][_0x1755a7(0x14e)](this);break;}},VisuMZ['BattleCore'][_0x17f940(0x370)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x37d)],Scene_Battle['prototype'][_0x17f940(0x37d)]=function(){const _0x4db51d=_0x17f940,_0x21f121=this[_0x4db51d(0x346)]();switch(_0x21f121){case _0x4db51d(0x735):return this[_0x4db51d(0x9e1)]();break;case'default':case'list':case'xp':case _0x4db51d(0xaa2):default:return VisuMZ[_0x4db51d(0x960)][_0x4db51d(0x370)][_0x4db51d(0x14e)](this);break;}},Scene_Battle[_0x17f940(0x25b)]['statusWindowRect']=function(){const _0x58fb2f=_0x17f940,_0x3419b5=this[_0x58fb2f(0x346)]();switch(_0x3419b5){case'xp':case _0x58fb2f(0xaa2):return this[_0x58fb2f(0x6b9)]();break;case _0x58fb2f(0x735):return this['statusWindowRectBorderStyle']();break;case _0x58fb2f(0x387):case _0x58fb2f(0x5a8):default:return this[_0x58fb2f(0x4ec)]();break;}},VisuMZ['BattleCore'][_0x17f940(0x50e)]=Scene_Battle['prototype']['partyCommandWindowRect'],Scene_Battle[_0x17f940(0x25b)]['partyCommandWindowRect']=function(){const _0x3705dd=_0x17f940,_0x30a8f9=this[_0x3705dd(0x346)]();switch(_0x30a8f9){case'xp':case _0x3705dd(0xaa2):return this[_0x3705dd(0xb14)]();break;case'border':return this[_0x3705dd(0x7a9)]();case _0x3705dd(0x387):case _0x3705dd(0x5a8):default:return this[_0x3705dd(0x4b0)]();break;}},Scene_Battle[_0x17f940(0x25b)]['partyCommandWindowRectDefaultStyle']=function(){const _0x17bc6a=_0x17f940,_0x4f6ecb=VisuMZ[_0x17bc6a(0x960)][_0x17bc6a(0x32c)]['BattleLayout'],_0x40a508=_0x4f6ecb[_0x17bc6a(0x940)]||0xc0,_0x524c23=this['windowAreaHeight'](),_0x3ac65e=this['isRightInputMode']()?Graphics[_0x17bc6a(0xac3)]-_0x40a508:0x0,_0x7d94f1=Graphics[_0x17bc6a(0x45d)]-_0x524c23;return new Rectangle(_0x3ac65e,_0x7d94f1,_0x40a508,_0x524c23);},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x3a0)]=function(){const _0x230085=_0x17f940;return this[_0x230085(0x6cf)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x388)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x87e)],Scene_Battle['prototype']['updateStatusWindowPosition']=function(){const _0x502be8=_0x17f940,_0x46e641=this[_0x502be8(0x346)]();switch(_0x46e641){case'xp':case'portrait':case'border':break;case _0x502be8(0x387):case'list':default:VisuMZ[_0x502be8(0x960)][_0x502be8(0x388)][_0x502be8(0x14e)](this);break;}},VisuMZ['BattleCore'][_0x17f940(0x36f)]=Scene_Battle[_0x17f940(0x25b)]['startActorSelection'],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0xa35)]=function(){const _0x365c43=_0x17f940;VisuMZ['BattleCore']['Scene_Battle_startActorSelection'][_0x365c43(0x14e)](this),this[_0x365c43(0xb25)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x325)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x6aa)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x6aa)]=function(){const _0x3c83ed=_0x17f940;VisuMZ[_0x3c83ed(0x960)]['Scene_Battle_startEnemySelection'][_0x3c83ed(0x14e)](this),this[_0x3c83ed(0xa09)][_0x3c83ed(0xa1a)](),this[_0x3c83ed(0xb25)]();},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0xb25)]=function(){const _0x40f468=_0x17f940,_0x1fe794=this[_0x40f468(0x346)]();['xp',_0x40f468(0xaa2),_0x40f468(0x735)][_0x40f468(0x72d)](_0x1fe794)&&this['_actorCommandWindow']['close'](),(_0x1fe794===_0x40f468(0x735)||this[_0x40f468(0x8a1)]())&&(this[_0x40f468(0x26c)]['close'](),this['_itemWindow']['close']());},VisuMZ[_0x17f940(0x960)]['Scene_Battle_onActorOk']=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x481)],Scene_Battle['prototype'][_0x17f940(0x481)]=function(){const _0x556894=_0x17f940;VisuMZ[_0x556894(0x960)][_0x556894(0x1bb)][_0x556894(0x14e)](this),this[_0x556894(0x855)]();},Scene_Battle[_0x17f940(0x25b)]['isNonSubmenuCancel']=function(){const _0x4028e6=_0x17f940;return[_0x4028e6(0x764),_0x4028e6(0x59c),_0x4028e6(0x4fb)][_0x4028e6(0x72d)](this[_0x4028e6(0xacc)][_0x4028e6(0xa2d)]());},VisuMZ[_0x17f940(0x960)][_0x17f940(0x428)]=Scene_Battle['prototype'][_0x17f940(0x6a2)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x6a2)]=function(){const _0xb6de27=_0x17f940;this[_0xb6de27(0x7cd)]()?(this[_0xb6de27(0x1e7)][_0xb6de27(0x376)](),this[_0xb6de27(0x191)]['hide'](),this['_actorCommandWindow'][_0xb6de27(0x67e)]()):VisuMZ[_0xb6de27(0x960)][_0xb6de27(0x428)][_0xb6de27(0x14e)](this),this[_0xb6de27(0x5c8)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x445)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x9ae)],Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x9ae)]=function(){const _0x4db2f7=_0x17f940;VisuMZ[_0x4db2f7(0x960)][_0x4db2f7(0x445)][_0x4db2f7(0x14e)](this),this[_0x4db2f7(0x855)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x8f0)]=Scene_Battle['prototype'][_0x17f940(0x721)],Scene_Battle['prototype'][_0x17f940(0x721)]=function(){const _0x300a67=_0x17f940;this[_0x300a67(0x7cd)]()?_0x300a67(0xa45)===_0x300a67(0xa45)?(this['_statusWindow'][_0x300a67(0x376)](),this['_enemyWindow'][_0x300a67(0x161)](),this[_0x300a67(0xacc)][_0x300a67(0x67e)]()):this[_0x300a67(0x573)][_0x300a67(0xb00)](0x0,0x0,0x0,0x0):VisuMZ[_0x300a67(0x960)]['Scene_Battle_onEnemyCancel'][_0x300a67(0x14e)](this),this[_0x300a67(0x5c8)]();},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x855)]=function(){const _0x27197b=_0x17f940,_0x317410=this[_0x27197b(0x346)]();if(_0x317410===_0x27197b(0x735)||this[_0x27197b(0x8a1)]()){this[_0x27197b(0x26c)][_0x27197b(0x5f4)]();this[_0x27197b(0x26c)]['active']&&this[_0x27197b(0x26c)][_0x27197b(0x376)]();this['_itemWindow']['open']();if(this[_0x27197b(0x135)]['active']){if(_0x27197b(0xa90)===_0x27197b(0x419)){const _0x1cbe85=_0x5387ae['indexOf'](_0x112035);return _0x1cbe85>=0x0?[_0x547fac[_0x1cbe85-0x1]||_0x50b9a8]:[_0x293948];}else this['_itemWindow'][_0x27197b(0x376)]();}}},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x5c8)]=function(){const _0x401983=_0x17f940,_0x44db15=this[_0x401983(0x346)]();['xp','portrait',_0x401983(0x735)][_0x401983(0x72d)](_0x44db15)&&this[_0x401983(0xacc)][_0x401983(0x5f4)](),this[_0x401983(0x855)]();},Scene_Battle['prototype'][_0x17f940(0x4ec)]=function(){const _0x3bb2d6=_0x17f940,_0x265daa=VisuMZ[_0x3bb2d6(0x960)][_0x3bb2d6(0x32c)][_0x3bb2d6(0x334)],_0x7b5ecd=Window_BattleStatus[_0x3bb2d6(0x25b)][_0x3bb2d6(0x701)](),_0x36711f=Graphics[_0x3bb2d6(0xac3)]-(_0x265daa[_0x3bb2d6(0x940)]||0xc0),_0x5760e2=this['windowAreaHeight']()+_0x7b5ecd,_0x1bd7d1=this[_0x3bb2d6(0x140)]()?0x0:Graphics[_0x3bb2d6(0xac3)]-_0x36711f,_0x3f8df4=Graphics['boxHeight']-_0x5760e2+_0x7b5ecd;return new Rectangle(_0x1bd7d1,_0x3f8df4,_0x36711f,_0x5760e2);},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x6b9)]=function(){const _0x568c46=_0x17f940,_0x71a11a=Window_BattleStatus['prototype']['extraHeight'](),_0x4b8d35=Graphics['boxWidth'],_0x22eb09=this[_0x568c46(0x758)]()+_0x71a11a,_0x40901f=0x0,_0xa4702d=Graphics[_0x568c46(0x45d)]-_0x22eb09+_0x71a11a;return new Rectangle(_0x40901f,_0xa4702d,_0x4b8d35,_0x22eb09);},Scene_Battle['prototype']['partyCommandWindowRectXPStyle']=function(){const _0x59aa94=_0x17f940,_0x272973=Graphics[_0x59aa94(0xac3)]/0x2,_0x1af542=this['calcWindowHeight'](VisuMZ['BattleCore'][_0x59aa94(0x32c)][_0x59aa94(0x334)][_0x59aa94(0x3e9)],!![]),_0x3f3cf5=Math['round']((Graphics[_0x59aa94(0xac3)]-_0x272973)/0x2),_0x412c8d=Graphics['boxHeight']-_0x1af542-this[_0x59aa94(0x6b9)]()['height'];return new Rectangle(_0x3f3cf5,_0x412c8d,_0x272973,_0x1af542);},Scene_Battle[_0x17f940(0x25b)]['helpWindowRectBorderStyle']=function(){const _0x1e7b2a=_0x17f940,_0x3aa243=Graphics[_0x1e7b2a(0x67f)],_0x37b691=Math['round']((Graphics[_0x1e7b2a(0xac3)]-_0x3aa243)/0x2),_0x1680ed=this[_0x1e7b2a(0x2f6)](),_0x5dcadd=(Graphics[_0x1e7b2a(0x87c)]-Graphics[_0x1e7b2a(0x45d)])/-0x2;return new Rectangle(_0x37b691,_0x5dcadd,_0x3aa243,_0x1680ed);},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x372)]=function(){const _0x4f9c14=_0x17f940,_0xa53b53=Graphics[_0x4f9c14(0x67f)],_0x10c1c9=Math[_0x4f9c14(0x189)]((Graphics['boxWidth']-_0xa53b53)/0x2),_0x5d53a5=this[_0x4f9c14(0x5e7)](0x4,!![]),_0x3fa8f6=Graphics[_0x4f9c14(0x45d)]-_0x5d53a5+(Graphics[_0x4f9c14(0x87c)]-Graphics[_0x4f9c14(0x45d)])/0x2;return new Rectangle(_0x10c1c9,_0x3fa8f6,_0xa53b53,_0x5d53a5);},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x7a9)]=function(){const _0x30e3ba=_0x17f940,_0x46db8a=Math[_0x30e3ba(0x143)](Graphics['width']/0x3),_0x45baa4=this[_0x30e3ba(0x140)]()?(Graphics[_0x30e3ba(0x67f)]+Graphics[_0x30e3ba(0xac3)])/0x2-_0x46db8a:(Graphics['width']-Graphics['boxWidth'])/-0x2,_0x2e35c8=this[_0x30e3ba(0x9e1)](),_0x460808=_0x2e35c8['y']+_0x2e35c8[_0x30e3ba(0x87c)],_0x55ef19=this[_0x30e3ba(0x372)](),_0x39adec=_0x55ef19['y']-_0x460808;return new Rectangle(_0x45baa4,_0x460808,_0x46db8a,_0x39adec);},Scene_Battle['prototype']['skillItemWindowRectBorderStyle']=function(){const _0x3f56b0=_0x17f940,_0x488210=Math[_0x3f56b0(0x65e)](Graphics[_0x3f56b0(0x67f)]/0x3),_0x557d0d=Math['round']((Graphics[_0x3f56b0(0xac3)]-_0x488210)/0x2),_0x2b5f76=this[_0x3f56b0(0x7a9)](),_0x3260ed=_0x2b5f76['y'],_0x14bd8e=_0x2b5f76['height'];return new Rectangle(_0x557d0d,_0x3260ed,_0x488210,_0x14bd8e);},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x7e0)]=function(){const _0x28ead6=_0x17f940;this[_0x28ead6(0x9c4)]['y']=this['_helpWindow']['y']+this['_helpWindow'][_0x28ead6(0x87c)],this[_0x28ead6(0x140)]()?this[_0x28ead6(0x346)]()===_0x28ead6(0x735)?this[_0x28ead6(0x9c4)]['x']=0x8:_0x28ead6(0x906)!==_0x28ead6(0x7e3)?this[_0x28ead6(0x9c4)]['x']=-this['_cancelButton']['width']-0x4:this[_0x28ead6(0x32a)][_0x28ead6(0x5a6)]=_0x349c7c['prototype'][_0x28ead6(0x61d)]['call'](this):this['_cancelButton']['x']=Graphics['width']-(Graphics[_0x28ead6(0x67f)]-Graphics['boxWidth'])/0x2-this['_cancelButton'][_0x28ead6(0x67f)]-0x4;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x1d4)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x482)],Scene_Battle['prototype'][_0x17f940(0x482)]=function(){const _0x1259ff=_0x17f940;if(this[_0x1259ff(0x346)]()===_0x1259ff(0x735))return this[_0x1259ff(0x139)]();else{if(this['isSkillItemWindowsMiddle']())return this[_0x1259ff(0x3e6)]();else{if(_0x1259ff(0x795)===_0x1259ff(0x795))return VisuMZ[_0x1259ff(0x960)]['Scene_Battle_skillWindowRect']['call'](this);else _0x32a4d0['BattleCore'][_0x1259ff(0x16f)]['call'](this),!this[_0x1259ff(0xa3d)]&&this[_0x1259ff(0x3d8)]&&(this[_0x1259ff(0x3d8)][_0x1259ff(0x57d)]=![]);}}},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa18)]=Scene_Battle[_0x17f940(0x25b)][_0x17f940(0xa23)],Scene_Battle['prototype'][_0x17f940(0xa23)]=function(){const _0x1be72d=_0x17f940;if(this[_0x1be72d(0x346)]()===_0x1be72d(0x735)){if('pSBoM'!==_0x1be72d(0x4f0))return this[_0x1be72d(0x139)]();else _0x302e75[_0x1be72d(0x960)][_0x1be72d(0x98c)]&&_0x2517fd[_0x1be72d(0x960)][_0x1be72d(0x98c)][_0x1be72d(0x14e)](this,_0x1e7bd2),_0x2ff508[_0x1be72d(0x960)]['Parse_Notetags_Action'](_0x292c51),_0x2407fe[_0x1be72d(0x960)]['Parse_Notetags_Targets'](_0x42a879);}else{if(this[_0x1be72d(0x8a1)]()){if('PmscB'==='PmscB')return this['skillItemWindowRectMiddle']();else this[_0x1be72d(0x307)]=this[_0x1be72d(0x2f7)](this[_0x1be72d(0x307)],this[_0x1be72d(0x1de)],_0x1e29e6,_0x58a20a,_0x230f43);}else{if(_0x1be72d(0xa43)===_0x1be72d(0xa43))return VisuMZ['BattleCore'][_0x1be72d(0xa18)][_0x1be72d(0x14e)](this);else _0x1562b8=_0x426cfa[_0x1be72d(0x55d)];}}},Scene_Battle['prototype'][_0x17f940(0x8a1)]=function(){const _0x4aff80=_0x17f940;return VisuMZ['BattleCore'][_0x4aff80(0x32c)]['BattleLayout'][_0x4aff80(0xb2a)];},Scene_Battle[_0x17f940(0x25b)][_0x17f940(0x3e6)]=function(){const _0x5a456f=_0x17f940,_0x140d4b=Sprite_Button[_0x5a456f(0x25b)][_0x5a456f(0x82f)]()*0x2+0x4;let _0x4f5c76=Graphics[_0x5a456f(0xac3)]-_0x140d4b;Imported[_0x5a456f(0xa8c)]&&SceneManager[_0x5a456f(0x68c)]()&&('hqdVI'==='hqdVI'?_0x4f5c76+=_0x140d4b:(_0x457a43[_0x5a456f(0x960)]['Window_BattleLog_performMiss'][_0x5a456f(0x14e)](this,_0x3c931e),this[_0x5a456f(0x245)]()));const _0x54d62c=this[_0x5a456f(0x3f8)](),_0x48a017=Graphics[_0x5a456f(0x45d)]-_0x54d62c-this[_0x5a456f(0x2a8)]()[_0x5a456f(0x87c)]+Window_BattleStatus[_0x5a456f(0x25b)]['extraHeight'](),_0x33d586=0x0;return new Rectangle(_0x33d586,_0x54d62c,_0x4f5c76,_0x48a017);},Scene_Battle['prototype'][_0x17f940(0x345)]=function(){const _0x1c82fb=_0x17f940;if(!VisuMZ[_0x1c82fb(0x960)][_0x1c82fb(0x32c)][_0x1c82fb(0x99a)][_0x1c82fb(0x102)])return;this[_0x1c82fb(0x34e)]=new Sprite(),this[_0x1c82fb(0x34e)]['x']=this[_0x1c82fb(0x398)]['x'],this[_0x1c82fb(0x34e)]['y']=this[_0x1c82fb(0x398)]['y'];const _0x5c196b=this['children'][_0x1c82fb(0x74c)](this[_0x1c82fb(0x398)]);this[_0x1c82fb(0x5bc)](this[_0x1c82fb(0x34e)],_0x5c196b);for(let _0x2ceb65=0x0;_0x2ceb65<0x8;_0x2ceb65++){if('nPFAX'===_0x1c82fb(0x29a)){const _0x315145=new Window_EnemyName(_0x2ceb65);this[_0x1c82fb(0x34e)][_0x1c82fb(0x1cc)](_0x315145);}else return _0x136760[_0x1c82fb(0x960)][_0x1c82fb(0x32c)][_0x1c82fb(0x334)][_0x1c82fb(0xb2a)];}},Sprite_Battler[_0x17f940(0x708)]=VisuMZ[_0x17f940(0x960)][_0x17f940(0x32c)]['Actor'][_0x17f940(0x4fd)],VisuMZ[_0x17f940(0x960)]['Sprite_Battler_initMembers']=Sprite_Battler[_0x17f940(0x25b)]['initMembers'],Sprite_Battler[_0x17f940(0x25b)]['initMembers']=function(){const _0x6c64d=_0x17f940;VisuMZ[_0x6c64d(0x960)][_0x6c64d(0x48a)][_0x6c64d(0x14e)](this),this['initMembersBattleCore']();if(this['constructor']===Sprite_Enemy)this[_0x6c64d(0x992)]();this[_0x6c64d(0x41f)]();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xaab)]=function(){const _0x494f48=_0x17f940;this[_0x494f48(0x521)]=0x0,this[_0x494f48(0x626)]=0x0,this['_floatHeight']=0x0,this[_0x494f48(0x5b4)]=0x0,this['_floatDuration']=0x0,this[_0x494f48(0x9f9)]=0x0,this['_floatEasing']=_0x494f48(0x69c),this[_0x494f48(0x911)]=0x0,this[_0x494f48(0x80c)]=0x0,this['_jumpDuration']=0x0,this[_0x494f48(0x607)]=0x0,this[_0x494f48(0xacf)]=0xff,this[_0x494f48(0x711)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x494f48(0x55e)]=_0x494f48(0x69c),this[_0x494f48(0x307)]=0x0,this[_0x494f48(0x1de)]=0x0,this[_0x494f48(0x57e)]=0x0,this[_0x494f48(0x578)]=0x0,this[_0x494f48(0xac1)]=_0x494f48(0x69c),this['_angleRevertOnFinish']=!![],this[_0x494f48(0x174)]=0x0,this[_0x494f48(0xa52)]=0x0,this[_0x494f48(0x351)]=0x0,this[_0x494f48(0x9e7)]=0x0,this[_0x494f48(0x9d3)]=0x0,this[_0x494f48(0xa75)]=0x0,this[_0x494f48(0x4f7)]=_0x494f48(0x69c),this[_0x494f48(0x71d)]=0x1,this[_0x494f48(0x5bb)]=0x1,this[_0x494f48(0xae8)]=0x1,this['_targetGrowY']=0x1,this[_0x494f48(0x4ac)]=0x0,this[_0x494f48(0x1b1)]=0x0,this[_0x494f48(0x37b)]=_0x494f48(0x69c),this[_0x494f48(0x8a0)]=0x1;},Sprite_Battler[_0x17f940(0x25b)]['createShadowSprite']=function(){const _0x223e36=_0x17f940;this[_0x223e36(0x573)]=new Sprite(),this[_0x223e36(0x573)][_0x223e36(0x242)]=ImageManager['loadSystem'](_0x223e36(0x2f0)),this['_shadowSprite'][_0x223e36(0x242)][_0x223e36(0x92c)]=VisuMZ['BattleCore'][_0x223e36(0x32c)][_0x223e36(0x36b)]['SmoothImage'],this['_shadowSprite'][_0x223e36(0x6ce)]['x']=0.5,this[_0x223e36(0x573)][_0x223e36(0x6ce)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x223e36(0x573)][_0x223e36(0x57d)]=![],this[_0x223e36(0x1cc)](this[_0x223e36(0x573)]);},Sprite_Battler['prototype'][_0x17f940(0x41f)]=function(){const _0xf09568=_0x17f940;this['_distortionSprite']=new Sprite(),this['_distortionSprite'][_0xf09568(0x6ce)]['x']=0.5,this[_0xf09568(0x404)][_0xf09568(0x6ce)]['y']=0.5,this[_0xf09568(0x1cc)](this[_0xf09568(0x404)]);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x591)]=function(){const _0x1ee5d6=_0x17f940;if(!this[_0x1ee5d6(0x404)])return;if(this[_0x1ee5d6(0x573)]){const _0xcfac85=this['getChildIndex'](this['_distortionSprite']);this[_0x1ee5d6(0x5bc)](this['_shadowSprite'],_0xcfac85),this['updateShadowVisibility']();}if(this[_0x1ee5d6(0xa1f)]){if(_0x1ee5d6(0xac8)!==_0x1ee5d6(0x78b))this[_0x1ee5d6(0x404)][_0x1ee5d6(0x1cc)](this[_0x1ee5d6(0xa1f)]);else return![];}if(this[_0x1ee5d6(0x744)]){if(_0x1ee5d6(0x5cb)!==_0x1ee5d6(0x2d7))this[_0x1ee5d6(0x404)][_0x1ee5d6(0x1cc)](this[_0x1ee5d6(0x744)]);else{const _0x55e724=_0x340f44(_0xc36eb7['$1']);return _0x4592d[_0x1ee5d6(0x6f6)]()[_0x1ee5d6(0x427)](_0x3fb6dd=>_0x3fb6dd['enemyId']()===_0x55e724);}}this[_0x1ee5d6(0x871)]&&this[_0x1ee5d6(0x404)][_0x1ee5d6(0x1cc)](this['_mainSprite']),this[_0x1ee5d6(0x2b7)]&&this['_distortionSprite'][_0x1ee5d6(0x1cc)](this[_0x1ee5d6(0x2b7)]);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xa70)]=function(){const _0x2aceaa=_0x17f940;if(!this[_0x2aceaa(0x573)])return;if(this[_0x2aceaa(0xa3d)]&&this[_0x2aceaa(0xa3d)]['svBattlerShadowVisible']()){if(_0x2aceaa(0x8c9)!=='XZuDh'){const _0x352d33=this[_0x2aceaa(0x573)][_0x2aceaa(0x242)];this[_0x2aceaa(0x573)][_0x2aceaa(0xb00)](0x0,0x0,_0x352d33[_0x2aceaa(0x67f)],_0x352d33[_0x2aceaa(0x87c)]);}else this[_0x2aceaa(0xac4)]=this['applyEasing'](this[_0x2aceaa(0xac4)],this[_0x2aceaa(0xacf)],_0x1e5b34,_0x4d0264,_0x3cca35);}else this['_shadowSprite'][_0x2aceaa(0xb00)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x17f940(0x34d)]=function(){const _0xd61fb2=_0x17f940;if(SceneManager[_0xd61fb2(0x2ac)]())return SceneManager[_0xd61fb2(0x712)][_0xd61fb2(0x4ab)][_0xd61fb2(0x1ce)];else{if(_0xd61fb2(0x74b)===_0xd61fb2(0x8fb))_0x3bc6f2[_0xd61fb2(0x960)][_0xd61fb2(0x147)]['call'](this,_0x4efb82,_0x25e060),this[_0xd61fb2(0x245)]();else return this[_0xd61fb2(0xaed)];}},Sprite_Battler['prototype'][_0x17f940(0x9f3)]=function(_0x389c6e,_0x4f9535){const _0x28992b=_0x17f940;if(!this[_0x28992b(0xa3d)][_0x28992b(0x73a)]())return;const _0x33d37e=VisuMZ[_0x28992b(0x960)][_0x28992b(0x32c)][_0x28992b(0x176)],_0x4900b3=new Sprite_Damage();_0x4900b3[_0x28992b(0x586)]=_0x33d37e[_0x28992b(0xb04)],this['sortDamageSprites'](_0x4900b3),_0x4900b3[_0x28992b(0x9f3)](_0x389c6e,_0x4f9535),this[_0x28992b(0x13e)](_0x4900b3);},Sprite_Battler['prototype'][_0x17f940(0x898)]=function(_0x5be796,_0x53eabc,_0x52acfa){const _0x336bd9=_0x17f940;if(!this['_battler'][_0x336bd9(0x73a)]())return;const _0xeafb91=VisuMZ[_0x336bd9(0x960)]['Settings'][_0x336bd9(0x176)],_0x3002d9=new Sprite_Damage();_0x3002d9[_0x336bd9(0x586)]=_0xeafb91[_0x336bd9(0xb04)],this['sortDamageSprites'](_0x3002d9),_0x3002d9[_0x336bd9(0x898)](_0x5be796,_0x53eabc,_0x52acfa),this[_0x336bd9(0x13e)](_0x3002d9);},Sprite_Battler['prototype'][_0x17f940(0x9ef)]=function(){const _0xcc94d2=_0x17f940;if(!this[_0xcc94d2(0xa3d)][_0xcc94d2(0x349)]())return;while(this[_0xcc94d2(0xa3d)][_0xcc94d2(0x349)]()){'WjQxK'===_0xcc94d2(0x9e6)?(_0x7e6627['scale']['x']=this[_0xcc94d2(0x48b)](),_0x2f2a38['scale']['y']=this[_0xcc94d2(0x238)]()):this[_0xcc94d2(0xa3d)][_0xcc94d2(0x73a)]()&&(_0xcc94d2(0x8b3)===_0xcc94d2(0x58f)?this['addSingleSkillCommands']():this[_0xcc94d2(0x9a9)]());}this[_0xcc94d2(0xa3d)][_0xcc94d2(0xfe)](),this['_battler']['clearResult']();},Sprite_Battler['prototype'][_0x17f940(0x9a9)]=function(){const _0x5ba590=_0x17f940,_0x124703=VisuMZ[_0x5ba590(0x960)][_0x5ba590(0x32c)][_0x5ba590(0x176)],_0x1c58dd=new Sprite_Damage();_0x1c58dd[_0x5ba590(0x586)]=_0x124703[_0x5ba590(0xb04)],this['sortDamageSprites'](_0x1c58dd),_0x1c58dd[_0x5ba590(0x4bb)](this[_0x5ba590(0xa3d)]),_0x1c58dd[_0x5ba590(0xaca)](this[_0x5ba590(0xa3d)]),this['addDamageSprite'](_0x1c58dd);},Sprite_Battler['prototype'][_0x17f940(0x13e)]=function(_0x21ce8c){const _0x30a9f0=_0x17f940;this[_0x30a9f0(0x9c6)][_0x30a9f0(0x5e8)](_0x21ce8c);if(this[_0x30a9f0(0x5fd)]()){if('dmDyo'!==_0x30a9f0(0xa9f)){this['_actionBattlers']['remove'](_0x56451f);if(_0x57ee5d===this[_0x30a9f0(0x128)])return;const _0x407881=_0x3b99df[_0x30a9f0(0xa38)](_0x217987['currentAction']());this[_0x30a9f0(0x7f7)][_0x30a9f0(0x5e8)]([_0x237d8d,_0x407881]);}else SceneManager[_0x30a9f0(0x712)][_0x30a9f0(0x1e7)][_0x30a9f0(0x13e)](_0x21ce8c,this['_battler']);}else{this[_0x30a9f0(0x34d)]()['addChild'](_0x21ce8c);if(SceneManager[_0x30a9f0(0x3ed)]())_0x21ce8c[_0x30a9f0(0x13a)]['x']=-0x1;}},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x5fd)]=function(){const _0x18e02a=_0x17f940;return!$gameSystem['isSideView']()&&this[_0x18e02a(0xa3d)]&&this[_0x18e02a(0xa3d)][_0x18e02a(0x2b6)]();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x195)]=function(_0x61ea99){const _0x169bc2=_0x17f940;this[_0x169bc2(0x2d0)](_0x61ea99,!![]);const _0x740670=VisuMZ['BattleCore'][_0x169bc2(0x32c)]['Damage'],_0x2f8a03=SceneManager[_0x169bc2(0x3ed)]()?-0x1:0x1;if(_0x740670['NewPopupBottom'])for(const _0x58bf40 of this[_0x169bc2(0x9c6)]){_0x58bf40['x']+=_0x740670[_0x169bc2(0x885)]*_0x2f8a03,_0x58bf40['y']+=_0x740670[_0x169bc2(0xa72)];}else{const _0x38ba62=this[_0x169bc2(0x9c6)][this[_0x169bc2(0x9c6)][_0x169bc2(0x702)]-0x1];_0x38ba62&&('BFTJC'!==_0x169bc2(0x70c)?_0x56e317=this[_0x169bc2(0x4e1)]():(_0x61ea99['x']=_0x38ba62['x']+_0x740670[_0x169bc2(0x885)]*_0x2f8a03,_0x61ea99['y']=_0x38ba62['y']+_0x740670['PopupShiftY']));}},Sprite_Battler[_0x17f940(0x25b)]['alignBattleCoreDamageSprite']=function(_0x5501b8,_0x4c83ff){const _0x42c8b0=_0x17f940,_0x453ad4=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x3a49a0=this['_baseX'];_0x3a49a0+=this[_0x42c8b0(0x6d6)]();let _0x27b64b=this[_0x42c8b0(0x626)];const _0x29012b=this[_0x42c8b0(0x404)][_0x42c8b0(0x13a)]['y'];_0x27b64b+=this['extraPositionY']();const _0x82870b=SceneManager['_scene'][_0x42c8b0(0x1e7)];if(_0x82870b&&this[_0x42c8b0(0xaed)]===_0x82870b){_0x3a49a0+=_0x82870b['x']-this['damageOffsetX']();const _0x22dfb3=_0x82870b[_0x42c8b0(0x487)]()*0x3/0x4;_0x27b64b=_0x82870b['y']+_0x22dfb3,_0x27b64b=Math[_0x42c8b0(0x1c9)](_0x27b64b,_0x82870b['y']+this['y']-this[_0x42c8b0(0x87c)]+_0x22dfb3);}_0x5501b8['x']=Math['round'](_0x3a49a0+this['damageOffsetX']()*_0x453ad4),_0x5501b8['y']=Math[_0x42c8b0(0x189)](_0x27b64b+this[_0x42c8b0(0x160)]());},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetX']=Sprite_Battler['prototype'][_0x17f940(0x925)],Sprite_Battler[_0x17f940(0x25b)]['damageOffsetX']=function(){const _0x35b993=_0x17f940;let _0x51402f=VisuMZ[_0x35b993(0x960)]['Sprite_Battler_damageOffsetX'][_0x35b993(0x14e)](this),_0x3cc202=VisuMZ[_0x35b993(0x960)]['Settings'][_0x35b993(0x176)]['PopupOffsetX']||0x0;return Math['round'](_0x51402f+_0x3cc202);},VisuMZ[_0x17f940(0x960)]['Sprite_Battler_damageOffsetY']=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x160)],Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x160)]=function(){const _0x2ec0a7=_0x17f940;let _0x59005a=VisuMZ['BattleCore']['Sprite_Battler_damageOffsetY']['call'](this);switch(VisuMZ[_0x2ec0a7(0x960)]['Settings']['Damage'][_0x2ec0a7(0x7d0)]){case _0x2ec0a7(0x98f):_0x59005a-=this[_0x2ec0a7(0x87c)]*this[_0x2ec0a7(0x13a)]['y'];break;case'center':_0x59005a-=this[_0x2ec0a7(0x87c)]*this[_0x2ec0a7(0x13a)]['y']*0.5;break;}let _0x2e8760=VisuMZ[_0x2ec0a7(0x960)]['Settings']['Damage'][_0x2ec0a7(0x6f4)]||0x0;return Math[_0x2ec0a7(0x189)](_0x59005a+_0x2e8760);},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x925)]=function(){const _0x24e11d=_0x17f940;return Sprite_Battler['prototype'][_0x24e11d(0x925)][_0x24e11d(0x14e)](this);},Sprite_Actor[_0x17f940(0x25b)]['damageOffsetY']=function(){const _0x1f9d0f=_0x17f940;return Sprite_Battler['prototype']['damageOffsetY'][_0x1f9d0f(0x14e)](this);},Sprite_Battler[_0x17f940(0x25b)]['destroyDamageSprite']=function(_0x2c32f6){const _0x5b17ee=_0x17f940;this[_0x5b17ee(0x5fd)]()?SceneManager['_scene']['_statusWindow'][_0x5b17ee(0x429)](_0x2c32f6):(this[_0x5b17ee(0x34d)]()['removeChild'](_0x2c32f6),this['_damages']['remove'](_0x2c32f6),_0x2c32f6[_0x5b17ee(0x6ad)]());},VisuMZ[_0x17f940(0x960)][_0x17f940(0x83c)]=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x924)],Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x924)]=function(_0x17e617,_0x56b34c){const _0x4d3a0c=_0x17f940,_0x2814e7=VisuMZ[_0x4d3a0c(0x960)]['Settings'];if(this[_0x4d3a0c(0x27b)]===Sprite_Actor)_0x17e617+=_0x2814e7['Actor'][_0x4d3a0c(0x4e9)]||0x0,_0x56b34c+=_0x2814e7[_0x4d3a0c(0x36b)]['OffsetY']||0x0;else{if(this['constructor']===Sprite_Enemy){if(_0x4d3a0c(0x423)!==_0x4d3a0c(0xa0d))_0x17e617+=_0x2814e7[_0x4d3a0c(0x99a)][_0x4d3a0c(0x4e9)]||0x0,_0x56b34c+=_0x2814e7[_0x4d3a0c(0x99a)]['OffsetY']||0x0;else{this[_0x4d3a0c(0x4db)][_0x4d3a0c(0x57d)]=_0x110b2c[_0x4d3a0c(0x17d)]();const _0x32c154=_0x28d41f[_0x4d3a0c(0x371)]();if(_0x32c154===this[_0x4d3a0c(0x4db)][_0x4d3a0c(0x371)])return;this[_0x4d3a0c(0x4db)][_0x4d3a0c(0x371)]=_0x32c154||this[_0x4d3a0c(0x4db)][_0x4d3a0c(0x371)];if(!_0x32c154)return;else{if(_0x32c154[_0x4d3a0c(0x422)]()===''){this['_borderPortraitSprite'][_0x4d3a0c(0x242)]=_0x495c69[_0x4d3a0c(0x1e8)];return;}else{const _0x2827c8=_0x1265e2[_0x4d3a0c(0x7e4)](_0x32c154[_0x4d3a0c(0x422)]());_0x2827c8[_0x4d3a0c(0x961)](this[_0x4d3a0c(0xa1e)]['bind'](this,_0x2827c8));}}}}}VisuMZ[_0x4d3a0c(0x960)][_0x4d3a0c(0x83c)][_0x4d3a0c(0x14e)](this,_0x17e617,_0x56b34c);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x16f)]=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x106)],Sprite_Battler[_0x17f940(0x25b)]['update']=function(){const _0x50bf90=_0x17f940;VisuMZ[_0x50bf90(0x960)]['Sprite_Battler_update'][_0x50bf90(0x14e)](this),!this[_0x50bf90(0xa3d)]&&this[_0x50bf90(0x3d8)]&&(this[_0x50bf90(0x3d8)][_0x50bf90(0x57d)]=![]);},VisuMZ['BattleCore'][_0x17f940(0x375)]=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x66c)],Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x66c)]=function(){const _0x397678=_0x17f940;this[_0x397678(0x5b5)](),this[_0x397678(0x28c)](),this[_0x397678(0x7ab)](),this[_0x397678(0x858)](),this[_0x397678(0x8ea)](),VisuMZ[_0x397678(0x960)][_0x397678(0x375)][_0x397678(0x14e)](this);if(this[_0x397678(0x27b)]===Sprite_Enemy)this[_0x397678(0x694)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x14f)]=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x373)],Sprite_Battler[_0x17f940(0x25b)]['updatePosition']=function(){const _0x58e283=_0x17f940;VisuMZ[_0x58e283(0x960)][_0x58e283(0x14f)][_0x58e283(0x14e)](this),this[_0x58e283(0x127)](),this[_0x58e283(0x86a)]();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x127)]=function(){const _0xd3058=_0x17f940;this['_baseX']=this['x'],this['_baseY']=this['y'],this[_0xd3058(0xb12)](),this[_0xd3058(0x2d9)](),this['x']+=this[_0xd3058(0x6d6)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0xd3058(0x55b)](),this['x']=Math[_0xd3058(0x143)](this['x']),this['y']=Math[_0xd3058(0x143)](this['y']);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x6d6)]=function(){let _0x521da7=0x0;return _0x521da7;},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x244)]=function(){const _0x59afcf=_0x17f940;let _0x1950ef=0x0;return this[_0x59afcf(0xa3d)]&&!this['_battler'][_0x59afcf(0x3c6)]()&&(_0x59afcf(0x949)==='uHjmf'?(_0x5bda13['x']=_0x12dc8c['x']+_0x5dc56c[_0x59afcf(0x885)]*_0x3bc9ca,_0x509c7c['y']=_0x493cca['y']+_0x26134b['PopupShiftY']):(_0x1950ef-=this[_0x59afcf(0x69b)],_0x1950ef-=this[_0x59afcf(0x911)])),_0x1950ef;},Sprite_Battler[_0x17f940(0x25b)]['extraPositionScaledY']=function(){const _0x38383b=_0x17f940;let _0x59378e=0x0;if(this['_distortionSprite']&&this['constructor']!==Sprite_SvEnemy){if(_0x38383b(0x406)!==_0x38383b(0x600)){const _0x388912=this[_0x38383b(0x404)][_0x38383b(0x13a)]['y'];_0x59378e-=(_0x388912-0x1)*this[_0x38383b(0x87c)];}else{if(_0x4f4ac8[_0x38383b(0x377)]&&_0x3995bb['isCTB']())return![];else{if(!_0x4acc9b[_0x38383b(0x960)][_0x38383b(0x528)])return![];const _0x22bc31=_0xd294aa['aliveMembers']()[_0x38383b(0x427)](_0x1d2216=>_0x1d2216[_0x38383b(0x26f)]()&&_0x1d2216['canInput']());return _0x22bc31['length']>0x0&&_0x5e0796[_0x38383b(0x371)]()!==_0x22bc31[_0x22bc31[_0x38383b(0x702)]-0x1];}}}return _0x59378e;},Sprite_Battler[_0x17f940(0x25b)]['updateFlip']=function(){const _0x304625=_0x17f940,_0x59f054=this['_battler']&&this[_0x304625(0xa3d)][_0x304625(0x6a8)]();this[_0x304625(0x8a0)]=(_0x59f054?-0x1:0x1)*Math[_0x304625(0x1ca)](this[_0x304625(0x13a)]['x']);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x653)]=function(_0x2dc714,_0x419be8,_0x214979){const _0x1daa75=_0x17f940;if(!this[_0x1daa75(0xab7)]())return;if(this['_targetFloatHeight']===_0x2dc714)return;this[_0x1daa75(0x5b4)]=_0x2dc714,this[_0x1daa75(0x6a5)]=_0x419be8,this['_floatWholeDuration']=_0x419be8,this[_0x1daa75(0x2e9)]=_0x214979||_0x1daa75(0x69c);if(_0x419be8<=0x0)this[_0x1daa75(0x69b)]=_0x2dc714;},Sprite_Battler['prototype']['updateFloat']=function(){const _0x51eb86=_0x17f940;if(this[_0x51eb86(0x6a5)]<=0x0)return;const _0x28985b=this['_floatDuration'],_0x54a1dc=this[_0x51eb86(0x9f9)],_0x9c1053=this[_0x51eb86(0x2e9)];if(Imported['VisuMZ_0_CoreEngine']){if('aAbtI'===_0x51eb86(0x158))return this[_0x51eb86(0xa9c)]>0x0;else this[_0x51eb86(0x69b)]=this[_0x51eb86(0x2f7)](this['_floatHeight'],this[_0x51eb86(0x5b4)],_0x28985b,_0x54a1dc,_0x9c1053);}else'VxKxG'!==_0x51eb86(0x6a3)?_0x42fcf6=_0x4b7081(_0x4f3dd4['$1']):this[_0x51eb86(0x69b)]=(this[_0x51eb86(0x69b)]*(_0x28985b-0x1)+this[_0x51eb86(0x5b4)])/_0x28985b;this[_0x51eb86(0x6a5)]--;if(this['_floatDuration']<=0x0)this[_0x51eb86(0x6ae)]();},Sprite_Battler['prototype'][_0x17f940(0x6ae)]=function(){this['_floatHeight']=this['_targetFloatHeight'];},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x9de)]=function(){const _0x1f7dcf=_0x17f940;return this[_0x1f7dcf(0x6a5)]>0x0;},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x805)]=function(_0x243fa8,_0x126e5f){const _0x3a8a6f=_0x17f940;if(!this['canMove']())return;if(_0x126e5f<=0x0)return;this[_0x3a8a6f(0x80c)]=_0x243fa8,this[_0x3a8a6f(0xa9c)]=_0x126e5f,this[_0x3a8a6f(0x607)]=_0x126e5f;},Sprite_Battler['prototype'][_0x17f940(0x2d9)]=function(){const _0x1b99a9=_0x17f940;if(this[_0x1b99a9(0xa9c)]<=0x0)return;const _0x2b7e82=this[_0x1b99a9(0x607)]-this[_0x1b99a9(0xa9c)],_0xa953c5=this['_jumpWholeDuration']/0x2,_0x3ce29f=this[_0x1b99a9(0x80c)],_0xa20406=-_0x3ce29f/Math['pow'](_0xa953c5,0x2);this[_0x1b99a9(0x911)]=_0xa20406*Math[_0x1b99a9(0x524)](_0x2b7e82-_0xa953c5,0x2)+_0x3ce29f,this[_0x1b99a9(0xa9c)]--;if(this[_0x1b99a9(0xa9c)]<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0x17f940(0x25b)]['onJumpEnd']=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x17f940(0x25b)]['isJumping']=function(){const _0x10f2ba=_0x17f940;return this[_0x10f2ba(0xa9c)]>0x0;},Sprite_Battler[_0x17f940(0x25b)]['startOpacity']=function(_0x15c263,_0x4bd956,_0x137081){const _0x4c5394=_0x17f940;if(this[_0x4c5394(0xacf)]===_0x15c263)return;this['_targetOpacity']=_0x15c263,this['_opacityDuration']=_0x4bd956,this[_0x4c5394(0x974)]=_0x4bd956,this[_0x4c5394(0x55e)]=_0x137081||_0x4c5394(0x69c);if(_0x4bd956<=0x0)this[_0x4c5394(0xac4)]=_0x15c263;},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x86a)]=function(){const _0x423b02=_0x17f940;if(this[_0x423b02(0x27b)]['name']==='Sprite_SvEnemy')return;if(this[_0x423b02(0x711)]<=0x0)return;const _0x27e054=this[_0x423b02(0x711)],_0x375aeb=this[_0x423b02(0x974)],_0x502e28=this[_0x423b02(0x55e)];Imported[_0x423b02(0xa8c)]?this[_0x423b02(0xac4)]=this[_0x423b02(0x2f7)](this['opacity'],this[_0x423b02(0xacf)],_0x27e054,_0x375aeb,_0x502e28):this['opacity']=(this[_0x423b02(0xac4)]*(_0x27e054-0x1)+this['_targetOpacity'])/_0x27e054;this[_0x423b02(0x711)]--;if(this[_0x423b02(0x711)]<=0x0)this[_0x423b02(0x208)]();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0x4d5f55=_0x17f940;this[_0x4d5f55(0xac4)]=this['_targetOpacity'];},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x500)]=function(){const _0x590e81=_0x17f940;return this[_0x590e81(0x711)]>0x0;},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x694)]=function(){const _0x49cb79=_0x17f940;this[_0x49cb79(0x573)][_0x49cb79(0x57d)]=this[_0x49cb79(0xa3d)]['hasSvBattler'](),this['updateShadowPosition']();},Sprite_Battler['prototype']['updateShadowPosition']=function(){const _0x4cb44d=_0x17f940;if(!this['_shadowSprite'])return;this[_0x4cb44d(0x573)]['y']=this[_0x4cb44d(0x626)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x17f940(0x49f)]=function(){const _0x55f67b=_0x17f940;if(!this[_0x55f67b(0xa3d)])return;this[_0x55f67b(0x5b0)]=this['_battler'][_0x55f67b(0x622)](),this[_0x55f67b(0x592)]=this[_0x55f67b(0xa3d)][_0x55f67b(0xa26)]();},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0x622)]=function(){const _0x54b0da=_0x17f940,_0x3fb4fe=this[_0x54b0da(0x2b6)]()?this['actor']():this[_0x54b0da(0x1c2)]();if(_0x3fb4fe){const _0x58abfe=_0x3fb4fe[_0x54b0da(0x981)];if(_0x58abfe[_0x54b0da(0x413)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if(_0x54b0da(0x761)!==_0x54b0da(0x119))return Number(RegExp['$1'])*0.01;else{if(this['_battleLayoutStyle'])return this[_0x54b0da(0xa96)];return this[_0x54b0da(0xa96)]=_0x4426f1[_0x54b0da(0x712)][_0x54b0da(0x346)](),this['_battleLayoutStyle'];}}else{if(_0x58abfe['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x54b0da(0x2da)!==_0x54b0da(0x2da)?_0x5ced74[_0x54b0da(0x960)][_0x54b0da(0x32c)][_0x54b0da(0x5c5)][_0x54b0da(0x725)][_0x54b0da(0x14e)](this):Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x17f940(0x25b)][_0x17f940(0xa26)]=function(){const _0x2a2319=_0x17f940,_0x2c0c29=this[_0x2a2319(0x2b6)]()?this[_0x2a2319(0x371)]():this[_0x2a2319(0x1c2)]();if(_0x2c0c29){if(_0x2a2319(0x5d8)===_0x2a2319(0x5d8)){const _0x1322bb=_0x2c0c29['note'];if(_0x1322bb[_0x2a2319(0x413)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if(_0x2a2319(0x751)===_0x2a2319(0x751))return Number(RegExp['$1'])*0.01;else this[_0x2a2319(0x99e)]()?(this[_0x2a2319(0x2de)]=!![],this[_0x2a2319(0x8ba)][_0x2a2319(0x5e8)](_0x2a2319(0xa81),_0x3bf120[_0x2a2319(0x960)][_0x2a2319(0x32c)][_0x2a2319(0x6e8)][_0x2a2319(0x2b1)])):this[_0x2a2319(0x537)]();}else{if(_0x1322bb['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x2a2319(0x738)===_0x2a2319(0x47f))_0x48922e['BattleCore'][_0x2a2319(0x442)]&&_0x57ffdb['BattleCore'][_0x2a2319(0x442)]['call'](this,_0x94396),_0x3458a2[_0x2a2319(0x960)][_0x2a2319(0x889)](_0x2a9acf);else return Number(RegExp['$1'])||0x0;}}}else _0x5eaed9[_0x2a2319(0x6ec)](_0x2679c1[0x2],_0x5de34e[0x3]),_0x4525b8[_0x2a2319(0x6ec)](_0x89404d);}return 0x1;},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x5b5)]=function(){const _0x38455=_0x17f940;if(this[_0x38455(0x27b)]===Sprite_SvEnemy)return;this[_0x38455(0xaa4)](),this[_0x38455(0x5fb)]();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x5fb)]=function(){const _0x5e95ce=_0x17f940,_0x5c4ac1=this[_0x5e95ce(0x404)];_0x5c4ac1&&(_0x5c4ac1['scale']['x']=this[_0x5e95ce(0x48b)](),_0x5c4ac1[_0x5e95ce(0x13a)]['y']=this['mainSpriteScaleY']());},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x48b)]=function(){const _0x1e932f=_0x17f940;let _0x3b7cd8=0x1;return _0x3b7cd8*=this[_0x1e932f(0x8a0)],_0x3b7cd8*=this[_0x1e932f(0x71d)],_0x3b7cd8;},Sprite_Battler[_0x17f940(0x25b)]['mainSpriteScaleY']=function(){const _0x3b08e1=_0x17f940;return 0x1*this[_0x3b08e1(0x5bb)];},Sprite_Battler[_0x17f940(0x25b)]['mainSpriteWidth']=function(){const _0x5504e4=_0x17f940;return this[_0x5504e4(0x67f)]*this[_0x5504e4(0x48b)]();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xae2)]=function(){const _0xd7f8c1=_0x17f940;return this[_0xd7f8c1(0x87c)]*this[_0xd7f8c1(0x238)]();},Sprite_Battler['prototype']['startGrow']=function(_0x4483ff,_0x2906d7,_0x1feafa,_0x109f08){const _0x5d87ee=_0x17f940;if(!this[_0x5d87ee(0xab7)]())return;if(!this['_distortionSprite'])return;if(this[_0x5d87ee(0xae8)]===_0x4483ff&&this[_0x5d87ee(0x280)]===_0x2906d7)return;this[_0x5d87ee(0xae8)]=_0x4483ff,this[_0x5d87ee(0x280)]=_0x2906d7,this['_growDuration']=_0x1feafa,this[_0x5d87ee(0x1b1)]=_0x1feafa,this[_0x5d87ee(0x37b)]=_0x109f08||_0x5d87ee(0x69c);if(_0x1feafa<=0x0){if(_0x5d87ee(0x2c7)==='pmNDn')this[_0x5d87ee(0x71d)]=this[_0x5d87ee(0xae8)],this[_0x5d87ee(0x5bb)]=this[_0x5d87ee(0x280)];else{if(_0x3af371[_0x5d87ee(0xa71)]&&_0x2e6fe9[_0x5d87ee(0x66f)]())return!![];if(this[_0x5d87ee(0xa3d)][_0x5d87ee(0x988)])return![];return this[_0x5d87ee(0xa3d)][_0x5d87ee(0x4ff)]();}}},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xaa4)]=function(){const _0x595e4f=_0x17f940;if(this[_0x595e4f(0x4ac)]<=0x0)return;if(!this[_0x595e4f(0x404)])return;const _0x111d9c=this[_0x595e4f(0x4ac)],_0x3a096e=this['_growWholeDuration'],_0xb36660=this[_0x595e4f(0x37b)];if(Imported[_0x595e4f(0xa8c)])this[_0x595e4f(0x71d)]=this[_0x595e4f(0x2f7)](this[_0x595e4f(0x71d)],this[_0x595e4f(0xae8)],_0x111d9c,_0x3a096e,_0xb36660),this['_growY']=this[_0x595e4f(0x2f7)](this[_0x595e4f(0x5bb)],this[_0x595e4f(0x280)],_0x111d9c,_0x3a096e,_0xb36660);else{if(_0x595e4f(0x17c)===_0x595e4f(0x470)){_0x212ce7-=_0x373f8a[_0x4f6553];if(_0x416bd4<=0x0)return _0x545aec;}else this['_growX']=(this[_0x595e4f(0x71d)]*(_0x111d9c-0x1)+this['_targetGrowX'])/_0x111d9c,this['_growY']=(this[_0x595e4f(0x5bb)]*(_0x111d9c-0x1)+this['_targetGrowY'])/_0x111d9c;}this[_0x595e4f(0x4ac)]--;if(this[_0x595e4f(0x4ac)]<=0x0)this[_0x595e4f(0xac7)]();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xac7)]=function(){const _0x56c968=_0x17f940;this['_growX']=this[_0x56c968(0xae8)],this[_0x56c968(0x5bb)]=this[_0x56c968(0x280)];},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x430)]=function(){const _0x5c5f8d=_0x17f940;return this[_0x5c5f8d(0x4ac)]>0x0;},Sprite_Battler['prototype'][_0x17f940(0xaf0)]=function(_0xd6cfc,_0x527771,_0x242d21,_0x5626f9){const _0x25fa1c=_0x17f940;if(!this[_0x25fa1c(0xab7)]())return;if(!this[_0x25fa1c(0x404)])return;if(this[_0x25fa1c(0x351)]===_0xd6cfc&&this[_0x25fa1c(0x9e7)]===_0x527771)return;this['_targetSkewX']=_0xd6cfc,this[_0x25fa1c(0x9e7)]=_0x527771,this[_0x25fa1c(0x9d3)]=_0x242d21,this[_0x25fa1c(0xa75)]=_0x242d21,this[_0x25fa1c(0x4f7)]=_0x5626f9||_0x25fa1c(0x69c),_0x242d21<=0x0&&(this[_0x25fa1c(0x404)][_0x25fa1c(0x1f3)]['x']=this[_0x25fa1c(0x351)],this['_distortionSprite']['skew']['y']=this[_0x25fa1c(0x9e7)]);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x28c)]=function(){const _0x20b198=_0x17f940;if(this['_skewDuration']<=0x0)return;if(!this[_0x20b198(0x404)])return;const _0xca83a7=this[_0x20b198(0x9d3)],_0x5e5757=this[_0x20b198(0xa75)],_0xa8c943=this[_0x20b198(0x4f7)],_0x52aa24=this['_distortionSprite'];Imported[_0x20b198(0xa8c)]?(_0x52aa24[_0x20b198(0x1f3)]['x']=this[_0x20b198(0x2f7)](_0x52aa24[_0x20b198(0x1f3)]['x'],this[_0x20b198(0x351)],_0xca83a7,_0x5e5757,_0xa8c943),_0x52aa24[_0x20b198(0x1f3)]['y']=this[_0x20b198(0x2f7)](_0x52aa24['skew']['y'],this[_0x20b198(0x9e7)],_0xca83a7,_0x5e5757,_0xa8c943)):_0x20b198(0xa39)===_0x20b198(0xa39)?(_0x52aa24['skew']['x']=(_0x52aa24['skew']['x']*(_0xca83a7-0x1)+this[_0x20b198(0x351)])/_0xca83a7,_0x52aa24[_0x20b198(0x1f3)]['y']=(_0x52aa24[_0x20b198(0x1f3)]['y']*(_0xca83a7-0x1)+this[_0x20b198(0x9e7)])/_0xca83a7):_0x2aa93b[_0x20b198(0x25b)][_0x20b198(0x96b)]['call'](this);this[_0x20b198(0x9d3)]--;if(this['_skewDuration']<=0x0)this[_0x20b198(0x15f)]();},Sprite_Battler[_0x17f940(0x25b)]['onSkewEnd']=function(){const _0x48686c=_0x17f940;this[_0x48686c(0x404)][_0x48686c(0x1f3)]['x']=this[_0x48686c(0x351)],this[_0x48686c(0x404)][_0x48686c(0x1f3)]['y']=this[_0x48686c(0x9e7)];},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x797)]=function(){const _0x30d4f6=_0x17f940;return this[_0x30d4f6(0x9d3)]>0x0;},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x22d)]=function(_0x526c38,_0x10b9fe,_0x5dca83,_0x18c44a){const _0x332836=_0x17f940;if(!this['canMove']())return;if(!this[_0x332836(0x404)])return;if(this[_0x332836(0x1de)]===_0x526c38)return;this[_0x332836(0x1de)]=_0x526c38,this[_0x332836(0x57e)]=_0x10b9fe,this[_0x332836(0x578)]=_0x10b9fe,this['_angleEasing']=_0x5dca83||'Linear',this['_angleRevertOnFinish']=_0x18c44a;this[_0x332836(0x697)]===undefined&&(_0x332836(0xaee)===_0x332836(0x6bd)?this[_0x332836(0x788)](_0x19a48c[_0x332836(0x498)]):this[_0x332836(0x697)]=!![]);if(_0x10b9fe<=0x0){if(_0x332836(0x51c)!==_0x332836(0x3bc))this[_0x332836(0x307)]=_0x526c38,this[_0x332836(0x697)]&&(this['_targetAngle']=0x0,this[_0x332836(0x307)]=0x0);else{if(!this['_battler'])return![];return _0xa35f71[_0x332836(0x960)][_0x332836(0x273)][_0x332836(0x14e)](this);}}},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x7ab)]=function(){const _0x913407=_0x17f940;this[_0x913407(0x5c0)](),this[_0x913407(0x93a)]();},Sprite_Battler[_0x17f940(0x25b)]['updateAngleCalculations']=function(){const _0x3b4226=_0x17f940;if(this[_0x3b4226(0x57e)]<=0x0)return;const _0x243060=this[_0x3b4226(0x57e)],_0x350fb5=this[_0x3b4226(0x578)],_0x2ba22d=this[_0x3b4226(0xac1)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x3b4226(0x10a)===_0x3b4226(0x10a))this[_0x3b4226(0x307)]=this[_0x3b4226(0x2f7)](this[_0x3b4226(0x307)],this[_0x3b4226(0x1de)],_0x243060,_0x350fb5,_0x2ba22d);else return _0x1fdcae[_0x3b4226(0xa78)][_0x3b4226(0x32c)][_0x3b4226(0x115)][_0x3b4226(0x379)];}else this['_currentAngle']=(this[_0x3b4226(0x307)]*(_0x243060-0x1)+this[_0x3b4226(0x1de)])/_0x243060;this[_0x3b4226(0x57e)]--;if(this[_0x3b4226(0x57e)]<=0x0)this[_0x3b4226(0x35e)]();},Sprite_Battler[_0x17f940(0x25b)]['onAngleEnd']=function(){const _0x3d8a7c=_0x17f940;this[_0x3d8a7c(0x307)]=this[_0x3d8a7c(0x1de)],this[_0x3d8a7c(0x697)]&&(this[_0x3d8a7c(0x1de)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x776)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x17f940(0x25b)]['applyAngleChange']=function(){const _0x262bf4=_0x17f940;if(!this[_0x262bf4(0x404)])return;const _0x285e5e=this[_0x262bf4(0x307)],_0x82d9af=this[_0x262bf4(0x13a)]['x'],_0x3c02e0=this[_0x262bf4(0xa3d)][_0x262bf4(0x2b6)]()?-0x1:0x1;this[_0x262bf4(0x404)][_0x262bf4(0x2b8)]=_0x285e5e*_0x82d9af*_0x3c02e0;const _0x11d862=this['_distortionSprite']['scale']['y'];this[_0x262bf4(0x404)]['y']=this[_0x262bf4(0x87c)]*-0.5*(0x2-_0x11d862),this[_0x262bf4(0x404)]['y']=Math[_0x262bf4(0x65e)](this['_distortionSprite']['y']);const _0x3cf948=[this[_0x262bf4(0x871)],this[_0x262bf4(0xa1f)],this['_dragonbonesSpriteContainer']];for(const _0x318558 of _0x3cf948){if(_0x262bf4(0x8e5)!==_0x262bf4(0x212)){if(!_0x318558)continue;_0x318558['y']=this[_0x262bf4(0x87c)]*0.5;}else return!![];}if(this[_0x262bf4(0x573)]){if(_0x262bf4(0x959)!=='AWrzM'){const _0x24c7dc=_0x47e9e5['BattleCore'][_0x262bf4(0x32c)][_0x262bf4(0x5df)];if(!_0x24c7dc['StartTurnShow'])return;this[_0x262bf4(0x5e8)]('addText',_0x24c7dc[_0x262bf4(0x2cc)][_0x262bf4(0x8a4)](_0x20aeda[_0x262bf4(0x2f1)]())),this[_0x262bf4(0x5e8)]('waitCount',_0x24c7dc['StartTurnWait']),this['push'](_0x262bf4(0x84a));}else this[_0x262bf4(0x5b0)]=this[_0x262bf4(0x5b0)]??0x1,this[_0x262bf4(0x592)]=this[_0x262bf4(0x592)]??0x1,this['_shadowSprite'][_0x262bf4(0x13a)]['x']=this[_0x262bf4(0x404)]['scale']['x']*this['_shadowScaleX'],this['_shadowSprite'][_0x262bf4(0x13a)]['y']=this['_distortionSprite'][_0x262bf4(0x13a)]['y']*this[_0x262bf4(0x592)];}},VisuMZ[_0x17f940(0x960)][_0x17f940(0x4ef)]=Sprite_Actor['prototype'][_0x17f940(0x20f)],Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x20f)]=function(){const _0x13319a=_0x17f940;VisuMZ[_0x13319a(0x960)][_0x13319a(0x4ef)][_0x13319a(0x14e)](this),VisuMZ['BattleCore']['Settings'][_0x13319a(0x5ba)][_0x13319a(0x632)]&&(_0x13319a(0x922)==='tSbEc'?(_0x4072ae[_0x13319a(0x960)][_0x13319a(0x766)][_0x13319a(0x14e)](this),this[_0x13319a(0x871)]&&this[_0x13319a(0x871)][_0x13319a(0x242)]&&this[_0x13319a(0xa3d)]&&(this[_0x13319a(0x871)]['bitmap'][_0x13319a(0x92c)]!==this['_battler']['battlerSmoothImage']()&&(this[_0x13319a(0x871)]['bitmap'][_0x13319a(0x92c)]=this[_0x13319a(0xa3d)]['battlerSmoothImage']()))):this['createHpGaugeSprite']());},VisuMZ[_0x17f940(0x960)][_0x17f940(0x3fd)]=Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x54e)],Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x54e)]=function(){const _0x41e57b=_0x17f940;VisuMZ[_0x41e57b(0x960)][_0x41e57b(0x32c)][_0x41e57b(0x5ba)]['ShowEnemyGauge']&&this['createHpGaugeSprite'](),VisuMZ['BattleCore'][_0x41e57b(0x3fd)][_0x41e57b(0x14e)](this);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x7ba)]=function(){const _0x113a4a=_0x17f940;if(!ConfigManager[_0x113a4a(0x627)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x4afb16=VisuMZ['BattleCore'][_0x113a4a(0x32c)][_0x113a4a(0x5ba)],_0x5bbc55=new Sprite_HpGauge();_0x5bbc55[_0x113a4a(0x6ce)]['x']=_0x4afb16['AnchorX'],_0x5bbc55[_0x113a4a(0x6ce)]['y']=_0x4afb16[_0x113a4a(0x38b)],_0x5bbc55[_0x113a4a(0x13a)]['x']=_0x5bbc55['scale']['y']=_0x4afb16['Scale'],this['_hpGaugeSprite']=_0x5bbc55,this[_0x113a4a(0x1cc)](this[_0x113a4a(0x3d8)]);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x895)]=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x46d)],Sprite_Battler[_0x17f940(0x25b)]['setBattler']=function(_0x4b3ff6){const _0x299aa7=_0x17f940,_0x2293f4=this[_0x299aa7(0xa3d)];VisuMZ[_0x299aa7(0x960)][_0x299aa7(0x895)]['call'](this,_0x4b3ff6),this[_0x299aa7(0x43f)](_0x4b3ff6);if(_0x2293f4!==_0x4b3ff6)this['updateShadowScale']();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x43f)]=function(_0x18ba50){const _0x17a301=_0x17f940;if(!_0x18ba50)return;if(!this['_hpGaugeSprite'])return;if(_0x18ba50[_0x17a301(0x2b6)]()){}else{if(_0x18ba50[_0x17a301(0xae4)]()){if(this[_0x17a301(0x27b)]===Sprite_SvEnemy&&!_0x18ba50['hasSvBattler']())return;}}this['_hpGaugeSprite'][_0x17a301(0x4bb)](_0x18ba50,'hp');},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x8ea)]=function(){const _0x22d558=_0x17f940;if(!this['_battler'])return;if(!this[_0x22d558(0x3d8)])return;const _0x7ef2d6=VisuMZ[_0x22d558(0x960)][_0x22d558(0x32c)]['HpGauge'],_0x1395b1=this[_0x22d558(0x3d8)];_0x1395b1['visible']=this[_0x22d558(0x473)]();const _0x4dac89=_0x7ef2d6['OffsetX'],_0x501627=_0x7ef2d6[_0x22d558(0x99b)];_0x1395b1['x']=_0x4dac89,_0x1395b1['x']+=this[_0x22d558(0xa3d)][_0x22d558(0x563)](),_0x1395b1['y']=-this[_0x22d558(0x87c)]+_0x501627,_0x1395b1['y']+=this[_0x22d558(0xa3d)]['battleUIOffsetY']();},Sprite_Battler['prototype'][_0x17f940(0x473)]=function(){const _0x224504=_0x17f940;if(!this[_0x224504(0xa3d)])return![];if(this[_0x224504(0xa3d)][_0x224504(0x2b6)]())return!![];const _0x36cdfd=this[_0x224504(0xa3d)][_0x224504(0x1c2)]()[_0x224504(0x981)];if(_0x36cdfd[_0x224504(0x413)](/<SHOW HP GAUGE>/i))return!![];if(_0x36cdfd[_0x224504(0x413)](/<HIDE HP GAUGE>/i))return![];const _0x4138d9=VisuMZ[_0x224504(0x960)][_0x224504(0x32c)][_0x224504(0x5ba)];if(_0x4138d9['RequiresDefeat']){if(_0x4138d9[_0x224504(0xa71)]&&BattleManager['isBattleTest']())return!![];if(this[_0x224504(0xa3d)]['_visualHpGauge_JustDied'])return![];return this[_0x224504(0xa3d)][_0x224504(0x4ff)]();}return!![];},VisuMZ[_0x17f940(0x960)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x269)],Sprite_Battler['prototype']['isMoving']=function(){const _0x3eb521=_0x17f940;if(!this[_0x3eb521(0xa3d)])return![];return VisuMZ['BattleCore'][_0x3eb521(0x273)][_0x3eb521(0x14e)](this);},VisuMZ['BattleCore']['Sprite_Battler_startMove']=Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x7db)],Sprite_Battler['prototype'][_0x17f940(0x7db)]=function(_0xe322cc,_0x4b40bb,_0x3909a1){const _0x574533=_0x17f940;this[_0x574533(0xab7)]()&&VisuMZ[_0x574533(0x960)]['Sprite_Battler_startMove'][_0x574533(0x14e)](this,_0xe322cc,_0x4b40bb,_0x3909a1);},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xab7)]=function(){const _0xe83396=_0x17f940;if(this['_battler']&&this[_0xe83396(0xa3d)][_0xe83396(0x9bf)]())return![];if(this['_battler']&&!this[_0xe83396(0xa3d)][_0xe83396(0x582)]())return![];return $gameSystem[_0xe83396(0x4b8)]();},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xa6f)]=function(){},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0x2d8)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler['prototype']['retreat']=function(){},Sprite_Battler[_0x17f940(0x25b)][_0x17f940(0xaeb)]=function(){const _0x3a30c3=_0x17f940,_0x1c7fa1=VisuMZ[_0x3a30c3(0x960)]['Settings'][_0x3a30c3(0x36b)],_0x495187=this['_battler']&&this[_0x3a30c3(0xa3d)]['isActor']()?0x1:-0x1,_0x293d56=this[_0x3a30c3(0x521)]-this[_0x3a30c3(0x716)]+_0x495187*_0x1c7fa1[_0x3a30c3(0x9ed)],_0x33e39b=this[_0x3a30c3(0x626)]-this[_0x3a30c3(0x1ac)]+_0x495187*_0x1c7fa1['FlinchDistanceY'],_0x149d66=_0x1c7fa1['FlinchDuration'];this[_0x3a30c3(0x7db)](_0x293d56,_0x33e39b,_0x149d66);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x37e)]=Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x460)],Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x460)]=function(){const _0x18e353=_0x17f940;VisuMZ[_0x18e353(0x960)]['Sprite_Actor_initMembers']['call'](this),this[_0x18e353(0x591)]();},Sprite_Actor[_0x17f940(0x25b)]['mainSprite']=function(){const _0x4b9d65=_0x17f940;return this[_0x4b9d65(0x404)]||this[_0x4b9d65(0x871)]||this;},VisuMZ[_0x17f940(0x960)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x852)],Sprite_Actor[_0x17f940(0x25b)]['moveToStartPosition']=function(){},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0xa2f)]=function(_0x3e595f){const _0x2836fd=_0x17f940;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x3e595f)return;if(!_0x3e595f[_0x2836fd(0xab7)]())return;VisuMZ[_0x2836fd(0x960)][_0x2836fd(0xafe)]['call'](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x2a9)]=Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x2c0)],Sprite_Actor[_0x17f940(0x25b)]['setActorHome']=function(_0x3e49a4){const _0x1aa0fc=_0x17f940;VisuMZ[_0x1aa0fc(0x960)]['Settings']['Actor'][_0x1aa0fc(0x62d)]?VisuMZ['BattleCore'][_0x1aa0fc(0x32c)][_0x1aa0fc(0x36b)][_0x1aa0fc(0x62d)][_0x1aa0fc(0x14e)](this,_0x3e49a4):VisuMZ[_0x1aa0fc(0x960)][_0x1aa0fc(0x2a9)]['call'](this,_0x3e49a4);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x9c9)]=Sprite_Actor['prototype'][_0x17f940(0x46d)],Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x46d)]=function(_0x1a8d99){const _0x6be3f6=_0x17f940;VisuMZ['BattleCore'][_0x6be3f6(0x9c9)]['call'](this,_0x1a8d99),this['setBattlerBattleCore'](_0x1a8d99);},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x7ec)]=function(_0x2eb780){const _0x273752=_0x17f940;if(!_0x2eb780)return;if(!this['_mainSprite'])return;this[_0x273752(0x871)][_0x273752(0x6ce)]['x']=this[_0x273752(0x6af)][_0x273752(0x61d)](),this['_mainSprite']['anchor']['y']=this[_0x273752(0x6af)][_0x273752(0x733)](),this[_0x273752(0xa70)]();},VisuMZ[_0x17f940(0x960)]['Sprite_Actor_update']=Sprite_Actor['prototype'][_0x17f940(0x106)],Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x106)]=function(){const _0x52fa41=_0x17f940;VisuMZ['BattleCore']['Sprite_Actor_update'][_0x52fa41(0x14e)](this),this[_0x52fa41(0x6af)]&&(this['updateStateSprite'](),this['updateStyleOpacity']());},VisuMZ['BattleCore'][_0x17f940(0x766)]=Sprite_Actor['prototype'][_0x17f940(0xb21)],Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0xb21)]=function(){const _0x3baf5d=_0x17f940;VisuMZ[_0x3baf5d(0x960)][_0x3baf5d(0x766)][_0x3baf5d(0x14e)](this),this[_0x3baf5d(0x871)]&&this[_0x3baf5d(0x871)]['bitmap']&&this[_0x3baf5d(0xa3d)]&&(this[_0x3baf5d(0x871)]['bitmap'][_0x3baf5d(0x92c)]!==this[_0x3baf5d(0xa3d)][_0x3baf5d(0x5ef)]()&&(this['_mainSprite'][_0x3baf5d(0x242)][_0x3baf5d(0x92c)]=this[_0x3baf5d(0xa3d)]['battlerSmoothImage']()));},VisuMZ['BattleCore'][_0x17f940(0x1d8)]=Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x694)],Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x694)]=function(){const _0x15769f=_0x17f940;VisuMZ[_0x15769f(0x960)][_0x15769f(0x1d8)][_0x15769f(0x14e)](this),this['updateShadowBattleCore']();},Sprite_Actor['prototype']['updateShadowBattleCore']=function(){const _0x362e26=_0x17f940;if(!this[_0x362e26(0x871)])return;if(!this[_0x362e26(0x573)])return;this[_0x362e26(0xa70)](),this[_0x362e26(0x3fa)]();},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x6c2)]=function(){const _0x4cd107=_0x17f940;this[_0x4cd107(0x89a)][_0x4cd107(0x13a)]['x']=0x1/(this[_0x4cd107(0x13a)]['x']||0.001),this[_0x4cd107(0x89a)][_0x4cd107(0x13a)]['y']=0x1/(this[_0x4cd107(0x13a)]['y']||0.001);},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0xad7)]=function(){const _0x34319e=_0x17f940;if(!$gameSystem[_0x34319e(0x4b8)]()&&this[_0x34319e(0x27b)]===Sprite_Actor){const _0xc65e35=Scene_Battle[_0x34319e(0x25b)][_0x34319e(0x346)]();[_0x34319e(0x387),_0x34319e(0x5a8),'portrait',_0x34319e(0x735)][_0x34319e(0x72d)](_0xc65e35)&&(this[_0x34319e(0xac4)]=0x0);}},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x1e1)]=function(){const _0x3a8584=_0x17f940,_0x36a961=this['_actor'];if(_0x36a961){const _0x49b8e7=_0x36a961[_0x3a8584(0x6ee)]();if(_0x36a961['isInputting']()||_0x36a961[_0x3a8584(0x749)]())this[_0x3a8584(0x73b)](_0x3a8584(0x25a));else{if(_0x49b8e7===0x3)this['startMotion']('dead');else{if(_0x49b8e7===0x2){if(_0x3a8584(0xa59)==='CZnSC')this['startMotion']('sleep');else{const _0x282ebf=this[_0x3a8584(0x871)][_0x3a8584(0x242)];_0x282ebf&&(this[_0x3a8584(0x242)]=new _0x57ee12(_0x282ebf[_0x3a8584(0x67f)],_0x282ebf['height']));}}else{if(this['forceEscapeSprite']){if(_0x3a8584(0x479)!==_0x3a8584(0x479)){const _0x5e2a6d=this[_0x3a8584(0x404)];_0x5e2a6d&&(_0x5e2a6d[_0x3a8584(0x13a)]['x']=this[_0x3a8584(0x48b)](),_0x5e2a6d['scale']['y']=this[_0x3a8584(0x238)]());}else this[_0x3a8584(0x73b)](_0x3a8584(0x952));}else{if(_0x36a961[_0x3a8584(0x209)]())this[_0x3a8584(0x73b)](_0x3a8584(0x3c3));else{if(_0x36a961[_0x3a8584(0x6b1)]())this[_0x3a8584(0x73b)](_0x3a8584(0x17b));else{if(_0x36a961[_0x3a8584(0xb23)]()||_0x36a961['isGuardWaiting']())_0x3a8584(0x348)==='Dwrvv'?this['drawTextEx'](_0x3b74ce,_0x212d86['x']+_0x463112[_0x3a8584(0x67f)]-_0x2397b9,_0x393c0d['y'],_0xb68a9b):this[_0x3a8584(0x73b)](_0x3a8584(0x59c));else{if(_0x49b8e7===0x1)this[_0x3a8584(0x73b)]('abnormal');else{if(_0x36a961[_0x3a8584(0x807)]())'aUVfo'===_0x3a8584(0x19b)?_0x3d5318[_0x3a8584(0x555)]=_0x3e3d7e[_0x3a8584(0x12b)](_0x3ce4cd['$1']):this[_0x3a8584(0x73b)]('dying');else{if(_0x36a961['isUndecided']())this[_0x3a8584(0x73b)]('walk');else{if(_0x36a961['currentAction']()){if(_0x3a8584(0x7d3)!==_0x3a8584(0x22f))this[_0x3a8584(0x73b)](_0x3a8584(0x3c3));else{if(this[_0x3a8584(0x4aa)]())return _0x5c0f18;return _0x401976=this[_0x3a8584(0x695)](_0xc4195e),_0x33caf1=this['applyHardDamageCap'](_0x489631),_0x26b4a1;}}else{if(_0x3a8584(0x2ad)!=='JuzJj')return this[_0x3a8584(0x33d)]()&&!this[_0x3a8584(0x696)]()?this[_0x3a8584(0x86e)]():_0x198572[_0x3a8584(0x960)][_0x3a8584(0x8c5)]['call'](this);else this[_0x3a8584(0x73b)](_0x3a8584(0x25a));}}}}}}}}}}}}},Sprite_Actor['prototype']['retreat']=function(){const _0x4b138b=_0x17f940,_0x4e67af=0xa,_0x1847a8=0x12c*_0x4e67af,_0x170877=0x1e*_0x4e67af;this[_0x4b138b(0x7db)](_0x1847a8,0x0,_0x170877);},Sprite_Actor[_0x17f940(0x25b)]['onMoveEnd']=function(){const _0x2aa159=_0x17f940;Sprite_Battler[_0x2aa159(0x25b)][_0x2aa159(0x5af)]['call'](this);},Sprite_Actor[_0x17f940(0x25b)]['motionSpeed']=function(){const _0x5e5323=_0x17f940;return Sprite_Battler[_0x5e5323(0x708)];},Sprite_Weapon[_0x17f940(0x25b)][_0x17f940(0x7b6)]=function(){const _0xab1099=_0x17f940;return Sprite_Battler[_0xab1099(0x708)];},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0xad4)]=function(){},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x48e)]=function(){},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x90f)]=function(){const _0x16f451=_0x17f940;if(this[_0x16f451(0x65d)]&&++this[_0x16f451(0x13c)]>=this[_0x16f451(0x1f8)]()){if(this['_motion'][_0x16f451(0x1bc)]){if(_0x16f451(0x6d9)!=='vmiWX'){_0x31fcb5=_0x526c80[_0x16f451(0x960)]['JS'][_0x2a2adc][_0x16f451(0x14e)](this,this[_0x16f451(0xaa6)](),_0x1ef331,this[_0x16f451(0x32b)](),_0x10503d);if(_0x320e18)_0x3dd6d2=_0x5c1011;}else this['_pattern']=(this[_0x16f451(0x72b)]+0x1)%0x4;}else this['_pattern']<0x2?this[_0x16f451(0x72b)]++:this['refreshMotion']();this[_0x16f451(0x13c)]=0x0;}},Sprite_Actor['prototype'][_0x17f940(0x37a)]=function(_0xd6a554){const _0x585649=_0x17f940;if(_0xd6a554==='victory')this['_checkOn']=!![];if(this['_battler']&&this[_0x585649(0xa3d)][_0x585649(0x9bf)]()){if(_0x585649(0x868)!=='yAIjN'){this['_motion']=Sprite_Actor['MOTIONS']['dead'];return;}else{if(this[_0x585649(0xa47)]()>=0x1)return!![];return this[_0x585649(0x8d5)]()[_0x585649(0x8d3)];}}const _0x26d16d=Sprite_Actor['MOTIONS'][_0xd6a554];this[_0x585649(0x65d)]=_0x26d16d,this[_0x585649(0x13c)]=0x0,this[_0x585649(0x72b)]=0x0;},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x752)]=function(_0x368d4e){const _0x49e61c=_0x17f940;this[_0x49e61c(0x504)](),this[_0x49e61c(0x744)][_0x49e61c(0x4bb)](_0x368d4e),this[_0x49e61c(0x6af)][_0x49e61c(0x75f)]();},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x504)]=function(){const _0x2e192e=_0x17f940;let _0x2f8766=-0x10,_0x5c80e7=this['height']*0.5;const _0x255396=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x1fdedd=this[_0x2e192e(0xa3d)][_0x2e192e(0x112)]()['map'](_0x57ddab=>_0x57ddab&&_0x57ddab[_0x2e192e(0x981)][_0x2e192e(0x413)](_0x255396)?Number(RegExp['$1']):0x0),_0x4eb47a=this[_0x2e192e(0xa3d)][_0x2e192e(0x112)]()[_0x2e192e(0x296)](_0x43e89a=>_0x43e89a&&_0x43e89a[_0x2e192e(0x981)][_0x2e192e(0x413)](_0x255396)?Number(RegExp['$2']):0x0);_0x2f8766=_0x1fdedd[_0x2e192e(0x553)]((_0x42f24b,_0x8bc45a)=>_0x42f24b+_0x8bc45a,_0x2f8766),_0x5c80e7=_0x4eb47a[_0x2e192e(0x553)]((_0x1e8a81,_0x47962e)=>_0x1e8a81+_0x47962e,_0x5c80e7),this['_weaponSprite']['x']=_0x2f8766,this[_0x2e192e(0x744)]['y']=_0x5c80e7,this['_weaponSprite'][_0x2e192e(0x106)]();},Sprite_Weapon[_0x17f940(0x25b)][_0x17f940(0x4bb)]=function(_0x50ac19){const _0x104226=_0x17f940;this[_0x104226(0x41b)]=_0x50ac19,this[_0x104226(0x2c1)]=-0x1,this['_pattern']=0x0,this[_0x104226(0x3cc)](),this[_0x104226(0x535)]();},Sprite_Actor['prototype'][_0x17f940(0xa44)]=function(){},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0xa6f)]=function(){const _0x196861=_0x17f940,_0x549efe=VisuMZ[_0x196861(0x960)]['Settings']['ActionSequence'],_0x48c361=_0x549efe[_0x196861(0x18f)],_0x278130=_0x549efe[_0x196861(0xae3)],_0x1cae87=_0x549efe[_0x196861(0x5cc)];this[_0x196861(0x7db)](-_0x48c361,-_0x278130,_0x1cae87);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x78d)]=Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x535)],Sprite_Actor['prototype'][_0x17f940(0x535)]=function(){const _0x21a1fb=_0x17f940;this['applyFreezeMotionFrames'](),VisuMZ[_0x21a1fb(0x960)][_0x21a1fb(0x78d)]['call'](this);},Sprite_Actor[_0x17f940(0x25b)][_0x17f940(0x829)]=function(){const _0x4a357f=_0x17f940;if(this[_0x4a357f(0xa3d)]&&this['_battler'][_0x4a357f(0xa02)]){if(_0x4a357f(0x111)!==_0x4a357f(0x458)){const _0x282b1e=this[_0x4a357f(0xa3d)][_0x4a357f(0xa02)];this[_0x4a357f(0x65d)]=Sprite_Actor[_0x4a357f(0x93f)][_0x282b1e[_0x4a357f(0x542)]],this[_0x4a357f(0x72b)]=_0x282b1e[_0x4a357f(0x609)];const _0x44b008=this[_0x4a357f(0x744)];_0x44b008[_0x4a357f(0x7bf)](_0x282b1e[_0x4a357f(0x498)],_0x282b1e[_0x4a357f(0x609)]),this[_0x4a357f(0x504)]();}else _0x5abf98[_0x4a357f(0x929)](_0x4a357f(0x40f));}},Sprite_Weapon[_0x17f940(0x25b)][_0x17f940(0x7bf)]=function(_0x539baa,_0x4208ef){const _0x444fb2=_0x17f940;this[_0x444fb2(0x41b)]=_0x539baa,this['_animationCount']=-Infinity,this['_pattern']=_0x4208ef,this[_0x444fb2(0x3cc)](),this[_0x444fb2(0x535)]();},Sprite_Enemy['prototype'][_0x17f940(0x460)]=function(){const _0x2b8fb4=_0x17f940;Sprite_Battler[_0x2b8fb4(0x25b)][_0x2b8fb4(0x460)][_0x2b8fb4(0x14e)](this),this[_0x2b8fb4(0x7a3)]=null,this[_0x2b8fb4(0x35c)]=![],this['_battlerName']='',this[_0x2b8fb4(0xb24)]=0x0,this['_effectType']=null,this[_0x2b8fb4(0x432)]=0x0,this[_0x2b8fb4(0x1b2)]=0x0,this[_0x2b8fb4(0x692)](),this['createStateIconSprite']();},VisuMZ['BattleCore'][_0x17f940(0x560)]=Sprite_Enemy['prototype']['update'],Sprite_Enemy['prototype'][_0x17f940(0x106)]=function(){const _0x4e4b45=_0x17f940;VisuMZ[_0x4e4b45(0x960)][_0x4e4b45(0x560)][_0x4e4b45(0x14e)](this),this[_0x4e4b45(0xa70)]();},Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x692)]=function(){const _0xed3888=_0x17f940;this[_0xed3888(0x871)]=new Sprite(),this[_0xed3888(0x871)][_0xed3888(0x6ce)]['x']=0.5,this[_0xed3888(0x871)][_0xed3888(0x6ce)]['y']=0x1,this['addChild'](this[_0xed3888(0x871)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0xade)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x3cc)]=function(_0x23f617){const _0x36a368=_0x17f940;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x36a368(0xa20)]()){if(_0x36a368(0xaa7)!=='DqUWi'){const _0x37a581=this['_enemy'][_0x36a368(0x8d5)]();this[_0x36a368(0x242)]=new Bitmap(_0x37a581[_0x36a368(0x67f)],_0x37a581[_0x36a368(0x87c)]),this[_0x36a368(0x871)][_0x36a368(0x242)]=new Bitmap(0x1,0x1);}else this[_0x36a368(0x845)](_0x42f477);}else{if($gameSystem['isSideView']())this['_mainSprite'][_0x36a368(0x242)]=ImageManager[_0x36a368(0x9a5)](_0x23f617),this[_0x36a368(0x871)][_0x36a368(0x242)][_0x36a368(0x961)](this[_0x36a368(0x7bb)][_0x36a368(0x539)](this));else{if(_0x36a368(0x28e)!==_0x36a368(0x1f2))this[_0x36a368(0x871)]['bitmap']=ImageManager[_0x36a368(0x8b8)](_0x23f617),this['_mainSprite'][_0x36a368(0x242)]['addLoadListener'](this[_0x36a368(0x7bb)]['bind'](this));else return _0x5990af[_0x36a368(0x960)][_0x36a368(0x659)]['call'](this);}}},Sprite_Enemy[_0x17f940(0x25b)]['createEmptyBitmap']=function(){const _0x429148=_0x17f940,_0xb41f55=this[_0x429148(0x871)][_0x429148(0x242)];_0xb41f55&&(this[_0x429148(0x242)]=new Bitmap(_0xb41f55['width'],_0xb41f55['height']));},VisuMZ[_0x17f940(0x960)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x4b4)],Sprite_Enemy['prototype'][_0x17f940(0x4b4)]=function(_0x11f078){const _0x169ce6=_0x17f940;this[_0x169ce6(0x871)]&&this[_0x169ce6(0x871)]['setHue'](_0x11f078);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x304)]=Sprite_Enemy['prototype'][_0x17f940(0x5fe)],Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x5fe)]=function(){const _0x5f19cc=_0x17f940;this[_0x5f19cc(0x5f9)]()?_0x5f19cc(0x935)!=='QWPWQ'?VisuMZ[_0x5f19cc(0x960)][_0x5f19cc(0x304)][_0x5f19cc(0x14e)](this):this[_0x5f19cc(0x9c4)]['x']=_0x18f4d6['width']-(_0x1271c5['width']-_0x32d940[_0x5f19cc(0xac3)])/0x2-this[_0x5f19cc(0x9c4)][_0x5f19cc(0x67f)]-0x4:'VzZXw'==='VzZXw'?(this['_appeared']=!this['_enemy'][_0x5f19cc(0x51a)](),!this[_0x5f19cc(0x35c)]&&(_0x5f19cc(0xa48)!==_0x5f19cc(0x3b3)?this[_0x5f19cc(0xac4)]=0x0:this['autoSelectPriority']())):this[_0x5f19cc(0xafa)](_0x3d2f5b);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x32e)]=Sprite_Enemy['prototype']['updateCollapse'],Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x6cc)]=function(){const _0xb0683e=_0x17f940;if(this[_0xb0683e(0x5f9)]())VisuMZ[_0xb0683e(0x960)][_0xb0683e(0x32e)]['call'](this);},Sprite_Enemy[_0x17f940(0x25b)]['updateFrame']=function(){const _0x59e7bf=_0x17f940;Sprite_Battler[_0x59e7bf(0x25b)][_0x59e7bf(0x535)]['call'](this);const _0x4d9ec7=this[_0x59e7bf(0xade)]()||this;if(!_0x4d9ec7)return;!_0x4d9ec7[_0x59e7bf(0x242)]&&(_0x59e7bf(0x175)!==_0x59e7bf(0x175)?_0x36e9be[_0x59e7bf(0x5d4)]=_0x5da949(_0x4b2c31['$1'])[_0x59e7bf(0x9cb)]()['trim']():_0x4d9ec7[_0x59e7bf(0x242)]=new Bitmap(this[_0x59e7bf(0x67f)],this[_0x59e7bf(0x87c)])),this[_0x59e7bf(0x526)]===_0x59e7bf(0x415)?_0x59e7bf(0x321)===_0x59e7bf(0x1a8)?_0x38cf1a=_0x4823b1:this[_0x59e7bf(0x871)][_0x59e7bf(0xb00)](0x0,0x0,this[_0x59e7bf(0x871)][_0x59e7bf(0x67f)],this['_effectDuration']):_0x4d9ec7[_0x59e7bf(0xb00)](0x0,0x0,_0x4d9ec7[_0x59e7bf(0x242)][_0x59e7bf(0x67f)],this[_0x59e7bf(0x242)][_0x59e7bf(0x87c)]);},VisuMZ[_0x17f940(0x960)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x217)],Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x217)]=function(){const _0x4ca639=_0x17f940;if(this[_0x4ca639(0x5f9)]())VisuMZ[_0x4ca639(0x960)][_0x4ca639(0xaac)][_0x4ca639(0x14e)](this);},Sprite_Enemy['prototype'][_0x17f940(0x269)]=function(){const _0x4b585a=_0x17f940;return Sprite_Battler[_0x4b585a(0x25b)][_0x4b585a(0x269)][_0x4b585a(0x14e)](this);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x107)]=Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x6c2)],Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x6c2)]=function(){const _0x41ae8d=_0x17f940;VisuMZ[_0x41ae8d(0x960)][_0x41ae8d(0x107)][_0x41ae8d(0x14e)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy['prototype'][_0x17f940(0x782)]=function(){const _0x481352=_0x17f940,_0x2f1ba7=VisuMZ[_0x481352(0x960)]['Settings']['Enemy'];if(_0x2f1ba7[_0x481352(0xfb)]&&!_0x2f1ba7['NameLegacy']){this['_stateIconSprite'][_0x481352(0xac4)]=0x0;return;}this[_0x481352(0x34a)]['x']=0x0,this[_0x481352(0x34a)]['x']+=this[_0x481352(0xa3d)]['battleUIOffsetX'](),this[_0x481352(0x34a)]['y']=-this[_0x481352(0x242)][_0x481352(0x87c)]-this[_0x481352(0x34a)][_0x481352(0x87c)],this[_0x481352(0x34a)]['y']+=this[_0x481352(0xa3d)]['battleUIOffsetY'](),this[_0x481352(0x34a)][_0x481352(0x13a)]['x']=0x1/(this['scale']['x']||0.001),this[_0x481352(0x34a)]['scale']['y']=0x1/(this[_0x481352(0x13a)]['y']||0.001),this[_0x481352(0xa20)]()&&(_0x481352(0x802)!==_0x481352(0x80f)?(this[_0x481352(0xa1f)]['_stateSprite'][_0x481352(0x13a)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x481352(0xa1f)][_0x481352(0x89a)]['scale']['y']=0x1/(this[_0x481352(0x13a)]['y']||0.001)):_0x437b18+=_0x51aa94(_0x4c1971['$1']));},VisuMZ['BattleCore'][_0x17f940(0x4da)]=Sprite_Enemy[_0x17f940(0x25b)]['setBattler'],Sprite_Enemy['prototype'][_0x17f940(0x46d)]=function(_0x1fb396){const _0x31bc71=_0x17f940;VisuMZ['BattleCore'][_0x31bc71(0x4da)][_0x31bc71(0x14e)](this,_0x1fb396),this[_0x31bc71(0x211)](_0x1fb396);},Sprite_Enemy[_0x17f940(0x25b)]['setSvBattlerSprite']=function(_0x2f3419){const _0x1ef100=_0x17f940;if(!this[_0x1ef100(0xa1f)]){if('ICRSn'==='ICRSn')this[_0x1ef100(0xa1f)]=new Sprite_SvEnemy(_0x2f3419),this[_0x1ef100(0x591)]();else{let _0x224531=_0x55a3ee[_0x1ef100(0x9fb)](_0x49abd9[_0x1ef100(0x9b2)]);_0x35943c[_0x1ef100(0x979)]>0x0&&(_0x224531+=_0x1f507c[_0x1ef100(0x1ca)](_0x44aa34[_0x1ef100(0x979)])),_0x2fca4c[_0x1ef100(0x426)](_0x1bd1d9[_0x1ef100(0x9b2)],_0x224531);}}this[_0x1ef100(0xa1f)]['setBattler'](_0x2f3419);},Sprite_Enemy['prototype'][_0x17f940(0xa20)]=function(){const _0x816c46=_0x17f940;return this[_0x816c46(0x7a3)]&&this[_0x816c46(0x7a3)][_0x816c46(0xa20)]();},Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0x5f9)]=function(){const _0x104def=_0x17f940;return this[_0x104def(0xa20)]()?this[_0x104def(0x7a3)][_0x104def(0x5f9)]():!![];},Sprite_Enemy[_0x17f940(0x25b)]['refreshMotion']=function(){const _0xbaefb7=_0x17f940;this[_0xbaefb7(0xa20)]()&&('OlEqT'!==_0xbaefb7(0x5d9)?this[_0xbaefb7(0xa1f)]['refreshMotion']():(_0x20915c['BattleCore'][_0xbaefb7(0x1ff)][_0xbaefb7(0x14e)](this,_0xd2d923,_0x1495bc),this[_0xbaefb7(0x245)]()));},Sprite_Enemy[_0x17f940(0x25b)]['forceMotion']=function(_0x174138){const _0xd9abcc=_0x17f940;if(this[_0xd9abcc(0xa20)]())this['_svBattlerSprite'][_0xd9abcc(0x37a)](_0x174138);},Sprite_Enemy['prototype'][_0x17f940(0x752)]=function(_0x237c74){const _0x4758a2=_0x17f940;if(this[_0x4758a2(0xa20)]())this['_svBattlerSprite'][_0x4758a2(0x752)](_0x237c74);},Sprite_Enemy[_0x17f940(0x25b)][_0x17f940(0xa6f)]=function(){const _0xc15426=_0x17f940,_0x4ecb79=VisuMZ['BattleCore']['Settings'][_0xc15426(0x664)],_0x2ac4a7=_0x4ecb79[_0xc15426(0x18f)],_0x52aae4=_0x4ecb79[_0xc15426(0xae3)],_0x3cb751=_0x4ecb79[_0xc15426(0x5cc)];this[_0xc15426(0x7db)](_0x2ac4a7,_0x52aae4,_0x3cb751);};function _0x4863(_0x9d8b0b,_0x41d426){return _0x4863=function(_0x99d314,_0x4863a5){_0x99d314=_0x99d314-0xfb;let _0x21bd69=_0x99d3[_0x99d314];return _0x21bd69;},_0x4863(_0x9d8b0b,_0x41d426);}function Sprite_SvEnemy(){const _0x2c619c=_0x17f940;this[_0x2c619c(0x96b)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x17f940(0x3d9)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x27b)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x17f940(0x25b)]['initialize']=function(_0x47ea51){const _0x29b6a3=_0x17f940;Sprite_Actor[_0x29b6a3(0x25b)][_0x29b6a3(0x96b)][_0x29b6a3(0x14e)](this,_0x47ea51),this[_0x29b6a3(0x13a)]['x']=-0x1,this['_stateSprite'][_0x29b6a3(0x13a)]['x']=-0x1;},Sprite_SvEnemy['prototype']['createShadowSprite']=function(){},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x852)]=function(){},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x2c0)]=function(_0x5910c7){},Sprite_SvEnemy[_0x17f940(0x25b)]['updateShadow']=function(){},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x3fa)]=function(){},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x6c2)]=function(){const _0x4f06a3=_0x17f940;this[_0x4f06a3(0x89a)]['visible']=![];},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0xb21)]=function(){const _0x460f99=_0x17f940;Sprite_Battler[_0x460f99(0x25b)][_0x460f99(0xb21)][_0x460f99(0x14e)](this);const _0x4e1fcc=this['_actor'][_0x460f99(0x645)]();this['_battlerName']!==_0x4e1fcc&&(this['_battlerName']=_0x4e1fcc,this[_0x460f99(0x871)]['bitmap']=ImageManager[_0x460f99(0x1a9)](_0x4e1fcc));if(this[_0x460f99(0x871)]&&this[_0x460f99(0x871)]['bitmap']&&this[_0x460f99(0xa3d)]){if(_0x460f99(0x18d)!==_0x460f99(0x353)){if(this[_0x460f99(0x871)]['bitmap'][_0x460f99(0x92c)]!==this[_0x460f99(0xa3d)][_0x460f99(0x5ef)]()){if(_0x460f99(0x1da)===_0x460f99(0x7f4))return _0x514b85[_0x460f99(0x52d)]()[_0x460f99(0x6f6)]()[_0x460f99(0x427)](_0x55a24c=>_0x55a24c!==_0x94d503);else this[_0x460f99(0x871)]['bitmap']['smooth']=this[_0x460f99(0xa3d)][_0x460f99(0x5ef)]();}}else{const _0x22cfa2=_0x460f99(0x314)[_0x460f99(0x8a4)](_0xc41a10);_0x2f9691[_0x460f99(0x960)]['JS'][_0x23d8ce]=new _0x45a67c(_0x22cfa2);}}},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x19f)]=function(){},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x7db)]=function(_0x4653c5,_0x309788,_0xa55126){const _0x3ca16f=_0x17f940;if(this[_0x3ca16f(0xaed)])this['parent'][_0x3ca16f(0x7db)](_0x4653c5,_0x309788,_0xa55126);},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x1e1)]=function(){const _0x5b31e6=_0x17f940,_0x35ab6d=this['_actor'];if(_0x35ab6d){const _0x3669e8=_0x35ab6d[_0x5b31e6(0x6ee)]();if(_0x35ab6d['isInputting']()||_0x35ab6d[_0x5b31e6(0x749)]()){if(_0x5b31e6(0x3b6)!==_0x5b31e6(0x35a))this[_0x5b31e6(0x73b)](_0x5b31e6(0x25a));else{const _0x46c807=_0x271b9a['actor'](),_0x36cc86=_0x46c807['battler']();if(_0x36cc86)_0x36cc86[_0x5b31e6(0x2d8)]();const _0x3d0ab5=_0x4b3a84[_0x5b31e6(0x6f6)]()[_0x5b31e6(0x427)](_0x1cf345=>_0x1cf345[_0x5b31e6(0x26f)]()&&_0x1cf345['canInput']()),_0x56d7e=_0x3d0ab5[_0x5b31e6(0x74c)](_0x46c807),_0x1244c0=_0x3d0ab5[_0x56d7e+0x1];_0xd05e25[_0x5b31e6(0x3e8)]=_0x1244c0||null;if(_0x1244c0)_0x1244c0[_0x5b31e6(0x929)](_0x5b31e6(0x5b9));_0x46c807[_0x5b31e6(0x929)](_0x5b31e6(0x40f)),this[_0x5b31e6(0x299)]();}}else{if(_0x3669e8===0x3)this['startMotion'](_0x5b31e6(0x82c));else{if(_0x3669e8===0x2)_0x5b31e6(0x117)==='TIHqk'?this[_0x5b31e6(0x3cd)]('dead'):this[_0x5b31e6(0x73b)](_0x5b31e6(0x71a));else{if(_0x35ab6d[_0x5b31e6(0x6b1)]()){if(_0x5b31e6(0x4c6)!==_0x5b31e6(0x3e7))this[_0x5b31e6(0x73b)](_0x5b31e6(0x17b));else return _0x262238[_0x5b31e6(0x960)][_0x5b31e6(0x549)][_0x5b31e6(0x14e)](this);}else{if(_0x35ab6d[_0x5b31e6(0xb23)]()||_0x35ab6d[_0x5b31e6(0x2dc)]())'iDTER'!=='iDTER'?_0x143bd2['_scene'][_0x5b31e6(0x1e7)][_0x5b31e6(0x13e)](_0x1fdabb,this['_battler']):this[_0x5b31e6(0x73b)](_0x5b31e6(0x59c));else{if(_0x3669e8===0x1)_0x5b31e6(0x5b3)===_0x5b31e6(0x5b3)?this['startMotion'](_0x5b31e6(0x3c2)):(this[_0x5b31e6(0x1ce)]['x']=this['x'],this[_0x5b31e6(0x1ce)]['y']=this['y']);else{if(_0x35ab6d[_0x5b31e6(0x807)]()){if(_0x5b31e6(0x4c8)!=='RaMCq'){if(!_0x99575e['isSceneBattle']())return;if(!_0x343bea['VisuMZ_3_ActSeqCamera'])return;_0x420e31[_0x5b31e6(0x20e)](_0x4c9f2c,_0x158e89);const _0xbff989=_0x43402e[_0x5b31e6(0x258)](),_0x183cfe=_0x7ffac3[_0x5b31e6(0x6b4)];if(!_0xbff989)return;_0x584e79[_0x5b31e6(0x965)](0x0,_0x11fe98[_0x5b31e6(0x5ad)],_0x17a634[_0x5b31e6(0x6e2)]);if(_0x183cfe)_0xbff989[_0x5b31e6(0x6a1)](_0x5b31e6(0x489));}else this[_0x5b31e6(0x73b)](_0x5b31e6(0x87d));}else{if(_0x35ab6d[_0x5b31e6(0x303)]()){if(_0x5b31e6(0x998)!==_0x5b31e6(0x998))return this['isFrameVisible']()?0x0:0xa;else this['startMotion']('walk');}else this[_0x5b31e6(0x73b)](_0x35ab6d[_0x5b31e6(0x8d5)]()[_0x5b31e6(0x357)]||_0x5b31e6(0x25a));}}}}}}}}},Sprite_SvEnemy[_0x17f940(0x25b)][_0x17f940(0x1c6)]=function(){const _0x2ec607=_0x17f940;return this['parent']?this['parent'][_0x2ec607(0x789)]===0x0&&this[_0x2ec607(0xaed)][_0x2ec607(0x396)]===0x0:!![];},Sprite_SvEnemy[_0x17f940(0x25b)]['updateFlip']=function(){},VisuMZ[_0x17f940(0x960)][_0x17f940(0x15e)]=Sprite_Animation[_0x17f940(0x25b)][_0x17f940(0x1e2)],Sprite_Animation['prototype'][_0x17f940(0x1e2)]=function(_0x1a8f99){const _0x10d27c=_0x17f940;if(_0x1a8f99[_0x10d27c(0x404)]){if(_0x10d27c(0x89f)!=='UojEN')return this[_0x10d27c(0x472)](_0x1a8f99);else this[_0x10d27c(0x871)][_0x10d27c(0x242)][_0x10d27c(0x92c)]!==this[_0x10d27c(0xa3d)][_0x10d27c(0x5ef)]()&&(this[_0x10d27c(0x871)]['bitmap']['smooth']=this[_0x10d27c(0xa3d)]['battlerSmoothImage']());}else{if(_0x10d27c(0x1b7)===_0x10d27c(0x602)){if(!this['item']())return _0x55e380;const _0x4001a5=this[_0x10d27c(0x32b)]()[_0x10d27c(0x981)];return _0x4001a5[_0x10d27c(0x413)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x44fd4f['remove'](this[_0x10d27c(0xaa6)]()),_0x49d928;}else return VisuMZ[_0x10d27c(0x960)][_0x10d27c(0x15e)]['call'](this,_0x1a8f99);}},Sprite_Animation[_0x17f940(0x25b)]['targetDistortionSpritePosition']=function(_0x2ca858){const _0x59b143=_0x17f940;let _0x2f48de=_0x2ca858['x'],_0x27532f=_0x2ca858['y'],_0x359487=_0x2ca858[_0x59b143(0x87c)],_0x2442ea=_0x2ca858[_0x59b143(0x404)][_0x59b143(0x13a)]['y'];_0x2ca858['x']=_0x2ca858['_baseX']+_0x2ca858['extraPositionX'](),_0x2ca858['y']=_0x2ca858[_0x59b143(0x626)]+_0x2ca858['extraPositionY'](),_0x2ca858['height']*=_0x2442ea;let _0x5e98b0=VisuMZ[_0x59b143(0x960)][_0x59b143(0x15e)]['call'](this,_0x2ca858);return _0x2ca858['x']=_0x2f48de,_0x2ca858['y']=_0x27532f,_0x2ca858['height']=_0x359487,_0x5e98b0;},Sprite_Damage[_0x17f940(0x25b)][_0x17f940(0xaca)]=function(_0x3a7c27){const _0x2f2433=_0x17f940,_0x6a3baf=_0x3a7c27[_0x2f2433(0x60d)]()||_0x3a7c27['result']();if(_0x6a3baf[_0x2f2433(0x2ed)]||_0x6a3baf[_0x2f2433(0x8ab)])this[_0x2f2433(0xa6a)]=0x0,this[_0x2f2433(0xa98)]();else{if(_0x6a3baf[_0x2f2433(0xa9b)])'dIqWM'!==_0x2f2433(0x1a6)?(this['_colorType']=_0x6a3baf['hpDamage']>=0x0?0x0:0x1,this['createDigits'](_0x6a3baf[_0x2f2433(0x979)])):_0x594a65[_0x2f2433(0x25b)][_0x2f2433(0x38a)]['call'](this);else _0x3a7c27['isAlive']()&&_0x6a3baf['mpDamage']!==0x0&&(this[_0x2f2433(0xa6a)]=_0x6a3baf[_0x2f2433(0x763)]>=0x0?0x2:0x3,this['createDigits'](_0x6a3baf[_0x2f2433(0x763)]));}if(_0x6a3baf['critical']){if('qErBT'!==_0x2f2433(0x8bf))this[_0x2f2433(0x12f)]();else{if(this['constructor'][_0x2f2433(0x8d0)]===_0x2f2433(0x7c9))return;if(this['_opacityDuration']<=0x0)return;const _0x497769=this['_opacityDuration'],_0xa7b30e=this[_0x2f2433(0x974)],_0x29e77d=this[_0x2f2433(0x55e)];_0x5dc5cc['VisuMZ_0_CoreEngine']?this[_0x2f2433(0xac4)]=this[_0x2f2433(0x2f7)](this['opacity'],this[_0x2f2433(0xacf)],_0x497769,_0xa7b30e,_0x29e77d):this[_0x2f2433(0xac4)]=(this['opacity']*(_0x497769-0x1)+this['_targetOpacity'])/_0x497769;this[_0x2f2433(0x711)]--;if(this['_opacityDuration']<=0x0)this[_0x2f2433(0x208)]();}}},Sprite_Damage[_0x17f940(0x25b)][_0x17f940(0x4bb)]=function(_0x54d9ab){},Sprite_Damage[_0x17f940(0x25b)][_0x17f940(0x517)]=function(_0x14f58a){const _0x1be6e0=_0x17f940;let _0x5d5fc0=this['createString'](_0x14f58a);const _0x1dbf68=this[_0x1be6e0(0x931)](),_0x2a8917=Math[_0x1be6e0(0x143)](_0x1dbf68*0.75);for(let _0x22b636=0x0;_0x22b636<_0x5d5fc0['length'];_0x22b636++){const _0x4d6a15=this[_0x1be6e0(0xb0f)](_0x2a8917,_0x1dbf68);_0x4d6a15['bitmap'][_0x1be6e0(0x850)](_0x5d5fc0[_0x22b636],0x0,0x0,_0x2a8917,_0x1dbf68,_0x1be6e0(0x936)),_0x4d6a15['x']=(_0x22b636-(_0x5d5fc0[_0x1be6e0(0x702)]-0x1)/0x2)*_0x2a8917,_0x4d6a15['dy']=-_0x22b636;}},Sprite_Damage[_0x17f940(0x25b)][_0x17f940(0x228)]=function(_0x25c89a){const _0x40a7db=_0x17f940;let _0x2e8a05=Math[_0x40a7db(0x1ca)](_0x25c89a)['toString']();this[_0x40a7db(0x833)]()&&(_0x2e8a05=VisuMZ[_0x40a7db(0x4e6)](_0x2e8a05));const _0x20f9ee=VisuMZ[_0x40a7db(0x960)]['Settings']['Damage'];let _0x721fc='',_0x3d9df3='';switch(this[_0x40a7db(0xa6a)]){case 0x0:_0x721fc=_0x20f9ee[_0x40a7db(0x418)]||'-%1',_0x3d9df3=TextManager['hp'];if(_0x25c89a===0x0)_0x721fc='%1';break;case 0x1:_0x721fc=_0x20f9ee['hpHealingFmt']||_0x40a7db(0xa03),_0x3d9df3=TextManager['hp'];break;case 0x2:_0x721fc=_0x20f9ee[_0x40a7db(0x52f)]||_0x40a7db(0x4bc),_0x3d9df3=TextManager['mp'];break;case 0x3:_0x721fc=_0x20f9ee[_0x40a7db(0x71b)]||_0x40a7db(0x58c),_0x3d9df3=TextManager['mp'];break;}return _0x721fc['format'](_0x2e8a05,_0x3d9df3)[_0x40a7db(0x224)]();},Sprite_Damage[_0x17f940(0x25b)][_0x17f940(0x833)]=function(){const _0x3d5fde=_0x17f940;return Imported[_0x3d5fde(0xa8c)]?VisuMZ[_0x3d5fde(0xa78)]['Settings']['QoL'][_0x3d5fde(0x379)]:![];},Sprite_Damage[_0x17f940(0x25b)]['setupCriticalEffect']=function(){const _0x3f0b10=_0x17f940,_0x418a9a=VisuMZ[_0x3f0b10(0x960)]['Settings'][_0x3f0b10(0x176)];this[_0x3f0b10(0x2a4)]=_0x418a9a[_0x3f0b10(0x4b7)][_0x3f0b10(0x10b)](0x0),this[_0x3f0b10(0x5e2)]=_0x418a9a[_0x3f0b10(0x47a)];},Sprite_Damage[_0x17f940(0x25b)][_0x17f940(0x9f3)]=function(_0x4a0c9d,_0x44dce7){const _0x2b6ad3=_0x17f940;this['_flashColor']=_0x44dce7['flashColor']||[0x0,0x0,0x0,0x0],this[_0x2b6ad3(0x2a4)]=JsonEx[_0x2b6ad3(0xa38)](this[_0x2b6ad3(0x2a4)]),this['_flashDuration']=_0x44dce7['flashDuration']||0x0;const _0x1ceb5d=this[_0x2b6ad3(0x931)](),_0xa5e5cc=Math[_0x2b6ad3(0x143)](_0x1ceb5d*0x1e),_0x54f9f7=this[_0x2b6ad3(0xb0f)](_0xa5e5cc,_0x1ceb5d);_0x54f9f7['bitmap']['textColor']=ColorManager[_0x2b6ad3(0xb08)](_0x44dce7[_0x2b6ad3(0x955)]),_0x54f9f7[_0x2b6ad3(0x242)]['drawText'](_0x4a0c9d,0x0,0x0,_0xa5e5cc,_0x1ceb5d,_0x2b6ad3(0x936)),_0x54f9f7['dy']=0x0;},Sprite_Damage[_0x17f940(0x25b)][_0x17f940(0x898)]=function(_0x2b892b,_0x2f9a68,_0x1bfa08){const _0x56e1b3=_0x17f940,_0x499f0c=Math['max'](this['fontSize'](),ImageManager[_0x56e1b3(0x123)]),_0x433750=Math[_0x56e1b3(0x143)](_0x499f0c*0x1e),_0x158923=this[_0x56e1b3(0xb0f)](_0x433750,_0x499f0c),_0x58a8a2=ImageManager[_0x56e1b3(0x928)]/0x2,_0x11a715=_0x158923['bitmap'][_0x56e1b3(0x6cd)](_0x2f9a68+'\x20');_0x158923[_0x56e1b3(0x242)][_0x56e1b3(0x955)]=ColorManager[_0x56e1b3(0xb08)](_0x1bfa08[_0x56e1b3(0x955)]),_0x158923['bitmap'][_0x56e1b3(0x850)](_0x2f9a68,_0x58a8a2,0x0,_0x433750-_0x58a8a2,_0x499f0c,_0x56e1b3(0x936));const _0x2cea87=Math[_0x56e1b3(0x189)]((_0x499f0c-ImageManager['iconHeight'])/0x2),_0x4df014=_0x433750/0x2-ImageManager['iconWidth']-_0x11a715/0x2+_0x58a8a2/0x2,_0x2955df=ImageManager[_0x56e1b3(0x7e9)](_0x56e1b3(0xa3b)),_0x42decf=ImageManager[_0x56e1b3(0x928)],_0x3a09b9=ImageManager['iconHeight'],_0x46d024=_0x2b892b%0x10*_0x42decf,_0x138418=Math['floor'](_0x2b892b/0x10)*_0x3a09b9;_0x158923[_0x56e1b3(0x242)]['blt'](_0x2955df,_0x46d024,_0x138418,_0x42decf,_0x3a09b9,_0x4df014,_0x2cea87),this[_0x56e1b3(0x2a4)]=_0x1bfa08[_0x56e1b3(0x17e)]||[0x0,0x0,0x0,0x0],this[_0x56e1b3(0x2a4)]=JsonEx['makeDeepCopy'](this[_0x56e1b3(0x2a4)]),this[_0x56e1b3(0x5e2)]=_0x1bfa08['flashDuration']||0x0,_0x158923['dy']=0x0;},VisuMZ[_0x17f940(0x960)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x17f940(0x25b)][_0x17f940(0x535)],Sprite_StateIcon[_0x17f940(0x25b)][_0x17f940(0x535)]=function(){const _0x54c64a=_0x17f940;VisuMZ['BattleCore'][_0x54c64a(0x260)][_0x54c64a(0x14e)](this),this[_0x54c64a(0xac4)]=this[_0x54c64a(0x3c4)]>0x0?0xff:0x0;},VisuMZ[_0x17f940(0x960)][_0x17f940(0x1cb)]=Sprite_Weapon[_0x17f940(0x25b)][_0x17f940(0x3cc)],Sprite_Weapon[_0x17f940(0x25b)][_0x17f940(0x3cc)]=function(){const _0x10c819=_0x17f940;VisuMZ['BattleCore'][_0x10c819(0x1cb)][_0x10c819(0x14e)](this),this[_0x10c819(0x242)]&&(this[_0x10c819(0x242)][_0x10c819(0x92c)]=VisuMZ['BattleCore']['Settings'][_0x10c819(0x36b)][_0x10c819(0x29c)]);};function Sprite_HpGauge(){const _0x8579f5=_0x17f940;this[_0x8579f5(0x96b)](...arguments);}Sprite_HpGauge[_0x17f940(0x25b)]=Object[_0x17f940(0x3d9)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x17f940(0x25b)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x17f940(0x25b)][_0x17f940(0x96b)]=function(){const _0x221732=_0x17f940;Sprite_Gauge[_0x221732(0x25b)][_0x221732(0x96b)]['call'](this);},Sprite_HpGauge[_0x17f940(0x25b)][_0x17f940(0xa8b)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x17f940(0x294)]=function(){const _0x43b5e9=_0x17f940;this[_0x43b5e9(0x242)][_0x43b5e9(0x84a)]();const _0x4aa0f9=this[_0x43b5e9(0x813)]();!isNaN(_0x4aa0f9)&&this[_0x43b5e9(0xabf)]();};function Sprite_EnemyName(){const _0x4dd809=_0x17f940;this[_0x4dd809(0x96b)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x17f940(0x3d9)](Sprite_Name['prototype']),Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x27b)]=Sprite_EnemyName,Sprite_EnemyName[_0x17f940(0x25b)]['initialize']=function(){const _0x30d065=_0x17f940;Sprite_Name[_0x30d065(0x25b)][_0x30d065(0x96b)][_0x30d065(0x14e)](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x17f940(0x25b)]['initMembers']=function(){const _0x13c516=_0x17f940;Sprite_Name[_0x13c516(0x25b)]['initMembers'][_0x13c516(0x14e)](this),this['opacity']=0x0,this[_0x13c516(0x828)]=null,this[_0x13c516(0x6ce)]['x']=0.5,this[_0x13c516(0x6ce)]['y']=0x0;},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x53e)]=function(){const _0x442667=_0x17f940;if(VisuMZ[_0x442667(0x960)][_0x442667(0x32c)]['Enemy']['NameAttachStateIcon']){if(_0x442667(0x801)==='jhOeQ')this[_0x442667(0x34a)]=new Sprite_StateIcon(),this[_0x442667(0x1cc)](this[_0x442667(0x34a)]);else return _0x1914f2[_0x442667(0x4a6)]()[_0x442667(0x521)]-_0x6c8234[_0x442667(0x4a6)]()['_baseX'];}},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x7c7)]=function(){const _0x1c5414=_0x17f940;return Graphics[_0x1c5414(0xac3)];},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x81c)]=function(){const _0x3aa85b=_0x17f940;return this[_0x3aa85b(0x5f3)]=this[_0x3aa85b(0x5f3)]||Window_Base[_0x3aa85b(0x25b)][_0x3aa85b(0x487)]()||0x24,this[_0x3aa85b(0x5f3)]*0x4;},Sprite_EnemyName['prototype'][_0x17f940(0x931)]=function(){const _0x48a1c9=_0x17f940;return VisuMZ['BattleCore'][_0x48a1c9(0x32c)]['Enemy'][_0x48a1c9(0xa86)]||$gameSystem[_0x48a1c9(0x118)]();},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x59f)]=function(_0x1230c2){this['_linkedSprite']=_0x1230c2;},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x106)]=function(){const _0x2c1824=_0x17f940;Sprite_Name[_0x2c1824(0x25b)][_0x2c1824(0x106)]['call'](this),this[_0x2c1824(0x493)](),this['updatePosition'](),this['updateAttachedSprites'](),this[_0x2c1824(0x86a)]();},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x294)]=function(){const _0x1e841f=_0x17f940;this[_0x1e841f(0x331)]=undefined;const _0x2f603b=this[_0x1e841f(0x8d0)](),_0x395826=this[_0x1e841f(0x7c7)](),_0x2db489=Window_Base[_0x1e841f(0x25b)]['lineHeight']();this[_0x1e841f(0xa55)](),this[_0x1e841f(0x242)]['clear'](),this[_0x1e841f(0x242)][_0x1e841f(0x850)](_0x2f603b,0x0,0x0,_0x395826,_0x2db489,_0x1e841f(0x936));},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x493)]=function(){const _0x57f1be=_0x17f940;if(!this[_0x57f1be(0x828)])return;this[_0x57f1be(0xa3d)]!==this[_0x57f1be(0x828)][_0x57f1be(0xa3d)]&&this[_0x57f1be(0x4bb)](this[_0x57f1be(0x828)]['_battler']);},Sprite_EnemyName['prototype'][_0x17f940(0x373)]=function(){const _0x5f2778=_0x17f940;if(!this[_0x5f2778(0x828)])return;this[_0x5f2778(0x5f3)]=this['_lineHeight']||Window_Base[_0x5f2778(0x25b)]['lineHeight'](),this['x']=this['_linkedSprite'][_0x5f2778(0x521)],this['y']=this['_linkedSprite'][_0x5f2778(0x626)]-this[_0x5f2778(0x5f3)]*0.5;const _0x340a9f=VisuMZ[_0x5f2778(0x960)]['Settings']['Enemy'];this['x']+=_0x340a9f[_0x5f2778(0x476)]||0x0,this['y']+=_0x340a9f[_0x5f2778(0x94c)]||0x0;},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x27f)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName['prototype'][_0x17f940(0x47b)]=function(){const _0x65c83c=_0x17f940;if(!this[_0x65c83c(0x34a)])return;this[_0x65c83c(0xa3d)]!==this[_0x65c83c(0x34a)][_0x65c83c(0xa3d)]&&this[_0x65c83c(0x34a)][_0x65c83c(0x4bb)](this[_0x65c83c(0xa3d)]);const _0x1ca616=this[_0x65c83c(0x679)]();this['_lineHeight']=this['_lineHeight']||Window_Base['prototype'][_0x65c83c(0x487)](),this[_0x65c83c(0x34a)]['x']=Math[_0x65c83c(0x189)]((_0x1ca616+ImageManager['iconWidth'])/0x2)+0x8,this[_0x65c83c(0x34a)]['y']=this[_0x65c83c(0x5f3)]/0x2;const _0x3a0e90=VisuMZ['BattleCore'][_0x65c83c(0x32c)][_0x65c83c(0x99a)];this[_0x65c83c(0x34a)]['x']+=_0x3a0e90[_0x65c83c(0x20a)]||0x0,this[_0x65c83c(0x34a)]['y']+=_0x3a0e90[_0x65c83c(0x564)]||0x0;},Sprite_EnemyName['prototype'][_0x17f940(0x86a)]=function(){const _0x3b3ec9=_0x17f940,_0x223b81=this['visibilityState']();if(_0x223b81&&this[_0x3b3ec9(0xac4)]<0xff)this[_0x3b3ec9(0xac4)]+=0x10;else!_0x223b81&&this[_0x3b3ec9(0xac4)]>0x0&&(this[_0x3b3ec9(0xac4)]-=0x10);},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x713)]=function(){const _0x561280=_0x17f940;if(this[_0x561280(0x6d1)]())return![];else{if(!this[_0x561280(0xa3d)])return![];else{if(this[_0x561280(0xa3d)][_0x561280(0x9bf)]()){if(_0x561280(0xab9)!==_0x561280(0xab9))_0x428c28=_0x335345>=_0x48bcca?_0x3c5b6e:_0x576e70;else return![];}else{if(!this[_0x561280(0xa3d)][_0x561280(0x67d)]())return![];else{if(this[_0x561280(0xa58)]())return!![];else{if(this[_0x561280(0x907)]()){if('uKQNO'!==_0x561280(0x184))return!![];else _0x1c175e['BattleCore'][_0x561280(0x5d6)][_0x561280(0x14e)](this),this[_0x561280(0x505)]();}else{if(this[_0x561280(0x569)]()){if(_0x561280(0x62e)!=='qxFSW'){const _0xe797f9=_0x32aeb3[_0x561280(0x109)],_0x230fa1=_0x561280(0x341);this[_0x561280(0x43c)](_0xe797f9,_0x230fa1);}else return!![];}else{if(this[_0x561280(0xac4)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x6d1)]=function(){const _0x219830=_0x17f940;return VisuMZ[_0x219830(0x960)]['Settings']['Enemy'][_0x219830(0x8fd)];},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0xa58)]=function(){return![];},Sprite_EnemyName[_0x17f940(0x25b)]['isAlwaysVisible']=function(){const _0x4f0082=_0x17f940;return VisuMZ[_0x4f0082(0x960)][_0x4f0082(0x32c)]['Enemy']['NameAlwaysVisible'];},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x569)]=function(){const _0x4fe51d=_0x17f940;return VisuMZ['BattleCore'][_0x4fe51d(0x32c)][_0x4fe51d(0x99a)][_0x4fe51d(0x365)]?this['_battler'][_0x4fe51d(0x5d2)]():SceneManager[_0x4fe51d(0x712)]['_enemyWindow']&&SceneManager['_scene'][_0x4fe51d(0xa09)][_0x4fe51d(0x9e8)]&&SceneManager[_0x4fe51d(0x712)][_0x4fe51d(0xa09)]['_enemies'][_0x4fe51d(0x72d)](this['_battler']);},Sprite_EnemyName[_0x17f940(0x25b)][_0x17f940(0x679)]=function(){const _0x5642cf=_0x17f940;if(!this['_battler'])return 0x0;if(this[_0x5642cf(0x331)])return this[_0x5642cf(0x331)];const _0x35ee92=this[_0x5642cf(0x8d0)]();return this[_0x5642cf(0xa55)](),this[_0x5642cf(0x331)]=this[_0x5642cf(0x242)][_0x5642cf(0x6cd)](_0x35ee92)||0x1,this[_0x5642cf(0x331)];},VisuMZ[_0x17f940(0x960)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback[_0x17f940(0x25b)][_0x17f940(0x8ec)],Sprite_Battleback[_0x17f940(0x25b)][_0x17f940(0x8ec)]=function(){const _0x2f6e5c=_0x17f940,_0x571de1=VisuMZ[_0x2f6e5c(0x960)][_0x2f6e5c(0x32c)][_0x2f6e5c(0x846)];if(!_0x571de1)return'pWwJv'===_0x2f6e5c(0x508)?_0x1296e6[_0x2f6e5c(0x960)][_0x2f6e5c(0x32c)]['Enemy'][_0x2f6e5c(0x365)]?this[_0x2f6e5c(0xa3d)][_0x2f6e5c(0x5d2)]():_0xcbb533[_0x2f6e5c(0x712)][_0x2f6e5c(0xa09)]&&_0x82bcca['_scene'][_0x2f6e5c(0xa09)][_0x2f6e5c(0x9e8)]&&_0x552fe0[_0x2f6e5c(0x712)][_0x2f6e5c(0xa09)]['_enemies'][_0x2f6e5c(0x72d)](this[_0x2f6e5c(0xa3d)]):VisuMZ[_0x2f6e5c(0x960)][_0x2f6e5c(0x8e7)][_0x2f6e5c(0x14e)](this);const _0x536377=String(_0x571de1[_0x2f6e5c(0x5be)])||'MZ';switch(_0x536377){case'MZ':VisuMZ[_0x2f6e5c(0x960)][_0x2f6e5c(0x8e7)][_0x2f6e5c(0x14e)](this);break;case _0x2f6e5c(0x389):this[_0x2f6e5c(0x6ca)]();break;case'ScaleToFit':this[_0x2f6e5c(0x38d)]();break;case _0x2f6e5c(0x2fe):this[_0x2f6e5c(0x1f9)]();break;case _0x2f6e5c(0xa16):this[_0x2f6e5c(0x842)]();break;}},Sprite_Battleback['prototype']['adjustPosition_1for1']=function(){const _0x585a6e=_0x17f940;this['width']=Graphics[_0x585a6e(0x67f)],this[_0x585a6e(0x87c)]=Graphics[_0x585a6e(0x87c)];const _0x37fbbd=0x1;this[_0x585a6e(0x13a)]['x']=_0x37fbbd,this[_0x585a6e(0x13a)]['y']=_0x37fbbd,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x17f940(0x25b)][_0x17f940(0x38d)]=function(){const _0x4a58d1=_0x17f940;this[_0x4a58d1(0x67f)]=Graphics[_0x4a58d1(0x67f)],this['height']=Graphics[_0x4a58d1(0x87c)];const _0xbb8ef0=this[_0x4a58d1(0x67f)]/this[_0x4a58d1(0x242)]['width'],_0x1b852e=this[_0x4a58d1(0x87c)]/this['bitmap'][_0x4a58d1(0x87c)],_0x24cbe0=Math[_0x4a58d1(0xb2c)](_0xbb8ef0,_0x1b852e);this[_0x4a58d1(0x13a)]['x']=_0x24cbe0,this[_0x4a58d1(0x13a)]['y']=_0x24cbe0,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x4a58d1(0x87c)]-this[_0x4a58d1(0x87c)];},Sprite_Battleback[_0x17f940(0x25b)][_0x17f940(0x1f9)]=function(){const _0x124795=_0x17f940;this[_0x124795(0x67f)]=Graphics['width'],this[_0x124795(0x87c)]=Graphics[_0x124795(0x87c)];const _0x348b5c=Math['min'](0x1,this['width']/this[_0x124795(0x242)][_0x124795(0x67f)]),_0x3bf50c=Math['min'](0x1,this[_0x124795(0x87c)]/this[_0x124795(0x242)][_0x124795(0x87c)]),_0x326643=Math[_0x124795(0xb2c)](_0x348b5c,_0x3bf50c);this['scale']['x']=_0x326643,this['scale']['y']=_0x326643,this['x']=(Graphics[_0x124795(0x67f)]-this['width'])/0x2,this['y']=Graphics[_0x124795(0x87c)]-this['height'];},Sprite_Battleback['prototype'][_0x17f940(0x842)]=function(){const _0x19e1d7=_0x17f940;this[_0x19e1d7(0x67f)]=Graphics[_0x19e1d7(0x67f)],this[_0x19e1d7(0x87c)]=Graphics[_0x19e1d7(0x87c)];const _0x336cc6=Math[_0x19e1d7(0xb2c)](0x1,this['width']/this[_0x19e1d7(0x242)][_0x19e1d7(0x67f)]),_0x80cd99=Math[_0x19e1d7(0xb2c)](0x1,this['height']/this[_0x19e1d7(0x242)][_0x19e1d7(0x87c)]),_0x31edd2=Math[_0x19e1d7(0xb2c)](_0x336cc6,_0x80cd99);this[_0x19e1d7(0x13a)]['x']=_0x31edd2,this[_0x19e1d7(0x13a)]['y']=_0x31edd2,this['x']=(Graphics[_0x19e1d7(0x67f)]-this['width'])/0x2,this['y']=Graphics[_0x19e1d7(0x87c)]-this['height'];},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x650)]=function(){const _0x4f9b2f=_0x17f940;if(!$gameSystem[_0x4f9b2f(0x4b8)]())return![];return![];},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x17f)]=function(){return 0x0;},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0xfc)]=function(){return 0x0;},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa2e)]=Spriteset_Battle['prototype'][_0x17f940(0x7d4)],Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x7d4)]=function(){const _0x4f4ce0=_0x17f940;VisuMZ[_0x4f4ce0(0x960)]['Spriteset_Battle_createLowerLayer'][_0x4f4ce0(0x14e)](this),this[_0x4f4ce0(0x9b7)](),this[_0x4f4ce0(0x61f)](),this[_0x4f4ce0(0x771)]();},VisuMZ[_0x17f940(0x960)]['Spriteset_Battle_update']=Spriteset_Battle[_0x17f940(0x25b)]['update'],Spriteset_Battle[_0x17f940(0x25b)]['update']=function(){const _0x234b8f=_0x17f940;VisuMZ[_0x234b8f(0x960)]['Spriteset_Battle_update'][_0x234b8f(0x14e)](this),this[_0x234b8f(0x603)]();},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x9b7)]=function(){const _0x3bc495=_0x17f940;this[_0x3bc495(0x3c9)]=new Weather(),this['_battleField'][_0x3bc495(0x1cc)](this[_0x3bc495(0x3c9)]);},Spriteset_Battle['prototype'][_0x17f940(0x603)]=function(){const _0x4c905b=_0x17f940;this[_0x4c905b(0x3c9)]['type']=$gameScreen[_0x4c905b(0x488)](),this[_0x4c905b(0x3c9)][_0x4c905b(0x3ce)]=$gameScreen[_0x4c905b(0x5a3)]();},Game_Interpreter[_0x17f940(0x25b)][_0x17f940(0x31b)]=function(_0x21dd1e){const _0x2544b9=_0x17f940;$gameScreen[_0x2544b9(0x522)](_0x21dd1e[0x0],_0x21dd1e[0x1],_0x21dd1e[0x2]);if(_0x21dd1e[0x3])this[_0x2544b9(0x3c3)](_0x21dd1e[0x2]);return!![];},VisuMZ[_0x17f940(0x960)][_0x17f940(0x21d)]=Game_Interpreter['prototype'][_0x17f940(0x180)],Game_Interpreter[_0x17f940(0x25b)]['command283']=function(_0x401d26){const _0x1e57d5=_0x17f940;return SceneManager[_0x1e57d5(0x2ac)]()?(SceneManager[_0x1e57d5(0x712)][_0x1e57d5(0x4ab)][_0x1e57d5(0xab1)](_0x401d26[0x0],_0x401d26[0x1]),!![]):VisuMZ[_0x1e57d5(0x960)]['Game_Interpreter_command283'][_0x1e57d5(0x14e)](this,_0x401d26);},Spriteset_Battle[_0x17f940(0x25b)]['updateBattlebackBitmap']=function(_0x140516,_0x3d1147){const _0x21a6c2=_0x17f940;_0x140516[_0x21a6c2(0x242)]=_0x3d1147;},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0xab1)]=function(_0x135461,_0x1cfc4a){const _0x46aeee=_0x17f940;_0x135461=_0x135461||'',_0x1cfc4a=_0x1cfc4a||'';_0x135461===''&&_0x1cfc4a===''&&(_0x135461=this[_0x46aeee(0x190)][_0x46aeee(0x202)](),_0x1cfc4a=this[_0x46aeee(0x7b8)][_0x46aeee(0x31f)]());const _0x5b8d73=ImageManager[_0x46aeee(0x5f2)](_0x135461),_0x25142a=ImageManager[_0x46aeee(0x51b)](_0x1cfc4a);_0x5b8d73[_0x46aeee(0x961)](this[_0x46aeee(0x291)][_0x46aeee(0x539)](this,this[_0x46aeee(0x190)],this['_back2Sprite'],_0x5b8d73,_0x25142a));},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x291)]=function(_0x41353c,_0x446c6a,_0x3508a4,_0x5666ec){const _0x21ddcd=_0x17f940;_0x5666ec[_0x21ddcd(0x961)](this[_0x21ddcd(0x84f)][_0x21ddcd(0x539)](this,_0x41353c,_0x446c6a,_0x3508a4,_0x5666ec));},Spriteset_Battle['prototype'][_0x17f940(0x84f)]=function(_0x31656e,_0x391509,_0x1d0354,_0x259eec){const _0x3084c6=_0x17f940;_0x31656e[_0x3084c6(0x242)]=_0x1d0354,_0x391509['bitmap']=_0x259eec,_0x31656e['adjustPosition'](),_0x391509[_0x3084c6(0x8ec)]();},VisuMZ['BattleCore'][_0x17f940(0x3ee)]=Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x53c)],Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x53c)]=function(){const _0x4d0452=_0x17f940;VisuMZ[_0x4d0452(0x960)][_0x4d0452(0x3ee)][_0x4d0452(0x14e)](this),this[_0x4d0452(0x50f)]();},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x50f)]=function(){const _0x517a9e=_0x17f940;this[_0x517a9e(0x4ba)](),this[_0x517a9e(0x5ea)](),this['createDamageContainer'](),this[_0x517a9e(0x8e0)]();},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x4ba)]=function(){const _0x46ae62=_0x17f940;this[_0x46ae62(0x917)]=new Sprite(),this[_0x46ae62(0xb27)]['addChild'](this['_battlerContainer']);},Spriteset_Battle['prototype'][_0x17f940(0x5ea)]=function(){const _0x210316=_0x17f940;this[_0x210316(0x4c0)]=new Sprite(),this['_battleField']['addChild'](this['_animationContainer']);},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x243)]=function(){const _0xea011=_0x17f940;this[_0xea011(0x1ce)]=new Sprite(),this['_damageContainer']['x']=this[_0xea011(0xb27)]['x'],this[_0xea011(0x1ce)]['y']=this[_0xea011(0xb27)]['y'],this[_0xea011(0x1cc)](this['_damageContainer']);},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x8e0)]=function(){const _0x54095b=_0x17f940;if(!this[_0x54095b(0x650)]())return;this[_0x54095b(0x917)][_0x54095b(0x13a)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x54095b(0xb27)][_0x54095b(0x67f)],this[_0x54095b(0x4c0)][_0x54095b(0x13a)]['x']=-0x1,this[_0x54095b(0x4c0)]['x']=this[_0x54095b(0xb27)][_0x54095b(0x67f)],this[_0x54095b(0x1ce)][_0x54095b(0x13a)]['x']=-0x1,this['_damageContainer']['x']=this[_0x54095b(0xb27)]['x']+this[_0x54095b(0xb27)][_0x54095b(0x67f)];},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0xa25)]=function(){const _0x49d8d2=_0x17f940;Imported[_0x49d8d2(0xa8c)]&&this[_0x49d8d2(0x12e)]()&&this[_0x49d8d2(0x856)]();const _0x597689=$gameTroop[_0x49d8d2(0x587)](),_0x47aee9=[];for(const _0x37532a of _0x597689){_0x49d8d2(0x187)==='otQtS'?_0x47aee9['push'](new Sprite_Enemy(_0x37532a)):_0x28f130=_0x3ac2bb>=_0xc0dba6?_0x530311:_0x4006dc;}_0x47aee9['sort'](this['compareEnemySprite'][_0x49d8d2(0x539)](this));for(const _0x62edbd of _0x47aee9){'iIzGN'!=='iIzGN'?(this['_cache'][_0x49d8d2(0x5a6)]=_0x5d4cc3(_0x2cc80f['$1']),this['_cache'][_0x49d8d2(0x82d)]=_0x48f9c6(_0x56bb1a['$2'])):this[_0x49d8d2(0x917)][_0x49d8d2(0x1cc)](_0x62edbd);}this[_0x49d8d2(0xa4c)]=_0x47aee9;},Spriteset_Battle[_0x17f940(0x25b)]['createActors']=function(){const _0x195eaa=_0x17f940;this[_0x195eaa(0x662)]=[];for(let _0x21a2f3=0x0;_0x21a2f3<$gameParty[_0x195eaa(0x5d7)]();_0x21a2f3++){const _0x378a64=$gameParty['battleMembers']()[_0x21a2f3],_0x18069f=new Sprite_Actor();_0x18069f[_0x195eaa(0xa2f)](_0x378a64),_0x18069f[_0x195eaa(0x46d)](_0x378a64),_0x18069f[_0x195eaa(0x106)](),this['_actorSprites'][_0x195eaa(0x5e8)](_0x18069f),this[_0x195eaa(0x917)][_0x195eaa(0x1cc)](_0x18069f);}},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x8eb)]=function(_0x2713b2,_0x6aee62,_0x549433,_0x33dd52){const _0xfef97c=_0x17f940,_0xb8f3ab=this['isMVAnimation'](_0x6aee62),_0xc8da9d=new(_0xb8f3ab?Sprite_AnimationMV:Sprite_Animation)(),_0x16be5f=this['makeTargetSprites'](_0x2713b2);this[_0xfef97c(0x25c)](_0x2713b2[0x0])&&(_0x549433=!_0x549433),_0xc8da9d[_0xfef97c(0x2f3)]=_0x2713b2,_0xc8da9d[_0xfef97c(0x4bb)](_0x16be5f,_0x6aee62,_0x549433,_0x33dd52),this[_0xfef97c(0x94d)](_0xc8da9d);},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x94d)]=function(_0x2eacc9){const _0x5e7aca=_0x17f940;this[_0x5e7aca(0x6c1)](_0x2eacc9)?this[_0x5e7aca(0x748)]()['addChild'](_0x2eacc9):this['_animationContainer'][_0x5e7aca(0x1cc)](_0x2eacc9),this[_0x5e7aca(0x2ea)][_0x5e7aca(0x5e8)](_0x2eacc9);},Spriteset_Battle['prototype'][_0x17f940(0x6c1)]=function(_0x2f28ad){const _0x25669e=_0x17f940;if(!_0x2f28ad)return![];if(!_0x2f28ad['_animation'])return![];if(_0x2f28ad['_animation'][_0x25669e(0x2bc)]!==0x0)return![];if(!_0x2f28ad[_0x25669e(0x2f3)][0x0])return![];if(!_0x2f28ad[_0x25669e(0x2f3)][0x0][_0x25669e(0x2b6)]())return![];if($gameSystem['isSideView']())return![];if(!this[_0x25669e(0x748)]())return![];return Window_BattleStatus[_0x25669e(0x25b)][_0x25669e(0x346)]()===_0x25669e(0xaa2);},Spriteset_Battle[_0x17f940(0x25b)]['battleStatusWindowAnimationContainer']=function(){const _0xb96fe1=_0x17f940;if(!SceneManager['_scene'])return;if(!SceneManager[_0xb96fe1(0x712)][_0xb96fe1(0x1e7)])return;if(!SceneManager[_0xb96fe1(0x712)][_0xb96fe1(0x1e7)]['_effectsContainer'])return;return SceneManager['_scene'][_0xb96fe1(0x1e7)][_0xb96fe1(0x246)];},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x693)]=function(_0x1a4aa6){const _0x2b487c=_0x17f940;this[_0x2b487c(0x4fa)](_0x1a4aa6);for(const _0xc72edb of _0x1a4aa6[_0x2b487c(0x2f3)]){if(_0x2b487c(0x666)===_0x2b487c(0x623))return![];else _0xc72edb[_0x2b487c(0x454)]&&(_0x2b487c(0x605)===_0x2b487c(0x605)?_0xc72edb[_0x2b487c(0x454)]():(_0x1698ad[_0x2b487c(0x960)][_0x2b487c(0x3ee)][_0x2b487c(0x14e)](this),this[_0x2b487c(0x50f)]()));}_0x1a4aa6[_0x2b487c(0x6ad)]();},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x4fa)]=function(_0x20d5c3){const _0x5a84a5=_0x17f940;this[_0x5a84a5(0x2ea)][_0x5a84a5(0x646)](_0x20d5c3);if(this['isAnimationShownOnBattlePortrait'](_0x20d5c3))_0x5a84a5(0x64b)==='bHonf'?this[_0x5a84a5(0x748)]()['removeChild'](_0x20d5c3):this[_0x5a84a5(0x9ab)]=_0x5a84a5(0x387);else{if(_0x5a84a5(0x74d)!=='lBJtr')this['_animationContainer']['removeChild'](_0x20d5c3);else{const _0x151428=_0x22de47['width'],_0x56254f=_0x1d194d[_0x5a84a5(0x189)]((_0x3f6478[_0x5a84a5(0xac3)]-_0x151428)/0x2),_0x43d16f=this[_0x5a84a5(0x5e7)](0x4,!![]),_0x364a01=_0x60bc9[_0x5a84a5(0x45d)]-_0x43d16f+(_0x315899[_0x5a84a5(0x87c)]-_0x159d60[_0x5a84a5(0x45d)])/0x2;return new _0x4e6f1e(_0x56254f,_0x364a01,_0x151428,_0x43d16f);}}},VisuMZ['BattleCore'][_0x17f940(0x33b)]=Spriteset_Battle['prototype'][_0x17f940(0x1f1)],Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x1f1)]=function(){const _0x1fb9ed=_0x17f940;VisuMZ[_0x1fb9ed(0x960)][_0x1fb9ed(0x33b)][_0x1fb9ed(0x14e)](this),this[_0x1fb9ed(0x76c)]();},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x76c)]=function(){const _0xd849b3=_0x17f940;this[_0xd849b3(0x917)][_0xd849b3(0x188)][_0xd849b3(0x9d9)](this[_0xd849b3(0x683)][_0xd849b3(0x539)](this)),this[_0xd849b3(0x6bc)]();},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x683)]=function(_0x571322,_0x2a6bbd){const _0x59b12b=_0x17f940;if(VisuMZ[_0x59b12b(0x960)][_0x59b12b(0x32c)][_0x59b12b(0x36b)][_0x59b12b(0x14c)]){if(_0x571322[_0x59b12b(0xa3d)]&&_0x2a6bbd[_0x59b12b(0xa3d)]){if(_0x571322[_0x59b12b(0xa3d)][_0x59b12b(0x2b6)]()&&_0x2a6bbd[_0x59b12b(0xa3d)][_0x59b12b(0xae4)]())return 0x1;else{if(_0x2a6bbd['_battler'][_0x59b12b(0x2b6)]()&&_0x571322[_0x59b12b(0xa3d)][_0x59b12b(0xae4)]()){if('AjwDH'!=='vmaMr')return-0x1;else _0x44fd7d['BattleCore']['JS'][_0x194030][_0x59b12b(0x14e)](this,this[_0x59b12b(0xaa6)](),this[_0x59b12b(0xaa6)](),this[_0x59b12b(0x32b)](),_0x4ffed3);}}}}if(_0x571322[_0x59b12b(0x626)]!==_0x2a6bbd[_0x59b12b(0x626)]){if('ebOuy'==='ebOuy')return _0x571322[_0x59b12b(0x626)]-_0x2a6bbd['_baseY'];else{if(this['_jumpDuration']<=0x0)return;const _0x194cbf=this[_0x59b12b(0x607)]-this[_0x59b12b(0xa9c)],_0x366b4c=this[_0x59b12b(0x607)]/0x2,_0x59d73a=this[_0x59b12b(0x80c)],_0x4aaec6=-_0x59d73a/_0x3e4f77[_0x59b12b(0x524)](_0x366b4c,0x2);this[_0x59b12b(0x911)]=_0x4aaec6*_0xd76a0c[_0x59b12b(0x524)](_0x194cbf-_0x366b4c,0x2)+_0x59d73a,this[_0x59b12b(0xa9c)]--;if(this['_jumpDuration']<=0x0)return this[_0x59b12b(0x7be)]();}}else return _0x2a6bbd['spriteId']-_0x571322['spriteId'];},Spriteset_Battle[_0x17f940(0x25b)]['putActiveBattlerOnTop']=function(){const _0x6685d7=_0x17f940;if(!VisuMZ['BattleCore']['Settings']['Actor']['PrioritySortActive'])return;const _0x2d491d=BattleManager[_0x6685d7(0x128)];if(_0x2d491d){if('TPYQq'===_0x6685d7(0x395))_0x1f6044[_0x6685d7(0x7ca)]()?(this['tpbCommandFight'](),this['startActorCommandSelection']()):_0x39fb5a[_0x6685d7(0x960)][_0x6685d7(0x7ff)][_0x6685d7(0x14e)](this);else{if(_0x2d491d[_0x6685d7(0x2b6)]()&&!$gameSystem[_0x6685d7(0x4b8)]())return;const _0x369897=_0x2d491d[_0x6685d7(0x4a6)]();if(_0x369897&&_0x2d491d[_0x6685d7(0x2b6)]())this[_0x6685d7(0x917)]['addChild'](_0x369897);}}},Spriteset_Battle['prototype'][_0x17f940(0x49c)]=function(){const _0x567268=_0x17f940;for(const _0x7fa914 of $gameParty[_0x567268(0x6f6)]()){if(!_0x7fa914)continue;if(!_0x7fa914[_0x567268(0x4a6)]())continue;_0x7fa914['battler']()[_0x567268(0x94a)]=!![],_0x7fa914[_0x567268(0x4a6)]()['retreat']();}},Spriteset_Battle['prototype'][_0x17f940(0x61f)]=function(){const _0x5930de=_0x17f940;this[_0x5930de(0x820)]=new Sprite(),this[_0x5930de(0xb27)]['addChild'](this['_uiContainer']);},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x771)]=function(){const _0x582fed=_0x17f940;if(VisuMZ[_0x582fed(0x960)]['Settings'][_0x582fed(0x99a)][_0x582fed(0x102)])return;this['_enemyNameContainer']=new Sprite(),this['_uiContainer'][_0x582fed(0x1cc)](this[_0x582fed(0x34e)]);for(const _0x5c9b08 of this['_enemySprites']){const _0x11b786=new Sprite_EnemyName();this[_0x582fed(0x34e)][_0x582fed(0x1cc)](_0x11b786),_0x11b786[_0x582fed(0x59f)](_0x5c9b08);}},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x329)]=function(){return![];},Spriteset_Battle[_0x17f940(0x25b)]['isAnyoneFloating']=function(){const _0x32b2d7=_0x17f940;return this[_0x32b2d7(0x9d6)]()[_0x32b2d7(0xa13)](_0x3f6b46=>_0x3f6b46[_0x32b2d7(0x9de)]());},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0x29d)]=function(){const _0x491862=_0x17f940;return this[_0x491862(0x9d6)]()[_0x491862(0xa13)](_0x24d28d=>_0x24d28d[_0x491862(0x26b)]());},Spriteset_Battle['prototype'][_0x17f940(0x47c)]=function(){const _0x5acd37=_0x17f940;return this[_0x5acd37(0x9d6)]()[_0x5acd37(0xa13)](_0x136144=>_0x136144['isGrowing']());},Spriteset_Battle['prototype'][_0x17f940(0x6b7)]=function(){const _0x2dbca1=_0x17f940;return this[_0x2dbca1(0x9d6)]()[_0x2dbca1(0xa13)](_0x5a9ed6=>_0x5a9ed6[_0x2dbca1(0x797)]());},Spriteset_Battle[_0x17f940(0x25b)]['isAnyoneSpinning']=function(){const _0x48930d=_0x17f940;return this[_0x48930d(0x9d6)]()['some'](_0x152d0f=>_0x152d0f[_0x48930d(0x776)]());},Spriteset_Battle[_0x17f940(0x25b)][_0x17f940(0xa28)]=function(){const _0x480b8a=_0x17f940;return this['battlerSprites']()[_0x480b8a(0xa13)](_0x404e80=>_0x404e80['isChangingOpacity']());},VisuMZ[_0x17f940(0x960)]['Window_ItemList_maxCols']=Window_ItemList[_0x17f940(0x25b)][_0x17f940(0x4dc)],Window_ItemList['prototype'][_0x17f940(0x4dc)]=function(){const _0x4ade85=_0x17f940;if(SceneManager[_0x4ade85(0x2ac)]()){if(SceneManager['_scene'][_0x4ade85(0x346)]()===_0x4ade85(0x735))return VisuMZ[_0x4ade85(0x960)]['Settings'][_0x4ade85(0x334)][_0x4ade85(0x81d)];else{if(_0x4ade85(0x3ad)===_0x4ade85(0x4a4))this['addCombatLogCommand']();else return VisuMZ[_0x4ade85(0x960)]['Settings']['BattleLayout'][_0x4ade85(0x40c)];}}else return VisuMZ[_0x4ade85(0x960)][_0x4ade85(0x549)][_0x4ade85(0x14e)](this);},VisuMZ[_0x17f940(0x960)]['Window_SkillList_maxCols']=Window_SkillList['prototype'][_0x17f940(0x4dc)],Window_SkillList[_0x17f940(0x25b)][_0x17f940(0x4dc)]=function(){const _0x15c788=_0x17f940;return SceneManager['isSceneBattle']()?SceneManager[_0x15c788(0x712)][_0x15c788(0x346)]()===_0x15c788(0x735)?VisuMZ['BattleCore'][_0x15c788(0x32c)][_0x15c788(0x334)][_0x15c788(0x81d)]:VisuMZ[_0x15c788(0x960)]['Settings'][_0x15c788(0x334)][_0x15c788(0x40c)]:VisuMZ[_0x15c788(0x960)][_0x15c788(0x1a7)][_0x15c788(0x14e)](this);},VisuMZ[_0x17f940(0x960)]['Window_Options_addGeneralOptions']=Window_Options[_0x17f940(0x25b)][_0x17f940(0x305)],Window_Options['prototype'][_0x17f940(0x305)]=function(){const _0x2ce7e2=_0x17f940;VisuMZ[_0x2ce7e2(0x960)]['Window_Options_addGeneralOptions'][_0x2ce7e2(0x14e)](this),this[_0x2ce7e2(0x996)](),this[_0x2ce7e2(0x803)]();},Window_Options[_0x17f940(0x25b)]['addAutoBattleCommands']=function(){const _0x1b5c02=_0x17f940;if(VisuMZ[_0x1b5c02(0x960)]['Settings'][_0x1b5c02(0x5c5)][_0x1b5c02(0x237)]){if(_0x1b5c02(0xab4)!==_0x1b5c02(0xab4)){if(!_0x117795[_0x1b5c02(0x2ac)]())return;if(!_0x45498c['VisuMZ_3_ActSeqCamera'])return;_0x361219[_0x1b5c02(0x20e)](_0x55853b,_0x318bdd);const _0x47faaa=_0x3fd416[_0x1b5c02(0x258)](),_0x139b3c=_0x1bbc8f[_0x1b5c02(0x34c)](_0x471de4[_0x1b5c02(0x7f5)]),_0x4758ce=_0x47a841[_0x1b5c02(0x4d9)];_0x3e9b60[_0x1b5c02(0x333)](_0x139b3c,_0xa95af8[_0x1b5c02(0x5ad)],_0x2c0541[_0x1b5c02(0x6e2)]);if(_0x4758ce)_0x47faaa[_0x1b5c02(0x6a1)](_0x1b5c02(0x83b));}else this[_0x1b5c02(0x91b)](),this[_0x1b5c02(0x8db)]();}},Window_Options[_0x17f940(0x25b)][_0x17f940(0x803)]=function(){const _0xb1932f=_0x17f940;if(!VisuMZ[_0xb1932f(0x960)][_0xb1932f(0x32c)][_0xb1932f(0x5ba)][_0xb1932f(0x8ad)])return;const _0x2384e1=TextManager['visualHpGauge'],_0x393e28=_0xb1932f(0x627);this[_0xb1932f(0x43c)](_0x2384e1,_0x393e28);},Window_Options[_0x17f940(0x25b)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x1b6b25=_0x17f940,_0x1a5630=TextManager['autoBattleStart'],_0xf46d32=_0x1b6b25(0x341);this[_0x1b6b25(0x43c)](_0x1a5630,_0xf46d32);},Window_Options['prototype']['addBattleCoreAutoBattleStyleCommand']=function(){const _0x6b3c7f=_0x17f940,_0x42a82e=TextManager[_0x6b3c7f(0xa12)],_0x4d4368=_0x6b3c7f(0x455);this[_0x6b3c7f(0x43c)](_0x42a82e,_0x4d4368);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x342)]=Window_Options[_0x17f940(0x25b)][_0x17f940(0x9cd)],Window_Options[_0x17f940(0x25b)]['statusText']=function(_0x438738){const _0x33baa6=_0x17f940,_0x3ca556=this[_0x33baa6(0x63c)](_0x438738);if(_0x3ca556===_0x33baa6(0x455))return this['statusTextAutoBattleStyle']();else{if(_0x33baa6(0x3ba)===_0x33baa6(0x596)){const _0x31e595=_0x4974c9['battler']();this[_0x33baa6(0x5e8)](_0x33baa6(0x835),[_0x28be8e],_0x17a5e7,_0x27c867),this[_0x33baa6(0x5e8)](_0x33baa6(0x4c9),_0x2419ae,_0x31e595[_0x33baa6(0x716)],_0x31e595['_homeY'],_0x4ab120,![],_0x33baa6(0x69c)),this['push'](_0x33baa6(0x3cd),[_0x15ca88],_0x33baa6(0x5e5)),this[_0x33baa6(0x5e8)](_0x33baa6(0x80d)),this['push'](_0x33baa6(0x3cd),[_0x3813f5],_0x33baa6(0x25a));}else return VisuMZ[_0x33baa6(0x960)][_0x33baa6(0x342)][_0x33baa6(0x14e)](this,_0x438738);}},Window_Options[_0x17f940(0x25b)]['statusTextAutoBattleStyle']=function(){const _0x21374c=_0x17f940,_0x536940=VisuMZ['BattleCore'][_0x21374c(0x32c)]['AutoBattle'],_0x281be2=this['getConfigValue'](_0x21374c(0x455));return _0x281be2?_0x536940['StyleON']:_0x536940[_0x21374c(0x3c7)];},Window_ShopStatus[_0x17f940(0x25b)][_0x17f940(0x301)]=function(){const _0x42ef87=_0x17f940,_0x420796=DataManager[_0x42ef87(0x4d4)](this[_0x42ef87(0x731)]),_0x47e7ef=VisuMZ[_0x42ef87(0x221)][_0x420796];if(!_0x47e7ef)return this['getItemDamageAmountLabelOriginal']();const _0x3c0834=_0x42ef87(0x43b)[_0x42ef87(0x8a4)](this[_0x42ef87(0x731)][_0x42ef87(0x203)][_0x42ef87(0x523)]),_0xa3c53a=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x42ef87(0x731)][_0x42ef87(0x203)]['type']];return _0x47e7ef[_0x3c0834][_0x42ef87(0x8a4)](_0xa3c53a);},Window_ShopStatus[_0x17f940(0x25b)]['getItemDamageAmountTextBattleCore']=function(){const _0x145b2f=_0x17f940,_0x115108=DataManager[_0x145b2f(0x4d4)](this[_0x145b2f(0x731)]),_0x50efa5=VisuMZ[_0x145b2f(0x221)][_0x115108];if(!_0x50efa5)return this['getItemDamageAmountTextOriginal']();return _0x50efa5['DamageDisplay'][_0x145b2f(0x14e)](this);},VisuMZ[_0x17f940(0x960)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x96b)],Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x96b)]=function(_0x357f05){const _0x56b992=_0x17f940;VisuMZ[_0x56b992(0x960)][_0x56b992(0x765)]['call'](this,_0x357f05),this[_0x56b992(0x796)](_0x357f05);},Window_PartyCommand['prototype'][_0x17f940(0x796)]=function(_0x4d3261){const _0x41680d=_0x17f940,_0x38459e=new Rectangle(0x0,0x0,_0x4d3261['width'],_0x4d3261[_0x41680d(0x87c)]);this[_0x41680d(0x289)]=new Window_Base(_0x38459e),this[_0x41680d(0x289)][_0x41680d(0xac4)]=0x0,this['addChild'](this['_commandNameWindow']),this['updateCommandNameWindow']();},Window_PartyCommand['prototype']['callUpdateHelp']=function(){const _0x2e7b9b=_0x17f940;Window_Command[_0x2e7b9b(0x25b)]['callUpdateHelp'][_0x2e7b9b(0x14e)](this);if(this[_0x2e7b9b(0x289)])this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x17f940(0x896)]=function(){const _0x210a57=_0x17f940,_0x2b7b03=this[_0x210a57(0x289)];_0x2b7b03[_0x210a57(0x8af)]['clear']();const _0x17873a=this['commandStyleCheck'](this[_0x210a57(0x98e)]());if(_0x17873a===_0x210a57(0x7e5)&&this[_0x210a57(0x4e3)]()>0x0){const _0x47005a=this[_0x210a57(0x7fe)](this[_0x210a57(0x98e)]());let _0x50f7a2=this[_0x210a57(0x8d6)](this['index']());_0x50f7a2=_0x50f7a2[_0x210a57(0xa30)](/\\I\[(\d+)\]/gi,''),_0x2b7b03[_0x210a57(0x559)](),this[_0x210a57(0x4cc)](_0x50f7a2,_0x47005a),this[_0x210a57(0x36e)](_0x50f7a2,_0x47005a),this[_0x210a57(0x9cf)](_0x50f7a2,_0x47005a);}},Window_PartyCommand['prototype'][_0x17f940(0x4cc)]=function(_0x57e376,_0x172540){},Window_PartyCommand['prototype'][_0x17f940(0x36e)]=function(_0x33f775,_0x7e07c6){const _0x3efd7b=_0x17f940,_0x3cd617=this[_0x3efd7b(0x289)];_0x3cd617['drawText'](_0x33f775,0x0,_0x7e07c6['y'],_0x3cd617['innerWidth'],'center');},Window_PartyCommand[_0x17f940(0x25b)]['commandNameWindowCenter']=function(_0x14270a,_0x17321e){const _0x4f5411=_0x17f940,_0x2ce84b=this['_commandNameWindow'],_0x28e0bc=$gameSystem['windowPadding'](),_0x2a9d7c=_0x17321e['x']+Math['floor'](_0x17321e[_0x4f5411(0x67f)]/0x2)+_0x28e0bc;_0x2ce84b['x']=_0x2ce84b['width']/-0x2+_0x2a9d7c,_0x2ce84b['y']=Math[_0x4f5411(0x143)](_0x17321e[_0x4f5411(0x87c)]/0x2);},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x4d6)]=function(){const _0x4b74e2=_0x17f940;this[_0x4b74e2(0x668)](),this[_0x4b74e2(0x134)](),this[_0x4b74e2(0x9af)](),this[_0x4b74e2(0x99d)](),this[_0x4b74e2(0x584)]();},Window_PartyCommand[_0x17f940(0x25b)]['addFightCommand']=function(){const _0x276f68=_0x17f940,_0x538f18=this['commandStyle'](),_0xd1caa8=VisuMZ[_0x276f68(0x960)][_0x276f68(0x32c)][_0x276f68(0x6e8)]['CmdIconFight'],_0xd94e6e=_0x538f18===_0x276f68(0x91d)?TextManager[_0x276f68(0x439)]:_0x276f68(0x633)[_0x276f68(0x8a4)](_0xd1caa8,TextManager['fight']),_0x3d1495=this[_0x276f68(0x5ab)]();this['addCommand'](_0xd94e6e,_0x276f68(0x439),_0x3d1495);},Window_PartyCommand[_0x17f940(0x25b)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x17f940(0x25b)]['addAutoBattleCommand']=function(){const _0xa74f2b=_0x17f940;if(!this[_0xa74f2b(0x227)]())return;const _0x232c50=this[_0xa74f2b(0x665)](),_0xf6b373=VisuMZ[_0xa74f2b(0x960)][_0xa74f2b(0x32c)][_0xa74f2b(0x6e8)]['CmdIconAutoBattle'],_0x405819=_0x232c50===_0xa74f2b(0x91d)?TextManager[_0xa74f2b(0x707)]:_0xa74f2b(0x633)[_0xa74f2b(0x8a4)](_0xf6b373,TextManager['autoBattle']),_0x25dcb7=this[_0xa74f2b(0x501)]();this['addCommand'](_0x405819,_0xa74f2b(0x707),_0x25dcb7);},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x227)]=function(){const _0x42666c=_0x17f940;return VisuMZ[_0x42666c(0x960)][_0x42666c(0x32c)][_0x42666c(0x6e8)][_0x42666c(0x641)];},Window_PartyCommand[_0x17f940(0x25b)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x17f940(0x9af)]=function(){},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x99d)]=function(){const _0x398737=_0x17f940;if(!this[_0x398737(0x7d7)]())return;const _0x4c6d2b=this[_0x398737(0x665)](),_0x2f1a24=VisuMZ['BattleCore']['Settings'][_0x398737(0x6e8)][_0x398737(0x6e4)],_0x3131d0=_0x4c6d2b==='text'?TextManager['options']:_0x398737(0x633)[_0x398737(0x8a4)](_0x2f1a24,TextManager[_0x398737(0x322)]),_0x1891a7=this[_0x398737(0x595)]();this[_0x398737(0x43c)](_0x3131d0,_0x398737(0x322),_0x1891a7);},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x7d7)]=function(){const _0x3ed3f5=_0x17f940;return VisuMZ[_0x3ed3f5(0x960)]['Settings']['PartyCmd'][_0x3ed3f5(0x8c2)];},Window_PartyCommand[_0x17f940(0x25b)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x584)]=function(){const _0xf1bb2e=_0x17f940,_0x30e555=this[_0xf1bb2e(0x665)](),_0x1fb499=VisuMZ[_0xf1bb2e(0x960)]['Settings'][_0xf1bb2e(0x6e8)]['CmdIconEscape'],_0x5e1abd=_0x30e555==='text'?TextManager[_0xf1bb2e(0x952)]:_0xf1bb2e(0x633)['format'](_0x1fb499,TextManager[_0xf1bb2e(0x952)]),_0x3732c1=this[_0xf1bb2e(0x2e5)]();this[_0xf1bb2e(0x43c)](_0x5e1abd,_0xf1bb2e(0x952),_0x3732c1);},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x2e5)]=function(){const _0x383288=_0x17f940;return BattleManager[_0x383288(0xa24)]();},Window_PartyCommand['prototype'][_0x17f940(0x3aa)]=function(){const _0x375228=_0x17f940;return VisuMZ[_0x375228(0x960)][_0x375228(0x32c)][_0x375228(0x6e8)]['CmdTextAlign'];},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0xfd)]=function(_0x4f08f8){const _0x41556f=_0x17f940,_0x1f3646=this['commandStyleCheck'](_0x4f08f8);if(_0x1f3646===_0x41556f(0x23f))this['drawItemStyleIconText'](_0x4f08f8);else{if(_0x1f3646===_0x41556f(0x7e5)){if('gLuNu'!=='gLuNu'){if(!_0x4d8f2e[_0x41556f(0x2ac)]())return;if(!this[_0x41556f(0xb02)])this[_0x41556f(0xfe)]();this[_0x41556f(0x48c)]();const _0x5f1a4c=this[_0x41556f(0x4a6)]();if(_0x5f1a4c)_0x5f1a4c['setupDamagePopup']();}else this[_0x41556f(0x647)](_0x4f08f8);}else Window_Command['prototype'][_0x41556f(0xfd)]['call'](this,_0x4f08f8);}},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x665)]=function(){const _0x4bb59f=_0x17f940;return VisuMZ[_0x4bb59f(0x960)][_0x4bb59f(0x32c)][_0x4bb59f(0x6e8)][_0x4bb59f(0x2d1)];},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x360)]=function(_0xf725ae){const _0x195aee=_0x17f940;if(_0xf725ae<0x0)return'text';const _0x52ecb9=this['commandStyle']();if(_0x52ecb9!=='auto')return _0x52ecb9;else{if(this['maxItems']()>0x0){if(_0x195aee(0x440)!=='odEUs'){if(!_0x50430f[_0x195aee(0x2ac)]())return;const _0x10990e=_0x51e9ae[_0x195aee(0x8ba)];_0x10990e[_0x195aee(0x6e1)]();}else{const _0x269ba1=this[_0x195aee(0x8d6)](_0xf725ae);if(_0x269ba1['match'](/\\I\[(\d+)\]/i)){const _0xd9e05d=this[_0x195aee(0x7fe)](_0xf725ae),_0x3a9d40=this['textSizeEx'](_0x269ba1)[_0x195aee(0x67f)];if(_0x3a9d40<=_0xd9e05d[_0x195aee(0x67f)]){if('otDNV'==='otDNV')return'iconText';else{if(!this[_0x195aee(0x7d7)]())return;const _0x43e6be=this['commandStyle'](),_0x3ac681=_0x9242a5[_0x195aee(0x960)]['Settings']['PartyCmd'][_0x195aee(0x6e4)],_0x1f4886=_0x43e6be==='text'?_0x3dbd86[_0x195aee(0x322)]:_0x195aee(0x633)[_0x195aee(0x8a4)](_0x3ac681,_0x7b9627[_0x195aee(0x322)]),_0x3ac93f=this[_0x195aee(0x595)]();this[_0x195aee(0x43c)](_0x1f4886,_0x195aee(0x322),_0x3ac93f);}}else{if(_0x195aee(0x73c)===_0x195aee(0x884))_0x430c45=_0x2e4bee>=_0x2e3bbe?_0x22bdd6:_0x3757e4;else return _0x195aee(0x7e5);}}}}}return _0x195aee(0x91d);},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x845)]=function(_0x21d1e7){const _0xf1a61e=_0x17f940,_0x2647f8=this['itemLineRect'](_0x21d1e7),_0x3a2893=this['commandName'](_0x21d1e7),_0x374fb0=this[_0xf1a61e(0x799)](_0x3a2893)[_0xf1a61e(0x67f)];this[_0xf1a61e(0x1e6)](this[_0xf1a61e(0x7d8)](_0x21d1e7));const _0x338eb8=this[_0xf1a61e(0x3aa)]();if(_0x338eb8===_0xf1a61e(0x64f))this['drawTextEx'](_0x3a2893,_0x2647f8['x']+_0x2647f8[_0xf1a61e(0x67f)]-_0x374fb0,_0x2647f8['y'],_0x374fb0);else{if(_0x338eb8===_0xf1a61e(0x936)){const _0x3411b3=_0x2647f8['x']+Math['floor']((_0x2647f8['width']-_0x374fb0)/0x2);this[_0xf1a61e(0x780)](_0x3a2893,_0x3411b3,_0x2647f8['y'],_0x374fb0);}else this[_0xf1a61e(0x780)](_0x3a2893,_0x2647f8['x'],_0x2647f8['y'],_0x374fb0);}},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x647)]=function(_0x248b06){const _0x5a0c92=_0x17f940;this[_0x5a0c92(0x8d6)](_0x248b06)[_0x5a0c92(0x413)](/\\I\[(\d+)\]/i);const _0x523c75=Number(RegExp['$1'])||0x0,_0xa0be13=this['itemLineRect'](_0x248b06),_0x2f27fd=_0xa0be13['x']+Math[_0x5a0c92(0x143)]((_0xa0be13['width']-ImageManager[_0x5a0c92(0x928)])/0x2),_0x1de3dc=_0xa0be13['y']+(_0xa0be13['height']-ImageManager[_0x5a0c92(0x123)])/0x2;this[_0x5a0c92(0x1cd)](_0x523c75,_0x2f27fd,_0x1de3dc);},Window_PartyCommand[_0x17f940(0x25b)]['hide']=function(){},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x67e)]=function(){const _0x52821d=_0x17f940;Window_Command[_0x52821d(0x25b)][_0x52821d(0x67e)][_0x52821d(0x14e)](this);const _0x18f0d9=this[_0x52821d(0x346)]();_0x18f0d9===_0x52821d(0x735)&&this[_0x52821d(0x8aa)]();},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x346)]=function(){const _0x4932b4=_0x17f940;if(this[_0x4932b4(0xa96)])return this['_battleLayoutStyle'];return this[_0x4932b4(0xa96)]=SceneManager[_0x4932b4(0x712)][_0x4932b4(0x346)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x17f940(0x25b)][_0x17f940(0x459)]=function(){const _0x31bdc0=_0x17f940,_0x37b358=VisuMZ['BattleCore'][_0x31bdc0(0x32c)]['PartyCmd'],_0x304ba3=this[_0x31bdc0(0xa2d)]();switch(_0x304ba3){case'fight':this[_0x31bdc0(0x598)]['setText'](_0x37b358['HelpFight']);break;case'autoBattle':this[_0x31bdc0(0x598)][_0x31bdc0(0x2eb)](_0x37b358[_0x31bdc0(0x4ad)]);break;case _0x31bdc0(0x322):this[_0x31bdc0(0x598)][_0x31bdc0(0x2eb)](_0x37b358[_0x31bdc0(0x705)]);break;case _0x31bdc0(0x952):this[_0x31bdc0(0x598)]['setText'](_0x37b358[_0x31bdc0(0x80e)]);break;default:this[_0x31bdc0(0x598)]['setText']('');break;}},VisuMZ['BattleCore'][_0x17f940(0x919)]=Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x96b)],Window_ActorCommand[_0x17f940(0x25b)]['initialize']=function(_0x470fb6){const _0xde81e8=_0x17f940;VisuMZ[_0xde81e8(0x960)]['Window_ActorCommand_initialize'][_0xde81e8(0x14e)](this,_0x470fb6),this[_0xde81e8(0x796)](_0x470fb6);},Window_ActorCommand['prototype']['createCommandNameWindow']=function(_0x4be807){const _0x19bc23=_0x17f940,_0x30ef88=new Rectangle(0x0,0x0,_0x4be807[_0x19bc23(0x67f)],_0x4be807[_0x19bc23(0x87c)]);this[_0x19bc23(0x289)]=new Window_Base(_0x30ef88),this[_0x19bc23(0x289)][_0x19bc23(0xac4)]=0x0,this[_0x19bc23(0x1cc)](this[_0x19bc23(0x289)]),this[_0x19bc23(0x896)]();},Window_ActorCommand['prototype'][_0x17f940(0x506)]=function(){const _0x206878=_0x17f940;Window_Command[_0x206878(0x25b)][_0x206878(0x506)]['call'](this);if(this[_0x206878(0x289)])this[_0x206878(0x896)]();},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x896)]=function(){const _0x185197=_0x17f940,_0x1475ef=this[_0x185197(0x289)];_0x1475ef[_0x185197(0x8af)][_0x185197(0x84a)]();const _0x2cf2bb=this[_0x185197(0x360)](this[_0x185197(0x98e)]());if(_0x2cf2bb==='icon'&&this[_0x185197(0x4e3)]()>0x0){const _0x4c060f=this[_0x185197(0x7fe)](this[_0x185197(0x98e)]());let _0x1b6d69=this['commandName'](this[_0x185197(0x98e)]());_0x1b6d69=_0x1b6d69[_0x185197(0xa30)](/\\I\[(\d+)\]/gi,''),_0x1475ef[_0x185197(0x559)](),this[_0x185197(0x4cc)](_0x1b6d69,_0x4c060f),this['commandNameWindowDrawText'](_0x1b6d69,_0x4c060f),this['commandNameWindowCenter'](_0x1b6d69,_0x4c060f);}},Window_ActorCommand[_0x17f940(0x25b)]['commandNameWindowDrawBackground']=function(_0x8eba58,_0x1980ce){},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x36e)]=function(_0x354785,_0x53d6f7){const _0x20a785=_0x17f940,_0x20042d=this[_0x20a785(0x289)];_0x20042d[_0x20a785(0x850)](_0x354785,0x0,_0x53d6f7['y'],_0x20042d[_0x20a785(0x59e)],'center');},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x9cf)]=function(_0x26b68c,_0x4f96d2){const _0x42bf07=_0x17f940,_0x4fc47c=this[_0x42bf07(0x289)],_0x3a5f3c=$gameSystem['windowPadding'](),_0x41f96a=_0x4f96d2['x']+Math['floor'](_0x4f96d2[_0x42bf07(0x67f)]/0x2)+_0x3a5f3c;_0x4fc47c['x']=_0x4fc47c[_0x42bf07(0x67f)]/-0x2+_0x41f96a,_0x4fc47c['y']=Math[_0x42bf07(0x143)](_0x4f96d2['height']/0x2);},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x4d6)]=function(){const _0x4bfb9a=_0x17f940;if(!this[_0x4bfb9a(0x6af)])return;const _0x224568=this[_0x4bfb9a(0x6af)][_0x4bfb9a(0x78e)]();for(const _0x35a0dd of _0x224568){this['makeBattleCommand'](_0x35a0dd[_0x4bfb9a(0x9cb)]()[_0x4bfb9a(0x224)]());}},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x308)]=function(_0x1d09c0){const _0x1ed6eb=_0x17f940;_0x1d09c0===_0x1ed6eb(0x4ee)&&('dvSlj'===_0x1ed6eb(0xa3e)?(_0x513874[_0x1ed6eb(0x960)][_0x1ed6eb(0x765)][_0x1ed6eb(0x14e)](this,_0x28aa4a),this[_0x1ed6eb(0x796)](_0x1911f9)):this[_0x1ed6eb(0x777)]());[_0x1ed6eb(0x145),_0x1ed6eb(0x65c)]['includes'](_0x1d09c0)&&this[_0x1ed6eb(0x9ca)]();_0x1d09c0===_0x1ed6eb(0x688)&&this[_0x1ed6eb(0x565)]();_0x1d09c0===_0x1ed6eb(0x7e2)&&('GialH'!=='somvW'?this['addItemCommand']():(_0x517cb7[_0x1ed6eb(0x960)][_0x1ed6eb(0x969)][_0x1ed6eb(0x14e)](this,_0x598b49,_0x382512),this[_0x1ed6eb(0x245)]()));_0x1d09c0===_0x1ed6eb(0x3f1)&&(_0x1ed6eb(0x45c)!==_0x1ed6eb(0x45c)?(_0x283f15[_0x1ed6eb(0x960)][_0x1ed6eb(0x7fd)]&&_0x4ee575['BattleCore'][_0x1ed6eb(0x7fd)][_0x1ed6eb(0x14e)](this,_0x6eb83f),_0x58602e[_0x1ed6eb(0x960)][_0x1ed6eb(0x889)](_0x4b0c69)):this[_0x1ed6eb(0x584)]());_0x1d09c0==='AUTO\x20BATTLE'&&this[_0x1ed6eb(0x134)]();if(_0x1d09c0[_0x1ed6eb(0x413)](/STYPE: (\d+)/i)){const _0x347b1b=Number(RegExp['$1']);this[_0x1ed6eb(0xafa)](_0x347b1b);}else{if(_0x1d09c0[_0x1ed6eb(0x413)](/STYPE: (.*)/i)){const _0x57eb20=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x1ed6eb(0xafa)](_0x57eb20);}}_0x1d09c0===_0x1ed6eb(0x55f)&&this[_0x1ed6eb(0x2d5)]();if(_0x1d09c0[_0x1ed6eb(0x413)](/SKILL: (\d+)/i)){const _0x1f66ab=Number(RegExp['$1']);this[_0x1ed6eb(0x3fe)]($dataSkills[_0x1f66ab]);}else{if(_0x1d09c0[_0x1ed6eb(0x413)](/SKILL: (.*)/i)){if(_0x1ed6eb(0xab6)==='EgdjC')return _0x1dd643(_0xd03a08['$1'])[_0x1ed6eb(0x618)](/[\r\n]+/);else{const _0x30b579=DataManager[_0x1ed6eb(0x1a5)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x30b579]);}}}if(_0x1d09c0===_0x1ed6eb(0x79d)&&Imported['VisuMZ_2_PartySystem']){if(_0x1ed6eb(0x2a2)!==_0x1ed6eb(0x2a2))return!![];else this[_0x1ed6eb(0x4c7)]();}[_0x1ed6eb(0x2c8),_0x1ed6eb(0x995)][_0x1ed6eb(0x72d)](_0x1d09c0)&&Imported[_0x1ed6eb(0x8e8)]&&this[_0x1ed6eb(0xa4d)](),_0x1d09c0===_0x1ed6eb(0x274)&&Imported[_0x1ed6eb(0x23b)]&&(_0x1ed6eb(0x131)!==_0x1ed6eb(0x131)?this[_0x1ed6eb(0x510)]()&&this['selectNextCommand']():this['addWeaponSwapCommand'](!![]));},Window_ActorCommand['prototype']['addAttackCommand']=function(){const _0x52e2bb=_0x17f940,_0x5386f2=$dataSkills[this[_0x52e2bb(0x6af)][_0x52e2bb(0xb0d)]()];if(!_0x5386f2)return;if(!this[_0x52e2bb(0x23e)](_0x5386f2))return;const _0x1b67fe=this[_0x52e2bb(0x665)](),_0x5b770f=DataManager[_0x52e2bb(0x4ae)](_0x5386f2),_0x15f0d9=DataManager['battleCommandIcon'](_0x5386f2),_0x1b5358=_0x1b67fe===_0x52e2bb(0x91d)?_0x5b770f:'\x5cI[%1]%2'['format'](_0x15f0d9,_0x5b770f);this[_0x52e2bb(0x43c)](_0x1b5358,_0x52e2bb(0x764),this[_0x52e2bb(0x6af)][_0x52e2bb(0x178)]());},Window_ActorCommand[_0x17f940(0x25b)]['addGuardCommand']=function(){const _0x49a6c5=_0x17f940,_0x5f2b1c=$dataSkills[this['_actor']['guardSkillId']()];if(!_0x5f2b1c)return;if(!this[_0x49a6c5(0x23e)](_0x5f2b1c))return;const _0x13fa36=this[_0x49a6c5(0x665)](),_0x58c6c7=DataManager[_0x49a6c5(0x4ae)](_0x5f2b1c),_0x332cc6=DataManager['battleCommandIcon'](_0x5f2b1c),_0x1172b1=_0x13fa36===_0x49a6c5(0x91d)?_0x58c6c7:_0x49a6c5(0x633)[_0x49a6c5(0x8a4)](_0x332cc6,_0x58c6c7);this[_0x49a6c5(0x43c)](_0x1172b1,_0x49a6c5(0x59c),this[_0x49a6c5(0x6af)][_0x49a6c5(0x1f7)]());},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x18a)]=function(){const _0x33157f=_0x17f940,_0x2dd0d6=this['commandStyle'](),_0x5cb35d=VisuMZ[_0x33157f(0x960)]['Settings'][_0x33157f(0x7a1)]['CmdIconItem'],_0x53638d=_0x2dd0d6==='text'?TextManager[_0x33157f(0x32b)]:_0x33157f(0x633)[_0x33157f(0x8a4)](_0x5cb35d,TextManager[_0x33157f(0x32b)]),_0x57850b=this[_0x33157f(0x8ae)]();this[_0x33157f(0x43c)](_0x53638d,'item',_0x57850b);},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x8ae)]=function(){const _0x4f14c7=_0x17f940;return this[_0x4f14c7(0x6af)]&&this[_0x4f14c7(0x6af)]['canUseItemCommand']();},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x9ca)]=function(){const _0x9be3e1=_0x17f940,_0x3ebf69=this[_0x9be3e1(0x6af)][_0x9be3e1(0xb18)]();for(const _0xa05df6 of _0x3ebf69){this[_0x9be3e1(0xafa)](_0xa05df6);}},Window_ActorCommand[_0x17f940(0x25b)]['addSkillTypeCommand']=function(_0x150948){const _0x49d921=_0x17f940;let _0x5ca43e=$dataSystem['skillTypes'][_0x150948];if(!_0x5ca43e)return;let _0x408ca6=_0x5ca43e;const _0x297589=this[_0x49d921(0x665)]();if(_0x297589===_0x49d921(0x91d))_0x408ca6=_0x408ca6[_0x49d921(0xa30)](/\x1I\[(\d+)\]/gi,''),_0x408ca6=_0x408ca6[_0x49d921(0xa30)](/\\I\[(\d+)\]/gi,'');else{if(!_0x5ca43e[_0x49d921(0x413)](/\\I\[(\d+)\]/i)){if(_0x49d921(0x67b)!==_0x49d921(0xa41)){const _0x216be7=Imported[_0x49d921(0x4b9)]?VisuMZ['SkillsStatesCore'][_0x49d921(0x32c)]['Skills']:VisuMZ[_0x49d921(0x960)]['Settings'][_0x49d921(0x7a1)],_0x2ab357=$dataSystem[_0x49d921(0x859)]['includes'](_0x150948),_0x1742f4=_0x2ab357?_0x216be7[_0x49d921(0x23c)]:_0x216be7[_0x49d921(0x91e)];_0x408ca6=_0x49d921(0x633)['format'](_0x1742f4,_0x5ca43e);}else{const _0x1532ab=_0x148a30(_0x123264['$1']);_0x1532ab<_0x39ad40?(_0xd1bcf6(_0x49d921(0xb28)[_0x49d921(0x8a4)](_0xf09148,_0x1532ab,_0x333958)),_0x52ac3f['exit']()):_0x1d9acb=_0x2fb92f[_0x49d921(0xb2c)](_0x1532ab,_0xe553a);}}}this[_0x49d921(0x43c)](_0x408ca6,'skill',!![],_0x150948);},Window_ActorCommand[_0x17f940(0x25b)]['addSingleSkillCommands']=function(){const _0x5ac3f7=_0x17f940,_0x126ebf=this[_0x5ac3f7(0x6af)]['skillTypes'](),_0x59bae4=this[_0x5ac3f7(0x6af)]['skills']();for(const _0x1f9cb6 of _0x59bae4){if(!_0x1f9cb6)continue;if(Imported[_0x5ac3f7(0x4b9)]){if(_0x5ac3f7(0x740)==='tbpEq'){const _0x19bb1d=new _0x2a297f();this['_enemyNameContainer']['addChild'](_0x19bb1d),_0x19bb1d['linkSprite'](_0x1d8e61);}else{if(this[_0x5ac3f7(0x2ae)](_0x1f9cb6))continue;if(this[_0x5ac3f7(0x6e5)](_0x1f9cb6))continue;}}else{if(!_0x126ebf[_0x5ac3f7(0x72d)](_0x1f9cb6[_0x5ac3f7(0x253)]))continue;}this[_0x5ac3f7(0x3fe)](_0x1f9cb6);}},Window_ActorCommand['prototype'][_0x17f940(0x2ae)]=function(_0x58a14e){const _0x2f31ed=_0x17f940,_0x4698d9=this[_0x2f31ed(0x6af)][_0x2f31ed(0xb18)](),_0x18df05=_0x4698d9[_0x2f31ed(0x427)](_0x751a=>DataManager['getSkillTypes'](_0x58a14e)[_0x2f31ed(0x72d)](_0x751a));return _0x18df05[_0x2f31ed(0x702)]<=0x0;},Window_ActorCommand[_0x17f940(0x25b)]['isHiddenSkill']=function(_0xe4ebc1){const _0x4c77c9=_0x17f940;if(!Window_SkillList[_0x4c77c9(0x25b)][_0x4c77c9(0xb0a)][_0x4c77c9(0x14e)](this,_0xe4ebc1))return!![];if(!Window_SkillList['prototype'][_0x4c77c9(0x590)]['call'](this,_0xe4ebc1))return!![];if(!Window_SkillList[_0x4c77c9(0x25b)][_0x4c77c9(0x12c)][_0x4c77c9(0x14e)](this,_0xe4ebc1))return!![];return![];},Window_ActorCommand['prototype'][_0x17f940(0x3fe)]=function(_0x5dd8f2){const _0x8e4fa2=_0x17f940;if(!_0x5dd8f2)return;if(!this['canAddSkillCommand'](_0x5dd8f2))return;const _0x1f647b=this[_0x8e4fa2(0x665)](),_0x4895c9=DataManager['battleCommandName'](_0x5dd8f2),_0x5c58e0=DataManager[_0x8e4fa2(0x69e)](_0x5dd8f2),_0x3c79cb=_0x1f647b==='text'?_0x4895c9:_0x8e4fa2(0x633)[_0x8e4fa2(0x8a4)](_0x5c58e0,_0x4895c9),_0xc3e3b1=this['_actor'][_0x8e4fa2(0x897)](_0x5dd8f2);this['addCommand'](_0x3c79cb,'singleSkill',_0xc3e3b1,_0x5dd8f2['id']);},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x23e)]=function(_0x38aca6){const _0x59b468=_0x17f940,_0x545411=_0x38aca6[_0x59b468(0x981)];if(_0x545411[_0x59b468(0x413)](/<COMMAND REQUIRE LEARN>/i)){if('triHj'==='triHj'){if(!this[_0x59b468(0x6af)]['isLearnedSkill'](_0x38aca6['id']))return![];}else{if(!_0x3926cb[_0x59b468(0x2ac)]())return;_0x59c27e[_0x59b468(0x20e)](_0x4f90cb,_0x1cdbb5);const _0x1eca87=_0x1ec4e2[_0x59b468(0x658)],_0x2acdc4={'arPenRate':_0x21cde0['ArPenRate'],'arPenFlat':_0x373a74[_0x59b468(0x718)],'arRedRate':_0x382779[_0x59b468(0x6f8)],'arRedFlat':_0x520e1d['ArRedFlat']};_0x1eca87[_0x59b468(0x3dd)]=_0x2acdc4;}}if(_0x545411[_0x59b468(0x413)](/<COMMAND REQUIRE ACCESS>/i)){if('HDNlP'===_0x59b468(0x9a6)){if(!this[_0x59b468(0x6af)][_0x59b468(0x116)](_0x38aca6['id']))return![];}else this[_0x59b468(0x73b)](_0x59b468(0x17b));}const _0x44b6b6=VisuMZ[_0x59b468(0x960)][_0x59b468(0x8a9)](_0x38aca6,'CommandVisible');if(VisuMZ['BattleCore']['JS'][_0x44b6b6]){if(!VisuMZ[_0x59b468(0x960)]['JS'][_0x44b6b6]['call'](this,this[_0x59b468(0x6af)],_0x38aca6))return![];}return VisuMZ['BattleCore']['CheckSkillCommandShowSwitches'](_0x38aca6);},VisuMZ['BattleCore'][_0x17f940(0x392)]=function(_0x2d856d){const _0x133756=_0x17f940,_0x12a67f=_0x2d856d[_0x133756(0x981)];if(_0x12a67f['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xededfe=JSON[_0x133756(0x9a2)]('['+RegExp['$1'][_0x133756(0x413)](/\d+/g)+']');for(const _0x968971 of _0xededfe){if(!$gameSwitches[_0x133756(0x9fb)](_0x968971))return![];}return!![];}if(_0x12a67f['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('FqRzk'===_0x133756(0x8b2))this['push'](_0x133756(0x1df),_0x1ead03,[_0x76a27f[_0x133756(0x128)]],-0x1);else{const _0x40b444=JSON[_0x133756(0x9a2)]('['+RegExp['$1'][_0x133756(0x413)](/\d+/g)+']');for(const _0x365e27 of _0x40b444){if(_0x133756(0x464)===_0x133756(0x1dc)){const _0x1dc8b2=this[_0x133756(0x686)]();if(!_0x1dc8b2)return null;if(_0x1dc8b2[_0x133756(0x3f9)]()&&_0x1dc8b2[_0x133756(0x3f0)]())return _0x1dc8b2;}else{if(!$gameSwitches['value'](_0x365e27))return![];}}return!![];}}if(_0x12a67f[_0x133756(0x413)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1169fd=JSON[_0x133756(0x9a2)]('['+RegExp['$1'][_0x133756(0x413)](/\d+/g)+']');for(const _0x496672 of _0x1169fd){if(_0x133756(0x2ef)===_0x133756(0x171))_0x590a53-=_0x3b3fa3[_0x133756(0xae2)]();else{if($gameSwitches['value'](_0x496672))return!![];}}return![];}if(_0x12a67f[_0x133756(0x413)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x133756(0x7fa)!=='bvmZn')_0x5262ed['BattleCore'][_0x133756(0x680)][_0x133756(0x14e)](this),this['applyGlobalCommonEventNotetags'](),this['resetResultSwitches']();else{const _0x35c817=JSON['parse']('['+RegExp['$1'][_0x133756(0x413)](/\d+/g)+']');for(const _0x3db468 of _0x35c817){if(!$gameSwitches['value'](_0x3db468))return!![];}return![];}}if(_0x12a67f[_0x133756(0x413)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x133756(0x60a)==='HgJos')this['requestMotion']('missile');else{const _0x58da73=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x412c4c of _0x58da73){if(!$gameSwitches[_0x133756(0x9fb)](_0x412c4c))return!![];}return![];}}if(_0x12a67f['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x133756(0x98a)===_0x133756(0x800))return this['makeActionListAutoAttack']();else{const _0x955b23=JSON[_0x133756(0x9a2)]('['+RegExp['$1'][_0x133756(0x413)](/\d+/g)+']');for(const _0x5d3b01 of _0x955b23){if($gameSwitches[_0x133756(0x9fb)](_0x5d3b01))return![];}return!![];}}return!![];},Window_ActorCommand[_0x17f940(0x25b)]['addEscapeCommand']=function(){const _0xe4807c=_0x17f940,_0x32d86d=this[_0xe4807c(0x665)](),_0x24a883=VisuMZ['BattleCore'][_0xe4807c(0x32c)][_0xe4807c(0x6e8)][_0xe4807c(0xb11)],_0x4b3ec6=_0x32d86d===_0xe4807c(0x91d)?TextManager[_0xe4807c(0x952)]:_0xe4807c(0x633)['format'](_0x24a883,TextManager[_0xe4807c(0x952)]),_0x55a00c=this['isEscapeCommandEnabled']();this['addCommand'](_0x4b3ec6,_0xe4807c(0x952),_0x55a00c);},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x2e5)]=function(){const _0x4b41b1=_0x17f940;return BattleManager[_0x4b41b1(0xa24)]();},Window_ActorCommand[_0x17f940(0x25b)]['addAutoBattleCommand']=function(){const _0x387872=_0x17f940,_0x2ae7dd=this[_0x387872(0x665)](),_0xb1491b=VisuMZ[_0x387872(0x960)][_0x387872(0x32c)][_0x387872(0x6e8)][_0x387872(0xa91)],_0x256d03=_0x2ae7dd===_0x387872(0x91d)?TextManager[_0x387872(0x707)]:_0x387872(0x633)['format'](_0xb1491b,TextManager[_0x387872(0x707)]),_0x52debb=this[_0x387872(0x501)]();this[_0x387872(0x43c)](_0x256d03,_0x387872(0x707),_0x52debb);},Window_ActorCommand['prototype'][_0x17f940(0x501)]=function(){return!![];},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x3aa)]=function(){const _0x498651=_0x17f940;return VisuMZ['BattleCore'][_0x498651(0x32c)]['ActorCmd']['CmdTextAlign'];},Window_ActorCommand[_0x17f940(0x25b)]['drawItem']=function(_0x3f7756){const _0x421413=_0x17f940,_0x2ea2d2=this[_0x421413(0x360)](_0x3f7756);if(_0x2ea2d2===_0x421413(0x23f))this[_0x421413(0x845)](_0x3f7756);else{if(_0x2ea2d2===_0x421413(0x7e5))this[_0x421413(0x647)](_0x3f7756);else{if('CxKZh'===_0x421413(0x262))Window_Command[_0x421413(0x25b)][_0x421413(0xfd)][_0x421413(0x14e)](this,_0x3f7756);else{if(this['isDead']())return;this['_immortal']=!![];}}}this[_0x421413(0x46c)](_0x3f7756);},Window_ActorCommand[_0x17f940(0x25b)]['commandStyle']=function(){const _0xa5711f=_0x17f940;return VisuMZ[_0xa5711f(0x960)]['Settings'][_0xa5711f(0x7a1)][_0xa5711f(0x2d1)];},Window_ActorCommand[_0x17f940(0x25b)]['commandStyleCheck']=function(_0x24139c){const _0x5b9050=_0x17f940;if(_0x24139c<0x0)return'text';const _0x540fec=this[_0x5b9050(0x665)]();if(_0x540fec!==_0x5b9050(0xada)){if(_0x5b9050(0x2cf)==='oCtyh')return _0x540fec;else _0x5ba1ad=_0xeb0311>=_0x10800d?_0x2a8fd2:_0x13ceb1;}else{if(this[_0x5b9050(0x4e3)]()>0x0){if(_0x5b9050(0x76f)!=='RMnsg'){const _0x52c862=this[_0x5b9050(0x8d6)](_0x24139c);if(_0x52c862[_0x5b9050(0x413)](/\\I\[(\d+)\]/i)){if(_0x5b9050(0x67c)!=='QhBQg'){const _0x1e537c=this['itemLineRect'](_0x24139c),_0xa6ebf9=this[_0x5b9050(0x799)](_0x52c862)[_0x5b9050(0x67f)];if(_0xa6ebf9<=_0x1e537c[_0x5b9050(0x67f)]){if(_0x5b9050(0x98b)!==_0x5b9050(0x7f6))return _0x5b9050(0x23f);else{_0x48e50[_0x5b9050(0x25b)][_0x5b9050(0x67e)][_0x5b9050(0x14e)](this);const _0x2e617a=this['battleLayoutStyle']();_0x2e617a===_0x5b9050(0x735)&&this[_0x5b9050(0x8aa)]();}}else return'icon';}else _0x559809=_0x243245[_0x5b9050(0x490)];}}else{const _0x3399ab=_0x175b10[_0x5b9050(0x960)]['Settings']['BattleLayout'],_0x2954f0=_0x3e4b4d['prototype']['extraHeight'](),_0x752840=_0x481398[_0x5b9050(0xac3)]-(_0x3399ab[_0x5b9050(0x940)]||0xc0),_0x257c80=this[_0x5b9050(0x758)]()+_0x2954f0,_0x739672=this[_0x5b9050(0x140)]()?0x0:_0x70765d[_0x5b9050(0xac3)]-_0x752840,_0x4ec496=_0x364977[_0x5b9050(0x45d)]-_0x257c80+_0x2954f0;return new _0x295931(_0x739672,_0x4ec496,_0x752840,_0x257c80);}}}return'text';},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x845)]=function(_0xe38432){const _0xf7f36=_0x17f940,_0xb69348=this[_0xf7f36(0x7fe)](_0xe38432),_0x4dd97a=this['commandName'](_0xe38432),_0x44aa84=this[_0xf7f36(0x799)](_0x4dd97a)[_0xf7f36(0x67f)];this[_0xf7f36(0x1e6)](this[_0xf7f36(0x7d8)](_0xe38432));const _0x1e0301=this[_0xf7f36(0x3aa)]();if(_0x1e0301===_0xf7f36(0x64f))this[_0xf7f36(0x780)](_0x4dd97a,_0xb69348['x']+_0xb69348[_0xf7f36(0x67f)]-_0x44aa84,_0xb69348['y'],_0x44aa84);else{if(_0x1e0301===_0xf7f36(0x936)){const _0x41b631=_0xb69348['x']+Math[_0xf7f36(0x143)]((_0xb69348[_0xf7f36(0x67f)]-_0x44aa84)/0x2);this[_0xf7f36(0x780)](_0x4dd97a,_0x41b631,_0xb69348['y'],_0x44aa84);}else{if(_0xf7f36(0x779)!=='fxUwc')this['drawTextEx'](_0x4dd97a,_0xb69348['x'],_0xb69348['y'],_0x44aa84);else return this[_0xf7f36(0xa20)]()?_0x37e66a[_0xf7f36(0x960)][_0xf7f36(0x32c)][_0xf7f36(0x36b)][_0xf7f36(0x29c)]:_0x5cdebd[_0xf7f36(0x960)][_0xf7f36(0x32c)][_0xf7f36(0x99a)]['SmoothImage'];}}},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x647)]=function(_0x327dd0){const _0x435464=_0x17f940;this[_0x435464(0x8d6)](_0x327dd0)[_0x435464(0x413)](/\\I\[(\d+)\]/i);const _0x1f2924=Number(RegExp['$1'])||0x0,_0x507da4=this[_0x435464(0x7fe)](_0x327dd0),_0x589f80=_0x507da4['x']+Math[_0x435464(0x143)]((_0x507da4[_0x435464(0x67f)]-ImageManager[_0x435464(0x928)])/0x2),_0x33f6f3=_0x507da4['y']+(_0x507da4[_0x435464(0x87c)]-ImageManager[_0x435464(0x123)])/0x2;this[_0x435464(0x1cd)](_0x1f2924,_0x589f80,_0x33f6f3);},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x46c)]=function(_0x497f61){const _0x327e74=_0x17f940;if(!(VisuMZ['BattleCore'][_0x327e74(0x32c)]['ActorCmd']['ShowCosts']??!![]))return;const _0x219087=this['commandSymbol'](_0x497f61);if(![_0x327e74(0x764),_0x327e74(0x59c),_0x327e74(0x4fb)][_0x327e74(0x72d)](_0x219087))return;const _0x1e28fb=this[_0x327e74(0x7fe)](_0x497f61);let _0x12f66f=null;if(_0x219087===_0x327e74(0x764))_0x12f66f=$dataSkills[this[_0x327e74(0x6af)]['attackSkillId']()];else{if(_0x219087===_0x327e74(0x59c))_0x12f66f=$dataSkills[this[_0x327e74(0x6af)][_0x327e74(0x4ed)]()];else{if(_0x327e74(0x791)===_0x327e74(0x791))_0x12f66f=$dataSkills[this[_0x327e74(0x5de)][_0x497f61][_0x327e74(0x773)]];else{if(!this[_0x327e74(0x573)])return;this[_0x327e74(0x573)]['y']=this[_0x327e74(0x626)]-this['y']-0x2;}}}this[_0x327e74(0x4e7)](this[_0x327e74(0x6af)],_0x12f66f,_0x1e28fb['x'],_0x1e28fb['y'],_0x1e28fb['width']);},Window_ActorCommand['prototype'][_0x17f940(0x4e7)]=function(_0x3001b1,_0x3ef149,_0x15433e,_0x50aeb7,_0x56bf09){const _0x506016=_0x17f940;if(!_0x3ef149)return;if(Imported[_0x506016(0x4b9)]){if(_0x506016(0x9da)!==_0x506016(0x9da)){if(!this[_0x506016(0x1ce)])return;if(!_0x43538e)return;this[_0x506016(0x1ce)][_0x506016(0x783)](_0x5756a5);}else Window_Command[_0x506016(0x25b)][_0x506016(0x4e7)]['call'](this,_0x3001b1,_0x3ef149,_0x15433e,_0x50aeb7,_0x56bf09);}else{if('xcXXb'!==_0x506016(0x9f0))Window_SkillList[_0x506016(0x25b)][_0x506016(0x4e7)][_0x506016(0x14e)](this,_0x3ef149,_0x15433e,_0x50aeb7,_0x56bf09);else{const _0x295cf6=_0x4abe4d[_0x506016(0x32b)]();this['push'](_0x506016(0x20d),_0x5c39db,_0x40759b,![]),this[_0x506016(0x5e8)](_0x506016(0x9ea)),this[_0x506016(0x5e8)]('waitForEffect'),this['push'](_0x506016(0x84a)),this[_0x506016(0x5e8)](_0x506016(0x4f1),_0x57bbef),this[_0x506016(0x5e8)](_0x506016(0x80d));}}},Window_ActorCommand['prototype'][_0x17f940(0x161)]=function(){},Window_ActorCommand['prototype'][_0x17f940(0x67e)]=function(){const _0x35c70d=_0x17f940;Window_Command[_0x35c70d(0x25b)][_0x35c70d(0x67e)][_0x35c70d(0x14e)](this);const _0x839be2=this[_0x35c70d(0x346)]();_0x839be2==='border'&&this['showHelpWindow']();},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x346)]=function(){const _0x264fb2=_0x17f940;if(this[_0x264fb2(0xa96)])return this[_0x264fb2(0xa96)];return this[_0x264fb2(0xa96)]=SceneManager[_0x264fb2(0x712)]['battleLayoutStyle'](),this[_0x264fb2(0xa96)];},VisuMZ['BattleCore'][_0x17f940(0xaba)]=Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x4bb)],Window_ActorCommand['prototype']['setup']=function(_0x201e2b){const _0x340f83=_0x17f940,_0x85bd9c=this[_0x340f83(0x346)]();if(_0x201e2b&&['xp',_0x340f83(0xaa2)][_0x340f83(0x72d)](_0x85bd9c))this[_0x340f83(0x92e)](_0x201e2b);else _0x201e2b&&[_0x340f83(0x735)][_0x340f83(0x72d)](_0x85bd9c)&&(this[_0x340f83(0xa5b)](_0x201e2b),this['showHelpWindow']());VisuMZ[_0x340f83(0x960)][_0x340f83(0xaba)]['call'](this,_0x201e2b),_0x201e2b&&$gameTroop['aliveMembers']()[_0x340f83(0x702)]>0x0&&_0x201e2b[_0x340f83(0x4a6)]()&&_0x201e2b['battler']()['stepForward']();},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x92e)]=function(_0x5ee9e0){const _0x5d8cc8=_0x17f940,_0x5a0f27=Math['round'](Graphics[_0x5d8cc8(0xac3)]/0x3),_0x1c89dd=Math[_0x5d8cc8(0x189)](Graphics['boxWidth']/$gameParty[_0x5d8cc8(0x550)]()[_0x5d8cc8(0x702)]),_0x154597=Math[_0x5d8cc8(0x1c9)](_0x5a0f27,_0x1c89dd),_0x5369d7=this['fittingHeight'](VisuMZ[_0x5d8cc8(0x960)][_0x5d8cc8(0x32c)][_0x5d8cc8(0x334)]['XPActorCommandLines']),_0x51b291=_0x1c89dd*_0x5ee9e0[_0x5d8cc8(0x98e)]()+(_0x1c89dd-_0x154597)/0x2,_0x31cc73=SceneManager[_0x5d8cc8(0x712)]['_statusWindow']['y']-_0x5369d7;this[_0x5d8cc8(0x27c)](_0x51b291,_0x31cc73,_0x154597,_0x5369d7),this[_0x5d8cc8(0x27a)](),this[_0x5d8cc8(0x53a)](0x1);},Window_ActorCommand['prototype']['resizeWindowBorderStyle']=function(_0x40c1ba){const _0x4db3f5=_0x17f940,_0x47fa89=SceneManager[_0x4db3f5(0x712)][_0x4db3f5(0x7a9)]();this[_0x4db3f5(0x27c)](_0x47fa89['x'],_0x47fa89['y'],_0x47fa89[_0x4db3f5(0x67f)],_0x47fa89[_0x4db3f5(0x87c)]),this[_0x4db3f5(0x27a)](),this[_0x4db3f5(0x53a)](0x0);},Window_ActorCommand['prototype'][_0x17f940(0x1fe)]=function(){const _0x3a6561=_0x17f940;if(this[_0x3a6561(0x86c)]){if(_0x3a6561(0x10c)!==_0x3a6561(0x6ef)){const _0x22f1f7=this[_0x3a6561(0x86c)][_0x3a6561(0x242)],_0x26ba5d=this['width']-0x8,_0x329521=this['height'],_0x4d0bc3=this['padding'],_0x4694cd=ColorManager['dimColor1'](),_0x35de3d=ColorManager['dimColor2']();this[_0x3a6561(0x86c)]['x']=0x4,_0x22f1f7[_0x3a6561(0xaa5)](_0x26ba5d,_0x329521),_0x22f1f7[_0x3a6561(0x9b6)](0x0,0x0,_0x26ba5d,_0x4d0bc3,_0x35de3d,_0x4694cd,!![]),_0x22f1f7['fillRect'](0x0,_0x4d0bc3,_0x26ba5d,_0x329521-_0x4d0bc3*0x2,_0x4694cd),_0x22f1f7[_0x3a6561(0x9b6)](0x0,_0x329521-_0x4d0bc3,_0x26ba5d,_0x4d0bc3,_0x4694cd,_0x35de3d,!![]),this['_dimmerSprite'][_0x3a6561(0xb00)](0x0,0x0,_0x26ba5d,_0x329521);}else _0x47a11a[_0x3a6561(0x960)][_0x3a6561(0x7ed)][_0x3a6561(0x14e)](this);}},Window_ActorCommand[_0x17f940(0x25b)][_0x17f940(0x459)]=function(){const _0x58c826=_0x17f940;if(!this[_0x58c826(0x6af)])return;const _0x4ff00b=VisuMZ[_0x58c826(0x960)][_0x58c826(0x32c)][_0x58c826(0x7a1)],_0x48f3d7=this[_0x58c826(0xa2d)]();switch(_0x48f3d7){case'attack':this['setHelpWindowItem']($dataSkills[this[_0x58c826(0x6af)][_0x58c826(0xb0d)]()]);break;case _0x58c826(0x59c):this[_0x58c826(0x6a0)]($dataSkills[this[_0x58c826(0x6af)][_0x58c826(0x4ed)]()]);break;case _0x58c826(0x9c7):const _0x287a69=_0x4ff00b[_0x58c826(0x42f)],_0x31caae=_0x287a69[_0x58c826(0x8a4)]($dataSystem[_0x58c826(0xb18)][this[_0x58c826(0x284)]()]);this['_helpWindow']['setText'](_0x31caae);break;case _0x58c826(0x4fb):this['setHelpWindowItem']($dataSkills[this[_0x58c826(0x284)]()]);break;case'item':this[_0x58c826(0x598)][_0x58c826(0x2eb)](_0x4ff00b[_0x58c826(0x1ae)]);break;case _0x58c826(0x952):this['_helpWindow'][_0x58c826(0x2eb)](_0x4ff00b[_0x58c826(0x80e)]);break;case _0x58c826(0x707):this[_0x58c826(0x598)][_0x58c826(0x2eb)](_0x4ff00b[_0x58c826(0x4ad)]);break;default:this['_helpWindow'][_0x58c826(0x2eb)]('');break;}},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa3c)]=Window_BattleStatus['prototype'][_0x17f940(0x96b)],Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x96b)]=function(_0x45431f){const _0x3488c4=_0x17f940;VisuMZ['BattleCore'][_0x3488c4(0xa3c)]['call'](this,_0x45431f),this[_0x3488c4(0x1fa)](),this[_0x3488c4(0x311)]();},Window_BattleStatus['prototype'][_0x17f940(0x346)]=function(){const _0x4abf11=_0x17f940;if(this[_0x4abf11(0xa96)])return this[_0x4abf11(0xa96)];return this[_0x4abf11(0xa96)]=SceneManager[_0x4abf11(0x712)][_0x4abf11(0x346)](),this[_0x4abf11(0xa96)];},Window_BattleStatus['prototype'][_0x17f940(0x1fa)]=function(){const _0x11ae7d=_0x17f940;this[_0x11ae7d(0xa62)]=this[_0x11ae7d(0x95a)]();const _0x201b72=VisuMZ[_0x11ae7d(0x960)][_0x11ae7d(0x32c)][_0x11ae7d(0x334)];_0x201b72[_0x11ae7d(0xa6d)]&&(this[_0x11ae7d(0xac4)]=0x0);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x95a)]=function(){const _0x264087=_0x17f940,_0x16bdba=VisuMZ[_0x264087(0x960)][_0x264087(0x32c)][_0x264087(0x334)];if(_0x16bdba[_0x264087(0x483)]){if('flYZd'!=='flYZd'){if(!_0x5b7cbc[_0x264087(0x960)][_0x264087(0x528)])return;if(_0xd9b28e[_0x264087(0x377)]&&_0x48624d[_0x264087(0x963)]())return;const _0x2630c5=_0x19496a['aliveMembers']()[_0x264087(0x427)](_0x1fb95a=>_0x1fb95a['isTpbCharged']()&&_0x1fb95a[_0x264087(0x411)]());_0x48c40d[_0x264087(0x3e8)]=_0x2630c5[0x0]||null,_0x1dca38[_0x264087(0x3e8)]&&_0x3d217b[_0x264087(0x3e8)][_0x264087(0x929)]('inputting');}else return!![];}const _0x4867c1=this[_0x264087(0x346)]();switch(_0x4867c1){case _0x264087(0x5a8):case'border':return!![];break;case'default':case'xp':case _0x264087(0xaa2):default:return![];break;}},Window_BattleStatus[_0x17f940(0x25b)]['extraHeight']=function(){const _0x4427cb=_0x17f940;if(this['isFrameVisible']()){if(_0x4427cb(0x903)===_0x4427cb(0x903))return 0x0;else _0x158c25[_0x4427cb(0x712)][_0x4427cb(0x1e7)][_0x4427cb(0x429)](_0x393ec0);}else{if('uVNvY'!==_0x4427cb(0x60f))return 0xa;else{const _0x410998=_0x228902[this[_0x4427cb(0x6af)][_0x4427cb(0xb0d)]()];if(!_0x410998)return;if(!this[_0x4427cb(0x23e)](_0x410998))return;const _0x5eded9=this[_0x4427cb(0x665)](),_0x2d60d0=_0x258f99[_0x4427cb(0x4ae)](_0x410998),_0x231943=_0x5d438e[_0x4427cb(0x69e)](_0x410998),_0x2a6d95=_0x5eded9===_0x4427cb(0x91d)?_0x2d60d0:_0x4427cb(0x633)['format'](_0x231943,_0x2d60d0);this[_0x4427cb(0x43c)](_0x2a6d95,'attack',this[_0x4427cb(0x6af)]['canAttack']());}}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x4dc)]=function(){const _0x270893=_0x17f940,_0x408a90=this[_0x270893(0x346)]();switch(_0x408a90){case _0x270893(0x5a8):return 0x1;break;case'xp':case _0x270893(0xaa2):return $gameParty[_0x270893(0x550)]()[_0x270893(0x702)];break;case'default':default:return $gameParty[_0x270893(0x5d7)]();break;}},Window_BattleStatus[_0x17f940(0x25b)]['itemHeight']=function(){const _0x11bef4=_0x17f940,_0x318b01=this[_0x11bef4(0x346)]();switch(_0x318b01){case _0x11bef4(0x5a8):return Window_StatusBase['prototype'][_0x11bef4(0x913)][_0x11bef4(0x14e)](this);break;case'default':case'xp':case _0x11bef4(0xaa2):default:return this[_0x11bef4(0x45f)];break;}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x3a7)]=function(){const _0x43fa09=_0x17f940,_0x5b808e=this['battleLayoutStyle']();switch(_0x5b808e){case _0x43fa09(0x5a8):return Window_StatusBase[_0x43fa09(0x25b)][_0x43fa09(0x3a7)][_0x43fa09(0x14e)](this);break;case _0x43fa09(0x387):case'xp':case _0x43fa09(0xaa2):default:return 0x0;break;}},Window_BattleStatus['prototype']['updatePadding']=function(){const _0x1b5531=_0x17f940;this[_0x1b5531(0x95a)]()?Window_StatusBase[_0x1b5531(0x25b)][_0x1b5531(0x78c)][_0x1b5531(0x14e)](this):this['padding']=0x8;},Window_BattleStatus['prototype'][_0x17f940(0x38a)]=function(){const _0x375a91=_0x17f940,_0x2d99a3=VisuMZ[_0x375a91(0x960)][_0x375a91(0x32c)][_0x375a91(0x334)];_0x2d99a3[_0x375a91(0x483)]?_0x375a91(0x976)!==_0x375a91(0x976)?_0x1bc766[_0x375a91(0x960)][_0x375a91(0x32c)]['AutoBattle'][_0x375a91(0x237)]&&(this[_0x375a91(0x91b)](),this[_0x375a91(0x8db)]()):this['windowskin']=ImageManager['loadSystem'](_0x2d99a3['StatusWindowSkinFilename']):Window_StatusBase[_0x375a91(0x25b)][_0x375a91(0x38a)][_0x375a91(0x14e)](this);},Window_BattleStatus[_0x17f940(0x25b)]['drawItemBackground']=function(_0x295064){const _0x3d99f6=_0x17f940,_0x1d4e73=VisuMZ[_0x3d99f6(0x960)][_0x3d99f6(0x32c)][_0x3d99f6(0x334)];if(_0x1d4e73[_0x3d99f6(0x745)])return;Window_StatusBase[_0x3d99f6(0x25b)][_0x3d99f6(0x9ce)][_0x3d99f6(0x14e)](this,_0x295064);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x163)]=function(){const _0x12b42e=_0x17f940;this[_0x12b42e(0x4d3)]=!![];},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x106)]=function(){const _0x5427b4=_0x17f940;Window_StatusBase[_0x5427b4(0x25b)][_0x5427b4(0x106)][_0x5427b4(0x14e)](this),this['updateRefresh'](),this[_0x5427b4(0x278)]();if(this['battleLayoutStyle']()===_0x5427b4(0x735))this[_0x5427b4(0x412)]();},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x8b5)]=function(){const _0x31abf3=_0x17f940;if($gameTemp[_0x31abf3(0x85d)]()){if(_0x31abf3(0x12d)!=='TOEOW')return this[_0x31abf3(0xa2b)](_0x18d1c2);else this[_0x31abf3(0xa97)](),this[_0x31abf3(0x4d3)]=![],$gameTemp['clearBattleRefreshRequest']();}else{if(this[_0x31abf3(0x4d3)]){if(_0x31abf3(0x39c)===_0x31abf3(0x39c))this[_0x31abf3(0x4d3)]=![],this[_0x31abf3(0xaae)](),this[_0x31abf3(0xa57)]();else{if(_0x10469e[_0x31abf3(0x7ca)]()&&this['_tpbState']==='casting')return this[_0x31abf3(0x3ef)]()?this[_0x31abf3(0x3d3)]()&&this['currentAction']()[_0x31abf3(0x32b)]()&&!this['currentAction']()['isMagical']():this[_0x31abf3(0x3d3)]()&&this[_0x31abf3(0x3d3)]()[_0x31abf3(0x32b)]()&&!this[_0x31abf3(0x3d3)]()[_0x31abf3(0x639)]();return![];}}}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x376)]=function(){const _0x4cde68=_0x17f940;Window_StatusBase[_0x4cde68(0x25b)][_0x4cde68(0x376)][_0x4cde68(0x14e)](this);if(!$gameSystem[_0x4cde68(0x4b8)]())this[_0x4cde68(0xaae)]();},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x161)]=function(){const _0x3b9037=_0x17f940;if(this[_0x3b9037(0x27b)]===Window_BattleStatus)return;Window_StatusBase[_0x3b9037(0x25b)]['hide'][_0x3b9037(0x14e)](this);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0xae7)]=function(_0x19191c){const _0x2bde5e=_0x17f940,_0x3d0991=this['battleLayoutStyle']();switch(_0x3d0991){case'xp':case _0x2bde5e(0xaa2):break;case _0x2bde5e(0x387):case _0x2bde5e(0x5a8):case _0x2bde5e(0x735):default:return Window_StatusBase[_0x2bde5e(0x25b)][_0x2bde5e(0xae7)][_0x2bde5e(0x14e)](this,_0x19191c);break;}},VisuMZ['BattleCore'][_0x17f940(0x288)]=Window_BattleStatus['prototype']['drawItemImage'],Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x319)]=function(_0x2c9fe9){const _0x4bdef8=_0x17f940,_0x3a234b=this[_0x4bdef8(0x346)]();switch(_0x3a234b){case _0x4bdef8(0x5a8):this[_0x4bdef8(0x568)](_0x2c9fe9);break;case'xp':this[_0x4bdef8(0x6f9)](_0x2c9fe9);break;case'portrait':this[_0x4bdef8(0x169)](_0x2c9fe9);break;case'default':case'border':default:VisuMZ[_0x4bdef8(0x960)][_0x4bdef8(0x288)]['call'](this,_0x2c9fe9);break;}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x61e)]=function(_0x23df79){const _0x1e55b0=_0x17f940,_0x3ba382=this[_0x1e55b0(0x346)]();if(!$gameSystem[_0x1e55b0(0x4b8)]())this[_0x1e55b0(0x2e0)](_0x23df79);switch(_0x3ba382){case'list':this[_0x1e55b0(0x408)](_0x23df79);break;case'xp':case'portrait':case _0x1e55b0(0x387):case _0x1e55b0(0x735):default:this[_0x1e55b0(0x257)](_0x23df79);break;}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x827)]=function(){const _0x3c8dc8=_0x17f940,_0x256bc6=this[_0x3c8dc8(0x346)]();if(['xp'][_0x3c8dc8(0x72d)](_0x256bc6)&&!$gameSystem[_0x3c8dc8(0x4b8)]()){this[_0x3c8dc8(0xa5f)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x3c8dc8(0x25b)][_0x3c8dc8(0x827)][_0x3c8dc8(0x14e)](this);},Window_BattleStatus['prototype'][_0x17f940(0x2e0)]=function(_0x5460e2){const _0x3f462b=_0x17f940,_0x5be188=this[_0x3f462b(0x371)](_0x5460e2)[_0x3f462b(0x4a6)]();if(!_0x5be188)return;const _0x2d1ac9=this[_0x3f462b(0x346)](),_0x9b81d7=this[_0x3f462b(0x838)](_0x5460e2);let _0x3d7ec4=Math['round'](_0x9b81d7['x']+_0x9b81d7[_0x3f462b(0x67f)]/0x2)+this['padding'];[_0x3f462b(0x5a8)][_0x3f462b(0x72d)](_0x2d1ac9)&&(_0x3d7ec4=_0x9b81d7['width']/$gameParty[_0x3f462b(0x550)]()[_0x3f462b(0x702)],_0x3d7ec4*=_0x5460e2,_0x3d7ec4+=_0x9b81d7[_0x3f462b(0x67f)]/$gameParty['battleMembers']()[_0x3f462b(0x702)]/0x2);let _0x150000=Math[_0x3f462b(0x189)](this[_0x3f462b(0x722)](_0x5460e2,_0x5be188,_0x9b81d7));_0x5be188[_0x3f462b(0x924)](_0x3d7ec4,_0x150000),this[_0x3f462b(0x5bc)](_0x5be188,0x1),_0x5be188[_0x3f462b(0x376)]();},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x722)]=function(_0x470b88,_0x2504b2,_0x44f014){const _0x343748=_0x17f940,_0x20a199=VisuMZ[_0x343748(0x960)][_0x343748(0x32c)][_0x343748(0x334)],_0x3b8404=this['battleLayoutStyle']();if(_0x3b8404==='xp'){const _0x108497=_0x20a199[_0x343748(0x7c4)];switch(_0x108497['toLowerCase']()[_0x343748(0x224)]()){case _0x343748(0x8a8):return _0x44f014[_0x343748(0x87c)]-_0x2504b2['_shadowSprite'][_0x343748(0x87c)]/0x4;break;case _0x343748(0x936):const _0x30fb4e=_0x20a199[_0x343748(0xace)];return(_0x44f014[_0x343748(0x87c)]+(_0x2504b2[_0x343748(0x87c)]||_0x30fb4e))/0x2;break;case _0x343748(0x7a6):return 0x0;case _0x343748(0x8d0):default:return this['nameY'](_0x44f014);break;}}else{if(_0x3b8404==='portrait'){}}return _0x2504b2['height'];},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x568)]=function(_0x5b693e){const _0x3939be=_0x17f940;if(!VisuMZ[_0x3939be(0x960)][_0x3939be(0x32c)][_0x3939be(0x334)][_0x3939be(0xa34)])return;const _0xf4aaeb=this[_0x3939be(0x371)](_0x5b693e),_0x279244=this[_0x3939be(0x838)](_0x5b693e);_0x279244[_0x3939be(0x67f)]=ImageManager['faceWidth'],_0x279244['height']-=0x2,this[_0x3939be(0x92f)](_0xf4aaeb,_0x279244['x']+0x1,_0x279244['y']+0x1,_0x279244['width'],_0x279244['height']);},Window_BattleStatus['prototype']['drawItemStatusListStyle']=function(_0x204e3f){const _0x5bee3b=_0x17f940,_0xb55d5b=VisuMZ['BattleCore'][_0x5bee3b(0x32c)][_0x5bee3b(0x334)],_0x20d77c=$dataSystem[_0x5bee3b(0x31c)]?0x4:0x3,_0x95af5=_0x20d77c*0x80+(_0x20d77c-0x1)*0x8+0x4,_0x39ccb3=this['actor'](_0x204e3f),_0x3f38a9=this[_0x5bee3b(0x838)](_0x204e3f);let _0x82a93d=_0x3f38a9['x']+this[_0x5bee3b(0x219)];if(_0xb55d5b[_0x5bee3b(0xa34)]){if(_0x5bee3b(0x9b1)!==_0x5bee3b(0x9b1)){const _0x4cd5ff=_0x38d152[_0x5e1a1f[_0x5bee3b(0x1db)]],_0x480d09=_0x4cd5ff[_0x5bee3b(0x5a8)]['length']-0x2,_0x549571=_0x4cd5ff[_0x5bee3b(0x5a8)][_0x480d09];if(_0x549571[_0x5bee3b(0x616)]!==0xe6){const _0x23ecd2={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x49e713=_0x4cd5ff[_0x5bee3b(0x5a8)][_0x5bee3b(0x2bb)]();_0x4cd5ff[_0x5bee3b(0x5a8)][_0x5bee3b(0xabc)](_0x23ecd2),_0x4cd5ff[_0x5bee3b(0x5a8)][_0x5bee3b(0xabc)](_0x49e713);}}else _0x82a93d=_0x3f38a9['x']+ImageManager[_0x5bee3b(0x571)]+0x8;}else _0x82a93d+=ImageManager['iconWidth'];const _0x31041e=Math['round'](Math['min'](_0x3f38a9['x']+_0x3f38a9['width']-_0x95af5,_0x82a93d)),_0x378cbc=Math[_0x5bee3b(0x189)](_0x3f38a9['y']+(_0x3f38a9[_0x5bee3b(0x87c)]-Sprite_Name[_0x5bee3b(0x25b)][_0x5bee3b(0x81c)]())/0x2),_0x5a52be=Math[_0x5bee3b(0x189)](_0x31041e-ImageManager[_0x5bee3b(0x928)]/0x2-0x4),_0x1491e4=Math[_0x5bee3b(0x189)](_0x3f38a9['y']+(_0x3f38a9[_0x5bee3b(0x87c)]-ImageManager[_0x5bee3b(0x123)])/0x2+ImageManager[_0x5bee3b(0x123)]/0x2);let _0x2cedb9=_0x31041e+0x88;const _0x505db5=_0x378cbc;this[_0x5bee3b(0x462)](_0x39ccb3,_0x31041e-0x4+(_0xb55d5b['TpbGaugeOffsetX']||0x0),_0x378cbc+(_0xb55d5b['TpbGaugeOffsetY']||0x0)),this['placeActorName'](_0x39ccb3,_0x31041e+(_0xb55d5b[_0x5bee3b(0x476)]||0x0),_0x378cbc+(_0xb55d5b[_0x5bee3b(0x94c)]||0x0)),this[_0x5bee3b(0x628)](_0x39ccb3,_0x5a52be+(_0xb55d5b['StateIconOffsetX']||0x0),_0x1491e4+(_0xb55d5b[_0x5bee3b(0x674)]||0x0)),this[_0x5bee3b(0x891)](_0x39ccb3,'hp',_0x2cedb9+0x88*0x0+(_0xb55d5b['HpGaugeOffsetX']||0x0),_0x505db5+(_0xb55d5b[_0x5bee3b(0x640)]||0x0)),this[_0x5bee3b(0x891)](_0x39ccb3,'mp',_0x2cedb9+0x88*0x1+(_0xb55d5b[_0x5bee3b(0x8e9)]||0x0),_0x505db5+(_0xb55d5b['MpGaugeOffsetY']||0x0)),$dataSystem[_0x5bee3b(0x31c)]&&this[_0x5bee3b(0x891)](_0x39ccb3,'tp',_0x2cedb9+0x88*0x2+(_0xb55d5b[_0x5bee3b(0x4a3)]||0x0),_0x505db5+(_0xb55d5b[_0x5bee3b(0x436)]||0x0));},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x6f9)]=function(_0x1ed319){const _0x3f311d=_0x17f940;if(!$gameSystem[_0x3f311d(0x4b8)]())return;VisuMZ[_0x3f311d(0x960)][_0x3f311d(0x288)][_0x3f311d(0x14e)](this,_0x1ed319);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x257)]=function(_0x1a2208){const _0x43eba0=_0x17f940,_0x2d1af4=VisuMZ[_0x43eba0(0x960)]['Settings'][_0x43eba0(0x334)],_0x42c094=this[_0x43eba0(0x371)](_0x1a2208),_0x4f54d1=this[_0x43eba0(0x838)](_0x1a2208),_0x80c36e=Math['round'](_0x4f54d1['x']+(_0x4f54d1['width']-0x80)/0x2),_0xb4464f=this[_0x43eba0(0x70f)](_0x4f54d1);let _0x3600ea=_0x80c36e-ImageManager[_0x43eba0(0x928)]/0x2-0x4,_0x4aaa9f=_0xb4464f+ImageManager[_0x43eba0(0x123)]/0x2;_0x3600ea-ImageManager[_0x43eba0(0x928)]/0x2<_0x4f54d1['x']&&(_0x3600ea=_0x80c36e+ImageManager['iconWidth']/0x2-0x4,_0x4aaa9f=_0xb4464f-ImageManager[_0x43eba0(0x123)]/0x2);const _0x30a34c=_0x80c36e,_0x1c5b45=this[_0x43eba0(0x781)](_0x4f54d1);this['placeTimeGauge'](_0x42c094,_0x80c36e+(_0x2d1af4[_0x43eba0(0x8c1)]||0x0),_0xb4464f+(_0x2d1af4[_0x43eba0(0x994)]||0x0)),this[_0x43eba0(0xa74)](_0x42c094,_0x80c36e+(_0x2d1af4[_0x43eba0(0x476)]||0x0),_0xb4464f+(_0x2d1af4[_0x43eba0(0x94c)]||0x0)),this[_0x43eba0(0x628)](_0x42c094,_0x3600ea+(_0x2d1af4['StateIconOffsetX']||0x0),_0x4aaa9f+(_0x2d1af4[_0x43eba0(0x674)]||0x0)),this[_0x43eba0(0x891)](_0x42c094,'hp',_0x30a34c+(_0x2d1af4['HpGaugeOffsetX']||0x0),_0x1c5b45+(_0x2d1af4[_0x43eba0(0x640)]||0x0)),this[_0x43eba0(0x891)](_0x42c094,'mp',_0x30a34c+(_0x2d1af4['MpGaugeOffsetX']||0x0),_0x1c5b45+this[_0x43eba0(0x956)]()+(_0x2d1af4[_0x43eba0(0x5a2)]||0x0));if($dataSystem[_0x43eba0(0x31c)]){if(_0x43eba0(0x5d1)===_0x43eba0(0x355)){this[_0x43eba0(0x4b5)]=0x14,this[_0x43eba0(0x4db)][_0x43eba0(0x242)]=_0x66970a;_0x5e8835[_0x43eba0(0x712)]['isRightInputMode']()?(this['_borderPortraitSprite']['x']=0x0,this[_0x43eba0(0x46f)]=_0x2d479a['ceil'](_0x2398ce['width']/0x2)):(this[_0x43eba0(0x4db)]['x']=this[_0x43eba0(0x67f)],this[_0x43eba0(0x46f)]=this['width']*0x3/0x4);this[_0x43eba0(0x4db)][_0x43eba0(0xac4)]=0x0,this[_0x43eba0(0x4db)]['y']=this['y']+this['height'];const _0x582dbd=_0x1ca152[_0x43eba0(0x371)]();_0x582dbd&&(this['_borderPortraitTargetX']+=_0x582dbd[_0x43eba0(0xae6)](),this['_borderPortraitSprite']['y']+=_0x582dbd[_0x43eba0(0x630)]());}else this[_0x43eba0(0x891)](_0x42c094,'tp',_0x30a34c+(_0x2d1af4[_0x43eba0(0x4a3)]||0x0),_0x1c5b45+this[_0x43eba0(0x956)]()*0x2+(_0x2d1af4['TpGaugeOffsetY']||0x0));}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x332)]=function(_0x429ab0){const _0x4410bb=_0x17f940;if(!VisuMZ[_0x4410bb(0x960)][_0x4410bb(0x32c)][_0x4410bb(0x334)][_0x4410bb(0xa22)])return![];if(_0x429ab0['getBattlePortrait']())return!![];return Imported[_0x4410bb(0x7b0)]&&_0x429ab0['getMenuImage']();},Game_Actor[_0x17f940(0x25b)][_0x17f940(0xae6)]=function(){const _0x3528ca=_0x17f940;if(this[_0x3528ca(0x371)]()[_0x3528ca(0x981)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()['note'][_0x3528ca(0x413)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x17f940(0x25b)]['getBattlePortraitOffsetY']=function(){const _0x1329b1=_0x17f940;if(this[_0x1329b1(0x371)]()[_0x1329b1(0x981)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x1329b1(0x371)]()[_0x1329b1(0x981)][_0x1329b1(0x413)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x17f940(0x25b)]['drawItemImagePortraitStyle']=function(_0x478ca3){const _0xdc1724=_0x17f940,_0x480cac=this[_0xdc1724(0x371)](_0x478ca3);if(this[_0xdc1724(0x332)](_0x480cac)){const _0x22d954=_0xdc1724(0x875)[_0xdc1724(0x8a4)](_0x480cac['actorId']()),_0x51879b=this[_0xdc1724(0x5c9)](_0x22d954,Sprite),_0x136886=_0x480cac['getBattlePortraitFilename']();if(_0x136886!==''){if(_0xdc1724(0x15a)===_0xdc1724(0x21c)){if(!_0x4aba5c[_0xdc1724(0x2ac)]())return;const _0x53b57e=_0x5193e3[_0xdc1724(0x258)]();if(!_0x53b57e)return;_0x53b57e['setWaitMode'](_0xdc1724(0x3d4));}else _0x51879b[_0xdc1724(0x242)]=ImageManager[_0xdc1724(0x7e4)](_0x136886);}else _0x51879b[_0xdc1724(0x242)]=ImageManager['_emptyBitmap'];const _0x1e1665=this['itemRect'](_0x478ca3);_0x51879b[_0xdc1724(0x6ce)]['x']=0.5,_0x51879b[_0xdc1724(0x6ce)]['y']=0x1;let _0x31a96c=Math[_0xdc1724(0x189)](_0x1e1665['x']+_0x1e1665[_0xdc1724(0x67f)]/0x2)+this[_0xdc1724(0x219)];_0x31a96c+=_0x480cac[_0xdc1724(0xae6)]();let _0x28063d=Math[_0xdc1724(0x189)](this[_0xdc1724(0x87c)]);_0x28063d+=_0x480cac[_0xdc1724(0x630)](),_0x51879b[_0xdc1724(0x27c)](_0x31a96c,_0x28063d);const _0x5a51f8=VisuMZ[_0xdc1724(0x960)][_0xdc1724(0x32c)][_0xdc1724(0x334)][_0xdc1724(0x3b8)];_0x51879b[_0xdc1724(0x13a)]['x']=_0x5a51f8,_0x51879b[_0xdc1724(0x13a)]['y']=_0x5a51f8,_0x51879b[_0xdc1724(0x376)]();}else{const _0x46be2f=this['faceRect'](_0x478ca3);this['drawActorFace'](_0x480cac,_0x46be2f['x'],_0x46be2f['y'],_0x46be2f[_0xdc1724(0x67f)],_0x46be2f[_0xdc1724(0x87c)]);}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x5c9)]=function(_0x39b442,_0x31bb10){const _0x2bc3b8=_0x17f940,_0xb19bad=this[_0x2bc3b8(0x6a6)];if(_0xb19bad[_0x39b442]){if(_0x2bc3b8(0x82a)!=='gRfsV')return _0xb19bad[_0x39b442];else _0x347e2b[_0x2bc3b8(0x8d3)]=![];}else{const _0xcde70a=new _0x31bb10();return _0xb19bad[_0x39b442]=_0xcde70a,this[_0x2bc3b8(0x200)](_0xcde70a),this[_0x2bc3b8(0x200)](this['_cursorArea']),_0xcde70a;}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x35b)]=function(){const _0x3bd6bc=_0x17f940;this[_0x3bd6bc(0x41a)](),this['_createEffectsContainer'](),Window_StatusBase[_0x3bd6bc(0x25b)][_0x3bd6bc(0x35b)][_0x3bd6bc(0x14e)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x17f940(0x25b)]['_createCursorArea']=function(){const _0x3e2935=_0x17f940;this[_0x3e2935(0x577)]=new Sprite(),this[_0x3e2935(0x577)]['filters']=[new PIXI[(_0x3e2935(0x162))][(_0x3e2935(0x4df))]()],this['_cursorArea'][_0x3e2935(0x3be)]=new Rectangle(),this[_0x3e2935(0x577)]['move'](this['_padding'],this[_0x3e2935(0x3eb)]),this['addChild'](this['_cursorArea']);},Window_BattleStatus[_0x17f940(0x25b)]['_createEffectsContainer']=function(){const _0x33ccad=_0x17f940;this[_0x33ccad(0x246)]=new Sprite(),this[_0x33ccad(0x1cc)](this[_0x33ccad(0x246)]);},Window_BattleStatus[_0x17f940(0x25b)]['_createDamageContainer']=function(){const _0x584cc1=_0x17f940;this[_0x584cc1(0x1ce)]=new Sprite(),this[_0x584cc1(0x1cc)](this[_0x584cc1(0x1ce)]);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x4b3)]=function(){const _0x5f1eaa=_0x17f940;this[_0x5f1eaa(0x417)]=new Sprite();for(let _0x5e8e4c=0x0;_0x5e8e4c<0x9;_0x5e8e4c++){this['_cursorSprite'][_0x5f1eaa(0x1cc)](new Sprite());}this['_cursorArea']['addChild'](this['_cursorSprite']);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0xa79)]=function(){const _0x50e67c=_0x17f940;Window_StatusBase[_0x50e67c(0x25b)][_0x50e67c(0xa79)][_0x50e67c(0x14e)](this),this['_updateCursorArea']();},Window_BattleStatus['prototype'][_0x17f940(0x93e)]=function(){const _0x239aef=_0x17f940,_0xd37b77=this[_0x239aef(0x3eb)];this[_0x239aef(0x577)][_0x239aef(0x27c)](_0xd37b77,_0xd37b77),this[_0x239aef(0x577)]['x']=_0xd37b77-this['origin']['x'],this['_cursorArea']['y']=_0xd37b77-this[_0x239aef(0x29e)]['y'];if(this[_0x239aef(0x59e)]>0x0&&this[_0x239aef(0x45f)]>0x0){if(_0x239aef(0x588)!==_0x239aef(0xb09))this['_cursorArea'][_0x239aef(0x57d)]=this[_0x239aef(0x339)]();else return _0x1d254a['friendsUnit']()[_0x239aef(0x1b6)]();}else this[_0x239aef(0x577)][_0x239aef(0x57d)]=![];},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x4f8)]=function(){const _0x1585b6=_0x17f940;Window_StatusBase[_0x1585b6(0x25b)]['_updateFilterArea'][_0x1585b6(0x14e)](this),this[_0x1585b6(0x7f0)]();},Window_BattleStatus[_0x17f940(0x25b)]['_updateCursorFilterArea']=function(){const _0x4bb67b=_0x17f940,_0x3e2079=this['_cursorArea'][_0x4bb67b(0x5e6)][_0x4bb67b(0x475)](new Point(0x0,0x0)),_0x526221=this[_0x4bb67b(0x577)][_0x4bb67b(0x3be)];_0x526221['x']=_0x3e2079['x']+this[_0x4bb67b(0x29e)]['x'],_0x526221['y']=_0x3e2079['y']+this[_0x4bb67b(0x29e)]['y'],_0x526221[_0x4bb67b(0x67f)]=this[_0x4bb67b(0x59e)],_0x526221['height']=this['innerHeight'];},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x80a)]=function(_0x6db1a2){const _0xebdffb=_0x17f940;if(this['battleLayoutStyle']()!==_0xebdffb(0xaa2))return;this[_0xebdffb(0x169)](_0x6db1a2['index']());},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x13e)]=function(_0x5d4267,_0x5138c8){const _0x376aed=_0x17f940;if(!this[_0x376aed(0x1ce)])return;if(!_0x5d4267)return;if(!_0x5138c8)return;const _0x15d253=this[_0x376aed(0x838)](_0x5138c8['index']());_0x15d253['x']+=_0x15d253['width']/0x2+this['padding'],_0x5d4267['x']=_0x15d253['x'],_0x5d4267['y']=_0x15d253['y'],this['_damageContainer'][_0x376aed(0x1cc)](_0x5d4267);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x429)]=function(_0x221cb4){const _0x5a6fd4=_0x17f940;if(!this[_0x5a6fd4(0x1ce)])return;if(!_0x221cb4)return;this['_damageContainer'][_0x5a6fd4(0x783)](_0x221cb4);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x412)]=function(){const _0x2e54be=_0x17f940;if(!this[_0x2e54be(0xa9d)]())return;if(!this[_0x2e54be(0x4db)])this['createBorderStylePortraitSprite']();this['prepareBorderActor'](),this[_0x2e54be(0x8b1)]();},Window_BattleStatus['prototype'][_0x17f940(0xa9d)]=function(){const _0x143f05=_0x17f940;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x143f05(0x2ac)]())return![];return VisuMZ[_0x143f05(0x960)][_0x143f05(0x32c)][_0x143f05(0x334)][_0x143f05(0xb13)];},Window_BattleStatus['prototype'][_0x17f940(0x9f1)]=function(){const _0x4c0160=_0x17f940;this[_0x4c0160(0x4db)]=new Sprite();const _0xb380ad=SceneManager[_0x4c0160(0x712)],_0x4ff351=_0xb380ad[_0x4c0160(0x188)][_0x4c0160(0x74c)](_0xb380ad[_0x4c0160(0x398)]);_0xb380ad[_0x4c0160(0x5bc)](this[_0x4c0160(0x4db)],_0x4ff351),this[_0x4c0160(0x4db)][_0x4c0160(0x6ce)]['x']=0.5,this[_0x4c0160(0x4db)]['anchor']['y']=0x1;const _0x1f6ae4=VisuMZ[_0x4c0160(0x960)][_0x4c0160(0x32c)][_0x4c0160(0x334)][_0x4c0160(0x6ea)];this['_borderPortraitSprite']['scale']['x']=_0x1f6ae4,this[_0x4c0160(0x4db)]['scale']['y']=_0x1f6ae4,this['_borderPortraitSprite']['y']=this['y']+this['height'],this[_0x4c0160(0x4b5)]=0x0;},Window_BattleStatus['prototype'][_0x17f940(0xadf)]=function(){const _0x3cb5cb=_0x17f940;this[_0x3cb5cb(0x4db)][_0x3cb5cb(0x57d)]=BattleManager[_0x3cb5cb(0x17d)]();const _0x406c0b=BattleManager[_0x3cb5cb(0x371)]();if(_0x406c0b===this[_0x3cb5cb(0x4db)]['actor'])return;this[_0x3cb5cb(0x4db)]['actor']=_0x406c0b||this[_0x3cb5cb(0x4db)][_0x3cb5cb(0x371)];if(!_0x406c0b)return;else{if(_0x406c0b[_0x3cb5cb(0x422)]()===''){this[_0x3cb5cb(0x4db)][_0x3cb5cb(0x242)]=ImageManager['_emptyBitmap'];return;}else{const _0x4c9514=ImageManager[_0x3cb5cb(0x7e4)](_0x406c0b[_0x3cb5cb(0x422)]());_0x4c9514[_0x3cb5cb(0x961)](this[_0x3cb5cb(0xa1e)][_0x3cb5cb(0x539)](this,_0x4c9514));}}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0xa1e)]=function(_0x2cbd3a){const _0x379d53=_0x17f940;this['_borderPortraitDuration']=0x14,this[_0x379d53(0x4db)][_0x379d53(0x242)]=_0x2cbd3a;SceneManager[_0x379d53(0x712)][_0x379d53(0x140)]()?(this['_borderPortraitSprite']['x']=0x0,this[_0x379d53(0x46f)]=Math[_0x379d53(0x65e)](_0x2cbd3a[_0x379d53(0x67f)]/0x2)):(this[_0x379d53(0x4db)]['x']=this[_0x379d53(0x67f)],this['_borderPortraitTargetX']=this[_0x379d53(0x67f)]*0x3/0x4);this[_0x379d53(0x4db)]['opacity']=0x0,this['_borderPortraitSprite']['y']=this['y']+this['height'];const _0x4b0760=BattleManager['actor']();_0x4b0760&&(_0x379d53(0x19a)===_0x379d53(0x5b2)?_0x3dca76=_0x47f5ac:(this[_0x379d53(0x46f)]+=_0x4b0760[_0x379d53(0xae6)](),this[_0x379d53(0x4db)]['y']+=_0x4b0760[_0x379d53(0x630)]()));},Window_BattleStatus['prototype'][_0x17f940(0x8b1)]=function(){const _0x1421f3=_0x17f940;if(this[_0x1421f3(0x4b5)]>0x0){const _0x12b510=this['_borderPortraitDuration'],_0x533437=this['_borderPortraitSprite'];_0x533437['x']=(_0x533437['x']*(_0x12b510-0x1)+this['_borderPortraitTargetX'])/_0x12b510,_0x533437[_0x1421f3(0xac4)]=(_0x533437[_0x1421f3(0xac4)]*(_0x12b510-0x1)+0xff)/_0x12b510,this[_0x1421f3(0x4b5)]--;}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x278)]=function(){const _0x4835ac=_0x17f940;return;this[_0x4835ac(0x246)]&&(this['_effectsContainer']['x']=this['x'],this[_0x4835ac(0x246)]['y']=this['y']),this[_0x4835ac(0x1ce)]&&(this[_0x4835ac(0x1ce)]['x']=this['x'],this[_0x4835ac(0x1ce)]['y']=this['y']);},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0x311)]=function(){const _0x4f3eee=_0x17f940,_0x38d370=VisuMZ[_0x4f3eee(0x960)]['Settings'][_0x4f3eee(0x334)];if(_0x38d370[_0x4f3eee(0x42b)]){const _0x2e6fc8=new Sprite();_0x2e6fc8['bitmap']=ImageManager[_0x4f3eee(0x7e9)](_0x38d370[_0x4f3eee(0x42b)]),_0x2e6fc8['x']=_0x38d370[_0x4f3eee(0x4de)]||0x0,_0x2e6fc8['y']=_0x38d370[_0x4f3eee(0x43a)]||0x0,this[_0x4f3eee(0x200)](_0x2e6fc8),this[_0x4f3eee(0xae5)]=_0x2e6fc8;}if(_0x38d370[_0x4f3eee(0xa0e)]){const _0x3fc20f=new Sprite();_0x3fc20f[_0x4f3eee(0x242)]=ImageManager[_0x4f3eee(0x7e9)](_0x38d370[_0x4f3eee(0xa0e)]),_0x3fc20f['x']=_0x38d370[_0x4f3eee(0x25d)]||0x0,_0x3fc20f['y']=_0x38d370['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x4f3eee(0x1cc)](_0x3fc20f),this[_0x4f3eee(0x89c)]=_0x3fc20f;}},Window_BattleStatus[_0x17f940(0x25b)][_0x17f940(0xa57)]=function(){const _0x27e21f=_0x17f940;this[_0x27e21f(0x89c)]&&this[_0x27e21f(0x1cc)](this['_frontAttachmentSprite']);},Window_BattleActor[_0x17f940(0x25b)][_0x17f940(0x635)]=function(){const _0x282119=_0x17f940;return Window_BattleStatus[_0x282119(0x25b)][_0x282119(0x635)][_0x282119(0x14e)](this)&&this['isActionSelectionValid']();},Window_BattleActor['prototype']['isActionSelectionValid']=function(){const _0x249504=_0x17f940,_0x320e89=BattleManager[_0x249504(0x7c1)](),_0xa61fca=this['actor'](this[_0x249504(0x98e)]());if(!_0x320e89)return!![];if(!_0x320e89['item']())return!![];const _0x45f810=_0x320e89[_0x249504(0x32b)]()[_0x249504(0x981)];if(_0x45f810[_0x249504(0x413)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0xa61fca===BattleManager[_0x249504(0x371)]())return![];}return!![];},VisuMZ[_0x17f940(0x960)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x17f940(0x25b)][_0x17f940(0x96b)],Window_BattleEnemy['prototype'][_0x17f940(0x96b)]=function(_0x261a8c){const _0x5ec0d2=_0x17f940;this[_0x5ec0d2(0x710)]=null,VisuMZ[_0x5ec0d2(0x960)][_0x5ec0d2(0x579)][_0x5ec0d2(0x14e)](this,_0x261a8c);},Window_BattleEnemy[_0x17f940(0x25b)][_0x17f940(0x4dc)]=function(){const _0x3c3cb4=_0x17f940;return this[_0x3c3cb4(0x4e3)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x66e)]=Window_BattleEnemy[_0x17f940(0x25b)][_0x17f940(0x376)],Window_BattleEnemy[_0x17f940(0x25b)]['show']=function(){const _0x1530af=_0x17f940;VisuMZ['BattleCore'][_0x1530af(0x66e)][_0x1530af(0x14e)](this),this['y']=Graphics[_0x1530af(0x87c)]*0xa;},Window_BattleEnemy['prototype']['validTargets']=function(){const _0x1385d0=_0x17f940;return $gameTroop[_0x1385d0(0x6f6)]()[_0x1385d0(0x10b)](0x0);},Window_BattleEnemy[_0x17f940(0x25b)][_0x17f940(0xaae)]=function(){const _0x532b6c=_0x17f940;this[_0x532b6c(0x50b)]=this[_0x532b6c(0x7de)](),this[_0x532b6c(0x531)](),Window_Selectable['prototype']['refresh'][_0x532b6c(0x14e)](this);},Window_BattleEnemy['prototype'][_0x17f940(0x531)]=function(){const _0x4357cd=_0x17f940;this[_0x4357cd(0x50b)]['sort']((_0x4534d2,_0x10b550)=>{const _0x15a99c=_0x4357cd;return _0x4534d2['battler']()[_0x15a99c(0x521)]===_0x10b550['battler']()[_0x15a99c(0x521)]?_0x4534d2[_0x15a99c(0x4a6)]()[_0x15a99c(0x626)]-_0x10b550[_0x15a99c(0x4a6)]()['_baseY']:_0x4534d2[_0x15a99c(0x4a6)]()[_0x15a99c(0x521)]-_0x10b550[_0x15a99c(0x4a6)]()['_baseX'];});if(SceneManager[_0x4357cd(0x3ed)]()){if(_0x4357cd(0x437)===_0x4357cd(0x437))this[_0x4357cd(0x50b)][_0x4357cd(0x492)]();else{this[_0x4357cd(0x65d)]=_0x5b14af[_0x4357cd(0x93f)]['dead'];return;}}},Window_BattleEnemy['prototype']['autoSelect']=function(){const _0x184972=_0x17f940,_0x298ded=VisuMZ['BattleCore'][_0x184972(0x32c)][_0x184972(0x99a)];_0x298ded['LastSelected']?this[_0x184972(0x268)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x17f940(0x25b)][_0x17f940(0x268)]=function(){const _0x20fcd6=_0x17f940;if(this['_lastEnemy']&&this[_0x20fcd6(0x50b)][_0x20fcd6(0x72d)](this[_0x20fcd6(0x710)])){if(_0x20fcd6(0x597)!==_0x20fcd6(0x597)){if(this[_0x20fcd6(0x7f7)][_0x20fcd6(0x702)]>0x0){const _0x1b017e=this[_0x20fcd6(0x7f7)]['shift'](),_0x84cc7e=_0x1b017e[0x0];return _0x84cc7e[_0x20fcd6(0x39b)]=_0x84cc7e[_0x20fcd6(0x39b)]||[],_0x84cc7e['_actions'][0x0]=_0x1b017e[0x1],_0x84cc7e;}else return this[_0x20fcd6(0xa53)][_0x20fcd6(0x4d1)]();}else{const _0xa31bf8=this['_enemies'][_0x20fcd6(0x74c)](this['_lastEnemy']);this[_0x20fcd6(0x22a)](_0xa31bf8);}}else _0x20fcd6(0x61b)==='mmjKT'?this[_0x20fcd6(0x2c5)]():(this[_0x20fcd6(0x246)]['x']=this['x'],this[_0x20fcd6(0x246)]['y']=this['y']);},Window_BattleEnemy[_0x17f940(0x25b)][_0x17f940(0x2c5)]=function(){const _0x5a5a82=_0x17f940,_0x1bcf60=VisuMZ[_0x5a5a82(0x960)]['Settings'][_0x5a5a82(0x99a)];let _0x5317d1=![];$gameSystem[_0x5a5a82(0x4b8)]()?_0x5317d1=_0x1bcf60[_0x5a5a82(0x8ee)]:_0x5317d1=_0x1bcf60[_0x5a5a82(0x490)],this[_0x5a5a82(0x22a)](_0x5317d1?this[_0x5a5a82(0x4e3)]()-0x1:0x0);},Window_BattleEnemy[_0x17f940(0x25b)][_0x17f940(0x6f1)]=function(){const _0x55259a=_0x17f940;Window_Selectable[_0x55259a(0x25b)][_0x55259a(0x6f1)]['call'](this),this[_0x55259a(0x710)]=this[_0x55259a(0x1c2)]();},Window_BattleItem[_0x17f940(0x25b)]['includes']=function(_0x125133){const _0x1ae881=_0x17f940;if(!_0x125133)return![];return _0x125133['occasion']===0x0||_0x125133[_0x1ae881(0x34b)]===0x1;};function Window_AutoBattleCancel(){const _0x42235b=_0x17f940;this[_0x42235b(0x96b)](...arguments);}Window_AutoBattleCancel[_0x17f940(0x25b)]=Object[_0x17f940(0x3d9)](Window_Base[_0x17f940(0x25b)]),Window_AutoBattleCancel['prototype'][_0x17f940(0x27b)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x17f940(0x25b)]['initialize']=function(_0x3fdc42){const _0x3c34f6=_0x17f940;Window_Base['prototype']['initialize']['call'](this,_0x3fdc42),this['setBackgroundType'](this[_0x3c34f6(0x55c)]()),this[_0x3c34f6(0xaae)]();},Window_AutoBattleCancel[_0x17f940(0x25b)][_0x17f940(0x55c)]=function(){const _0x45f128=_0x17f940;return VisuMZ[_0x45f128(0x960)][_0x45f128(0x32c)]['AutoBattle'][_0x45f128(0x742)];},Window_AutoBattleCancel[_0x17f940(0x25b)][_0x17f940(0xaae)]=function(){const _0x3b76f7=_0x17f940;this[_0x3b76f7(0x8af)][_0x3b76f7(0x84a)]();const _0x3d5fd1=VisuMZ[_0x3b76f7(0x960)][_0x3b76f7(0x32c)][_0x3b76f7(0x5c5)]['AutoBattleMsg'],_0x21e40b=_0x3d5fd1['format'](this['okButtonText'](),this[_0x3b76f7(0x7ee)]()),_0x700f8d=this[_0x3b76f7(0x799)](_0x21e40b)[_0x3b76f7(0x67f)],_0x14747b=Math[_0x3b76f7(0x143)]((this['innerWidth']-_0x700f8d)/0x2);this[_0x3b76f7(0x780)](_0x21e40b,_0x14747b,0x0,_0x700f8d);},Window_AutoBattleCancel['prototype'][_0x17f940(0x467)]=function(){const _0x3b2c03=_0x17f940;if(Imported['VisuMZ_0_CoreEngine']){if(_0x3b2c03(0x56b)!==_0x3b2c03(0x580))return TextManager['getInputButtonString']('ok');else{const _0x15f60d=_0x25b03a[_0x3b2c03(0x74c)](_0x21c5d2[_0x3b2c03(0x9cb)]()[_0x3b2c03(0x224)]());_0x15f60d>=0x0&&_0x15f60d<=0x7&&_0x5d3217[_0x3b2c03(0x448)](_0x15f60d)&&_0x48f7ed[_0x3b2c03(0x832)](_0x15f60d);}}else{if(_0x3b2c03(0x3da)===_0x3b2c03(0x3da))return VisuMZ[_0x3b2c03(0x960)]['Settings'][_0x3b2c03(0x5c5)][_0x3b2c03(0xaa1)];else{const _0xffee94=this[_0x3b2c03(0x16e)](),_0x5ea03b=_0xffee94[0x0]?_0xffee94[0x0][_0x3b2c03(0x555)]:0x0,_0x14c74a=_0x38125b[_0x3b2c03(0x7eb)][_0x5ea03b];_0x14c74a&&this['startWeaponAnimation'](_0x14c74a['weaponImageId']);}}},Window_AutoBattleCancel[_0x17f940(0x25b)][_0x17f940(0x7ee)]=function(){const _0x1f3354=_0x17f940;if(Imported[_0x1f3354(0xa8c)]){if('EQTqz'!==_0x1f3354(0xa5e))_0x51992d[_0x1f3354(0x54c)]([this],_0x5db726);else return TextManager['getInputButtonString']('cancel');}else{if(_0x1f3354(0x90a)!==_0x1f3354(0x90a))_0x1e4822['BattleCore'][_0x1f3354(0x1bf)][_0x1f3354(0x14e)](this),this[_0x1f3354(0x996)](),this[_0x1f3354(0x803)]();else return VisuMZ[_0x1f3354(0x960)][_0x1f3354(0x32c)][_0x1f3354(0x5c5)]['AutoBattleCancel'];}},Window_AutoBattleCancel['prototype'][_0x17f940(0x106)]=function(){const _0x574ca2=_0x17f940;Window_Base[_0x574ca2(0x25b)][_0x574ca2(0x106)]['call'](this),this['updateVisibility'](),this[_0x574ca2(0x968)]();},Window_AutoBattleCancel['prototype']['updateVisibility']=function(){const _0x5119f2=_0x17f940;this[_0x5119f2(0x57d)]=BattleManager[_0x5119f2(0x8da)];},Window_AutoBattleCancel['prototype'][_0x17f940(0x968)]=function(){const _0x35a372=_0x17f940;if(!BattleManager[_0x35a372(0x8da)])return;(Input[_0x35a372(0x1f4)]('ok')||Input[_0x35a372(0x1f4)]('cancel')||TouchInput[_0x35a372(0x547)]()||TouchInput['isCancelled']())&&(_0x35a372(0x4ea)!=='CdMdo'?_0x359f1f['performCollapse']():(SoundManager[_0x35a372(0x3f7)](),BattleManager[_0x35a372(0x8da)]=![],Input[_0x35a372(0x84a)](),TouchInput[_0x35a372(0x84a)]()));};function Window_EnemyName(){const _0x1cb3ac=_0x17f940;this[_0x1cb3ac(0x96b)](...arguments);}Window_EnemyName[_0x17f940(0x25b)]=Object[_0x17f940(0x3d9)](Window_StatusBase['prototype']),Window_EnemyName[_0x17f940(0x25b)][_0x17f940(0x27b)]=Window_EnemyName,Window_EnemyName[_0x17f940(0x25b)][_0x17f940(0x96b)]=function(_0x1c0563){const _0x54e13f=_0x17f940;this[_0x54e13f(0x261)]=_0x1c0563,this[_0x54e13f(0x5a9)]='';const _0x2eeff7=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x54e13f(0x487)]()*0x4);Window_StatusBase[_0x54e13f(0x25b)]['initialize'][_0x54e13f(0x14e)](this,_0x2eeff7),this['setBackgroundType'](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x17f940(0x25b)][_0x17f940(0x78c)]=function(){this['padding']=0x0;},Window_EnemyName[_0x17f940(0x25b)][_0x17f940(0x1c2)]=function(){return $gameTroop['members']()[this['_enemyID']];},Window_EnemyName[_0x17f940(0x25b)]['update']=function(){const _0x3e7ff6=_0x17f940;Window_StatusBase[_0x3e7ff6(0x25b)][_0x3e7ff6(0x106)][_0x3e7ff6(0x14e)](this),this[_0x3e7ff6(0x1c2)]()&&this[_0x3e7ff6(0x1c2)]()[_0x3e7ff6(0x8d0)]()!==this[_0x3e7ff6(0x5a9)]&&(this[_0x3e7ff6(0x5a9)]=this[_0x3e7ff6(0x1c2)]()['name'](),this[_0x3e7ff6(0xaae)]()),this[_0x3e7ff6(0x86a)](),this[_0x3e7ff6(0x373)]();},Window_EnemyName['prototype'][_0x17f940(0x86a)]=function(){const _0x345c47=_0x17f940;if(!this['enemy']()){if(this[_0x345c47(0x4f3)]>0x0)this[_0x345c47(0x4f3)]-=0x10;}else{if(this[_0x345c47(0x1c2)]()[_0x345c47(0x9bf)]()){if(this[_0x345c47(0x4f3)]>0x0)this[_0x345c47(0x4f3)]-=0x10;}else{if(SceneManager[_0x345c47(0x712)][_0x345c47(0xa09)]&&SceneManager[_0x345c47(0x712)][_0x345c47(0xa09)]['active']&&SceneManager['_scene']['_enemyWindow'][_0x345c47(0x50b)][_0x345c47(0x72d)](this[_0x345c47(0x1c2)]())){if(this['contentsOpacity']<0xff)this[_0x345c47(0x4f3)]+=0x10;}else this[_0x345c47(0x4f3)]>0x0&&(_0x345c47(0x817)!==_0x345c47(0xa5c)?this['contentsOpacity']-=0x10:this[_0x345c47(0x32a)]['svShadow']=![]);}}},Window_EnemyName[_0x17f940(0x25b)][_0x17f940(0x373)]=function(){const _0x41019d=_0x17f940;if(!this[_0x41019d(0x1c2)]())return;if(SceneManager[_0x41019d(0x3ed)]())_0x41019d(0x199)!=='hMQxr'?this['x']=Graphics[_0x41019d(0xac3)]-this[_0x41019d(0x1c2)]()[_0x41019d(0x4a6)]()[_0x41019d(0x521)]:this[_0x41019d(0x4d3)]=!![];else{if(_0x41019d(0x9c0)===_0x41019d(0x3d6))return _0x190d59['_forcedBattleLayout'];else this['x']=this['enemy']()[_0x41019d(0x4a6)]()[_0x41019d(0x521)];}this['x']-=Math[_0x41019d(0x189)](this['width']/0x2),this['y']=this['enemy']()['battler']()[_0x41019d(0x626)]-Math[_0x41019d(0x189)](this[_0x41019d(0x487)]()*1.5);const _0x281bf2=VisuMZ[_0x41019d(0x960)]['Settings'][_0x41019d(0x99a)];this['x']+=_0x281bf2[_0x41019d(0x476)]||0x0,this['y']+=_0x281bf2[_0x41019d(0x94c)]||0x0;},Window_EnemyName[_0x17f940(0x25b)][_0x17f940(0x559)]=function(){const _0x2d4a7b=_0x17f940;Window_Base[_0x2d4a7b(0x25b)]['resetFontSettings']['call'](this),this['contents'][_0x2d4a7b(0x931)]=VisuMZ[_0x2d4a7b(0x960)]['Settings'][_0x2d4a7b(0x99a)][_0x2d4a7b(0xa86)];},Window_EnemyName[_0x17f940(0x25b)][_0x17f940(0xaae)]=function(){const _0x4b3c66=_0x17f940;Window_StatusBase[_0x4b3c66(0x25b)][_0x4b3c66(0xaae)][_0x4b3c66(0x14e)](this),this[_0x4b3c66(0x8af)]['clear']();if(!this[_0x4b3c66(0x1c2)]())return;this['drawEnemyName']();},Window_EnemyName[_0x17f940(0x25b)]['drawEnemyName']=function(){const _0x52dfee=_0x17f940;this[_0x52dfee(0x5a9)]=this[_0x52dfee(0x1c2)]()[_0x52dfee(0x8d0)]();const _0x4a392d=this[_0x52dfee(0x799)](this[_0x52dfee(0x5a9)])['width'],_0x25275d=Math[_0x52dfee(0x189)]((this[_0x52dfee(0x59e)]-_0x4a392d)/0x2);this[_0x52dfee(0x780)](this[_0x52dfee(0x5a9)],_0x25275d,0x0,_0x4a392d+0x8);},Window_BattleLog['prototype'][_0x17f940(0x66a)]=function(){const _0x90cb6c=_0x17f940;return VisuMZ[_0x90cb6c(0x960)][_0x90cb6c(0x32c)][_0x90cb6c(0x5df)][_0x90cb6c(0x7b2)];},Window_BattleLog['prototype'][_0x17f940(0x8d4)]=function(){const _0x5c4b42=_0x17f940;return VisuMZ[_0x5c4b42(0x960)]['Settings'][_0x5c4b42(0x5df)][_0x5c4b42(0x5ca)];},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x8ca)]=function(){const _0x584d7f=_0x17f940;return VisuMZ[_0x584d7f(0x960)][_0x584d7f(0x32c)][_0x584d7f(0x5df)]['BackColor'];},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x93d)]=function(){return![];},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x12a)]=function(_0x3f6817,_0x124b0f){const _0x23d25a=_0x17f940;this['unshift'](_0x23d25a(0x56f)),BattleManager[_0x23d25a(0x957)](_0x3f6817,_0x124b0f),this[_0x23d25a(0x245)]();},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x56f)]=function(){const _0x2362d7=_0x17f940;this[_0x2362d7(0x245)]();},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x5e8)]=function(_0x5bae1a){const _0x2506a3=_0x17f940,_0x2aa6c5=Array[_0x2506a3(0x25b)]['slice'][_0x2506a3(0x14e)](arguments,0x1),_0x2d1df7={'name':_0x5bae1a,'params':_0x2aa6c5},_0xddf17=this[_0x2506a3(0x6c5)][_0x2506a3(0x296)](_0x528a74=>_0x528a74[_0x2506a3(0x8d0)])[_0x2506a3(0x74c)](_0x2506a3(0x56f));_0xddf17>=0x0?_0x2506a3(0x39a)!==_0x2506a3(0x39a)?(_0x49fd86=_0x2a97c2(_0x18240c['$1']),_0xf5b9ed--):this[_0x2506a3(0x6c5)][_0x2506a3(0x104)](_0xddf17,0x0,_0x2d1df7):_0x2506a3(0x51f)===_0x2506a3(0x6b3)?(this['tpbCommandFight'](),this[_0x2506a3(0x19d)]()):this[_0x2506a3(0x6c5)][_0x2506a3(0x5e8)](_0x2d1df7);},Window_BattleLog[_0x17f940(0x25b)]['unshift']=function(_0x321062){const _0x1b8c65=_0x17f940,_0x5cf146=Array[_0x1b8c65(0x25b)]['slice']['call'](arguments,0x1);this[_0x1b8c65(0x6c5)][_0x1b8c65(0xabc)]({'name':_0x321062,'params':_0x5cf146});},Window_BattleLog[_0x17f940(0x25b)]['logActionList']=function(){const _0x1373b5=_0x17f940;if(!$gameTemp[_0x1373b5(0x9fa)]())return;console[_0x1373b5(0x4bf)](this[_0x1373b5(0x6c5)][_0x1373b5(0x296)](_0x2f58e3=>_0x2f58e3['name'])[_0x1373b5(0x248)]('\x0a'));},VisuMZ[_0x17f940(0x960)][_0x17f940(0xab2)]=Window_BattleLog['prototype'][_0x17f940(0xaae)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0xaae)]=function(){this['_requestRefresh']=!![];},VisuMZ['BattleCore'][_0x17f940(0x830)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x106)],Window_BattleLog[_0x17f940(0x25b)]['update']=function(){const _0x4cbac7=_0x17f940;VisuMZ[_0x4cbac7(0x960)][_0x4cbac7(0x830)]['call'](this);if(this['_requestRefresh'])this['processRefresh']();},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x892)]=function(){const _0x3255fd=_0x17f940;this['_requestRefresh']=![],VisuMZ['BattleCore'][_0x3255fd(0xab2)][_0x3255fd(0x14e)](this);},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x990)]=function(_0x3a6451){const _0x542fb2=_0x17f940;let _0xffb27=VisuMZ[_0x542fb2(0x960)][_0x542fb2(0x32c)][_0x542fb2(0x5df)][_0x542fb2(0x939)][_0x542fb2(0x8cf)]()[_0x542fb2(0x224)](),_0x1eba4a=this['_lines'][_0x3a6451];if(_0x1eba4a[_0x542fb2(0x413)](/<LEFT>/i))_0xffb27=_0x542fb2(0x604);else{if(_0x1eba4a['match'](/<CENTER>/i))'tTbcH'===_0x542fb2(0x16a)?_0x58d6e1['addDebuff'](_0x37127b,_0x589ec1):_0xffb27=_0x542fb2(0x936);else _0x1eba4a[_0x542fb2(0x413)](/<RIGHT>/i)&&(_0xffb27=_0x542fb2(0x64f));}_0x1eba4a=_0x1eba4a['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1eba4a=_0x1eba4a['replace'](/\\I\[0\]/gi,'');const _0xbf412b=this[_0x542fb2(0x424)](_0x3a6451);this[_0x542fb2(0x8af)][_0x542fb2(0x21e)](_0xbf412b['x'],_0xbf412b['y'],_0xbf412b['width'],_0xbf412b['height']);const _0x4b7a5c=this['textSizeEx'](_0x1eba4a)[_0x542fb2(0x67f)];let _0x52a0ec=_0xbf412b['x'];if(_0xffb27==='center')_0x52a0ec+=(_0xbf412b[_0x542fb2(0x67f)]-_0x4b7a5c)/0x2;else _0xffb27==='right'&&(_0x542fb2(0xa65)!==_0x542fb2(0xa65)?this['_forcedBattleLayout']=_0x542fb2(0x5a8):_0x52a0ec+=_0xbf412b[_0x542fb2(0x67f)]-_0x4b7a5c);this[_0x542fb2(0x780)](_0x1eba4a,_0x52a0ec,_0xbf412b['y'],_0x4b7a5c+0x8);},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0xa81)]=function(_0x13bf6e){const _0x2a0071=_0x17f940;this[_0x2a0071(0xb0b)][_0x2a0071(0x5e8)](_0x13bf6e),this[_0x2a0071(0xaae)](),this[_0x2a0071(0x245)]();},Window_BattleLog['prototype'][_0x17f940(0x15c)]=function(){const _0x19f866=_0x17f940;let _0x493e7b=![];switch(this[_0x19f866(0x945)]){case _0x19f866(0x75c):_0x493e7b=this[_0x19f866(0x4ab)][_0x19f866(0x2f8)]();break;case _0x19f866(0x285):_0x493e7b=this[_0x19f866(0x4ab)][_0x19f866(0xa94)]();break;case _0x19f866(0xb1e):_0x493e7b=this[_0x19f866(0x4ab)]['isAnimationPlaying']();break;case _0x19f866(0x4f2):_0x493e7b=this[_0x19f866(0x4ab)][_0x19f866(0x7dd)]();break;case _0x19f866(0x30f):_0x493e7b=this[_0x19f866(0x4ab)][_0x19f866(0x29d)]();break;case'opacity':_0x493e7b=this[_0x19f866(0x4ab)][_0x19f866(0xa28)]();break;}return!_0x493e7b&&(this['_waitMode']=''),_0x493e7b;},Window_BattleLog['prototype']['waitForAnimation']=function(){const _0x546eac=_0x17f940;this[_0x546eac(0x6a1)](_0x546eac(0xb1e));},Window_BattleLog['prototype'][_0x17f940(0x313)]=function(){const _0x290447=_0x17f940;this[_0x290447(0x6a1)](_0x290447(0x4f2));},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x286)]=function(){const _0x1aea3c=_0x17f940;this['setWaitMode'](_0x1aea3c(0x30f));},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x193)]=function(){const _0x4e4f85=_0x17f940;this[_0x4e4f85(0x6a1)]('opacity');},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x840)]=function(){const _0x34b1ae=_0x17f940,_0x3da26b=VisuMZ[_0x34b1ae(0x960)]['Settings'][_0x34b1ae(0x5df)];if(!_0x3da26b[_0x34b1ae(0x3af)])return;this[_0x34b1ae(0x5e8)](_0x34b1ae(0xa81),_0x3da26b[_0x34b1ae(0x2cc)][_0x34b1ae(0x8a4)]($gameTroop['turnCount']())),this[_0x34b1ae(0x5e8)](_0x34b1ae(0x85b),_0x3da26b[_0x34b1ae(0x44e)]),this[_0x34b1ae(0x5e8)]('clear');},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x778)]=function(_0x2f107d,_0x359039,_0x2c2277){const _0x11142f=_0x17f940;this[_0x11142f(0x3b0)](_0x359039)?BattleManager[_0x11142f(0x4d7)]():_0x11142f(0x787)!==_0x11142f(0x787)?this['_methods'][_0x11142f(0x104)](_0x437431,0x0,_0x889e51):this[_0x11142f(0x47e)](_0x2f107d,_0x359039,_0x2c2277);},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x3b0)]=function(_0x44ec4e){const _0x4687aa=_0x17f940;if(!SceneManager[_0x4687aa(0x2ac)]())return![];if(!_0x44ec4e)return![];if(!_0x44ec4e[_0x4687aa(0x32b)]())return![];if(_0x44ec4e['item']()[_0x4687aa(0x981)][_0x4687aa(0x413)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x44ec4e['item']())){if('DBFeF'===_0x4687aa(0x3b2))return!![];else{const _0x553650=_0x56a3c1[_0x4687aa(0x960)][_0x4687aa(0x32c)][_0x4687aa(0x334)],_0x45324a=_0xe1583a[_0x4687aa(0x31c)]?0x4:0x3,_0x556904=_0x45324a*0x80+(_0x45324a-0x1)*0x8+0x4,_0xf21828=this['actor'](_0x246ee5),_0x4f204f=this[_0x4687aa(0x838)](_0x2ebc96);let _0x5b8267=_0x4f204f['x']+this[_0x4687aa(0x219)];_0x553650[_0x4687aa(0xa34)]?_0x5b8267=_0x4f204f['x']+_0x1aad5d[_0x4687aa(0x571)]+0x8:_0x5b8267+=_0x5d65ac[_0x4687aa(0x928)];const _0x3b72c5=_0x57e64f['round'](_0x283b31[_0x4687aa(0x1c9)](_0x4f204f['x']+_0x4f204f[_0x4687aa(0x67f)]-_0x556904,_0x5b8267)),_0x9506cd=_0x2f36b5['round'](_0x4f204f['y']+(_0x4f204f['height']-_0x43526b[_0x4687aa(0x25b)][_0x4687aa(0x81c)]())/0x2),_0x14a3d7=_0x191551[_0x4687aa(0x189)](_0x3b72c5-_0x1fb315[_0x4687aa(0x928)]/0x2-0x4),_0x30d342=_0x46be1e[_0x4687aa(0x189)](_0x4f204f['y']+(_0x4f204f[_0x4687aa(0x87c)]-_0x2e356b[_0x4687aa(0x123)])/0x2+_0x19b2cf[_0x4687aa(0x123)]/0x2);let _0xd503c8=_0x3b72c5+0x88;const _0x9c0e45=_0x9506cd;this[_0x4687aa(0x462)](_0xf21828,_0x3b72c5-0x4+(_0x553650['TpbGaugeOffsetX']||0x0),_0x9506cd+(_0x553650[_0x4687aa(0x994)]||0x0)),this[_0x4687aa(0xa74)](_0xf21828,_0x3b72c5+(_0x553650[_0x4687aa(0x476)]||0x0),_0x9506cd+(_0x553650[_0x4687aa(0x94c)]||0x0)),this[_0x4687aa(0x628)](_0xf21828,_0x14a3d7+(_0x553650[_0x4687aa(0x400)]||0x0),_0x30d342+(_0x553650[_0x4687aa(0x674)]||0x0)),this[_0x4687aa(0x891)](_0xf21828,'hp',_0xd503c8+0x88*0x0+(_0x553650[_0x4687aa(0x848)]||0x0),_0x9c0e45+(_0x553650[_0x4687aa(0x640)]||0x0)),this[_0x4687aa(0x891)](_0xf21828,'mp',_0xd503c8+0x88*0x1+(_0x553650[_0x4687aa(0x8e9)]||0x0),_0x9c0e45+(_0x553650[_0x4687aa(0x5a2)]||0x0)),_0x160e2d[_0x4687aa(0x31c)]&&this[_0x4687aa(0x891)](_0xf21828,'tp',_0xd503c8+0x88*0x2+(_0x553650[_0x4687aa(0x4a3)]||0x0),_0x9c0e45+(_0x553650[_0x4687aa(0x436)]||0x0));}}return![];},Window_BattleLog[_0x17f940(0x25b)]['usePremadeActionSequence']=function(_0x45d616,_0x5378cb,_0x43b3ec){const _0x205433=_0x17f940,_0x5a1c67=_0x5378cb[_0x205433(0x32b)]();this[_0x205433(0x58e)](_0x45d616,_0x5378cb,_0x43b3ec),this['createEffectActionSet'](_0x45d616,_0x5378cb,_0x43b3ec),this[_0x205433(0x7ce)](_0x45d616,_0x5378cb,_0x43b3ec);},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x2af)]=function(_0xfbf6a8,_0x4f561c){const _0x1185f0=_0x17f940,_0x37ad7f=VisuMZ[_0x1185f0(0x960)][_0x1185f0(0x32c)]['BattleLog'];_0x37ad7f[_0x1185f0(0x383)]&&this['push']('addText',_0x1185f0(0x495)[_0x1185f0(0x8a4)](DataManager['battleDisplayText'](_0x4f561c)));if(DataManager['isSkill'](_0x4f561c)){if(_0x37ad7f[_0x1185f0(0x433)])this['displayItemMessage'](_0x4f561c['message1'],_0xfbf6a8,_0x4f561c);if(_0x37ad7f[_0x1185f0(0xb1d)])this[_0x1185f0(0x2a7)](_0x4f561c[_0x1185f0(0x28d)],_0xfbf6a8,_0x4f561c);}else{if(_0x37ad7f[_0x1185f0(0x465)])this[_0x1185f0(0x2a7)](TextManager[_0x1185f0(0x9b4)],_0xfbf6a8,_0x4f561c);}},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x58e)]=function(_0x34238e,_0x2fb514,_0x3ac3ce){const _0xfeae56=_0x17f940,_0x332cd0=_0x2fb514[_0xfeae56(0x32b)]();this[_0xfeae56(0x2af)](_0x34238e,_0x332cd0),this['push'](_0xfeae56(0x20d),_0x34238e,_0x3ac3ce,!![]),this[_0xfeae56(0x5e8)](_0xfeae56(0x73f),_0x34238e,_0x2fb514),this[_0xfeae56(0x5e8)](_0xfeae56(0x80d)),this[_0xfeae56(0x5e8)]('performCastAnimation',_0x34238e,_0x2fb514),this[_0xfeae56(0x5e8)](_0xfeae56(0x3a3));},Window_BattleLog[_0x17f940(0x25b)]['createEffectActionSet']=function(_0x75ffb8,_0x2308e5,_0xf7168a){const _0x4427e2=_0x17f940;if(this[_0x4427e2(0x28f)](_0x2308e5)){if(_0x4427e2(0x5d0)!=='rsLiW'){if(!_0x227f1d['isSceneBattle']())return;if(!_0x3a8121['VisuMZ_3_BoostAction'])return;if(!_0x37949b[_0x4427e2(0x128)])return;_0x12105c['ConvertParams'](_0x2518a3,_0x6d7504);const _0x37ffde=_0x3ae592[_0x4427e2(0x141)];_0x1ad811[_0x4427e2(0x426)](_0x37ffde,_0xba5a5f['_subject'][_0x4427e2(0x7e8)]());}else this[_0x4427e2(0x854)](_0x75ffb8,_0x2308e5,_0xf7168a);}else{if(this['isMeleeMultiTargetAction'](_0x2308e5))this['autoMeleeMultiTargetActionSet'](_0x75ffb8,_0x2308e5,_0xf7168a);else _0x2308e5[_0x4427e2(0x809)]()?this['targetActionSet'](_0x75ffb8,_0x2308e5,_0xf7168a):this[_0x4427e2(0x6f7)](_0x75ffb8,_0x2308e5,_0xf7168a);}},Window_BattleLog[_0x17f940(0x25b)]['isMeleeSingleTargetAction']=function(_0x569981){const _0x49cd4f=_0x17f940;if(!_0x569981['isPhysical']())return![];if(!_0x569981[_0x49cd4f(0x514)]())return![];if(!_0x569981['isForOpponent']())return![];return VisuMZ[_0x49cd4f(0x960)][_0x49cd4f(0x32c)][_0x49cd4f(0x664)][_0x49cd4f(0x130)];},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x854)]=function(_0x5bf84d,_0x433e04,_0x5a3260){const _0x2c029a=_0x17f940,_0x39e230=_0x5bf84d[_0x2c029a(0x7c8)]()['type']<0x2,_0x3b90fe=0x14,_0xb5d8ef=0x30;_0x39e230&&(this[_0x2c029a(0x5e8)](_0x2c029a(0x835),[_0x5bf84d],_0xb5d8ef,_0x3b90fe),this['push'](_0x2c029a(0x9e5),_0x5bf84d,_0x5a3260,_0x2c029a(0x1c5),_0x3b90fe,!![],_0x2c029a(0x69c),!![]),this[_0x2c029a(0x5e8)](_0x2c029a(0x3cd),[_0x5bf84d],'walk'),this[_0x2c029a(0x5e8)]('waitForMovement'));let _0x390ac5=_0x433e04[_0x2c029a(0x1c8)]()?this[_0x2c029a(0x75e)](_0x5bf84d):0x1;for(let _0x1be55e=0x0;_0x1be55e<_0x390ac5;_0x1be55e++){if(_0x433e04[_0x2c029a(0x1c8)]()&&_0x5bf84d['isActor']()){if(_0x2c029a(0xa00)!==_0x2c029a(0xa00)){if(!this[_0x2c029a(0x32b)]()[_0x2c029a(0x203)][_0x2c029a(0x91f)])return 0x0;let _0x5c6759=_0x4699d8['BattleCore'][_0x2c029a(0x32c)][_0x2c029a(0x176)][_0x2c029a(0x2b0)][_0x2c029a(0x14e)](this,_0x1c0318);return _0x5c6759=this['_multipliers'][_0x2c029a(0x33e)]*_0x5c6759+this[_0x2c029a(0x2be)][_0x2c029a(0xa73)],_0x5c6759;}else this[_0x2c029a(0x5e8)](_0x2c029a(0x290),_0x5bf84d,_0x1be55e);}_0x433e04[_0x2c029a(0x32b)]()[_0x2c029a(0xab3)]<0x0?this['targetActionSet'](_0x5bf84d,_0x433e04,_0x5a3260):this['wholeActionSet'](_0x5bf84d,_0x433e04,_0x5a3260);}if(_0x433e04['isAttack']()&&_0x5bf84d[_0x2c029a(0x2b6)]()){if(_0x2c029a(0x7fb)!==_0x2c029a(0x156))this['push'](_0x2c029a(0x66b),_0x5bf84d);else{const _0x32543e=this['item']()[_0x2c029a(0x5d4)];return _0x32543e[_0x2c029a(0x413)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}}this[_0x2c029a(0x5e8)](_0x2c029a(0x20d),_0x5bf84d,_0x5a3260,![]);if(_0x39e230){const _0x5ce519=_0x5bf84d['battler']();this[_0x2c029a(0x5e8)](_0x2c029a(0x835),[_0x5bf84d],_0xb5d8ef,_0x3b90fe),this[_0x2c029a(0x5e8)](_0x2c029a(0x4c9),_0x5bf84d,_0x5ce519[_0x2c029a(0x716)],_0x5ce519[_0x2c029a(0x1ac)],_0x3b90fe,![],'Linear'),this[_0x2c029a(0x5e8)]('requestMotion',[_0x5bf84d],_0x2c029a(0x5e5)),this[_0x2c029a(0x5e8)](_0x2c029a(0x80d)),this[_0x2c029a(0x5e8)](_0x2c029a(0x3cd),[_0x5bf84d],'walk');}},Window_BattleLog[_0x17f940(0x25b)]['isMeleeMultiTargetAction']=function(_0x59149a){const _0x3e9a7f=_0x17f940;if(!_0x59149a[_0x3e9a7f(0x359)]())return![];if(!_0x59149a[_0x3e9a7f(0x385)]())return![];if(!_0x59149a[_0x3e9a7f(0xabb)]())return![];return VisuMZ['BattleCore'][_0x3e9a7f(0x32c)]['ActionSequence']['AutoMeleeAoE'];},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x82e)]=function(_0x255ff2,_0x199a78,_0x2b2255){const _0xb9a6c8=_0x17f940,_0x3f2cd1=_0x255ff2[_0xb9a6c8(0x7c8)]()[_0xb9a6c8(0x523)]<0x2,_0x22d253=0x14,_0x4db5a0=0x30;_0x3f2cd1&&(this['push'](_0xb9a6c8(0x835),[_0x255ff2],_0x4db5a0,_0x22d253),this['push'](_0xb9a6c8(0x9e5),_0x255ff2,_0x2b2255,_0xb9a6c8(0x689),_0x22d253,!![],_0xb9a6c8(0x69c),!![]),this[_0xb9a6c8(0x5e8)](_0xb9a6c8(0x3cd),[_0x255ff2],_0xb9a6c8(0x25a)),this['push']('waitForMovement'));let _0x58c6ab=_0x199a78[_0xb9a6c8(0x1c8)]()?this['getDualWieldTimes'](_0x255ff2):0x1;for(let _0x5536fe=0x0;_0x5536fe<_0x58c6ab;_0x5536fe++){if(_0xb9a6c8(0x177)===_0xb9a6c8(0x497))return _0x769e9f(_0xd4dc56['$1']);else _0x199a78[_0xb9a6c8(0x1c8)]()&&_0x255ff2[_0xb9a6c8(0x2b6)]()&&(_0xb9a6c8(0x75a)!=='CfHRa'?this[_0xb9a6c8(0x5e8)](_0xb9a6c8(0x290),_0x255ff2,_0x5536fe):(this[_0xb9a6c8(0x871)][_0xb9a6c8(0x242)]=_0x18d2db['loadEnemy'](_0x1f2297),this[_0xb9a6c8(0x871)][_0xb9a6c8(0x242)][_0xb9a6c8(0x961)](this[_0xb9a6c8(0x7bb)]['bind'](this)))),this[_0xb9a6c8(0x6f7)](_0x255ff2,_0x199a78,_0x2b2255);}_0x199a78[_0xb9a6c8(0x1c8)]()&&_0x255ff2[_0xb9a6c8(0x2b6)]()&&this[_0xb9a6c8(0x5e8)]('clearActiveWeaponSet',_0x255ff2);this[_0xb9a6c8(0x5e8)](_0xb9a6c8(0x20d),_0x255ff2,_0x2b2255,![]);if(_0x3f2cd1){if('eiVnU'==='eiVnU'){const _0x4ca4ea=_0x255ff2[_0xb9a6c8(0x4a6)]();this[_0xb9a6c8(0x5e8)](_0xb9a6c8(0x835),[_0x255ff2],_0x4db5a0,_0x22d253),this[_0xb9a6c8(0x5e8)](_0xb9a6c8(0x4c9),_0x255ff2,_0x4ca4ea[_0xb9a6c8(0x716)],_0x4ca4ea[_0xb9a6c8(0x1ac)],_0x22d253,![],_0xb9a6c8(0x69c)),this[_0xb9a6c8(0x5e8)](_0xb9a6c8(0x3cd),[_0x255ff2],_0xb9a6c8(0x5e5)),this[_0xb9a6c8(0x5e8)](_0xb9a6c8(0x80d)),this[_0xb9a6c8(0x5e8)]('requestMotion',[_0x255ff2],_0xb9a6c8(0x25a));}else return this[_0xb9a6c8(0x711)]>0x0;}},Window_BattleLog[_0x17f940(0x25b)]['targetActionSet']=function(_0x5237f6,_0x55c0aa,_0xb210b4){const _0x1fcea1=_0x17f940,_0x58deb7=_0x55c0aa[_0x1fcea1(0x32b)]();for(const _0x8f2896 of _0xb210b4){if('GjDhw'!=='GjDhw'){if(this[_0x1fcea1(0xa20)]())this['_svBattlerSprite'][_0x1fcea1(0x752)](_0x4b03f4);}else{if(!_0x8f2896)continue;this[_0x1fcea1(0x5e8)](_0x1fcea1(0x3e3),_0x5237f6,_0x55c0aa),this[_0x1fcea1(0x5e8)](_0x1fcea1(0x85b),Sprite_Battler[_0x1fcea1(0x708)]),this[_0x1fcea1(0x5e8)](_0x1fcea1(0x1df),_0x5237f6,[_0x8f2896],_0x58deb7[_0x1fcea1(0xab3)]),this['push'](_0x1fcea1(0x85b),0x18),this[_0x1fcea1(0x5e8)](_0x1fcea1(0x12a),_0x5237f6,_0x8f2896);}}},Window_BattleLog['prototype']['wholeActionSet']=function(_0x4a02da,_0x1c074f,_0x44bb62){const _0x26b4c7=_0x17f940,_0xb7931b=_0x1c074f['item']();this[_0x26b4c7(0x5e8)](_0x26b4c7(0x3e3),_0x4a02da,_0x1c074f),this['push'](_0x26b4c7(0x85b),Sprite_Battler[_0x26b4c7(0x708)]),this[_0x26b4c7(0x5e8)](_0x26b4c7(0x1df),_0x4a02da,_0x44bb62['clone'](),_0xb7931b[_0x26b4c7(0xab3)]),this['push'](_0x26b4c7(0x3a3));for(const _0x3deb61 of _0x44bb62){if(_0x26b4c7(0x8fe)==='DEMRY')this[_0x26b4c7(0x3cd)]('spell');else{if(!_0x3deb61)continue;this[_0x26b4c7(0x5e8)](_0x26b4c7(0x12a),_0x4a02da,_0x3deb61);}}},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x7ce)]=function(_0xf40b07,_0x107c6f,_0x1c5a2a){const _0x3109c7=_0x17f940,_0x30048c=_0x107c6f[_0x3109c7(0x32b)]();this[_0x3109c7(0x5e8)](_0x3109c7(0x20d),_0xf40b07,_0x1c5a2a,![]),this['push'](_0x3109c7(0x9ea)),this['push'](_0x3109c7(0xa69)),this[_0x3109c7(0x5e8)](_0x3109c7(0x84a)),this[_0x3109c7(0x5e8)](_0x3109c7(0x4f1),_0xf40b07),this[_0x3109c7(0x5e8)](_0x3109c7(0x80d));},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x7e6)]=function(_0x1b3497){},VisuMZ[_0x17f940(0x960)][_0x17f940(0x24f)]=Window_BattleLog['prototype'][_0x17f940(0x8f4)],Window_BattleLog['prototype'][_0x17f940(0x8f4)]=function(_0x5c1165){const _0xc55b6d=_0x17f940;if(!VisuMZ[_0xc55b6d(0x960)][_0xc55b6d(0x32c)][_0xc55b6d(0x5df)]['ShowCurrentState'])return;VisuMZ[_0xc55b6d(0x960)][_0xc55b6d(0x24f)][_0xc55b6d(0x14e)](this,_0x5c1165);},Window_BattleLog['prototype'][_0x17f940(0xa7f)]=function(_0xb230e8){const _0x1081ba=_0x17f940;this[_0x1081ba(0x5e8)](_0x1081ba(0x4c3),_0xb230e8);VisuMZ[_0x1081ba(0x960)]['Settings'][_0x1081ba(0x664)][_0x1081ba(0x63a)]&&(_0x1081ba(0xaf9)!==_0x1081ba(0xaf9)?_0x109b15=_0x4fbe94:this[_0x1081ba(0x5e8)](_0x1081ba(0x1df),_0xb230e8,[BattleManager[_0x1081ba(0x128)]],-0x1));if(!VisuMZ[_0x1081ba(0x960)][_0x1081ba(0x32c)]['BattleLog'][_0x1081ba(0x5e9)])return;this[_0x1081ba(0x5e8)](_0x1081ba(0xa81),TextManager[_0x1081ba(0x2d6)][_0x1081ba(0x8a4)](_0xb230e8['name']()));},Window_BattleLog['prototype'][_0x17f940(0x10e)]=function(_0x59e180){const _0x20a0b5=_0x17f940;this[_0x20a0b5(0x5e8)](_0x20a0b5(0x6c7),_0x59e180);if(!VisuMZ['BattleCore'][_0x20a0b5(0x32c)]['BattleLog'][_0x20a0b5(0x4f9)])return;this[_0x20a0b5(0x5e8)](_0x20a0b5(0xa81),TextManager[_0x20a0b5(0x737)][_0x20a0b5(0x8a4)](_0x59e180['name']()));},Window_BattleLog['prototype'][_0x17f940(0xa31)]=function(_0x52e90d,_0x300e01){const _0x187b01=_0x17f940;if(VisuMZ['BattleCore']['Settings'][_0x187b01(0x664)][_0x187b01(0x1d5)]){const _0x240c04=_0x300e01[_0x187b01(0x32b)]();this[_0x187b01(0x5e8)](_0x187b01(0x1df),_0x52e90d,[_0x52e90d],_0x240c04[_0x187b01(0xab3)]);}},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x6b6)]=function(_0x14c09a,_0x5a4022){const _0xd1f1df=_0x17f940;this['push'](_0xd1f1df(0x1ad),_0x14c09a,_0x5a4022);if(!VisuMZ[_0xd1f1df(0x960)][_0xd1f1df(0x32c)][_0xd1f1df(0x5df)]['ShowSubstitute'])return;const _0x5b445c=_0x14c09a[_0xd1f1df(0x8d0)](),_0x26e054=TextManager[_0xd1f1df(0x6e6)][_0xd1f1df(0x8a4)](_0x5b445c,_0x5a4022['name']());this[_0xd1f1df(0x5e8)]('addText',_0x26e054);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x656)]=Window_BattleLog['prototype'][_0x17f940(0x4c5)],Window_BattleLog['prototype'][_0x17f940(0x4c5)]=function(_0x30a088){const _0x18aabd=_0x17f940;if(!VisuMZ[_0x18aabd(0x960)]['Settings']['BattleLog'][_0x18aabd(0x9d4)])return;VisuMZ[_0x18aabd(0x960)][_0x18aabd(0x656)][_0x18aabd(0x14e)](this,_0x30a088);},VisuMZ[_0x17f940(0x960)][_0x17f940(0x529)]=Window_BattleLog['prototype'][_0x17f940(0x30a)],Window_BattleLog['prototype']['displayCritical']=function(_0x3f2be4){const _0x11df84=_0x17f940;if(!VisuMZ[_0x11df84(0x960)][_0x11df84(0x32c)][_0x11df84(0x5df)][_0x11df84(0x7ea)])return;VisuMZ[_0x11df84(0x960)]['Window_BattleLog_displayCritical'][_0x11df84(0x14e)](this,_0x3f2be4);},VisuMZ[_0x17f940(0x960)][_0x17f940(0xb2d)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x5ee)],Window_BattleLog[_0x17f940(0x25b)]['displayMiss']=function(_0x101310){const _0x2cabeb=_0x17f940;if(!VisuMZ[_0x2cabeb(0x960)][_0x2cabeb(0x32c)][_0x2cabeb(0x5df)]['ShowMissEvasion']){if(_0x2cabeb(0xb2b)!==_0x2cabeb(0xb2b)){if(!_0x5905a5)return![];return _0x54730b[_0x2cabeb(0x34b)]===0x0||_0x33e07e[_0x2cabeb(0x34b)]===0x1;}else this[_0x2cabeb(0x5e8)](_0x2cabeb(0x390),_0x101310);}else VisuMZ[_0x2cabeb(0x960)]['Window_BattleLog_displayMiss'][_0x2cabeb(0x14e)](this,_0x101310);},VisuMZ['BattleCore'][_0x17f940(0x89b)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x951)],Window_BattleLog['prototype'][_0x17f940(0x951)]=function(_0x37293c){const _0x5e0910=_0x17f940;if(!VisuMZ[_0x5e0910(0x960)]['Settings']['BattleLog']['ShowMissEvasion'])_0x37293c[_0x5e0910(0x75b)]()[_0x5e0910(0x853)]?this[_0x5e0910(0x5e8)]('performEvasion',_0x37293c):this[_0x5e0910(0x5e8)](_0x5e0910(0x4b6),_0x37293c);else{if(_0x5e0910(0x76a)===_0x5e0910(0x76a))VisuMZ[_0x5e0910(0x960)][_0x5e0910(0x89b)][_0x5e0910(0x14e)](this,_0x37293c);else{_0x5073fe-=_0x3c387a;const _0x53811d=_0x202b7e[_0x5e0910(0x960)][_0x5e0910(0x32c)][_0x5e0910(0x176)]['DefaultSoftScaler'],_0x3ddf5d=_0xfc418c[_0x5e0910(0xb2c)](0x1-_0x411fb3/((_0x2479b6-_0x192e20)*_0x53811d+_0x506ebb),0.01);_0x152a85*=_0x3ddf5d,_0x3a7d25+=_0x314076;}}},Window_BattleLog[_0x17f940(0x25b)]['displayHpDamage']=function(_0x52cce2){const _0x42b07a=_0x17f940;_0x52cce2['result']()[_0x42b07a(0xa9b)]&&(_0x52cce2[_0x42b07a(0x75b)]()[_0x42b07a(0x979)]>0x0&&!_0x52cce2[_0x42b07a(0x75b)]()[_0x42b07a(0x65f)]&&(_0x42b07a(0x477)===_0x42b07a(0x477)?this[_0x42b07a(0x5e8)](_0x42b07a(0x8a7),_0x52cce2):(_0x580808['prototype'][_0x42b07a(0x106)][_0x42b07a(0x14e)](this),this[_0x42b07a(0x11f)](),this[_0x42b07a(0x968)]())),_0x52cce2[_0x42b07a(0x75b)]()['hpDamage']<0x0&&this[_0x42b07a(0x5e8)]('performRecovery',_0x52cce2),VisuMZ[_0x42b07a(0x960)][_0x42b07a(0x32c)]['BattleLog'][_0x42b07a(0x513)]&&(_0x42b07a(0xa92)==='zRsSg'?this[_0x42b07a(0x5e8)](_0x42b07a(0xa81),this[_0x42b07a(0x264)](_0x52cce2)):_0x5e68a8[_0x42b07a(0x576)]=!![]));},VisuMZ['BattleCore'][_0x17f940(0x108)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x7a7)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x7a7)]=function(_0x580df5){const _0x27fef4=_0x17f940;if(!VisuMZ['BattleCore'][_0x27fef4(0x32c)]['BattleLog']['ShowMpDmg'])return;VisuMZ[_0x27fef4(0x960)]['Window_BattleLog_displayMpDamage']['call'](this,_0x580df5);},VisuMZ['BattleCore'][_0x17f940(0x905)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0xaa3)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0xaa3)]=function(_0x3c2f18){const _0x1f94da=_0x17f940;if(!VisuMZ['BattleCore'][_0x1f94da(0x32c)]['BattleLog'][_0x1f94da(0x8ce)])return;VisuMZ[_0x1f94da(0x960)]['Window_BattleLog_displayTpDamage']['call'](this,_0x3c2f18);},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0xa61)]=function(_0x26bfd4){const _0x573774=_0x17f940,_0x21a8ae=_0x26bfd4[_0x573774(0x75b)](),_0xbdcfac=_0x21a8ae[_0x573774(0x78a)]();for(const _0xf00027 of _0xbdcfac){if(_0x573774(0x986)!==_0x573774(0x986))_0x4b0815[_0x573774(0x25b)]['updatePadding']['call'](this);else{const _0x531e25=_0x26bfd4[_0x573774(0x2b6)]()?_0xf00027['message1']:_0xf00027[_0x573774(0x28d)];_0x531e25&&VisuMZ[_0x573774(0x960)][_0x573774(0x32c)][_0x573774(0x5df)][_0x573774(0x669)]&&(this[_0x573774(0x5e8)](_0x573774(0x6e1)),this[_0x573774(0x5e8)]('pushBaseLine'),this[_0x573774(0x5e8)]('addText',_0x531e25[_0x573774(0x8a4)](_0x26bfd4[_0x573774(0x8d0)]())),this[_0x573774(0x5e8)](_0x573774(0x3c3))),_0xf00027['id']===_0x26bfd4[_0x573774(0x57b)]()&&this[_0x573774(0x5e8)](_0x573774(0x934),_0x26bfd4);}}},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x410)]=function(_0x51ae47){const _0x3440d5=_0x17f940;if(!VisuMZ[_0x3440d5(0x960)][_0x3440d5(0x32c)]['BattleLog'][_0x3440d5(0x1d9)])return;const _0x5c8a4e=_0x51ae47[_0x3440d5(0x75b)](),_0x331da7=_0x5c8a4e['removedStateObjects']();for(const _0x525ffd of _0x331da7){if(_0x3440d5(0x714)!==_0x3440d5(0x991)){if(_0x525ffd[_0x3440d5(0x567)]){if(_0x3440d5(0x534)===_0x3440d5(0x1c4)){const _0x1a8753=_0x3440d5(0x875)[_0x3440d5(0x8a4)](_0x37affb[_0x3440d5(0x520)]()),_0x27beea=this[_0x3440d5(0x5c9)](_0x1a8753,_0x50582e),_0xfd38c1=_0x23ff66[_0x3440d5(0x422)]();_0xfd38c1!==''?_0x27beea[_0x3440d5(0x242)]=_0x486fe6[_0x3440d5(0x7e4)](_0xfd38c1):_0x27beea[_0x3440d5(0x242)]=_0x4fc40f[_0x3440d5(0x1e8)];const _0xae8ce0=this[_0x3440d5(0x838)](_0x2ca676);_0x27beea['anchor']['x']=0.5,_0x27beea[_0x3440d5(0x6ce)]['y']=0x1;let _0x248dc2=_0x541019['round'](_0xae8ce0['x']+_0xae8ce0['width']/0x2)+this[_0x3440d5(0x219)];_0x248dc2+=_0x407d46[_0x3440d5(0xae6)]();let _0x1b5aee=_0x402b75[_0x3440d5(0x189)](this[_0x3440d5(0x87c)]);_0x1b5aee+=_0x24db46[_0x3440d5(0x630)](),_0x27beea[_0x3440d5(0x27c)](_0x248dc2,_0x1b5aee);const _0x314286=_0x3e91d6[_0x3440d5(0x960)][_0x3440d5(0x32c)]['BattleLayout']['PortraitScale'];_0x27beea[_0x3440d5(0x13a)]['x']=_0x314286,_0x27beea['scale']['y']=_0x314286,_0x27beea[_0x3440d5(0x376)]();}else this[_0x3440d5(0x5e8)]('popBaseLine'),this[_0x3440d5(0x5e8)](_0x3440d5(0x30d)),this[_0x3440d5(0x5e8)](_0x3440d5(0xa81),_0x525ffd[_0x3440d5(0x567)][_0x3440d5(0x8a4)](_0x51ae47[_0x3440d5(0x8d0)]())),this['push'](_0x3440d5(0x3c3));}}else{const _0x5e7a90=this['getAttackMotion']();return _0x5e7a90?_0x5e7a90[_0x3440d5(0x498)]:0x0;}}},Window_BattleLog[_0x17f940(0x25b)]['displayChangedBuffs']=function(_0x46adf2){const _0x55b759=_0x17f940,_0x23cb4c=VisuMZ['BattleCore'][_0x55b759(0x32c)][_0x55b759(0x5df)],_0xd17154=_0x46adf2[_0x55b759(0x75b)]();if(_0x23cb4c[_0x55b759(0x3fb)])this[_0x55b759(0xa0b)](_0x46adf2,_0xd17154[_0x55b759(0x908)],TextManager[_0x55b759(0x480)]);if(_0x23cb4c[_0x55b759(0xa95)])this[_0x55b759(0xa0b)](_0x46adf2,_0xd17154[_0x55b759(0x451)],TextManager[_0x55b759(0x316)]);if(_0x23cb4c['ShowRemovedBuff'])this[_0x55b759(0xa0b)](_0x46adf2,_0xd17154[_0x55b759(0x8d9)],TextManager[_0x55b759(0x68d)]);},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0xa0b)]=function(_0xc38617,_0x508ecc,_0x2a6c52){const _0x38a1e2=_0x17f940;for(const _0x57edd8 of _0x508ecc){if('lTpZc'!==_0x38a1e2(0x9c5))this['autoBattleUseSkills']=_0x4bd742[_0x38a1e2(0x455)];else{const _0x5f055b=_0x2a6c52[_0x38a1e2(0x8a4)](_0xc38617[_0x38a1e2(0x8d0)](),TextManager[_0x38a1e2(0xa1b)](_0x57edd8));this[_0x38a1e2(0x5e8)](_0x38a1e2(0x6e1)),this[_0x38a1e2(0x5e8)](_0x38a1e2(0x30d)),this['push'](_0x38a1e2(0xa81),_0x5f055b),this['push'](_0x38a1e2(0x3c3));}}},VisuMZ['BattleCore'][_0x17f940(0x566)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x84a)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x84a)]=function(){const _0x279a91=_0x17f940;VisuMZ[_0x279a91(0x960)]['Window_BattleLog_clear'][_0x279a91(0x14e)](this),this[_0x279a91(0x245)]();},VisuMZ[_0x17f940(0x960)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x17f940(0x25b)]['pushBaseLine'],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x30d)]=function(){const _0x1ef885=_0x17f940;VisuMZ[_0x1ef885(0x960)][_0x1ef885(0x1fb)]['call'](this),this[_0x1ef885(0x245)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0xa8f)]=Window_BattleLog[_0x17f940(0x25b)]['popBaseLine'],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x6e1)]=function(){const _0x1a65ad=_0x17f940;VisuMZ[_0x1a65ad(0x960)][_0x1a65ad(0xa8f)]['call'](this),this[_0x1a65ad(0xaae)](),this[_0x1a65ad(0x245)]();},VisuMZ[_0x17f940(0x960)]['Window_BattleLog_popupDamage']=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x736)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x736)]=function(_0x28282f){const _0x527113=_0x17f940;VisuMZ['BattleCore'][_0x527113(0x39f)]['call'](this,_0x28282f),this[_0x527113(0x245)]();},Window_BattleLog['prototype'][_0x17f940(0x9ea)]=function(){const _0x5f4aab=_0x17f940;let _0x1f87bd=0x0;this[_0x5f4aab(0x7d2)][_0x5f4aab(0x702)]>0x0&&(_0x5f4aab(0x671)==='wDOrP'?_0x46b9cd['stepForward']():_0x1f87bd=this[_0x5f4aab(0x7d2)][this[_0x5f4aab(0x7d2)][_0x5f4aab(0x702)]-0x1]),this['_lines'][_0x5f4aab(0x702)]>_0x1f87bd?this[_0x5f4aab(0x3c3)]():this[_0x5f4aab(0x245)]();},VisuMZ[_0x17f940(0x960)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x73f)],Window_BattleLog['prototype'][_0x17f940(0x73f)]=function(_0x33e159,_0x2bc212){const _0x51fa82=_0x17f940;VisuMZ[_0x51fa82(0x960)]['Window_BattleLog_performActionStart']['call'](this,_0x33e159,_0x2bc212),this[_0x51fa82(0x245)]();},VisuMZ['BattleCore']['Window_BattleLog_performAction']=Window_BattleLog['prototype'][_0x17f940(0x3e3)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x3e3)]=function(_0x551b23,_0x7b411f){const _0x97b525=_0x17f940;VisuMZ[_0x97b525(0x960)]['Window_BattleLog_performAction'][_0x97b525(0x14e)](this,_0x551b23,_0x7b411f),this['callNextMethod']();},VisuMZ['BattleCore'][_0x17f940(0x444)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x4f1)],Window_BattleLog[_0x17f940(0x25b)]['performActionEnd']=function(_0x19c4cb){const _0x476a8f=_0x17f940;VisuMZ[_0x476a8f(0x960)][_0x476a8f(0x444)]['call'](this,_0x19c4cb);for(const _0x127590 of BattleManager[_0x476a8f(0x328)]()){if(_0x476a8f(0x882)==='BqaPf')return _0x36d806[_0x476a8f(0x7eb)][0x0];else{if(!_0x127590)continue;if(_0x127590[_0x476a8f(0x9bf)]())continue;_0x127590['performActionEndMembers']();}}this[_0x476a8f(0x245)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x7c2)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x8a7)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x8a7)]=function(_0x21dea6){const _0x39fa56=_0x17f940;VisuMZ[_0x39fa56(0x960)][_0x39fa56(0x7c2)]['call'](this,_0x21dea6),this[_0x39fa56(0x245)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x471)]=Window_BattleLog[_0x17f940(0x25b)]['performMiss'],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x390)]=function(_0x28f49c){const _0x1bba2c=_0x17f940;VisuMZ['BattleCore'][_0x1bba2c(0x471)]['call'](this,_0x28f49c),this['callNextMethod']();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x2a0)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x338)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x338)]=function(_0x9f7559){const _0x5e4974=_0x17f940;VisuMZ[_0x5e4974(0x960)]['Window_BattleLog_performRecovery'][_0x5e4974(0x14e)](this,_0x9f7559),this[_0x5e4974(0x245)]();},VisuMZ[_0x17f940(0x960)]['Window_BattleLog_performEvasion']=Window_BattleLog['prototype'][_0x17f940(0x762)],Window_BattleLog['prototype']['performEvasion']=function(_0x2724fe){const _0x1dd4a8=_0x17f940;VisuMZ[_0x1dd4a8(0x960)][_0x1dd4a8(0x23d)][_0x1dd4a8(0x14e)](this,_0x2724fe),this['callNextMethod']();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x915)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x4b6)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x4b6)]=function(_0x23cc8e){const _0x19fadc=_0x17f940;VisuMZ[_0x19fadc(0x960)]['Window_BattleLog_performMagicEvasion'][_0x19fadc(0x14e)](this,_0x23cc8e),this[_0x19fadc(0x245)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x614)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x4c3)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x4c3)]=function(_0x2dbe00){const _0xa74de=_0x17f940;VisuMZ[_0xa74de(0x960)][_0xa74de(0x614)][_0xa74de(0x14e)](this,_0x2dbe00),this[_0xa74de(0x245)]();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x2c2)]=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x6c7)],Window_BattleLog['prototype'][_0x17f940(0x6c7)]=function(_0xc757b2){const _0x466cae=_0x17f940;VisuMZ[_0x466cae(0x960)][_0x466cae(0x2c2)][_0x466cae(0x14e)](this,_0xc757b2),this[_0x466cae(0x245)]();},VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x1ad)],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x1ad)]=function(_0x57983b,_0x4e83ea){const _0x3ca848=_0x17f940;VisuMZ[_0x3ca848(0x960)][_0x3ca848(0x1ff)]['call'](this,_0x57983b,_0x4e83ea),this['callNextMethod']();},VisuMZ[_0x17f940(0x960)][_0x17f940(0x649)]=Window_BattleLog[_0x17f940(0x25b)]['performCollapse'],Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x934)]=function(_0xce7c50){const _0x58ac29=_0x17f940;VisuMZ[_0x58ac29(0x960)][_0x58ac29(0x649)][_0x58ac29(0x14e)](this,_0xce7c50),this[_0x58ac29(0x245)]();},Window_BattleLog['prototype'][_0x17f940(0xad9)]=function(_0x1a42a2,_0x45cf8e){const _0x5d3190=_0x17f940;_0x1a42a2[_0x5d3190(0xad9)](_0x45cf8e),this[_0x5d3190(0x245)]();},Window_BattleLog[_0x17f940(0x25b)]['showEnemyAttackAnimation']=function(_0x14a6cf,_0x4b56d1){const _0x43e602=_0x17f940,_0x88b3b2=_0x14a6cf['attackAnimationId1']();_0x88b3b2<=0x0?SoundManager[_0x43e602(0x44b)]():this[_0x43e602(0x545)](_0x4b56d1,_0x88b3b2);},Window_BattleLog['prototype'][_0x17f940(0x20d)]=function(_0x57220f,_0x26cc67,_0x517568){const _0x2b9b3e=_0x17f940,_0x1be375=[_0x57220f][_0x2b9b3e(0x872)](_0x26cc67);for(const _0x4988ab of _0x1be375){if(!_0x4988ab)continue;_0x4988ab[_0x2b9b3e(0x456)](_0x517568);}this[_0x2b9b3e(0x245)]();},Window_BattleLog['prototype'][_0x17f940(0x85b)]=function(_0x1f64f4){const _0x12fa79=_0x17f940;this[_0x12fa79(0x4e2)]=_0x1f64f4;},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x3cd)]=function(_0x24fb3f,_0x2e1dc1){const _0x35aa9a=_0x17f940;for(const _0x5f479e of _0x24fb3f){if(_0x35aa9a(0x87f)!==_0x35aa9a(0x9dc)){if(!_0x5f479e)continue;_0x5f479e[_0x35aa9a(0x3cd)](_0x2e1dc1);}else{if(!_0x25bbd7[_0x35aa9a(0x960)][_0x35aa9a(0x528)])return![];const _0x26f874=_0x472df8['aliveMembers']()[_0x35aa9a(0x427)](_0x4d902e=>_0x4d902e['isTpbCharged']()&&_0x4d902e[_0x35aa9a(0x411)]());return _0x26f874[_0x35aa9a(0x702)]>0x0&&_0x12a1d7['actor']()!==_0x26f874[_0x26f874[_0x35aa9a(0x702)]-0x1];}}this[_0x35aa9a(0x245)]();},Window_BattleLog['prototype'][_0x17f940(0x4c9)]=function(_0x3b4124,_0x259ceb,_0x2fd55c,_0x830d6,_0x2a232b,_0x5cf658){const _0x419f8c=_0x17f940;_0x3b4124[_0x419f8c(0x38f)](_0x259ceb,_0x2fd55c,_0x830d6,_0x2a232b,_0x5cf658,-0x1),this[_0x419f8c(0x245)]();},Window_BattleLog[_0x17f940(0x25b)][_0x17f940(0x9e5)]=function(_0x23971a,_0x3103b0,_0x2a4db0,_0xa968c9,_0x51f903,_0x49607d,_0x2542e6){const _0x1b2a34=_0x17f940,_0x1802d1=Math[_0x1b2a34(0x1c9)](..._0x3103b0['map'](_0x3a452d=>_0x3a452d[_0x1b2a34(0x4a6)]()[_0x1b2a34(0x521)]-_0x3a452d[_0x1b2a34(0x4a6)]()[_0x1b2a34(0x682)]()/0x2)),_0x3bad57=Math['max'](..._0x3103b0[_0x1b2a34(0x296)](_0x3ab4d0=>_0x3ab4d0[_0x1b2a34(0x4a6)]()['_baseX']+_0x3ab4d0[_0x1b2a34(0x4a6)]()[_0x1b2a34(0x682)]()/0x2)),_0x27c8d7=Math[_0x1b2a34(0x1c9)](..._0x3103b0[_0x1b2a34(0x296)](_0x24b6fc=>_0x24b6fc['battler']()[_0x1b2a34(0x626)]-_0x24b6fc[_0x1b2a34(0x4a6)]()['mainSpriteHeight']())),_0x2b888f=Math[_0x1b2a34(0xb2c)](..._0x3103b0[_0x1b2a34(0x296)](_0x7ed163=>_0x7ed163['battler']()[_0x1b2a34(0x626)])),_0x1e021f=_0x3103b0[_0x1b2a34(0x427)](_0x2fffba=>_0x2fffba[_0x1b2a34(0x2b6)]())[_0x1b2a34(0x702)],_0x4407ef=_0x3103b0[_0x1b2a34(0x427)](_0x4f0b1c=>_0x4f0b1c[_0x1b2a34(0xae4)]())['length'];let _0x1e2441=0x0,_0x39e015=0x0;if(_0x2a4db0[_0x1b2a34(0x413)](/front/i))_0x1e2441=_0x1e021f>=_0x4407ef?_0x1802d1:_0x3bad57;else{if(_0x2a4db0[_0x1b2a34(0x413)](/middle/i))_0x1e2441=(_0x1802d1+_0x3bad57)/0x2,_0x2542e6=-0x1;else _0x2a4db0[_0x1b2a34(0x413)](/back/i)&&(_0x1b2a34(0x61c)===_0x1b2a34(0x61c)?_0x1e2441=_0x1e021f>=_0x4407ef?_0x3bad57:_0x1802d1:_0x577a34[_0x1b2a34(0x3a1)](_0x3926fa,_0x483c89));}if(_0x2a4db0[_0x1b2a34(0x413)](/head/i)){if('elwfc'===_0x1b2a34(0x881)){const _0x51622e=_0x138bf0[_0x58aa57[_0x1b2a34(0x6fe)]];if(_0x51622e&&!_0xbb25e4[_0x1b2a34(0x72d)](_0x51622e))_0x4c0589['push'](_0x51622e);}else _0x39e015=_0x27c8d7;}else{if(_0x2a4db0['match'](/center/i))_0x39e015=(_0x27c8d7+_0x2b888f)/0x2;else{if(_0x2a4db0['match'](/base/i)){if(_0x1b2a34(0x14b)==='JjyUE')return _0x2f67f0[_0x1b2a34(0x960)][_0x1b2a34(0x8e7)][_0x1b2a34(0x14e)](this);else _0x39e015=_0x2b888f;}}}_0x23971a[_0x1b2a34(0x38f)](_0x1e2441,_0x39e015,_0xa968c9,_0x51f903,_0x49607d,_0x2542e6),this['callNextMethod']();},Window_BattleLog[_0x17f940(0x25b)]['performJump']=function(_0x5c6568,_0x27fc66,_0x4ed449){const _0x52961d=_0x17f940;for(const _0x3f087c of _0x5c6568){if(!_0x3f087c)continue;_0x3f087c[_0x52961d(0x39d)](_0x27fc66,_0x4ed449);}this['callNextMethod']();};