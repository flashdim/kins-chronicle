//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.38;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.38] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags and Troop Name Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Name: Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name: Offset X:
 *   Name: Offset Y:
 *   - Offset the enemy name's position by this much.
 *   - For X: Negative goes left. Positive goes right.
 *   - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Always Visible:
 *   - Determines if the enemy name will always be visible.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"1","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent Name
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent Name
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 1
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x2245=['spriteId','updateStateSprite','battleUIOffsetY','CmdStyle','clearActiveWeaponSlot','ShowPortraitsBorderStyle','brhth','_autoBattle','onEncounter','Window_BattleStatus_initialize','ParseItemNotetags','LBQEz','ActSeq_Movement_Scale','border','kVxoy','damageStyle','battleProjectiles','displaySubstitute','Scene_Battle_selectPreviousCommand','Scene_Battle_startPartyCommandSelection','updateFlip','updateHpGaugePosition','isBattleSys','_partyCommandWindow','ActSeq_Mechanics_StbExtraAction','autoBattleAtStart','BattleLogRectJS','Yuves','Post','QVrzr','Shadow','onAllActionsEnd','performMagicEvasion','checkShowHideSkillNotetags','#ffffff','_opacityWholeDuration','ActSeq_Motion_ClearFreezeFrame','PzNqZ','displayTpDamage','jxeds','LJwuQ','mmp','AutoMeleeSolo','isAutoBattleCommandEnabled','isSideButtonLayout','ARRAYSTRUCT','gKScL','AivUb','SZWdE','TaUHv','setupWeaponAnimation','_target','setImmortal','ZKdVL','ShowRemovedState','updateActors','displayReflection','createCommandNameWindow','DWkIA','terminate','_speed','okvdn','frxsk','pZGzl','Game_BattlerBase_canAttack','parent','MP_Rate','GYoZM','_borderPortraitSprite','needsActorInputCancel','PreEndBattleJS','wpWAm','waitForEffect','battleOpacity','JS\x20BATTLE\x20DEFEAT','waitForAnimation','BattleManager_initMembers','Skill-%1-%2','gainCurrentActionsFTB','fpbVl','requestAnimation','battleCommandIcon','BaseTroopIDs','rgTDa','battleEffect','Damage','isDead','tPHoz','StartName','sTXCm','autoBattle','applyVariance','wAdDI','WaitForOpacity','ActSeq_Mechanics_RemoveBuffDebuff','needsSelection','constructor','ActSeq_Projectile_Icon','JumpToLabel','%1Apply%2JS','_opacityEasing','isVisualHpGaugeDisplayed','applyTargetFilters','turnCount','DamageRate','destroyDamageSprite','actorCommandCancelTPB','DistanceAdjust','ActSeq_Zoom_Scale','mUeti','fittingHeight','setupMotion','GjsPA','skillItemWindowRectBorderStyle','uTdDS','ctCwV','update','onFloatEnd','getDefeatedEnemies','drawText','_effectType','ActSeq_Movement_WaitForJump','_commonEventQueue','_canLose','ActionSequence','_visualHpGauge_JustDied','clear','AutoBattleMsg','TextColor','_emptyBitmap','_stypeIDs','Rzjnt','ActSeq_Weapon_NextActiveWeapon','chant','XKkjM','AutoBattleBgType','_requestRefresh','actorCommandEscape','KotPH','_motionSpeed','startEnemySelection','Sprite_Actor_updateShadow','softDamageCapRate','invokeAction','EsfHV','createEffectActionSet','Linear','performMiss','makeEscapeRatio','setupFont','TddgG','sideview_ui','createBattleFieldContainer','AnchorX','allowRandomSpeed','maxTp','damage','drawIcon','CElob','_activeWeaponSlot','WiYGi','command301','atbInterrupt','cTlTD','Pre','SmoothImage','displayEvasion','setCursorRect','VabrK','amKcE','tcYQz','HpGaugeOffsetY','XaOjF','updateBattleProcess','isPartyCommandWindowDisabled','Sprite_Enemy_updateBossCollapse','battleUIOffsetX','performWeaponAnimation','displayCurrentState','actionSplicePoint','skill','dqbdI','wpRNn','jxdZx','ActSeq_Element_ForceElements','AsBjL','drawTextEx','isTriggered','ActSeq_Animation_AttackAnimation','WaitForAngle','Exploited','applyForcedGameTroopSettingsBattleCore','attackSkillId','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','motionIdle','ESCAPE','AnchorY','onTurnEnd','Sprite_Actor_initMembers','ArRedFlat','mainSpriteScaleX','alive\x20actors','onOpacityEnd','930118BIyRuv','damageOffsetY','ATTACK','VisuMZ_1_ElementStatusCore','tfOJK','clearResult','wait','CastMagical','_scene','Game_Action_clear','displayMpDamage','getCommonEventIdWithName','processBattleCoreJS','hIypD','processPostBattleCommonEvents','FlinchDuration','ActSeq_Mechanics_AtbGauge','ActSeq_BattleLog_PopBaseLine','addChildAt','eKJzH','faceWidth','iconWidth','charged','filter','Scene_Map_initialize','destroy','Window_BattleEnemy_initialize','psIwG','_mainSprite','StatusWindowSelectableBackHide','Rate','updateAttachedSprites','isTickBased','alive\x20enemies\x20not\x20user','_floatDuration','MRZwS','bitmapHeight','rnTpr','ActSeq_Mechanics_BreakShieldReset','BhnBq','clearForcedGameTroopSettingsBattleCore','commandName','zgZJB','remove','yidJN','Sprite_Battler_updatePosition','ActSeq_Mechanics_BoostPointsChange','Rdnqh','WPqjb','refreshRequest','aWsoI','isTpbMainPhase','alive\x20friends\x20not\x20user','note','ActSeq_BattleLog_DisplayAction','icon','VisuMZ_2_PartySystem','custom','applyHardDamageCap','moveToStartPosition','_inputting','Game_Action_isForOpponent','updateBattlebackBitmap','updateOpacity','ActSeq_Movement_Opacity','NkwBN','cVPMM','checkAutoCustomActionSequenceNotetagEffect','XdxyG','ECNLh','OffsetAdjust','_actionBattlers','TimeScale','lineHeight','_appeared','addChildToBack','TpbGaugeOffsetY','ConvertParams','reduce','requestFauxAnimation','sort','NameFontSize','Opacity','isAffectedByBreakShield','DefaultHardCap','preparePartyRefresh','MotionIdle','_uiContainer','Scene_Options_maxCommands','validTargets','updateShadowPosition','applyImmortal','isTurnBased','jAFJl','bottom','SkillItemBorderCols','setSTBExploited','jNdgh','CoreEngine','ActSeq_Element_Clear','canAttackBattleCore','displayAction','updateStateIconSprite','SwitchMissEvade','codsv','getItemDamageAmountLabelOriginal','waitForOpacity','caAsR','SkillItemStandardCols','OffsetY','fillRect','YhAVZ','StatusWindowAttachmentBackOffsetX','cexWk','isDisplayEmergedEnemies','Sprite_Animation_targetSpritePosition','Game_Map_setupBattleback','ActSeq_Impact_MotionTrailRemove','Scene_Battle_selectNextCommand','isEnemy','BattleDefeatJS','removeStatesAuto','alive\x20friends\x20not\x20target','battleCommands','updateWeather','1enzGcB','DistanceY','selectPreviousCommand','_armorPenetration','max','logActionList','Scene_Battle_onActorCancel','mpDamageFmt','addText','EasingType','createBattleFieldBattleCore','die','updateWaitMode','ActSeq_Mechanics_BtbGain','maxItems','RNcKF','motionSpeed','lKXLE','ActSeq_Camera_FocusPoint','_floatHeight','Window_ActorCommand_initialize','skew','isDTB','actionEffect','WaitForMovement','ActSeq_Impact_ShockwavePoint','growBattler','attachSpritesToDistortionSprite','MeleeDistance','onBattleStart','compatibilityVisible','repeatTargets','itemHit','name','Game_Actor_setup','frameVisible','startDamagePopup','DbLAD','Window_BattleLog_performCollapse','isDeathStateAffected','ext','forceWeaponAnimation','FrontViewSelect','itemEffectAddAttackState','MGqUD','helpWindowRect','CmdIconFight','_dragonbonesSpriteContainer','makeTargets','elJlH','ArPenRate','battleStatusWindowAnimationContainer','Window_BattleLog_popupDamage','amtKZ','RnNeB','battleSkew','ActSeq_Movement_WaitForFloat','cShCG','_damages','uqwtR','PostStartActionJS','Game_BattlerBase_eraseState','processEscape','_callSceneOptions','counterAttack','createSeparateDamagePopups','ActSeq_Angle_WaitForAngle','MCETt','animationNextDelay','isBreakStunned','Sprite_Actor_updateFrame','performActionEndMembers','MuyLE','alignBattleCoreDamageSprite','WaitForEffect','MvhnU','DEF','createCancelButton','TP_Flat','addLoadListener','criticalHitRate','ActSeq_Motion_WaitMotionFrame','checkCacheKey','swapEnemyIDs','PopupShiftY','battleSpriteSkew','addSkillTypeCommand','createStateIconSprite','swPBy','requestMotionRefresh','selxd','mCqFu','BattleManager_onEncounter','isAnyoneFloating','_isBattlerFlipped','kjcZa','wLqSl','wdDAm','inHomePosition','Kfepx','stepFlinch','bitmap','ForceExploiter','Class-%1-%2','createBattleUIOffsetX','arRedFlat','Sprite_Actor_updateBitmap','DamageStyleList','fKBda','changeInputWindow','ScaleX','SWwxc','subject','prepareCustomActionSequence','_escapeRatio','autoSelect','battlelog','hpAffected','STR','start','ShowPopup','isSceneChanging','XZIkm','ITNYs','setBattleSkew','updateScale','noise','_shake','anchor','removeBuff','turn','_motionCount','toString','Sprite_Weapon_loadBitmap','lAdUj','LuvJn','addPartyCommand','mpDamage','TxBYt','FlashColor','cHeCS','actor%1-portrait','isOpponent','MessageWait','setActionState','ActSeq_Movement_FacePoint','Index','EscapeSuccess','PreEndTurnJS','processForcedAction','bvHbe','AviAq','isAnyoneChangingOpacity','list','mainSpriteWidth','autoBattleStart','activate','isEffecting','SvWeaponMass-%1-%2','createString','Game_BattlerBase_refresh','applyDamageCaps','initMembers','ActSeq_ChangeAngle','Scene_Battle_createAllWindows','svAnchorY','performMoveToPoint','_battlerHue','apply','createUIContainer','map','loadBitmap','IbDhT','createEnemyNames','PartyCmd','callNextMethod','ActSeq_DB_DragonbonesMotionAni','mainSprite','Wave','removeState','ActSeq_Target_NextTarget','NameLegacy','BattleManager_endBattle','ConfigManager_applyData','Targets1','STYPES','ApplyImmortal','createActors','addSingleSkillCommands','isMoving','setupChild','useDigitGrouping','ActSeq_Animation_ChangeBattlePortrait','Text','selectNextCommandTpb','ptTac','PostRegenerateJS','_hpGaugeSprite','_spriteset','AutoMeleeAoE','addedStateObjects','nkPys','enemyId','windowPadding','bitmapWidth','_actorWindow','isOnCurrentMap','isNextSceneBattleTransitionable','version','loop','_enemyNameContainer','cameraDuration','ActSeq_Animation_CastAnimation','damageOffsetX','invokeMagicReflection','battleGrow','RoyvF','dlbbs','ghgHB','prototype','Game_Action_makeTargets','initVisibility','YZlkT','ActSeq_Motion_RefreshMotion','regionId','MtvJT','Game_Interpreter_PluginCommand','setupCriticalEffect','VKxba','NameAttachStateIcon','XDzbu','createMainSprite','ActSeq_Mechanics_StbRemoveExcessActions','Window_BattleLog_pushBaseLine','drawItemStyleIcon','ZWOOg','getItemDamageAmountLabelBattleCore','scCaH','luHvg','Game_BattlerBase_die','_pattern','resetFontSettings','addAutoBattleCommands','Scene_Battle_partyCommandWindowRect','startActorSelection','isAnyoneJumping','JS\x20ESCAPE\x20SUCCESS','timeScale','softDamageCap','Sprite_Enemy_setBattler','createCommandVisibleJS','ShowCosts','DefaultSoftCap','checkTpbInputClose','canInput','AElPb','onEncounterBattleCore','YCUzk','vNBZj','rIKMf','Game_Battler_performActionStart','_stateSprite','hitRate','resizeWindowXPStyle','_helpWindow','right','canAttack','arRedRate','createHelpWindowBattleCore','initialize','skillTypes','battler','BattleEndEvent','bgType','addAnimationSpriteToContainer','Scene_Battle_createPartyCommandWindow','startMotion','TP_Rate','createWeather','updateBattlebackBitmap2','PreDamage%1JS','power','ActSeq_Impact_MotionTrailCreate','svBattlerShadowVisible','MAXMP','_angleDuration','_targetGrowX','ForceDeath','NameAlwaysVisible','isGuard','evalDamageFormula','getStypeIdWithName','spinBattler','ActSeq_Zoom_WaitForZoom','createShadowSprite','Sprite_Battleback_adjustPosition','_animationCount','resetBreakShield','ARRAYJSON','origin','ActSeq_Projectile_Picture','<CENTER>%1','getAttackMotionSlot','setText','DINMr','eKvJu','_regionBattleback1','%1EndTurnJS','getMenuImage','NameAlwaysHidden','PreApplyAsUserJS','cancel','TpGaugeOffsetX','GUARD','autoSelectPriority','ALL\x20SKILLS','isAlive','needsSelectionBattleCore','boxHeight','ActionStart','setHorrorEffectSettings','length','jWXTh','CommandAddAutoBattle','createDigits','Scene_Battle_startActorCommandSelection','HelpAutoBattle','animationBaseDelay','isTpb','battleback1Name','_customDamageFormula','MJnwP','nRklG','PCONs','alive\x20battlers\x20not\x20user','tOuGn','pyslk','isIncludedInEnemyWindow','setupTextPopup','fvzBY','IEypQ','applyCritical','addCommand','BattleManager_isTpbMainPhase','windowskin','vZDUS','_checkOn','NHlsW','cWJbH','currentExt','pOumJ','_immortal','EnableSoftCap','createHpGaugeSprite','command236','battleCoreResumeLaunchBattle','RequiresDefeat','Actor-%1-%2','DualWield','MOTIONS','PerformAction','isFloating','wholeActionSet','commandNameWindowDrawText','dying','_targetOpacity','Game_Interpreter_updateWaitMode','_subject','_action','adjustPosition_ScaleDown','PqrsK','Window_BattleLog_displayEvasion','missed','ActSeq_Mechanics_Collapse','_tempEquipCheck','BRmaC','Game_Battler_makeSpeed','Angle','Skills','eUbag','WKxQK','_endBattle','slice','STRUCT','EmergeText','Defeat','isCharging','ArRedRate','clearFreezeMotionForWeapons','setHome','performAttack','isItemCommandEnabled','kERGV','%1EndBattleJS','visibilityState','auto','WeaponTypeID','ActSeq_Camera_Reset','IRdUs','onEscapeSuccess','processActorCommandCancelTPB','isSkill','_angleWholeDuration','Game_Interpreter_command283','POebM','code','WaitForSkew','ARRAYNUM','isCommandEnabled','vFFZA','addWeaponSwapCommand','tlmbe','base','irYuy','PostDamageAsTargetJS','AsTarget','JuCJE','dziAi','_logWindow','_wtypeIDs','Intensity','Interrupt','canGuardBattleCore','onBattleStartBattleCore','Spriteset_Battle_createBattleField','Game_Action_applyGlobal','Scene_Battle_logWindowRect','setupZoomBlurImpactFilter','process_VisuMZ_BattleCore_Failsafes','MAT','ScaleToFit','_commonEventIDs','HelpSkillType','autoBattleWindowRect','isMeleeSingleTargetAction','message2','rITvq','_tpbSceneChangeCacheActor','drawItemStyleIconText','attackAnimationId2','_indent','FUNC','createEmptyBitmap','criticalDmgFlat','_growWholeDuration','updateFrame','gainStoredBoostPoints','createKeyJS','messageSpeed','ActSeq_Set_WholeActionSet','helpWindowRectBorderStyle','cancelActorInput','gOMZn','bovJK','isAppeared','TJCOD','ozFbI','createAnimationContainer','removedBuffs','show','skewDuration','MpGaugeOffsetX','setupHpGaugeSprite','recoverAll','AttackAnimation','CXrCZ','children','hue','BattleManager_onEscapeSuccess','_surprise','isCTB','PreDamageJS','commandNameWindowDrawBackground','dead\x20enemies','becomeSTBExploited','repositionEnemiesByResolution','loadWindowskin','VisuMZ_3_ActSeqCamera','displayChangedBuffs','performCounter','skewBattler','revertTpbCachedActor','formula','Game_Battler_regenerateAll','Sprite_Battler_updateMain','compareEnemySprite','getNextDamagePopup','isBattlerFlipped','battleZoom','yJLBa','isPhysical','Game_Action_needsSelection','HomePosJS','isPlaytest','_skillWindow','scale','joZAg','_skillIDs','wFven','startAction','_commandNameWindow','Scene_Battle_onActorOk','Game_Battler_performEvasion','jQgau','removeAnimationFromContainer','actor','_enemy','updateGrow','Scene_Battle_windowAreaHeight','isDamagePopupRequested','_enemyID','isForFriendBattleCore','ActionSkillMsg1','command301_PreBattleEvent','updateMain','putActiveBattlerOnTop','TPB','VisuMZ_2_WeaponSwapSystem','ShowFacesListStyle','zjSXW','QIavV','isForFriend','BattleManager_processDefeat','YfTLu','gainTp','updateBorderStyle','initElementStatusCore','waitForFloat','IPwzc','makeSpeed','gcoAI','setHelpWindowItem','qQlZA','ReflectAnimation','ActionEffect','SKILLS','Game_Interpreter_command301','setSvBattlerSprite','width','setBattlerFlip','State-%1-%2','isNonSubmenuCancel','GeKWA','singleSkill','changeWeather','alterBreakShield','swing','isAlwaysVisible','sSdbN','ActSeq_Mechanics_AnalyzeWeakness','VisuMZ_3_WeaknessDisplay','tgSny','options','fnZjl','CriticalColor','mPmCW','StepDuration','partyCommandWindowRect','uiInputPosition','inputting','Game_Enemy_transform','BoostPoints','Game_BattlerBase_addNewState','Scene_Boot_onDatabaseLoaded','endAnimation','iconText','Window_BattleLog_displayMpDamage','checkShowHideBattleNotetags','loadBattleback1','ShowPortraits','Mechanics','applyBattleCoreJS','edRIS','pozlc','flashDuration','freezeMotion','TIlLo','text','evaded','Window_BattleEnemy_show','UXogN','notFocusValid','Game_Battler_startTpbTurn','NkFgU','Game_Troop_setup','JS\x20%1START\x20TURN','_forceAction','Vrmfx','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','QTqZz','addOptionsCommand','CfiGd','_windowLayer','AddOption','NCsjC','WaitForCamera','ActSeq_Movement_WaitForSpin','jumpBattler','process_VisuMZ_BattleCore_jsFunctions','ActSeq_BattleLog_WaitForBattleLog','PortraitScaleBorderStyle','_offsetX','_battler','jump','clearBattlerMotionTrailData','GpStU','registerCommand','format','Sprite_Battler_damageOffsetX','ActSeq_Movement_Spin','isLearnedSkill','SkillsStatesCore','PopupOffsetX','ActSeq_Movement_MoveToTarget','\x5cI[%1]%2','cancelTargetSelectionVisibility','odGMO','isRightInputMode','XPActorCommandLines','RtJAZ','XCxnK','Game_Action_apply','_createCursorSprite','_targetAngle','_shadowSprite','_weaponSprite','rKVpu','_methods','Scene_Battle_createCancelButton','commandOptions','removeAnimation','VoOXb','updateJump','PostStartTurnJS','startSpin','Actions','hilAZ','isActing','create','qwXSV','checkTpbInputOpen','linkSprite','xtOBw','UiEva','updateStateSpriteBattleCore','AutoBattleRect','shift','JS\x20%1END\x20ACTION','Game_Actor_makeActionList','_waitMode','battleback2Name','enemyNames','uUaFL','_borderPortraitTargetX','ActionSkillMsg2','adjustPosition_ScaleUp','autoBattleUseSkills','placeGauge','VisuMZ_3_SideviewBattleUI','pFfGX','ivlIw','SvWeaponSolo-%1-%2','CalcEscapeRaiseJS','deathStateId','ActionAnimation','startTpbTurn','updateShadow','HpGaugeOffsetX','PostApplyJS','isHidden','applyAngleChange','clearBattleRefreshRequest','_allTargets','ShowEnemyGauge','_phase','BattleLayout','_branch','ShowCurrentState','VisuMZ_3_ActSeqImpact','performReflection','battlerSprites','PJVlu','attackStates','stepBack','makeDeepCopy','aliveMembers','opacityStart','YLxke','JS\x20%1END\x20BATTLE','ParseEnemyNotetags','statusWindowRectDefaultStyle','EsTIU','dzkMi','setFrame','requestRefresh','ckGtA','resize','CommandVisible','updateForceAction','isOptionsCommandAdded','ScaleY','VisuMZ_2_BattleSystemOTB','repositionCancelButtonBorderStyle','Window_BattleLog_popBaseLine','finishActionSet','JS\x20%1APPLY\x20%2','OnXyw','deadMembers','open','Sprite_Actor_update','_targetIndex','_animationSprites','setBattlerMotionTrailData','string','isActiveTpb','updateShadowVisibility','sleep','LVvDl','isForRandomBattleCore','Window_BattleLog_performActionEnd','Khcrd','dead\x20friends','cameraClamp','escape','Game_Battler_performDamage','ActSeq_Mechanics_OtbOrder','canEscape','playCancel','alive\x20opponents\x20not\x20target','NfSwk','retreat','VyPvv','addTextToCombatLog','_baseY','Game_Action_itemHit','pSoNH','random','process_VisuMZ_BattleCore_TraitObject_Notetags','createAttachmentSprites','29uZCOXs','_enemyIDs','CommandWidth','processBorderActor','getAttackWeaponAnimationId','zqsBZ','VhiKJ','Scene_Battle_updateBattleProcess','Sprite_Enemy_setHue','NameOffsetX','rHBuQ','EoTul','loadSvActor','ActSeq_Mechanics_VariablePopup','_skewDuration','fyfYe','updateBattlerContainer','eJQkp','addNewState','HDSdI','CastPhysical','adjustPosition','startMove','PopupOffsetY','AsfGF','_battleField','ShowRemovedBuff','collapse','Window_BattleLog_performAction','BattleManager_selectNextCommand','parse','Scene_Battle_updateStatusWindowPosition','showAnimation','goXZI','DEWGN','xNwZw','performActionMotions','onDatabaseLoaded','VarianceFormulaJS','MVPaz','currentAction','focus','process_VisuMZ_BattleCore_CreateRegExp','CriticalHitRateJS','battleAnimation','skillItemWindowRectMiddle','Scene_Battle_itemWindowRect','exit','StartTurnWait','KKmjc','fwtnD','canUseItemCommand','SFRgI','DefaultSoftScaler','battleEnd','contentsOpacity','isAnyoneSkewing','nextActiveWeaponSlot','Window_BattleStatus_drawItemImage','isBattleCoreTargetScope','_preBattleCommonEvent','placeActorName','refreshCursor','message1','Window_BattleLog_displayMiss','sHojS','targetActionSet','Elements','PreApplyAsTargetJS','DigitGroupingDamageSprites','isBattlerGrounded','mMCkT','ReflectPlayback','stvFu','battleAngle','setHandler','vqgFP','onGrowEnd','ATK','FlashDuration','CriticalDmgRate','center','isHiddenSkill','_createCursorArea','HJlKC','Window_BattleLog_update','HelpFight','okTargetSelectionVisibility','SufRM','CmdIconAutoBattle','popupDamage','aIFrs','bUBcf','processAnimationRequests','BattleManager_startTurn','CmdIconEscape','nUUEi','HKIsP','_battlePortrait','selectNextCommand','skillWindowRect','XHoWQ','dimColor1','Filename','_enemyId','canBattlerMove','changePaintOpacity','_enemyWindow','ActorCmd','ActSeq_Impact_ShockwaveEachTargets','itemHeight','ewBpf','VisuMZ_2_BattleSystemSTB','isPartyTpbInputtable','battlerShadowScaleX','xRTWM','TpbActiveChangeEnabled','SvBattlerMass-%1-%2','MotionFrameWait','Omxyq','performFlinch','JAikr','ActSeq_Mechanics_SwapWeapon','ActSeq_Camera_FocusTarget','pooEE','MAXHP','TaGBZ','SwitchCritical','charging','PBEjJ','occasion','PostDamageAsUserJS','textColor','critical','getNextSubjectFromPool','isCustomActionSequence','visible','getItemDamageAmountTextOriginal','DamageStyles','Setting','iconHeight','ilhyN','setBattlerFacePoint','maxCommands','drawActorFace','Sprite_Enemy_update','arPenFlat','_item','Style','CqLJS','Direction','_cursorSprite','refresh','nameY','svAnchorX','setActiveWeaponSlot','push','Window_SkillList_maxCols','animationId','ActSeq_Mechanics_StbExploit','waitForNewLine','ActSeq_Element_AddElements','command339','ekODp','RHUZK','LThmX','Game_BattlerBase_canGuard','ParseSkillNotetags','WYRhy','_stateIconSprite','_baseX','processDefeat','_flinched','uNOng','shadow','command119','getInputButtonString','StepDistanceY','removeBuffsAuto','onEnemyOk','drawItemBackground','Game_Battler_onBattleStart','DamageFlat','NameOffsetY','LMhur','loadBattleback2','changeBattlebacks','UXCIU','StZXQ','_currentActor','Parse_Notetags_Targets','_weaponImageId','GmCtP','AllowCollapse','updateAngleCalculations','updateSpin','Sprite_Battler_initMembers','animationWait','CriticalDmgFlat','alive\x20actors\x20not\x20target','Window_BattleLog_performMiss','Formula','Game_Battler_performMiss','placeTimeGauge','item','MotionType','VvDJG','updateRefresh','eHelF','autoBattleStyle','PostEndActionJS','MP_Flat','param','ParseClassNotetags','cancelButtonText','POST-','Sprite_Battler_setHome','damageContainer','ResetOffset','canGuard','PreStartBattleJS','filters','HxyYr','COMBATLOG','updatePhase','sZphV','regenerateAll','setupIconTextPopup','battleCoreTpbMainPhase','_additionalSprites','QoL','createAttachedSprites','spell','qCcaS','rcujM','dimColor2','resetResultSwitches','PrioritySortActors','hHsEV','setCustomDamageFormula','effect','setBattlerBattleCore','action','missile','AttachStateOffsetY','ActSeq_BattleLog_AddText','aJoLR','JS\x20BATTLE\x20VICTORY','_baseLineStack','_lastEnemy','stbGainInstant','Actor','clearRect','fLpKi','_battleLayoutStyle','ActSeq_Movement_HomeReset','weatherType','PostDamageJS','actorCommandSingleSkill','CastCertain','_homeY','_flashDuration','_weather','ncipq','displayCritical','_cancelButton','woWJa','ConfigManager_makeData','hide','splice','trtgw','clearFreezeMotion','wDtam','ParseStateNotetags','onSelectAction','25005gLnbYn','uCvpC','command3011','Scene_Battle_onEnemyCancel','StartTurnShow','AeIxz','extraPositionY','ChJYx','APhOz','ActSeq_Mechanics_CtbSpeed','fQSna','unFkO','alive\x20opponents','cqioO','bossCollapse','VGFIE','JacRj','AKQhN','ShowHpDmg','lDLCH','addBuff','waitForMovement','sAAWv','front\x20center','hasBeenDefeatedBefore','Scene_Battle_start','resizeWindowBorderStyle','Window_BattleLog_performEvasion','active','actionBattleCoreJS','isInputting','setAttack','_battleCoreBattleStartEvent','Scene_Battle_terminate','LEJjf','TQoiB','IFItV','Game_Party_removeActor','VisuMZ_1_SkillsStatesCore','commandStyleCheck','isFlipped','svBattlerName','ConvertActionSequenceTarget','AsUser','isFrameVisible','129887UzsHTr','isClicked','Game_Battler_clearMotion','Window_BattleLog_displayCurrentState','isOkEnabled','isSkewing','ActSeq_Impact_ZoomBlurTargetCenter','EscapeSuccessJS','_damageContainer','partyCommandWindowRectBorderStyle','StartTurnMsg','604578eNHfCw','_flipScaleX','randomInt','VisuMZ_1_MainMenuCore','CriticalDuration','freezeFrame','ZXFsG','Game_Action_executeDamage','Window_BattleLog_performCounter','initBattleCore','MeVuj','ppOvF','_skewWholeDuration','clearActiveWeaponSet','filterArea','findTargetSprite','setVisibleUI','PopupDuration','isBattleRefreshRequested','frameCount','igRgI','vtpUw','Game_Temp_requestAnimation','Exploiter','naIfX','processRandomizedData','isSideView','QGOpF','statusWindowRectBorderStyle','canUse','hitFlat','ShowTpDmg','cfVFM','Settings','KDiar','121PtbZQp','updateMotionCount','ActSeq_Mechanics_DamagePopup','ActSeq_Mechanics_ArmorPenetration','ActSeq_Horror_TVRemove','moveBattlerDistance','battleLayoutStyle','Spriteset_Battle_update','_borderPortraitDuration','statusWindowRect','vTTSX','IconStypeNorm','unshift','isOpen','AutoBattleOK','eDDTj','getSkillIdWithName','sbGtC','addedBuffs','indexOf','changeTurnOrderByCTB','createAnimationSprite','TextAlign','trim','ShowAddedBuff','makeBattleCommand','isOptionsCommandEnabled','createPartyCommandWindowBattleCore','ByXwJ','_tpbNeedsPartyCommand','commandEscape','addSkillCommands','ActSeq_Impact_ShockwaveCenterTargets','_tempActor','PARTY','battleSpin','TfHFo','statusText','getBattlePortrait','changeCtbChargeTime','addGeneralOptions','weaponTypes','svShadow','_backAttachmentSprite','PostDamage%1JS','_actorCommandWindow','calcWindowHeight','FIGGW','DloMB','waitCount','friendsUnit','Sprite_Actor_setActorHome','eraseState','isBattleTest','itemLineRect','top','YlmKA','dqObQ','removeHorrorEffect','_animationContainer','placeStateIcon','qdEyu','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','nzGfW','setupBattleback','ActSeq_Weapon_ClearActiveWeapon','ActSeq_Mechanics_FtbAction','equipSlots','setup','isAutoBattle','FCSDZ','selectNextActor','AVMGX','Window_BattleLog_performReflection','isAnyProjectilePresent','AS\x20TARGET','UWfyB','_text','isForOpponent','isAnyoneGrowing','displayReflectionPlayBack','createChildSprite','PbeMz','itemEffectAddNormalState','isDying','drawItem','QGmYJ','_index','updateVisibility','default','Window_ItemList_maxCols','Targets2','isConfused','magicReflection','MmVVX','_skewEasing','partyCommandWindowRectXPStyle','IPTIW','Height','HpGauge','makeData','targetObjects','tiNrO','HitRate','displayHpDamage','Scale','CriticalHitFlat','Window_BattleLog_performActionStart','ARRAYSTR','pushBaseLine','isTpbCharged','NEqmL','ActSeq_Zoom_Reset','skillId','makeTargetSprites','ActSeq_Target_RandTarget','isImmortal','StatusWindowAttachmentFront','LastSelected','drawItemImageXPStyle','EzEFs','bind','actorCommandAutoBattle','qWrDl','parseForcedGameTroopSettingsBattleCore','portrait','UAmYp','stateMotionIndex','numTargets','_opacityDuration','mpvuP','concat','onSkewEnd','ActSeq_Mechanics_DeathBreak','WwapF','States','current\x20target','_updateClientArea','playReflection','startFloat','isWaiting','isMagical','performCastAnimation','_createEffectsContainer','_actorSprites','removeImmortal','_growEasing','IconSet','ActSeq_Set_SetupAction','createContents','ActionCenteredName','performActionEnd','pzKLA','PopupPosition','_growDuration','vhKZR','MANUAL','kkWCc','ShowSubstitute','qRLVs','isAutoBattleCommandAdded','setMoveEasingType','_motion','_lastPluginCommandInterpreter','floatBattler','traitObjects','vjRJJ','refreshBattlerMotions','removeActor','_battlerContainer','oyxJs','StatusWindowAttachmentBack','vfvkq','battleCamera','requestMotion','loadPicture','dead\x20battlers','iterateBattler','ZUQxI','onJumpEnd','hasSkill','DSpcq','commandFight','isFastForward','VisuMZ_3_ActSeqProjectiles','not\x20focus','maxLines','Game_Interpreter_terminate','BaDJC','redraw','ActSeq_Movement_BattleStep','pUtRk','prepareBorderActor','statusTextAutoBattleStyle','eVTfw','applyItem','ActSeq_Horror_GlitchRemove','startSkew','DTB','showPortraits','setupActionSet','FocusX','drawLineText','endBattle','battleDisplayText','GTtiA','addShowHpGaugeCommand','makeDamageValue','AS\x20USER','isMVAnimation','LrCoM','%1EndActionJS','Game_Battler_clearDamagePopup','haycT','WaitForFloat','WtypeId','_executedValue','allowCollapse','updateSkew','moveToStartPositionBattleCore','_eventId','Window_PartyCommand_initialize','skills','isSceneBattle','isCertainHit','Window_BattleLog_performMagicEvasion','_flashColor','endAction','toUseBoostPoints','helpAreaHeight','isTeamBased','ActSeq_Movement_WaitForMovement','isAtbCastingState','PopupShiftX','removeDamageSprite','_motionType','SceneManager_isSceneChanging','setActiveWeaponSet','_effectDuration','iconIndex','sNfrj','traitSet','adjustPosition_1for1','JSON','createEnemyNameContainer','IconStypeMagic','createActorCommandWindow','dgNBR','getDualWieldTimes','_shadowScaleY','MpGaugeOffsetY','BattleManager_processVictory','BsGJK','type','Targets','emerge','hpHealingFmt','LUK','_back1Sprite','TargetLocation','WaitForJump','pNscV','VisuMZ_0_CoreEngine','_frontAttachmentSprite','ActSeq_Impact_ColorBreak','updateFloat','zfLCQ','getWtypeIdWithName','makeActionOrders','performRecovery','boxWidth','displayItemMessage','_updateCursorFilterArea','dxfub','KazPv','actions','BattleManager_makeActionOrders','enemy','VisuMZ_4_CombatLog','_forcedBattleLayout','initMembersBattleCore','_lastRegenFrameCount','_animation','usePremadeActionSequence','fight','%1StartTurnJS','esglS','updateHelp','ARRAYFUNC','%1RegenerateJS','split','missle','Scene_Map_updateCallMenu','head','_effectsContainer','OlRIK','TEIAr','TKtYq','taavC','optDisplayTp','drawSkillCost','left','AllowRandomSpeed','StatusWindowAttachmentFrontOffsetX','PVFjJ','setupDamagePopup','MxhMN','makeActionListAutoAttack','Uhvap','rnhzE','forceAction','%1StartActionJS','round','NewPopupBottom','HelpEscape','Weapon-%1-%2','match','Sprite_Battler_isMoving','addCustomCommands','eKRpT','Armor-%1-%2','SkewY','VariableHeal','dataId','_battlerName','createBattleField','_damagePopupArray','DefaultStyle','Buffs','Sprite_StateIcon_updateFrame','PreEndActionJS','_jumpMaxHeight','+%1\x20MP','drawGauge','speed','description','dead','vLVhO','ZOlBQ','HKUJY','Mufvk','isForOpponentBattleCore','AdjustRect','return\x200','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','getBattlePortraitOffsetX','evade','BattleManager_cancelActorInput','ShowCritical','animation','attackAnimationIdSlot','isChangingOpacity','initBattlePortrait','getColor','autoSelectLastSelected','Sprite_Battler_damageOffsetY','StatusWindowSkinHide','PreRegenerateJS','ActSeq_Skew_WaitForSkew','alive\x20battlers\x20not\x20target','ChantStyle','clearWeaponAnimation','VisuMZ_4_BreakShields','pduil','ActSeq_Movement_WaitForScale','battlerSmoothImage','guard','uAxEd','dcLkX','xmfRk','_duration','ActSeq_Weapon_SetActiveWeapon','vejzq','WaitForZoom','EhAJN','Scene_Battle_commandFight','WrShg','isDebuffAffected','BreakShields','MotionAni','StepDistanceX','VIgQR','okButtonText','flashColor','vAitb','mtrjU','command357','members','animationShouldMirror','callOptions','targetSpritePosition','isBorderStylePortraitShown','getLastPluginCommandInterpreter','svBattlerAnchorY','Game_BattlerBase_isStateResist','compareBattlerSprites','setBattleCameraPoint','_jumpHeight','cameraOffsetDuration','ShowCounter','VisuMZ_2_DragonbonesUnion','mainSpriteScaleY','onActorCancel','_actor','%1Damage%2JS','startGrow','floor','_tpbState','textWidth','NrdZW','EfErb','isForRandom','ActSeq_Projectile_Animation','loadSystem','_svBattlerData','_linkedSprite','Window_BattleLog_displayCritical','removedStateObjects','ActSeq_BattleLog_UI','JS\x20%1DAMAGE\x20%2','updateStatusWindowPosition','startInput','mDWSi','mainFontSize','isStateResist','updateStart','isAnimationPlaying','Sprite_Actor_moveToStartPosition','includes','_skewX','dLjca','applySoftDamageCap','ParseWeaponNotetags','GuardFormulaJS','yWbOz','makeActions','angleDuration','DamageDisplay','randomTargets','addAttackCommand','getEnemyIdWithName','victory','isBypassDamageCap','Sprite_Battler_setBattler','xYION','status','uXZRE','ZiMCp','Game_Party_addActor','_growY','AutoBattle','reserveCommonEvent','_dimmerSprite','displayMiss','guardSkillId','updateLink','CmdIconItem','IBiqo','updateCancel','CmdTextAlign','_forcing','commandAutoBattle','KdJMi','parameters','_floatEasing','forceEscapeSprite','abs','move','Debuffs','process_VisuMZ_BattleCore_PluginParams','_lineHeight','abnormal','performAction','getNextSubject','SvMotionIdleSolo-%1-%2','EAhOA','pattern','isUndecided','physical','addAutoBattleCommand','startOpacity','wtypeId','JS\x20%1START\x20ACTION','qRYvn','SkipPartyCmd','PostStartBattleJS','setBattleZoom','updateBossCollapse','uJsXO','attackAnimationId1','VariableDmg','ActSeq_Motion_PerformAction','displayType','addEscapeCommand','ActSeq_Set_FinishAction','hkXeZ','isBattleFlipped','PXMXm','wXajS','Battleback','extraHeight','_svBattlerSprite','createStateSprite','ActSeq_ChangeSkew','isAnyoneSpinning','addGuardCommand','showHelpWindow','CriticalHitMultiplier','CalcEscapeRatioJS','AnimationID','alive\x20enemies','finishActorInput','applyGuard','createDamageContainer','_updateCursorArea','CheckSkillCommandShowSwitches','QKMeZ','1:1','Duration','_regionBattleback2','createBorderStylePortraitSprite','isSpriteVisible','battleMembers','cIxVU','uiMenuStyle','Alhyz','ARRAYEVAL','_forcedBattlers','VariableID','_lines','setHue','DYAxo','onEscapeFailure','VmUPU','Game_Map_battleback2Name','BattleCmdList','isMagicSkill','titem','currentValue','call','FaceAway','WaitForAnimation','_colorType','displayBuffs','GroupDigits','TuNrx','uzfxo','CopyCombatLog','Xijrq','ActSeq_Horror_NoiseRemove','battleCameraData','isSpinning','stop','isEscapeCommandEnabled','AutoNotetag','xRcvy','replace','COMBAT\x20LOG','chantStyle','nPwse','thrust','frontviewSpriteY','setBackgroundType','updatePosition','BattleCore','isActionSelectionValid','setActorHome','AttachStateOffsetX','onAngleEnd','executeDamage','_autoBattleWindow','ActionEnd','tpbCommandFight','ActionItemMsg','performSubstitute','Scene_Map_initializeAfter','KXLkB','result','ActSeq_Horror_TVCreate','createPartyCommandWindow','Toani','hasSvBattler','_reflectionTarget','updateCommandNameWindow','updateAttachmentSprites','_attackAnimationId','Game_Action_itemEffectAddAttackState','ceil','isGuardWaiting','IjkQw','_floatWholeDuration','Game_Actor_equips','createEnemies','applyResultSwitches','drawItemStatusXPStyle','TpGaugeOffsetY','setWaitMode','AXpld','EVeED','isItem','startTurn','_interpreter','PrioritySortActive','pages','_distortionSprite','_offsetY','Amp','Parse_Notetags_Action','itemRect','_jumpWholeDuration','BattleManager_updatePhase','addCombatLogCommand','UgQJP','Window_BattleLog_refresh','_defeatedEnemies','damageRate','gXvZW','QClmL','isActor','mOPJl','ULikW','performEvasion','_battleCoreBattleResumeAfter','eZrDn','commandStyle','_multipliers','startWeaponAnimation','opponentsUnit','isJumping','XlPDz','SvMotionIdleMass-%1-%2','Strength','updateShadowBattleCore','ActiveTpbOptionsMessage','createLowerLayer','AGI','WqFAb','TBwIo','Ipyws','StateIconOffsetY','visualHpGauge','NameAlwaysSelectOnly','setupBattlebackBattleCore','Name','ZieST','ActSeq_Movement_MoveBy','sBeTz','updateShadowScale','addSingleSkillCommand','RTGbQ','QsOXH','ActSeq_Animation_AttackAnimation2','addChild','currentSymbol','uVlCC','changeBattlerOpacity','damageFlat','isDuringNonLoopingMotion','_updateFilterArea','WrbJc','JS\x20%1START\x20BATTLE','ParseActorNotetags','adjustFlippedBattlefield','ActSeq_Animation_ShowAnimation','iMuvw','Radius','min','drawItemStatusListStyle','SideviewSelect','updateTargetPosition','ILABt','hmVBF','PjKEW','atfoQ','iiqeQ','mERmO','performDamage','lmhxZ','Sprite_Battler_update','walk','yTpge','wfStg','_enemySprites','effects','windowAreaHeight','ChangeOrderBy','index','_totalValue','height','BattleLog','processVictory','prev\x20target','preemptive','extraPositionScaledY','PreStartTurnJS','pop','evalDamageFormulaBattleCore','getHardDamageCap','_tempBattler','updateAction','process_VisuMZ_BattleCore_PreBattleCommonEvent','callOkHandler','addBattleCoreAutoBattleStartupCommand','updateCallMenu','_shadowScaleX','ShowMissEvasion','_itemWindow','cONwS','mnTxc','Game_BattlerBase_initMembers','tFKJp','isShownOnBattlePortrait','JS\x20ESCAPE\x20FAILURE','_currentAngle','_jumpDuration','NClPj','1056206tnGpao','isBattleMember','gainBravePoints','isAnyoneMoving','JS\x20%1END\x20TURN','getBattlePortraitFilename','isCustomBattleScope','TiHeZ','MDF','logWindowRect','MWqNa','Scene_Battle_helpWindowRect','Window_BattleLog_performRecovery','Enemy-%1-%2','isMeleeMultiTargetAction','weaponImageId','undecided','waitForJump','updateCustomActionSequence','isAlwaysHidden','AmSxt','isAttack','wPlQc','commandSymbol','ActSeq_Movement_Skew','innerHeight','DistanceX','turnOrderChangeOTB','mpHealingFmt','pekaK','makeTargetsBattleCore','ActSeq_Mechanics_BoostPointsStoreData','createAllWindows','getTraitSetKeys','forceMotion','vqcbi','updateBorderSprite','faceRect','ActSeq_BattleLog_PushBaseLine','gdTOw','createInnerPortrait','dQuqA','updatePadding','setBattleCameraOffset','xXHTh','Reveal','hardDamageCap','qfiHF','drawItemImageListStyle','setBattler','performAttackSlot','StatusWindowSkinFilename','itemTextAlign','_enemies','performMoveToTargets','addImmortal','QBdbV','isSkipPartyCommandWindow','Yxfks','Game_System_initialize','WaitForProjectile','fontSize','skOsC','ShowAddedState','performJump','measureTextWidth','isPreviousSceneBattleTransitionable','Game_Action_isForRandom','zpAyE','WaitCount','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','applyFreezeMotionFrames','commandNameWindowCenter','transform','JmaBj','CwPxG','FaceDirection','PreStartActionJS','addState','setBattleAngle','Sprite_Enemy_loadBitmap','clearDamagePopup','setHelpWindow','SkillItemMiddleLayout','ActionEndUpdate','_cacheTextWidth','ActSeq_Movement_FaceDirection','gradientFillRect','-%1\x20MP','SoGcP','ResetFocus','svBattlerData','TpbGaugeOffsetX','759063sDoLEd','zoomDuration','kahNt','angle','process_VisuMZ_BattleCore_Notetags','_growX','displayCounter','ActSeq_Camera_Clamp','refreshStatusWindow','showNormalAnimation','HitFlat','vdGRz','TCFpv','collapseType','attack','BackColor','_angleEasing','BattleVictoryJS','close','NfTpg','inputtingAction','lWRPc','ActSeq_Mechanics_CtbOrder','setupRgbSplitImpactFilter','Sprite_Enemy_updateCollapse','Scene_Map_launchBattle','checkShowHideSwitchNotetags','SkewX','trueRandomTarget','command283','_angleRevertOnFinish','thURf','value','rowSpacing','LKeOU','canMove','autoMeleeMultiTargetActionSet','startBattle','1171tnSAfY','drawItemImagePortraitStyle','ScaleDown','CheckMapBattleEventValid','%1StartBattleJS','equips','createDistortionSprite','lkmNx','PostEndTurnJS','_back2Sprite','createActionSequenceProjectile','battleCommandName','HcmKn','%1Event','_actions','YvJFp','BuZds','XqQvE','_freezeMotionData','_padding','_skewY','createAutoBattleWindow','DisplayAction','Sprite_Enemy_updateStateSprite','PostEndBattleJS','process_VisuMZ_BattleCore_DamageStyles','getDamageStyle','slices','AaMUO','TnBxM','Sprite_Battler_startMove','anchorY','Spriteset_Battle_createLowerLayer','opacity','processRefresh','_targetSkewY','ActSeq_Mechanics_RemoveState','pzuVZ','vwFaP','hpDamageFmt','smooth','performCollapse','toLowerCase','nEuSo','HP_Flat','moveBattlerToPoint','loadEnemy','innerWidth','extraPositionX','Window_Options_statusText','_targets','startActorCommandSelection','applyData','Scene_Battle_skillWindowRect','eZmdF','createTargetsJS','Victory','loadSvEnemy','_cache','addItemCommand','bUReP','EscapeFailureJS','ActSeq_Movement_MoveToPoint','setLastPluginCommandInterpreter','Enemy','setupShockwaveImpactFilter','Window_BattleLog_displayFailure','displayFailure','setupBattleCore','isAnimationShownOnBattlePortrait','createDamageSprite','WaitCount1','getAttackMotion','Parse_Notetags_TraitObjects','BattleManager_onEscapeFailure','isForAll','AtKgE','alive\x20actors\x20not\x20user','maxCols','startPartyCommandSelection','addFightCommand','DefaultDamageStyle','autoMeleeSingleTargetActionSet','ElementStatusCore','Game_Enemy_setup','attackMotions','refreshMotion','VisuMZ_2_HorrorEffects','Scene_Battle_startEnemySelection','WaitCount2','startJump','getConfigValue','canAddSkillCommand','updateEffectContainers','ActSeq_DB_DragonbonesTimeScale','HP_Rate','setValue','setupBattleCoreData','displayActionResults','_createDamageContainer','bAyAe','sortDamageSprites','_handlers','createActorCommandWindowBattleCore','_homeX','battleMove','textSizeEx','buffRemove','_targetSkewX','BattleManager_startAction','mainSpriteHeight','gaugeLineHeight','drawBackgroundRect','isPreviousScene','playEnemyAttack','updatePositionBattleCore','YYgBk','BattleManager_endAction','vpCZM','BattleStartEvent','JIKuN','setupMotionBlurImpactFilter','ActSeq_Mechanics_BreakShieldChange','front\x20base','glitch','xdLoJ','hpDamage','makeCommandList','requestDragonbonesAnimation','makeTargetSelectionMoreVisible','aMCYu','+%1','scope','ActSeq_Mechanics_Multipliers','playEnemyDamage','ActSeq_Mechanics_WaitForEffect','updateStyleOpacity','Scene_Battle_createHelpWindow','isSkillItemWindowsMiddle','CreateActionSequenceTargets','regenerateAllBattleCore','toUpperCase','_list','process_VisuMZ_BattleCore_Action_Notetags','AFvSa','Game_Map_battleback1Name','rqEqN','ShowWeapon','setSkill','RegExp','ActSeq_Movement_Float','BattleManager_startBattle','makeAutoBattleActions','_active','_battleCoreAddedElements','refreshActorPortrait','Mirror','mEojv','Sprite_Actor_setBattler','useItem','ActSeq_Target_CurrentIndex','aCYAr','reverse','tYjrK','OffsetX','Scene_ItemBase_applyItem','clearHorrorEffects','ActSeq_Angle_Reset','UNTITLED','battleFloat','DefeatEvent','clearBattleCoreData','isFightCommandEnabled','QhrMT','performSTBExploiter','_targetFloatHeight','pow','applyEasing','repeats','Scene_Battle_stop','getBattlePortraitOffsetY','createBattleUIOffsetY','changeAtbChargeTime','vuXpg','teJnx','AlphaFilter','Game_Action_evalDamageFormula','customDamageFormula','_cursorArea','PeSYs','revealNewWeaknesses','some','_targetGrowY','contents','Scene_Battle_startActorSelection','VisuMZ_2_BattleSystemCTB','launchBattle','lgtpA','SlotID','statusWindowRectXPStyle','IYSXa','addDamageSprite','tpbActorSwitchConditionsMet','ArPenFlat','weapons','_statusWindow','delay','dcOor','updateBitmap','CriticalHitRate','eOhbV','battleSys','createJS','FocusY','kggvv','EscapeFail','float','padding','removeChild','pnrtJ','QzXhQ','setBattlePortrait','qhboz','maxBattleMembers','clearMotion','createHelpWindow','tkGzs','Window_BattleLog_displayTpDamage','MIN_SAFE_INTEGER','EVAL','adjustWeaponSpriteOffset','registerDefeatedEnemy','battleJump','displayStartMessages','targetDistortionSpritePosition','performActionStart','OverallFormulaJS','addBattleCoreAutoBattleStyleCommand','xwsGV','ZfQof','IeyeM','log','IJZYC','ShowAddedDebuff','Slot','forceSelect','svBattlerAnchorX','CommandAddOptions','YnJOw','changeAtbCastTime','popBaseLine','ShowFailure','mhp','VisuMZ_3_BoostAction','bJdFb','Game_Battler_forceAction','drawSingleSkillCost','isGrowing','stepForward','isQueueOptionsMenu','battleCorePreBattleCommonEvent','displayAddedStates','partyCommandWindowRectDefaultStyle','displayRemovedStates','StateIconOffsetX','ChargeRate','aRqoF','huUIW','battlerShadowScaleY','yAxsj','NUM','IrOYI','casting','DamageType%1','uVBWW','criticalDmgRate','Game_Battler_onTurnEnd','Variable','ActSeq_Motion_FreezeMotionFrame','ZqcVz','isBusy','clamp','xgMTG','process_VisuMZ_BattleCore_BaseTroops','onMoveEnd','ParseAllNotetags','PortraitScale','ParseArmorNotetags','onEnemyCancel'];const _0xf2f935=_0x33da;(function(_0x586040,_0x39f535){const _0x4b2099=_0x33da;while(!![]){try{const _0x42139d=parseInt(_0x4b2099(0x624))*-parseInt(_0x4b2099(0x201))+parseInt(_0x4b2099(0x91e))+-parseInt(_0x4b2099(0x62f))+-parseInt(_0x4b2099(0xb8d))+-parseInt(_0x4b2099(0x4e4))*-parseInt(_0x4b2099(0x5f7))+-parseInt(_0x4b2099(0x652))*parseInt(_0x4b2099(0x9a1))+parseInt(_0x4b2099(0x97b));if(_0x42139d===_0x39f535)break;else _0x586040['push'](_0x586040['shift']());}catch(_0x335121){_0x586040['push'](_0x586040['shift']());}}}(_0x2245,0xb33bc));var label=_0xf2f935(0x886),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0xf2f935(0xba4)](function(_0x1bd312){const _0x1ba65a=_0xf2f935;return _0x1bd312[_0x1ba65a(0x80f)]&&_0x1bd312[_0x1ba65a(0x7a1)][_0x1ba65a(0x7fe)]('['+label+']');})[0x0];VisuMZ[label][_0xf2f935(0x650)]=VisuMZ[label][_0xf2f935(0x650)]||{},VisuMZ[_0xf2f935(0xbda)]=function(_0xc5e446,_0x48c879){const _0x53e1c7=_0xf2f935;for(const _0x5f24cb in _0x48c879){if(_0x53e1c7(0x65c)!==_0x53e1c7(0x65c)){function _0x4765fa(){const _0x1845f5=_0x53e1c7;if(this[_0x1845f5(0x9af)][_0x1845f5(0xa60)](_0x550580=>_0x550580[_0x1845f5(0x5b0)]()&&_0x550580[_0x1845f5(0x6df)]()))return!![];}}else{if(_0x5f24cb[_0x53e1c7(0x78e)](/(.*):(.*)/i)){const _0x42c81a=String(RegExp['$1']),_0x3c7b25=String(RegExp['$2'])['toUpperCase']()[_0x53e1c7(0x669)]();let _0x13176c,_0x44735d,_0x556656;switch(_0x3c7b25){case _0x53e1c7(0xaaf):_0x13176c=_0x48c879[_0x5f24cb]!==''?Number(_0x48c879[_0x5f24cb]):0x0;break;case _0x53e1c7(0x398):_0x44735d=_0x48c879[_0x5f24cb]!==''?JSON[_0x53e1c7(0x502)](_0x48c879[_0x5f24cb]):[],_0x13176c=_0x44735d['map'](_0xb6c3b8=>Number(_0xb6c3b8));break;case _0x53e1c7(0xa86):_0x13176c=_0x48c879[_0x5f24cb]!==''?eval(_0x48c879[_0x5f24cb]):null;break;case _0x53e1c7(0x860):_0x44735d=_0x48c879[_0x5f24cb]!==''?JSON[_0x53e1c7(0x502)](_0x48c879[_0x5f24cb]):[],_0x13176c=_0x44735d['map'](_0x3c2240=>eval(_0x3c2240));break;case _0x53e1c7(0x745):_0x13176c=_0x48c879[_0x5f24cb]!==''?JSON[_0x53e1c7(0x502)](_0x48c879[_0x5f24cb]):'';break;case _0x53e1c7(0x32b):_0x44735d=_0x48c879[_0x5f24cb]!==''?JSON[_0x53e1c7(0x502)](_0x48c879[_0x5f24cb]):[],_0x13176c=_0x44735d['map'](_0x22958a=>JSON[_0x53e1c7(0x502)](_0x22958a));break;case _0x53e1c7(0x3ba):_0x13176c=_0x48c879[_0x5f24cb]!==''?new Function(JSON['parse'](_0x48c879[_0x5f24cb])):new Function(_0x53e1c7(0x7a9));break;case _0x53e1c7(0x772):_0x44735d=_0x48c879[_0x5f24cb]!==''?JSON['parse'](_0x48c879[_0x5f24cb]):[],_0x13176c=_0x44735d[_0x53e1c7(0x2ab)](_0x5e5a5a=>new Function(JSON[_0x53e1c7(0x502)](_0x5e5a5a)));break;case _0x53e1c7(0x277):_0x13176c=_0x48c879[_0x5f24cb]!==''?String(_0x48c879[_0x5f24cb]):'';break;case _0x53e1c7(0x6be):_0x44735d=_0x48c879[_0x5f24cb]!==''?JSON[_0x53e1c7(0x502)](_0x48c879[_0x5f24cb]):[],_0x13176c=_0x44735d[_0x53e1c7(0x2ab)](_0x3c46e8=>String(_0x3c46e8));break;case _0x53e1c7(0x380):_0x556656=_0x48c879[_0x5f24cb]!==''?JSON[_0x53e1c7(0x502)](_0x48c879[_0x5f24cb]):{},_0xc5e446[_0x42c81a]={},VisuMZ[_0x53e1c7(0xbda)](_0xc5e446[_0x42c81a],_0x556656);continue;case _0x53e1c7(0xaef):_0x44735d=_0x48c879[_0x5f24cb]!==''?JSON[_0x53e1c7(0x502)](_0x48c879[_0x5f24cb]):[],_0x13176c=_0x44735d['map'](_0x4062b5=>VisuMZ[_0x53e1c7(0xbda)]({},JSON['parse'](_0x4062b5)));break;default:continue;}_0xc5e446[_0x42c81a]=_0x13176c;}}}return _0xc5e446;},(_0x33f5ed=>{const _0x507b49=_0xf2f935,_0x3d37cb=_0x33f5ed[_0x507b49(0x222)];for(const _0x4ba42c of dependencies){if(!Imported[_0x4ba42c]){alert(_0x507b49(0x44d)[_0x507b49(0x460)](_0x3d37cb,_0x4ba42c)),SceneManager[_0x507b49(0x513)]();break;}}const _0x877720=_0x33f5ed[_0x507b49(0x7a1)];if(_0x877720[_0x507b49(0x78e)](/\[Version[ ](.*?)\]/i)){if(_0x507b49(0x4ee)==='ancjZ'){function _0x1bbbac(){const _0x455417=_0x507b49;return this[_0x455417(0xad8)](_0x455417(0x718));}}else{const _0x4de64d=Number(RegExp['$1']);if(_0x4de64d!==VisuMZ[label][_0x507b49(0x2d1)]){if(_0x507b49(0x607)!==_0x507b49(0x607)){function _0x5c909d(){const _0x16fe4d=_0x507b49;return _0x1d4017['_scene'][_0x16fe4d(0x54f)]&&_0x2f59bc[_0x16fe4d(0xb95)][_0x16fe4d(0x54f)][_0x16fe4d(0x613)]&&_0x2b85e8['_scene'][_0x16fe4d(0x54f)][_0x16fe4d(0x953)][_0x16fe4d(0x7fe)](this[_0x16fe4d(0x45b)]);}}else alert(_0x507b49(0x7aa)[_0x507b49(0x460)](_0x3d37cb,_0x4de64d)),SceneManager[_0x507b49(0x513)]();}}}if(_0x877720[_0x507b49(0x78e)](/\[Tier[ ](\d+)\]/i)){const _0x3bdd02=Number(RegExp['$1']);if(_0x3bdd02<tier)alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x507b49(0x460)](_0x3d37cb,_0x3bdd02,tier)),SceneManager['exit']();else{if(_0x507b49(0x1ec)===_0x507b49(0x1ec))tier=Math[_0x507b49(0x205)](_0x3bdd02,tier);else{function _0x56600a(){const _0xbc3998=_0x507b49;this[_0xbc3998(0x65a)]=0x14,this[_0xbc3998(0xb06)]['bitmap']=_0x536150;_0x30058a[_0xbc3998(0xb95)][_0xbc3998(0x46a)]()?(this[_0xbc3998(0xb06)]['x']=0x0,this[_0xbc3998(0x48e)]=_0x2d9b4e[_0xbc3998(0x89d)](_0x14bd10[_0xbc3998(0x41b)]/0x2)):(this[_0xbc3998(0xb06)]['x']=this[_0xbc3998(0x41b)],this[_0xbc3998(0x48e)]=this[_0xbc3998(0x41b)]*0x3/0x4);this[_0xbc3998(0xb06)][_0xbc3998(0x9c2)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this['height'];const _0x4dc886=_0x5a2ca1[_0xbc3998(0x3fa)]();_0x4dc886&&(this['_borderPortraitTargetX']+=_0x4dc886['getBattlePortraitOffsetX'](),this[_0xbc3998(0xb06)]['y']+=_0x4dc886[_0xbc3998(0xa55)]());}}}}VisuMZ[_0x507b49(0xbda)](VisuMZ[label][_0x507b49(0x650)],_0x33f5ed[_0x507b49(0x821)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x1c4c7c){const _0x1ca653=_0xf2f935;let _0x2c5358=[];for(const _0x53c35f of _0x1c4c7c){_0x2c5358=_0x2c5358[_0x1ca653(0x6d5)](VisuMZ[_0x1ca653(0x621)](_0x53c35f));}return _0x2c5358[_0x1ca653(0xba4)](_0xe0037d=>_0xe0037d);},VisuMZ['ConvertActionSequenceTarget']=function(_0x23ec09){const _0xe49f34=_0xf2f935,_0x59f302=BattleManager['allBattleMembers']()[_0xe49f34(0xba4)](_0x3eed87=>_0x3eed87&&_0x3eed87[_0xe49f34(0x3c7)]()),_0x4c53b8=BattleManager[_0xe49f34(0x370)],_0x46139b=BattleManager[_0xe49f34(0xaf5)],_0x540d51=BattleManager[_0xe49f34(0x4a1)]?BattleManager[_0xe49f34(0x4a1)][_0xe49f34(0x37f)](0x0):_0x59f302;_0x23ec09=_0x23ec09['toLowerCase']()['trim']();if(_0x23ec09==='user')return[_0x4c53b8];else{if(_0x23ec09===_0xe49f34(0x6da))return[_0x46139b];else{if(_0x23ec09===_0xe49f34(0x905)){if(_0xe49f34(0xb62)!==_0xe49f34(0xb62)){function _0x2c7692(){const _0x3207e0=_0xe49f34;if(this[_0x3207e0(0x6f4)][_0x3207e0(0x2d2)])this[_0x3207e0(0x2f1)]=(this[_0x3207e0(0x2f1)]+0x1)%0x4;else this['_pattern']<0x2?this[_0x3207e0(0x2f1)]++:this[_0x3207e0(0x9f7)]();this['_motionCount']=0x0;}}else{if(_0x46139b){const _0x9eb7c2=_0x540d51[_0xe49f34(0x665)](_0x46139b);return _0x9eb7c2>=0x0?[_0x540d51[_0x9eb7c2-0x1]||_0x46139b]:[_0x46139b];}}}else{if(_0x23ec09==='text\x20target'){if(_0xe49f34(0x4e9)==='zqsBZ'){if(_0x46139b){const _0x3da383=_0x540d51[_0xe49f34(0x665)](_0x46139b);return _0x3da383>=0x0?[_0x540d51[_0x3da383+0x1]||_0x46139b]:[_0x46139b];}}else{function _0x30b29f(){const _0x171650=_0xe49f34,_0x23c4fa=_0x3a8cbb[_0x171650(0x3fa)](),_0x164d57=_0x23c4fa[_0x171650(0x310)]();if(_0x164d57)_0x164d57[_0x171650(0x4ac)]();const _0xc1fc24=_0x59c33f['aliveMembers']()[_0x171650(0xba4)](_0x1ec583=>_0x1ec583['isTpbCharged']()&&_0x1ec583['canInput']()),_0xdfde52=_0xc1fc24[_0x171650(0x665)](_0x23c4fa),_0x81cc30=_0xc1fc24[_0xdfde52+0x1];_0x1f1c04['_currentActor']=_0x81cc30||null;if(_0x81cc30)_0x81cc30['setActionState'](_0x171650(0x430));_0x23c4fa[_0x171650(0x291)](_0x171650(0x92e)),this[_0x171650(0x26e)]();}}}else{if(_0x23ec09==='all\x20targets')return _0x540d51;else{if(_0x23ec09===_0xe49f34(0x50d))return[_0x4c53b8][_0xe49f34(0x6d5)](_0x540d51);else{if(_0x23ec09===_0xe49f34(0x70b))return _0x59f302[_0xe49f34(0xba4)](_0xfde1f=>_0xfde1f!==_0x4c53b8&&!_0x540d51[_0xe49f34(0x7fe)](_0xfde1f)&&_0xfde1f[_0xe49f34(0x446)]());}}}}}}if(_0x4c53b8){if(_0x23ec09==='alive\x20friends'){if(_0xe49f34(0x55d)==='JAikr')return _0x4c53b8[_0xe49f34(0x684)]()[_0xe49f34(0x4ae)]();else{function _0xccf3fd(){const _0x313e80=_0xe49f34;this[_0x313e80(0x734)]=_0x3fe061['flashColor']||[0x0,0x0,0x0,0x0],this[_0x313e80(0x734)]=_0xa7f824[_0x313e80(0x4ad)](this['_flashColor']),this[_0x313e80(0x5e9)]=_0x34f882[_0x313e80(0x43f)]||0x0;const _0xd4eaf1=this['fontSize'](),_0x525883=_0x57bc32['floor'](_0xd4eaf1*0x1e),_0x164823=this['createChildSprite'](_0x525883,_0xd4eaf1);_0x164823[_0x313e80(0x266)][_0x313e80(0x568)]=_0x29dde3['getColor'](_0x2a4e2f[_0x313e80(0x568)]),_0x164823[_0x313e80(0x266)][_0x313e80(0xb39)](_0x2e988c,0x0,0x0,_0x525883,_0xd4eaf1,_0x313e80(0x535)),_0x164823['dy']=0x0;}}}else{if(_0x23ec09===_0xe49f34(0xbc1))return _0x4c53b8[_0xe49f34(0x684)]()[_0xe49f34(0x4ae)]()[_0xe49f34(0xba4)](_0x4c2de3=>_0x4c2de3!==_0x4c53b8);else{if(_0x23ec09===_0xe49f34(0x1fe))return _0x4c53b8[_0xe49f34(0x684)]()[_0xe49f34(0x4ae)]()['filter'](_0x1d7253=>_0x1d7253!==_0x46139b);else{if(_0x23ec09===_0xe49f34(0x4d2)){if(_0xe49f34(0x58c)!=='WYRhy'){function _0x532da9(){if(!_0x442867['value'](_0x4fe114))return!![];}}else return _0x4c53b8[_0xe49f34(0x684)]()['deadMembers']();}else{if(_0x23ec09[_0xe49f34(0x78e)](/FRIEND INDEX (\d+)/i)){const _0x371b49=Number(RegExp['$1']);return[_0x4c53b8[_0xe49f34(0x684)]()[_0xe49f34(0x7d5)]()[_0x371b49]];}}}}}if(_0x23ec09===_0xe49f34(0x603))return _0x4c53b8['opponentsUnit']()['aliveMembers']();else{if(_0x23ec09===_0xe49f34(0x4d9)){if(_0xe49f34(0x261)===_0xe49f34(0x27c)){function _0x15ff1e(){const _0x35a553=_0xe49f34;_0x2f6214[_0x35a553(0x886)][_0x35a553(0x70d)][_0x35a553(0x86d)](this),this[_0x35a553(0x520)]&&(this[_0x35a553(0x520)]=_0x20c1b9,_0xe6dabb[_0x35a553(0xb95)]['battleCoreResumeLaunchBattle']());}}else return _0x4c53b8['opponentsUnit']()['aliveMembers']()[_0xe49f34(0xba4)](_0xa46a92=>_0xa46a92!==_0x46139b);}else{if(_0x23ec09==='dead\x20opponents')return _0x4c53b8[_0xe49f34(0x8c5)]()[_0xe49f34(0x4c4)]();else{if(_0x23ec09[_0xe49f34(0x78e)](/OPPONENT INDEX (\d+)/i)){if(_0xe49f34(0x8f7)===_0xe49f34(0x494)){function _0x20cbda(){const _0x43cc0b=_0xe49f34;this[_0x43cc0b(0xaa4)]()?(this[_0x43cc0b(0x240)]=!![],this[_0x43cc0b(0x3a3)][_0x43cc0b(0x580)](_0x43cc0b(0x209),_0x5d0b93[_0x43cc0b(0x886)][_0x43cc0b(0x650)][_0x43cc0b(0x2af)][_0x43cc0b(0x8cb)])):this[_0x43cc0b(0x7d7)]();}}else{const _0x8f1426=Number(RegExp['$1']);return[_0x4c53b8['opponentsUnit']()[_0xe49f34(0x7d5)]()[_0x8f1426]];}}}}}}if(_0x23ec09===_0xe49f34(0xb8b))return $gameParty[_0xe49f34(0x4ae)]();else{if(_0x23ec09===_0xe49f34(0x9ee))return $gameParty[_0xe49f34(0x4ae)]()['filter'](_0x53898a=>_0x53898a!==_0x4c53b8);else{if(_0x23ec09===_0xe49f34(0x5ab))return $gameParty[_0xe49f34(0x4ae)]()[_0xe49f34(0xba4)](_0x32431b=>_0x32431b!==_0x46139b);else{if(_0x23ec09==='dead\x20actors')return $gameParty[_0xe49f34(0x4c4)]();else{if(_0x23ec09[_0xe49f34(0x78e)](/ACTOR INDEX (\d+)/i)){if(_0xe49f34(0xa1e)!=='xdLoJ'){function _0x31ab20(){this['setupCriticalEffect']();}}else{const _0x1fd7f5=Number(RegExp['$1']);return[$gameParty[_0xe49f34(0x7d5)]()[_0x1fd7f5]];}}else{if(_0x23ec09['match'](/ACTOR ID (\d+)/i)){if('jzyKd'==='jzyKd'){const _0x4bba7a=Number(RegExp['$1']);return[$gameActors[_0xe49f34(0x3fa)](_0x4bba7a)];}else{function _0x45a6d5(){const _0xabd438=_0xe49f34;if(!_0x172d6a[_0xabd438(0x731)]())return;_0x27c8db['ConvertParams'](_0x3ebbb6,_0x531601);const _0x5548ad=_0x2d309f[_0xabd438(0x7da)](),_0x4c060b=_0x31e19c[_0xabd438(0xb24)];if(!_0x5548ad)return;_0x23739f['_targetIndex']--,_0x1b4c7c[_0xabd438(0xaf5)]=_0x959e45[_0xabd438(0x4a1)][_0x49b876[_0xabd438(0x4c7)]]||null,_0x19f5cb[_0xabd438(0xaf5)]&&_0x4c060b['toUpperCase']()['trim']()!==_0xabd438(0xa49)&&_0x5548ad[_0xabd438(0x593)]([_0x4c060b]);}}}}}}}}if(_0x23ec09===_0xe49f34(0x850)){if(_0xe49f34(0xa42)!==_0xe49f34(0xa42)){function _0xaf3bb5(){const _0x7c7c5=_0xe49f34;_0x2241c4[_0x7c7c5(0x886)]['JS'][_0x13dc36][_0x7c7c5(0x86d)](this,this,this,_0x453625,0x0);}}else return $gameTroop[_0xe49f34(0x4ae)]();}else{if(_0x23ec09===_0xe49f34(0xbae)){if('PJVlu'===_0xe49f34(0x4aa))return $gameTroop['aliveMembers']()['filter'](_0x2604ba=>_0x2604ba!==_0x4c53b8);else{function _0x424f85(){const _0x55799a=_0xe49f34;if(!_0x323943[_0x55799a(0x731)]())return;_0x516093[_0x55799a(0xbda)](_0xa1204c,_0x145255);const _0x2c576a=_0xd6c2ed[_0x55799a(0x7da)](),_0x13e006=_0x17766a[_0x55799a(0xb24)];if(!_0x2c576a)return;_0x408019['_targetIndex']++,_0x274409[_0x55799a(0xaf5)]=_0x334011['_allTargets'][_0x3ffddd[_0x55799a(0x4c7)]]||null,_0x174193['_target']&&_0x13e006[_0x55799a(0xa2e)]()['trim']()!==_0x55799a(0xa49)&&_0x2c576a[_0x55799a(0x593)]([_0x13e006]);}}}else{if(_0x23ec09==='alive\x20enemies\x20not\x20target'){if(_0xe49f34(0x60d)!==_0xe49f34(0x5a0))return $gameTroop[_0xe49f34(0x4ae)]()[_0xe49f34(0xba4)](_0x4cca39=>_0x4cca39!==_0x46139b);else{function _0xd89710(){const _0x4c3938=_0xe49f34;this[_0x4c3938(0xa7a)]=0x0;}}}else{if(_0x23ec09===_0xe49f34(0x3da))return $gameTroop[_0xe49f34(0x4c4)]();else{if(_0x23ec09[_0xe49f34(0x78e)](/ENEMY INDEX (\d+)/i)){const _0x39fd00=Number(RegExp['$1']);return[$gameTroop[_0xe49f34(0x7d5)]()[_0x39fd00]];}else{if(_0x23ec09['match'](/ENEMY ID (\d+)/i)){if('OTvJg'!==_0xe49f34(0x8d8)){const _0x28434f=Number(RegExp['$1']);return $gameTroop[_0xe49f34(0x4ae)]()['filter'](_0x2106c5=>_0x2106c5[_0xe49f34(0x2cb)]()===_0x28434f);}else{function _0xd919c5(){const _0x102481=_0xe49f34;this['push'](_0x102481(0x63c),_0x28eea8);}}}}}}}}if(_0x23ec09==='alive\x20battlers')return _0x59f302[_0xe49f34(0xba4)](_0x4be96b=>_0x4be96b[_0xe49f34(0x33d)]());else{if(_0x23ec09===_0xe49f34(0x34f)){if(_0xe49f34(0x85d)!==_0xe49f34(0x87d))return _0x59f302['filter'](_0x14fc66=>_0x14fc66['isAlive']()&&_0x14fc66!==_0x4c53b8);else{function _0x4bb9e5(){const _0x192afb=_0xe49f34;this['_endBattle']=![],this[_0x192afb(0xac9)]=_0x46b3c4[_0x192afb(0xadb)],this['processBattleCoreJS'](_0x192afb(0x5c0)),_0x625490[_0x192afb(0x886)][_0x192afb(0xa38)][_0x192afb(0x86d)](this),this[_0x192afb(0xb99)](_0x192afb(0x837));}}}else{if(_0x23ec09===_0xe49f34(0x7b9))return _0x59f302[_0xe49f34(0xba4)](_0x137256=>_0x137256[_0xe49f34(0x33d)]()&&_0x137256!==_0x46139b);else{if(_0x23ec09===_0xe49f34(0x702))return _0x59f302[_0xe49f34(0xba4)](_0x42ace3=>_0x42ace3[_0xe49f34(0xb18)]());}}}return[];},PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x6e6),_0x535e37=>{const _0x4c25d8=_0xf2f935;if(!SceneManager[_0x4c25d8(0x731)]())return;VisuMZ['ConvertParams'](_0x535e37,_0x535e37);const _0x13c7c6=$gameTemp[_0x4c25d8(0x7da)](),_0x40eb42=BattleManager[_0x4c25d8(0x371)],_0x10c848=BattleManager[_0x4c25d8(0x370)],_0x43f884=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x4c25d8(0x37f)](0x0):[],_0x5d1efe=BattleManager[_0x4c25d8(0x3a3)];if(!_0x13c7c6||!_0x40eb42||!_0x10c848)return;if(!_0x40eb42[_0x4c25d8(0x5b0)]())return;if(_0x535e37[_0x4c25d8(0x9b7)])_0x5d1efe[_0x4c25d8(0x1e9)](_0x10c848,_0x40eb42[_0x4c25d8(0x5b0)]());_0x535e37[_0x4c25d8(0x2bb)]&&_0x5d1efe[_0x4c25d8(0x580)](_0x4c25d8(0x1df),_0x10c848,_0x43f884,!![]);if(_0x535e37[_0x4c25d8(0x340)])_0x5d1efe['push'](_0x4c25d8(0xa8c),_0x10c848,_0x40eb42);if(_0x535e37[_0x4c25d8(0x219)])_0x5d1efe[_0x4c25d8(0x580)](_0x4c25d8(0x60c));if(_0x535e37['CastAnimation'])_0x5d1efe[_0x4c25d8(0x580)](_0x4c25d8(0x6e0),_0x10c848,_0x40eb42);if(_0x535e37[_0x4c25d8(0x86f)])_0x5d1efe['push'](_0x4c25d8(0xb0d));_0x13c7c6[_0x4c25d8(0x8a6)](_0x4c25d8(0x275));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x3c2),_0x1f1aad=>{const _0x1d7539=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1d7539(0xbda)](_0x1f1aad,_0x1f1aad);const _0x54cff6=$gameTemp['getLastPluginCommandInterpreter'](),_0x576361=BattleManager['_action'],_0x47520f=BattleManager[_0x1d7539(0x370)],_0x3de8e7=BattleManager[_0x1d7539(0x4a1)]?BattleManager[_0x1d7539(0x4a1)]['slice'](0x0):[],_0x15913d=BattleManager[_0x1d7539(0x3a3)],_0x9a690e=_0x1f1aad[_0x1d7539(0x367)]??![];if(!_0x54cff6||!_0x576361||!_0x47520f)return;if(!_0x576361['item']())return;let _0x223d84=_0x9a690e?_0x15913d[_0x1d7539(0x74a)](_0x47520f):0x1;for(let _0x445069=0x0;_0x445069<_0x223d84;_0x445069++){_0x9a690e&&_0x47520f[_0x1d7539(0x8bc)]()&&_0x15913d[_0x1d7539(0x580)](_0x1d7539(0x73f),_0x47520f,_0x445069);if(_0x1f1aad[_0x1d7539(0x369)])_0x15913d[_0x1d7539(0x580)]('performAction',_0x47520f,_0x576361);if(_0x1f1aad[_0x1d7539(0x963)]>0x0)_0x15913d[_0x1d7539(0x580)](_0x1d7539(0x683),_0x1f1aad[_0x1d7539(0x963)]);if(_0x1f1aad[_0x1d7539(0x499)])_0x15913d[_0x1d7539(0x580)](_0x1d7539(0x504),_0x47520f,_0x3de8e7,_0x576361[_0x1d7539(0x5b0)]()[_0x1d7539(0x582)]);if(_0x1f1aad[_0x1d7539(0x86f)])_0x15913d['push'](_0x1d7539(0xb0d));for(const _0x43d48a of _0x3de8e7){if(_0x1d7539(0x867)!==_0x1d7539(0x591)){if(!_0x43d48a)continue;if(_0x1f1aad[_0x1d7539(0x417)])_0x15913d['push'](_0x1d7539(0x218),_0x47520f,_0x43d48a);}else{function _0x2cc9b8(){const _0x518131=_0x1d7539;this[_0x518131(0xba9)]['bitmap'][_0x518131(0x9c9)]=this[_0x518131(0x45b)][_0x518131(0x7bf)]();}}}}if(_0x9a690e&&_0x47520f[_0x1d7539(0x8bc)]()){if(_0x1d7539(0x810)===_0x1d7539(0x483)){function _0x2db6d8(){const _0x3a274c=_0x1d7539;this['startMotion'](_0x3a274c(0x7a2));}}else _0x15913d[_0x1d7539(0x580)](_0x1d7539(0x63c),_0x47520f);}if(_0x1f1aad[_0x1d7539(0x2bb)])_0x15913d[_0x1d7539(0x580)](_0x1d7539(0x1df),_0x47520f,_0x3de8e7,![]);_0x54cff6[_0x1d7539(0x8a6)](_0x1d7539(0x275));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Set_TargetActionSet',_0x5a8f21=>{const _0x3d67f5=_0xf2f935;if(!SceneManager[_0x3d67f5(0x731)]())return;VisuMZ[_0x3d67f5(0xbda)](_0x5a8f21,_0x5a8f21);const _0x5c7186=$gameTemp[_0x3d67f5(0x7da)](),_0x4009f9=BattleManager[_0x3d67f5(0x371)],_0x11855f=BattleManager[_0x3d67f5(0x370)],_0x3da991=BattleManager['_allTargets']?BattleManager['_allTargets']['slice'](0x0):[],_0x52fea3=BattleManager[_0x3d67f5(0x3a3)],_0xc3e07c=_0x5a8f21[_0x3d67f5(0x367)]??![];if(!_0x5c7186||!_0x4009f9||!_0x11855f)return;if(!_0x4009f9[_0x3d67f5(0x5b0)]())return;let _0x14d528=_0xc3e07c?_0x52fea3['getDualWieldTimes'](_0x11855f):0x1;for(let _0x1fc241=0x0;_0x1fc241<_0x14d528;_0x1fc241++){if(_0x3d67f5(0xa31)===_0x3d67f5(0xa31))for(const _0x29c578 of _0x3da991){if(_0x3d67f5(0x38f)===_0x3d67f5(0x38f)){if(!_0x29c578)continue;if(_0xc3e07c&&_0x11855f[_0x3d67f5(0x8bc)]()){if(_0x3d67f5(0xa91)!==_0x3d67f5(0xa91)){function _0x58b550(){const _0x474900=_0x3d67f5;if(!this[_0x474900(0x99e)]())return;if(!this[_0x474900(0x8ae)])return;if(this[_0x474900(0x470)]===_0x2c3af0)return;this[_0x474900(0x470)]=_0x310e1a,this[_0x474900(0x31e)]=_0xa5ea97,this[_0x474900(0x393)]=_0x4c3e74,this['_angleEasing']=_0xdb9ade||_0x474900(0xb54),this[_0x474900(0x999)]=_0xdfe464,this[_0x474900(0x999)]===_0x17136b&&(this[_0x474900(0x999)]=!![]),_0x469c66<=0x0&&(this[_0x474900(0x91b)]=_0x2a7727,this[_0x474900(0x999)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0));}}else _0x52fea3[_0x3d67f5(0x580)](_0x3d67f5(0x73f),_0x11855f,_0x1fc241);}if(_0x5a8f21['PerformAction'])_0x52fea3[_0x3d67f5(0x580)](_0x3d67f5(0x82a),_0x11855f,_0x4009f9);if(_0x5a8f21[_0x3d67f5(0x9e8)]>0x0)_0x52fea3[_0x3d67f5(0x580)](_0x3d67f5(0x683),_0x5a8f21[_0x3d67f5(0x9e8)]);if(_0x5a8f21[_0x3d67f5(0x499)])_0x52fea3[_0x3d67f5(0x580)](_0x3d67f5(0x504),_0x11855f,[_0x29c578],_0x4009f9[_0x3d67f5(0x5b0)]()[_0x3d67f5(0x582)]);if(_0x5a8f21['WaitCount2']>0x0)_0x52fea3[_0x3d67f5(0x580)](_0x3d67f5(0x683),_0x5a8f21[_0x3d67f5(0x9fa)]);if(_0x5a8f21[_0x3d67f5(0x417)])_0x52fea3[_0x3d67f5(0x580)]('actionEffect',_0x11855f,_0x29c578);}else{function _0x56e94a(){const _0x432bed=_0x3d67f5;if(this[_0x432bed(0x349)]())this[_0x432bed(0x4a3)]='turn';else this[_0x432bed(0x861)][_0x432bed(0x342)]>0x0?this['_phase']=_0x432bed(0x283):this[_0x432bed(0x7f7)]();}}}else{function _0x2ba872(){const _0x261581=_0x3d67f5,_0x1185d2=this['_battler'];_0x3d2721[_0x261581(0x886)][_0x261581(0x80d)][_0x261581(0x86d)](this,_0xc8b202),this[_0x261581(0x3cf)](_0x92b23e);if(_0x1185d2!==_0x5a5dae)this['updateShadowScale']();}}}_0xc3e07c&&_0x11855f[_0x3d67f5(0x8bc)]()&&_0x52fea3[_0x3d67f5(0x580)]('clearActiveWeaponSet',_0x11855f);if(_0x5a8f21[_0x3d67f5(0x2bb)])_0x52fea3[_0x3d67f5(0x580)](_0x3d67f5(0x1df),_0x11855f,_0x3da991,![]);_0x5c7186[_0x3d67f5(0x8a6)]('battlelog');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x840),_0x755191=>{const _0x2e2822=_0xf2f935;if(!SceneManager[_0x2e2822(0x731)]())return;VisuMZ[_0x2e2822(0xbda)](_0x755191,_0x755191);const _0x5a7679=$gameTemp['getLastPluginCommandInterpreter'](),_0x947b8b=BattleManager[_0x2e2822(0x371)],_0x28ed1e=BattleManager[_0x2e2822(0x370)],_0x783fa8=BattleManager['_allTargets']?BattleManager['_allTargets']['slice'](0x0):[],_0x2d0f02=BattleManager[_0x2e2822(0x3a3)];if(!_0x5a7679||!_0x947b8b||!_0x28ed1e)return;if(!_0x947b8b[_0x2e2822(0x5b0)]())return;if(_0x755191[_0x2e2822(0x2bb)])_0x2d0f02[_0x2e2822(0x580)](_0x2e2822(0x1df),_0x28ed1e,_0x783fa8,![]);if(_0x755191['WaitForNewLine'])_0x2d0f02[_0x2e2822(0x580)]('waitForNewLine');if(_0x755191[_0x2e2822(0x24b)])_0x2d0f02[_0x2e2822(0x580)](_0x2e2822(0xb0a));if(_0x755191['ClearBattleLog'])_0x2d0f02[_0x2e2822(0x580)](_0x2e2822(0xb40));if(_0x755191[_0x2e2822(0x88d)])_0x2d0f02['push']('performActionEnd',_0x28ed1e);if(_0x755191[_0x2e2822(0x219)])_0x2d0f02['push'](_0x2e2822(0x60c));_0x5a7679['setWaitMode'](_0x2e2822(0x275));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x2a4),_0x49160a=>{const _0xd2761e=_0xf2f935;if(!SceneManager[_0xd2761e(0x731)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xd2761e(0xbda)](_0x49160a,_0x49160a);const _0x1ca14a=$gameTemp[_0xd2761e(0x7da)](),_0x1aa85e=_0x49160a[_0xd2761e(0xb7f)];if(!_0x1ca14a)return;$gameScreen[_0xd2761e(0x96d)](_0x49160a['Angle'],_0x49160a['Duration'],_0x49160a[_0xd2761e(0x20a)]);if(_0x1aa85e)_0x1ca14a[_0xd2761e(0x8a6)]('battleAngle');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xa48),_0x5305f3=>{const _0x5920af=_0xf2f935;if(!SceneManager[_0x5920af(0x731)]())return;if(!Imported[_0x5920af(0x3de)])return;VisuMZ[_0x5920af(0xbda)](_0x5305f3,_0x5305f3);const _0x18651c=$gameTemp[_0x5920af(0x7da)](),_0x131b3b=_0x5305f3[_0x5920af(0xb7f)];if(!_0x18651c)return;$gameScreen['setBattleAngle'](0x0,_0x5305f3['Duration'],_0x5305f3[_0x5920af(0x20a)]);if(_0x131b3b)_0x18651c[_0x5920af(0x8a6)](_0x5920af(0x52e));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x243),_0x18b2b7=>{if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x2e3625=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2e3625)return;_0x2e3625['setWaitMode']('battleAngle');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Animation_ActionAnimation',_0x4aa133=>{const _0x16110b=_0xf2f935;if(!SceneManager[_0x16110b(0x731)]())return;VisuMZ[_0x16110b(0xbda)](_0x4aa133,_0x4aa133);const _0x1f202e=$gameTemp[_0x16110b(0x7da)](),_0x1817a6=BattleManager['_action'],_0x308f9a=BattleManager[_0x16110b(0x370)],_0x263ac7=VisuMZ[_0x16110b(0xa2c)](_0x4aa133[_0x16110b(0x750)]),_0x2ab599=_0x4aa133[_0x16110b(0xa3d)],_0xdb73d5=BattleManager[_0x16110b(0x3a3)];if(!_0x1f202e||!_0x1817a6||!_0x308f9a)return;if(!_0x1817a6[_0x16110b(0x5b0)]())return;let _0x9395e9=_0x1817a6[_0x16110b(0x5b0)]()[_0x16110b(0x582)];if(_0x9395e9<0x0)_0x9395e9=_0x308f9a[_0x16110b(0x83b)]();$gameTemp['requestAnimation'](_0x263ac7,_0x9395e9,_0x2ab599),_0x4aa133[_0x16110b(0x86f)]&&_0x1f202e[_0x16110b(0x8a6)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0xb7e),_0x1ab08e=>{const _0x25c7e0=_0xf2f935;if(!SceneManager[_0x25c7e0(0x731)]())return;VisuMZ['ConvertParams'](_0x1ab08e,_0x1ab08e);const _0x197c5a=$gameTemp[_0x25c7e0(0x7da)](),_0x4c5ddb=BattleManager[_0x25c7e0(0x370)],_0x354a41=VisuMZ[_0x25c7e0(0xa2c)](_0x1ab08e[_0x25c7e0(0x750)]),_0x4dbc5c=_0x1ab08e[_0x25c7e0(0xa3d)],_0x4b6dbe=BattleManager[_0x25c7e0(0x3a3)];if(!_0x197c5a||!_0x4c5ddb)return;const _0x568c81=_0x4c5ddb[_0x25c7e0(0x83b)]();$gameTemp[_0x25c7e0(0xb12)](_0x354a41,_0x568c81,_0x4dbc5c);if(_0x1ab08e[_0x25c7e0(0x86f)]){if(_0x25c7e0(0xbbc)!==_0x25c7e0(0x786))_0x197c5a[_0x25c7e0(0x8a6)](_0x25c7e0(0x510));else{function _0x256ffc(){const _0x151196=_0x25c7e0;this['startMotion'](_0x151196(0x4cd));}}}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x8dd),_0x3b8205=>{const _0x64585=_0xf2f935;if(!SceneManager[_0x64585(0x731)]())return;VisuMZ[_0x64585(0xbda)](_0x3b8205,_0x3b8205);const _0x19d00e=_0x493d86[_0x64585(0x7b0)](_0x3b8205[_0x64585(0xa95)]);if(_0x19d00e<=0x0)return;const _0x20cd1b=$gameTemp[_0x64585(0x7da)](),_0x493d86=BattleManager[_0x64585(0x370)],_0x42dba2=VisuMZ[_0x64585(0xa2c)](_0x3b8205[_0x64585(0x750)]),_0x178bdb=_0x3b8205['Mirror'],_0x3a8aab=BattleManager['_logWindow'];if(!_0x20cd1b||!_0x493d86)return;$gameTemp[_0x64585(0xb12)](_0x42dba2,_0x19d00e,_0x178bdb),_0x3b8205[_0x64585(0x86f)]&&_0x20cd1b[_0x64585(0x8a6)](_0x64585(0x510));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x2d5),_0x3b2341=>{const _0x107046=_0xf2f935;if(!SceneManager[_0x107046(0x731)]())return;VisuMZ[_0x107046(0xbda)](_0x3b2341,_0x3b2341);const _0x349508=$gameTemp['getLastPluginCommandInterpreter'](),_0x463882=BattleManager[_0x107046(0x371)],_0xaf5da3=_0x3b2341['Mirror'],_0x566873=VisuMZ[_0x107046(0xa2c)](_0x3b2341[_0x107046(0x750)]);if(!_0x349508||!_0x463882)return;if(!_0x463882[_0x107046(0x5b0)]())return;for(const _0x1857ad of _0x566873){if(!_0x1857ad)continue;_0x1857ad[_0x107046(0x6e0)](_0x463882,_0xaf5da3);}if(_0x3b2341[_0x107046(0x86f)])_0x349508[_0x107046(0x8a6)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x2c1),_0x1af477=>{const _0x5442d4=_0xf2f935;VisuMZ[_0x5442d4(0xbda)](_0x1af477,_0x1af477);const _0x5880d3=$gameTemp[_0x5442d4(0x7da)](),_0xcc99ca=VisuMZ[_0x5442d4(0xa2c)](_0x1af477['Targets']),_0x5b5f7a=_0x1af477[_0x5442d4(0x54b)];if(!_0x5b5f7a)return;for(const _0x4e7ee3 of _0xcc99ca){if(!_0x4e7ee3)continue;if(!_0x4e7ee3[_0x5442d4(0x8bc)]())continue;_0x4e7ee3[_0x5442d4(0xa7e)](_0x5b5f7a);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x8e9),_0x18e643=>{const _0x347d47=_0xf2f935;if(!SceneManager[_0x347d47(0x731)]())return;VisuMZ[_0x347d47(0xbda)](_0x18e643,_0x18e643);const _0x213001=$gameTemp[_0x347d47(0x7da)](),_0x2d738a=VisuMZ[_0x347d47(0xa2c)](_0x18e643[_0x347d47(0x750)]),_0x2e32df=_0x18e643[_0x347d47(0x84f)],_0xdac0c9=_0x18e643[_0x347d47(0xa3d)];if(!_0x213001)return;$gameTemp[_0x347d47(0xb12)](_0x2d738a,_0x2e32df,_0xdac0c9);if(_0x18e643[_0x347d47(0x86f)])_0x213001[_0x347d47(0x8a6)](_0x347d47(0x510));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],'ActSeq_Animation_WaitForAnimation',_0x4c8538=>{const _0x792195=_0xf2f935;if(!SceneManager[_0x792195(0x731)]())return;const _0x217776=$gameTemp[_0x792195(0x7da)]();if(!_0x217776)return;_0x217776[_0x792195(0x8a6)](_0x792195(0x510));}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x5d9),_0x87fb5=>{const _0x4f0cae=_0xf2f935;if(!SceneManager[_0x4f0cae(0x731)]())return;VisuMZ['ConvertParams'](_0x87fb5,_0x87fb5);const _0x1dacde=BattleManager[_0x4f0cae(0x3a3)],_0x46ece3=_0x87fb5[_0x4f0cae(0x875)]&&Imported[_0x4f0cae(0x768)];_0x1dacde['addText'](_0x87fb5[_0x4f0cae(0x2c2)]),_0x46ece3&&Imported[_0x4f0cae(0x768)]&&$gameSystem[_0x4f0cae(0x4dd)](_0x87fb5[_0x4f0cae(0x2c2)]||'',_0x87fb5['CombatLogIcon']||0x0);}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_BattleLog_Clear',_0x58ff1a=>{const _0x18a5fe=_0xf2f935;if(!SceneManager[_0x18a5fe(0x731)]())return;const _0x6b4f4b=BattleManager[_0x18a5fe(0x3a3)];_0x6b4f4b[_0x18a5fe(0xb40)]();}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0xbc3),_0x171df2=>{const _0x3e801b=_0xf2f935;if(!SceneManager[_0x3e801b(0x731)]())return;const _0x41b76a=$gameTemp[_0x3e801b(0x7da)](),_0x5016da=BattleManager['_action'],_0x13dd44=BattleManager[_0x3e801b(0x370)],_0x129a4a=BattleManager[_0x3e801b(0x3a3)];if(!_0x41b76a||!_0x5016da||!_0x13dd44)return;if(!_0x5016da[_0x3e801b(0x5b0)]())return;_0x129a4a[_0x3e801b(0x1e9)](_0x13dd44,_0x5016da[_0x3e801b(0x5b0)]()),_0x41b76a[_0x3e801b(0x8a6)]('battlelog');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xb9e),_0x380a40=>{const _0x2a56b2=_0xf2f935;if(!SceneManager['isSceneBattle']())return;const _0x5ee660=BattleManager[_0x2a56b2(0x3a3)];_0x5ee660[_0x2a56b2(0xa9b)]();}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x944),_0x205107=>{const _0x5f583b=_0xf2f935;if(!SceneManager[_0x5f583b(0x731)]())return;const _0x53e636=BattleManager[_0x5f583b(0x3a3)];_0x53e636[_0x5f583b(0x6bf)]();}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],'ActSeq_BattleLog_Refresh',_0x5d36da=>{const _0x1c39ed=_0xf2f935;if(!SceneManager[_0x1c39ed(0x731)]())return;const _0x1e8f2d=BattleManager[_0x1c39ed(0x3a3)];_0x1e8f2d[_0x1c39ed(0x57c)]();}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x7f4),_0x344121=>{const _0x393444=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x393444(0xbda)](_0x344121,_0x344121),SceneManager[_0x393444(0xb95)][_0x393444(0x63f)](_0x344121['ShowHide']);}),PluginManager['registerCommand'](pluginData['name'],_0xf2f935(0x458),_0x11e66e=>{const _0x1b3dda=_0xf2f935;if(!SceneManager[_0x1b3dda(0x731)]())return;const _0x36a2d0=$gameTemp[_0x1b3dda(0x7da)]();_0x36a2d0[_0x1b3dda(0x8a6)]('battlelog');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_BattleLog_WaitForNewLine',_0x5c4a45=>{const _0x2d214c=_0xf2f935;if(!SceneManager[_0x2d214c(0x731)]())return;const _0x410d73=$gameTemp[_0x2d214c(0x7da)](),_0xb0b1e1=BattleManager[_0x2d214c(0x3a3)];_0xb0b1e1['waitForNewLine'](),_0x410d73[_0x2d214c(0x8a6)](_0x2d214c(0x275));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x982),_0x429b20=>{const _0x597d64=_0xf2f935;if(!SceneManager[_0x597d64(0x731)]())return;if(!Imported[_0x597d64(0x3de)])return;VisuMZ[_0x597d64(0xbda)](_0x429b20,_0x429b20);const _0x335501=$gameScreen[_0x597d64(0x878)]();_0x335501[_0x597d64(0x4d3)]=_0x429b20[_0x597d64(0x56f)];}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x213),_0x10a1d2=>{const _0x4d37b4=_0xf2f935;if(!SceneManager[_0x4d37b4(0x731)]())return;if(!Imported[_0x4d37b4(0x3de)])return;VisuMZ['ConvertParams'](_0x10a1d2,_0x10a1d2);const _0x659585=$gameTemp[_0x4d37b4(0x7da)](),_0x3fceab=_0x10a1d2[_0x4d37b4(0x454)];$gameScreen['setBattleCameraPoint'](_0x10a1d2[_0x4d37b4(0x71b)],_0x10a1d2[_0x4d37b4(0xa76)],_0x10a1d2[_0x4d37b4(0x858)],_0x10a1d2[_0x4d37b4(0x20a)]);if(_0x3fceab)_0x659585[_0x4d37b4(0x8a6)]('battleCamera');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x55f),_0x7617c2=>{const _0x25e751=_0xf2f935;if(!SceneManager[_0x25e751(0x731)]())return;if(!Imported[_0x25e751(0x3de)])return;VisuMZ['ConvertParams'](_0x7617c2,_0x7617c2);const _0x2afbd7=$gameTemp[_0x25e751(0x7da)](),_0x53e7c7=VisuMZ[_0x25e751(0xa2c)](_0x7617c2['Targets']),_0x4a5737=_0x7617c2[_0x25e751(0x454)];$gameScreen['setBattleCameraTargets'](_0x53e7c7,_0x7617c2[_0x25e751(0x858)],_0x7617c2[_0x25e751(0x20a)]);if(_0x4a5737)_0x2afbd7[_0x25e751(0x8a6)](_0x25e751(0x6ff));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Camera_Offset',_0x665d54=>{const _0x166f12=_0xf2f935;if(!SceneManager[_0x166f12(0x731)]())return;if(!Imported[_0x166f12(0x3de)])return;VisuMZ[_0x166f12(0xbda)](_0x665d54,_0x665d54);const _0x41c3fe=$gameTemp[_0x166f12(0x7da)](),_0x2560b5=_0x665d54[_0x166f12(0x454)];$gameScreen[_0x166f12(0x949)](_0x665d54[_0x166f12(0xa45)],_0x665d54['OffsetY'],_0x665d54['Duration'],_0x665d54[_0x166f12(0x20a)]);if(_0x2560b5)_0x41c3fe[_0x166f12(0x8a6)](_0x166f12(0x6ff));}),PluginManager['registerCommand'](pluginData['name'],_0xf2f935(0x38e),_0x4b86f0=>{const _0xafd886=_0xf2f935;if(!SceneManager[_0xafd886(0x731)]())return;if(!Imported[_0xafd886(0x3de)])return;VisuMZ['ConvertParams'](_0x4b86f0,_0x4b86f0);const _0x5a6c5e=$gameTemp[_0xafd886(0x7da)](),_0xc0da9d=_0x4b86f0[_0xafd886(0x978)],_0x4e58ec=_0x4b86f0[_0xafd886(0x5be)],_0xc9558e=_0x4b86f0[_0xafd886(0x454)];if(_0xc0da9d){const _0x4415c4=Math['round'](Graphics[_0xafd886(0x41b)]/0x2),_0x144fae=Math['round'](Graphics['height']/0x2);$gameScreen[_0xafd886(0x7de)](_0x4415c4,_0x144fae,_0x4b86f0[_0xafd886(0x858)],_0x4b86f0[_0xafd886(0x20a)]);}_0x4e58ec&&$gameScreen[_0xafd886(0x949)](0x0,0x0,_0x4b86f0[_0xafd886(0x858)],_0x4b86f0[_0xafd886(0x20a)]);if(_0xc9558e)_0x5a6c5e[_0xafd886(0x8a6)](_0xafd886(0x6ff));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Camera_WaitForCamera',_0x5ad61f=>{const _0x2494ec=_0xf2f935;if(!SceneManager[_0x2494ec(0x731)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x36ae57=$gameTemp[_0x2494ec(0x7da)]();if(!_0x36ae57)return;_0x36ae57['setWaitMode'](_0x2494ec(0x6ff));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x2b1),_0x55739e=>{const _0x59c9fb=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ['ConvertParams'](_0x55739e,_0x55739e);const _0xacd2db=VisuMZ[_0x59c9fb(0xa2c)](_0x55739e[_0x59c9fb(0x750)]),_0x49b0a4=_0x55739e[_0x59c9fb(0x7cd)]['toLowerCase']()['trim']();for(const _0x20d290 of _0xacd2db){if(!_0x20d290)continue;_0x20d290[_0x59c9fb(0xa21)](_0x49b0a4);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x9ff),_0x3ef6fb=>{const _0x4addd6=_0xf2f935;if(!SceneManager[_0x4addd6(0x731)]())return;if(!Imported[_0x4addd6(0x7e2)])return;VisuMZ['ConvertParams'](_0x3ef6fb,_0x3ef6fb);const _0x23c8c3=VisuMZ['CreateActionSequenceTargets'](_0x3ef6fb['Targets']),_0x2a3388=_0x3ef6fb[_0x4addd6(0xbd5)];for(const _0x812053 of _0x23c8c3){if(!_0x812053)continue;_0x812053['dragonbonesData']()[_0x4addd6(0x2f8)]=_0x2a3388;}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x585),_0x21bacb=>{const _0x335d1b=_0xf2f935;if(!SceneManager[_0x335d1b(0x731)]())return;if(!Imported[_0x335d1b(0xb90)])return;VisuMZ[_0x335d1b(0xbda)](_0x21bacb,_0x21bacb);const _0x1c089c=BattleManager[_0x335d1b(0x371)],_0x25a26=_0x21bacb[_0x335d1b(0x527)];if(!_0x1c089c)return;_0x1c089c[_0x335d1b(0xa3b)]=_0x25a26;}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x1e7),_0x24dde2=>{const _0x31a529=_0xf2f935;if(!SceneManager[_0x31a529(0x731)]())return;if(!Imported[_0x31a529(0xb90)])return;const _0xf41e35=BattleManager[_0x31a529(0x371)];if(!_0xf41e35)return;_0xf41e35['clearElementChanges']();}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0xb7a),_0x5cfcdf=>{const _0x11e8d5=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x11e8d5(0xb90)])return;VisuMZ[_0x11e8d5(0xbda)](_0x5cfcdf,_0x5cfcdf);const _0x4e0d97=BattleManager[_0x11e8d5(0x371)],_0x525761=_0x5cfcdf[_0x11e8d5(0x527)];if(!_0x4e0d97)return;_0x4e0d97['_battleCoreForcedElements']=_0x525761;}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],'ActSeq_Element_NullElements',_0x599c83=>{const _0x523cb1=_0xf2f935;if(!SceneManager[_0x523cb1(0x731)]())return;if(!Imported[_0x523cb1(0xb90)])return;const _0xbb7464=BattleManager[_0x523cb1(0x371)];if(!_0xbb7464)return;_0xbb7464['_battleCoreNoElement']=!![];}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Horror_Clear',_0x3672eb=>{const _0x4e335c=_0xf2f935;if(!Imported[_0x4e335c(0x9f8)])return;if(!SceneManager[_0x4e335c(0x731)]())return;VisuMZ[_0x4e335c(0xbda)](_0x3672eb,_0x3672eb);const _0x14a613=VisuMZ['CreateActionSequenceTargets'](_0x3672eb[_0x4e335c(0x750)]);for(const _0x18accc of _0x14a613){if(!_0x18accc)continue;_0x18accc[_0x4e335c(0x68c)](_0x4e335c(0x27f)),_0x18accc[_0x4e335c(0x68c)]('glitch'),_0x18accc[_0x4e335c(0x68c)]('tv'),_0x18accc[_0x4e335c(0xa47)]();}$gamePlayer[_0x4e335c(0x57c)]();}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Horror_GlitchCreate',_0x29a0f9=>{const _0x42929f=_0xf2f935;if(!Imported[_0x42929f(0x9f8)])return;if(!SceneManager[_0x42929f(0x731)]())return;VisuMZ[_0x42929f(0xbda)](_0x29a0f9,_0x29a0f9);const _0x59ab3f=VisuMZ[_0x42929f(0xa2c)](_0x29a0f9[_0x42929f(0x750)]),_0x4592bd=_0x42929f(0xa1d);_0x29a0f9['sliceMin']=Math[_0x42929f(0x89d)](_0x29a0f9['slices']/0x2),_0x29a0f9['sliceMax']=_0x29a0f9[_0x42929f(0x9bc)],_0x29a0f9[_0x42929f(0xbbe)]=!![];for(const _0x59d0b8 of _0x59ab3f){if(_0x42929f(0x977)!==_0x42929f(0x977)){function _0x3006dc(){const _0x4b71e1=_0x42929f;_0x29c448['endAnimation']&&_0x324c4a[_0x4b71e1(0x435)]();}}else{if(!_0x59d0b8)continue;_0x59d0b8[_0x42929f(0x341)](_0x4592bd,_0x29a0f9);}}$gamePlayer[_0x42929f(0x57c)]();}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x716),_0x2cda0b=>{const _0x3d3431=_0xf2f935;if(!Imported[_0x3d3431(0x9f8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d3431(0xbda)](_0x2cda0b,_0x2cda0b);const _0x17b3cc=VisuMZ['CreateActionSequenceTargets'](_0x2cda0b[_0x3d3431(0x750)]);for(const _0x169ca1 of _0x17b3cc){if(!_0x169ca1)continue;_0x169ca1[_0x3d3431(0x68c)]('glitch');}$gamePlayer[_0x3d3431(0x57c)]();}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Horror_NoiseCreate',_0x3561b1=>{const _0x312c72=_0xf2f935;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x312c72(0x731)]())return;VisuMZ[_0x312c72(0xbda)](_0x3561b1,_0x3561b1);const _0x58e703=VisuMZ[_0x312c72(0xa2c)](_0x3561b1[_0x312c72(0x750)]),_0x30e6d4=_0x312c72(0x27f);for(const _0x318653 of _0x58e703){if(!_0x318653)continue;_0x318653[_0x312c72(0x341)](_0x30e6d4,_0x3561b1);}$gamePlayer[_0x312c72(0x57c)]();}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x877),_0x473009=>{const _0x2f57d7=_0xf2f935;if(!Imported[_0x2f57d7(0x9f8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2f57d7(0xbda)](_0x473009,_0x473009);const _0x3489a0=VisuMZ[_0x2f57d7(0xa2c)](_0x473009['Targets']);for(const _0x2a7e34 of _0x3489a0){if(!_0x2a7e34)continue;_0x2a7e34[_0x2f57d7(0x68c)](_0x2f57d7(0x27f));}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0xf2f935(0x894),_0x52a382=>{const _0x44b9da=_0xf2f935;if(!Imported[_0x44b9da(0x9f8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x44b9da(0xbda)](_0x52a382,_0x52a382);const _0x4e0d3e=VisuMZ['CreateActionSequenceTargets'](_0x52a382['Targets']),_0xda3301='tv';for(const _0x24942c of _0x4e0d3e){if(!_0x24942c)continue;_0x24942c['setHorrorEffectSettings'](_0xda3301,_0x52a382);}$gamePlayer[_0x44b9da(0x57c)]();}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x656),_0x581dc0=>{const _0x5619cc=_0xf2f935;if(!Imported[_0x5619cc(0x9f8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5619cc(0xbda)](_0x581dc0,_0x581dc0);const _0x4765be=VisuMZ[_0x5619cc(0xa2c)](_0x581dc0[_0x5619cc(0x750)]);for(const _0x1a8e53 of _0x4765be){if(_0x5619cc(0x28d)!==_0x5619cc(0x800)){if(!_0x1a8e53)continue;_0x1a8e53[_0x5619cc(0x68c)]('tv');}else{function _0x28c74b(){const _0x20e0cb=_0x5619cc;if(this[_0x20e0cb(0x80c)]())return _0x148e6a;return _0x1b5b69=this[_0x20e0cb(0x801)](_0x1c6b9e),_0x322988=this['applyHardDamageCap'](_0x6bdbac),_0x32a0ed;}}}$gamePlayer[_0x5619cc(0x57c)]();}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x75a),_0x5ae75a=>{const _0xd29d73=_0xf2f935;if(!SceneManager[_0xd29d73(0x731)]())return;if(!Imported[_0xd29d73(0x4a7)])return;const _0x3e0e74=SceneManager[_0xd29d73(0xb95)][_0xd29d73(0x2c7)];if(!_0x3e0e74)return;VisuMZ[_0xd29d73(0xbda)](_0x5ae75a,_0x5ae75a);const _0x41aa48=_0x5ae75a[_0xd29d73(0x3a5)]||0x1,_0x15224e=_0x5ae75a[_0xd29d73(0x858)]||0x1,_0x4e784b=_0x5ae75a[_0xd29d73(0x20a)]||_0xd29d73(0xb54);_0x3e0e74[_0xd29d73(0x992)](_0x41aa48,_0x15224e,_0x4e784b);}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Impact_MotionBlurScreen',_0xfca014=>{const _0x1583a3=_0xf2f935;if(!SceneManager[_0x1583a3(0x731)]())return;if(!Imported[_0x1583a3(0x4a7)])return;const _0x4a9e96=SceneManager['_scene']['_spriteset'];if(!_0x4a9e96)return;VisuMZ[_0x1583a3(0xbda)](_0xfca014,_0xfca014);const _0x251c14=Number(_0xfca014[_0x1583a3(0x37a)])||0x0,_0x3f8d47=Number(_0xfca014[_0x1583a3(0xbab)]),_0x4df353=_0xfca014[_0x1583a3(0x858)]||0x1,_0x226cda=_0xfca014['EasingType']||_0x1583a3(0xb54);_0x4a9e96[_0x1583a3(0xa1a)](_0x251c14,_0x3f8d47,_0x4df353,_0x226cda);}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Impact_MotionBlurTarget',_0x23d9ab=>{const _0x1ecd11=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1ecd11(0x4a7)])return;const _0x537331=SceneManager[_0x1ecd11(0xb95)][_0x1ecd11(0x2c7)];if(!_0x537331)return;VisuMZ['ConvertParams'](_0x23d9ab,_0x23d9ab);const _0x17d6ee=Number(_0x23d9ab[_0x1ecd11(0x37a)])||0x0,_0x3d0055=Number(_0x23d9ab[_0x1ecd11(0xbab)]),_0x280fb8=_0x23d9ab[_0x1ecd11(0x858)]||0x1,_0x1d81e9=_0x23d9ab[_0x1ecd11(0x20a)]||_0x1ecd11(0xb54),_0x2ffb23=VisuMZ[_0x1ecd11(0xa2c)](_0x23d9ab[_0x1ecd11(0x750)]);for(const _0x183a1a of _0x2ffb23){if(_0x1ecd11(0x6d0)!==_0x1ecd11(0x764)){if(!_0x183a1a)continue;if(!_0x183a1a[_0x1ecd11(0x310)]())continue;_0x183a1a[_0x1ecd11(0x310)]()[_0x1ecd11(0xa1a)](_0x17d6ee,_0x3d0055,_0x280fb8,_0x1d81e9);}else{function _0x35715e(){const _0x54ec45=_0x1ecd11;if(!_0x5b9bda[_0x54ec45(0x731)]())return;if(!_0x55876e['VisuMZ_3_BoostAction'])return;if(!_0x3ef0e6[_0x54ec45(0x370)])return;_0x5dcf06[_0x54ec45(0xbda)](_0x149ff4,_0x4cb2bd);const _0x2eea19=_0x3c8e65[_0x54ec45(0x862)];_0x5986c5[_0x54ec45(0xa01)](_0x2eea19,_0x1b2798[_0x54ec45(0x370)][_0x54ec45(0x736)]());}}}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x31b),_0x509357=>{const _0x278ab3=_0xf2f935;if(!SceneManager[_0x278ab3(0x731)]())return;if(!Imported[_0x278ab3(0x4a7)])return;VisuMZ[_0x278ab3(0xbda)](_0x509357,_0x509357);const _0x17ea40={'delay':_0x509357[_0x278ab3(0xa6f)],'duration':_0x509357['duration'],'hue':_0x509357[_0x278ab3(0x3d4)],'opacityStart':_0x509357[_0x278ab3(0x4af)],'tone':_0x509357['tone'],'visible':!![]},_0x11995f=VisuMZ[_0x278ab3(0xa2c)](_0x509357[_0x278ab3(0x750)]);for(const _0x5553b2 of _0x11995f){if('tBDdF'===_0x278ab3(0x99a)){function _0x5297f6(){const _0x1745be=_0x278ab3;_0x9e310f[_0x1745be(0x886)]['Game_Battler_makeSpeed'][_0x1745be(0x86d)](this),this[_0x1745be(0x9af)][_0x1745be(0x342)]<=0x0&&(this['_speed']=_0x2d80d0['MIN_SAFE_INTEGER']);}}else{if(!_0x5553b2)continue;_0x5553b2[_0x278ab3(0x4c9)](_0x17ea40);}}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x1f9),_0x577ec9=>{const _0x444c04=_0xf2f935;if(!SceneManager[_0x444c04(0x731)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x444c04(0xbda)](_0x577ec9,_0x577ec9);const _0x309a32=VisuMZ['CreateActionSequenceTargets'](_0x577ec9['Targets']);for(const _0x884e13 of _0x309a32){if(!_0x884e13)continue;_0x884e13[_0x444c04(0x45d)]();}}),PluginManager['registerCommand'](pluginData['name'],_0xf2f935(0x21a),_0x1eb90f=>{const _0x73325a=_0xf2f935;if(!Imported[_0x73325a(0x4a7)])return;const _0x4f5364=SceneManager[_0x73325a(0xb95)][_0x73325a(0x2c7)];if(!_0x4f5364)return;VisuMZ[_0x73325a(0xbda)](_0x1eb90f,_0x1eb90f);const _0x510ade=_0x1eb90f['X']||0x0,_0xf31ec2=_0x1eb90f['Y']||0x0,_0x554034=_0x1eb90f[_0x73325a(0x8b0)]||0x0,_0x52042c=_0x1eb90f[_0x73325a(0x2b3)]||0x0,_0x47028f=_0x1eb90f[_0x73325a(0x858)]||0x1;_0x4f5364['setupShockwaveImpactFilter'](_0x510ade,_0xf31ec2,_0x554034,_0x52042c,_0x47028f);}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x551),_0x355a01=>{const _0x70f9e3=_0xf2f935;if(!SceneManager[_0x70f9e3(0x731)]())return;if(!Imported[_0x70f9e3(0x4a7)])return;const _0x3d1d91=SceneManager['_scene'][_0x70f9e3(0x2c7)];if(!_0x3d1d91)return;VisuMZ[_0x70f9e3(0xbda)](_0x355a01,_0x355a01);const _0x4688e7=VisuMZ[_0x70f9e3(0xa2c)](_0x355a01[_0x70f9e3(0x750)]),_0x264012=_0x355a01[_0x70f9e3(0x755)],_0xad0691=_0x355a01[_0x70f9e3(0xa45)]||0x0,_0x56c18b=_0x355a01[_0x70f9e3(0x1f1)]||0x0,_0x16a4fa=_0x355a01[_0x70f9e3(0x8b0)]||0x0,_0x5ba8d2=_0x355a01[_0x70f9e3(0x2b3)]||0x0,_0x725686=_0x355a01['Duration']||0x1;for(const _0x42c50b of _0x4688e7){if(!_0x42c50b)continue;if(!_0x42c50b[_0x70f9e3(0x310)]())continue;const _0x397828=_0x42c50b['battler']();let _0x31120a=_0x397828[_0x70f9e3(0x58e)],_0x1feb83=_0x397828[_0x70f9e3(0x4de)];_0x31120a+=(Graphics['width']-Graphics[_0x70f9e3(0x760)])/0x2,_0x1feb83+=(Graphics[_0x70f9e3(0x902)]-Graphics[_0x70f9e3(0x33f)])/0x2;if(_0x264012[_0x70f9e3(0x78e)](/front/i))_0x31120a+=(_0x42c50b[_0x70f9e3(0x1fb)]()?0x1:-0x1)*_0x397828[_0x70f9e3(0x29b)]()/0x2;else{if(_0x264012[_0x70f9e3(0x78e)](/back/i)){if(_0x70f9e3(0x99d)===_0x70f9e3(0xbb4)){function _0xbf6e98(){const _0x56a4e1=_0x70f9e3;return _0x2dac65[_0x56a4e1(0x684)]()[_0x56a4e1(0x4ae)]()[_0x56a4e1(0xba4)](_0x5544f3=>_0x5544f3!==_0x422fe6);}}else _0x31120a+=(_0x42c50b[_0x70f9e3(0x1fb)]()?-0x1:0x1)*_0x397828[_0x70f9e3(0x29b)]()/0x2;}}if(_0x264012['match'](/head/i)){if(_0x70f9e3(0x409)===_0x70f9e3(0x409))_0x1feb83-=_0x397828[_0x70f9e3(0xa0f)]();else{function _0x3ac2a0(){const _0x5aad01=_0x70f9e3;let _0x1f43d5=_0x2fa3b7(_0x37fdf0['$1']);while(_0x1f43d5--){_0x2a19bd[_0x5aad01(0x580)](this['opponentsUnit']()[_0x5aad01(0x997)]());}return this[_0x5aad01(0x220)](_0x1773d5);}}}else _0x264012['match'](/center/i)&&(_0x1feb83-=_0x397828[_0x70f9e3(0xa0f)]()/0x2);_0x31120a+=_0xad0691,_0x1feb83+=_0x56c18b,_0x3d1d91[_0x70f9e3(0x9e2)](_0x31120a,_0x1feb83,_0x16a4fa,_0x5ba8d2,_0x725686);}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x672),_0x171feb=>{const _0x2c8301=_0xf2f935;if(!SceneManager[_0x2c8301(0x731)]())return;if(!Imported[_0x2c8301(0x4a7)])return;const _0x172b5f=SceneManager[_0x2c8301(0xb95)]['_spriteset'];if(!_0x172b5f)return;VisuMZ['ConvertParams'](_0x171feb,_0x171feb);const _0x379807=VisuMZ['CreateActionSequenceTargets'](_0x171feb[_0x2c8301(0x750)]),_0x278639=_0x171feb[_0x2c8301(0x755)],_0x2e4996=_0x171feb['OffsetX']||0x0,_0x13e491=_0x171feb[_0x2c8301(0x1f1)]||0x0,_0x5ae16d=_0x171feb[_0x2c8301(0x8b0)]||0x0,_0x41fb9e=_0x171feb[_0x2c8301(0x2b3)]||0x0,_0x519aa8=_0x171feb[_0x2c8301(0x858)]||0x1,_0x5ab47e=Math['min'](..._0x379807[_0x2c8301(0x2ab)](_0x4e5d38=>_0x4e5d38[_0x2c8301(0x310)]()[_0x2c8301(0x58e)]-_0x4e5d38[_0x2c8301(0x310)]()[_0x2c8301(0x29b)]()/0x2)),_0x216dc9=Math['max'](..._0x379807['map'](_0x4fbc3f=>_0x4fbc3f[_0x2c8301(0x310)]()['_baseX']+_0x4fbc3f[_0x2c8301(0x310)]()[_0x2c8301(0x29b)]()/0x2)),_0x3cdd66=Math['min'](..._0x379807[_0x2c8301(0x2ab)](_0x4f09d6=>_0x4f09d6[_0x2c8301(0x310)]()[_0x2c8301(0x4de)]-_0x4f09d6[_0x2c8301(0x310)]()['mainSpriteHeight']())),_0x2c8539=Math['max'](..._0x379807['map'](_0x4797c0=>_0x4797c0[_0x2c8301(0x310)]()[_0x2c8301(0x4de)])),_0xabaaed=_0x379807[_0x2c8301(0xba4)](_0x40ee55=>_0x40ee55[_0x2c8301(0x8bc)]())[_0x2c8301(0x342)],_0x45e012=_0x379807[_0x2c8301(0xba4)](_0x82c39c=>_0x82c39c[_0x2c8301(0x1fb)]())[_0x2c8301(0x342)];let _0x34ec23=0x0,_0x578f43=0x0;if(_0x278639[_0x2c8301(0x78e)](/front/i))_0x34ec23=_0xabaaed>=_0x45e012?_0x5ab47e:_0x216dc9;else{if(_0x278639[_0x2c8301(0x78e)](/middle/i)){if(_0x2c8301(0x932)===_0x2c8301(0x932))_0x34ec23=(_0x5ab47e+_0x216dc9)/0x2,melee=-0x1;else{function _0x24d969(){const _0x528ca1=_0x2c8301,_0x24fb77=_0x3f9fd3['prototype'][_0x528ca1(0x37f)]['call'](arguments,0x1),_0x507ea8={'name':_0x11f009,'params':_0x24fb77},_0xcdfdd8=this[_0x528ca1(0x474)][_0x528ca1(0x2ab)](_0x5ca3ac=>_0x5ca3ac[_0x528ca1(0x222)])['indexOf']('actionSplicePoint');_0xcdfdd8>=0x0?this[_0x528ca1(0x474)][_0x528ca1(0x5f1)](_0xcdfdd8,0x0,_0x507ea8):this[_0x528ca1(0x474)]['push'](_0x507ea8);}}}else{if(_0x278639[_0x2c8301(0x78e)](/back/i)){if(_0x2c8301(0x6b0)!==_0x2c8301(0x6b0)){function _0x57d35e(){return![];}}else _0x34ec23=_0xabaaed>=_0x45e012?_0x216dc9:_0x5ab47e;}}}if(_0x278639[_0x2c8301(0x78e)](/head/i)){if(_0x2c8301(0x876)!=='Xijrq'){function _0x46da1d(){const _0xb458ec=_0x2c8301;this['_actorCommandWindow'][_0xb458ec(0x4c5)]();}}else _0x578f43=_0x3cdd66;}else{if(_0x278639[_0x2c8301(0x78e)](/center/i)){if(_0x2c8301(0xa4e)===_0x2c8301(0xa4e))_0x578f43=(_0x3cdd66+_0x2c8539)/0x2;else{function _0xe71e13(){_0x3393cd['setActiveWeaponSlot'](_0x14b8a1);}}}else _0x278639['match'](/base/i)&&(_0x578f43=_0x2c8539);}_0x34ec23+=(Graphics[_0x2c8301(0x41b)]-Graphics[_0x2c8301(0x760)])/0x2,_0x578f43+=(Graphics[_0x2c8301(0x902)]-Graphics[_0x2c8301(0x33f)])/0x2,_0x34ec23+=_0x2e4996,_0x578f43+=_0x13e491,_0x172b5f[_0x2c8301(0x9e2)](_0x34ec23,_0x578f43,_0x5ae16d,_0x41fb9e,_0x519aa8);}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Impact_ZoomBlurPoint',_0x2c5a26=>{const _0x110497=_0xf2f935;if(!Imported[_0x110497(0x4a7)])return;const _0x1eaf97=SceneManager['_scene'][_0x110497(0x2c7)];if(!_0x1eaf97)return;VisuMZ[_0x110497(0xbda)](_0x2c5a26,_0x2c5a26);const _0x4ab995=_0x2c5a26['X']||0x0,_0x486fc1=_0x2c5a26['Y']||0x0,_0x21ce07=_0x2c5a26['Strength']||0x0,_0x65766f=_0x2c5a26['Radius']||0x0,_0x100596=_0x2c5a26[_0x110497(0x858)]||0x1,_0x4727ac=_0x2c5a26[_0x110497(0x20a)]||_0x110497(0xb54);_0x1eaf97[_0x110497(0x3ac)](_0x21ce07,_0x4ab995,_0x486fc1,_0x65766f,_0x100596,_0x4727ac);}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x62a),_0x12e64f=>{const _0x529722=_0xf2f935;if(!Imported[_0x529722(0x4a7)])return;const _0x57adf8=SceneManager['_scene'][_0x529722(0x2c7)];if(!_0x57adf8)return;VisuMZ['ConvertParams'](_0x12e64f,_0x12e64f);const _0x99b881=VisuMZ['CreateActionSequenceTargets'](_0x12e64f['Targets']),_0x28f72d=_0x12e64f[_0x529722(0x755)],_0xb3ce06=_0x12e64f['OffsetX']||0x0,_0xd9b64=_0x12e64f[_0x529722(0x1f1)]||0x0,_0xa08bd5=_0x12e64f[_0x529722(0x8c9)]||0x0,_0x2e0445=_0x12e64f[_0x529722(0x8eb)]||0x0,_0x5c1708=_0x12e64f[_0x529722(0x858)]||0x1,_0x366bbf=_0x12e64f[_0x529722(0x20a)]||'Linear',_0x5b5b88=Math[_0x529722(0x8ec)](..._0x99b881['map'](_0x6e934e=>_0x6e934e[_0x529722(0x310)]()[_0x529722(0x58e)]-_0x6e934e[_0x529722(0x310)]()[_0x529722(0x29b)]()/0x2)),_0x43a9b5=Math[_0x529722(0x205)](..._0x99b881[_0x529722(0x2ab)](_0x323ceb=>_0x323ceb['battler']()[_0x529722(0x58e)]+_0x323ceb[_0x529722(0x310)]()[_0x529722(0x29b)]()/0x2)),_0x12df88=Math['min'](..._0x99b881['map'](_0x2b961f=>_0x2b961f[_0x529722(0x310)]()[_0x529722(0x4de)]-_0x2b961f[_0x529722(0x310)]()[_0x529722(0xa0f)]())),_0x192bb1=Math[_0x529722(0x205)](..._0x99b881[_0x529722(0x2ab)](_0x51dabd=>_0x51dabd[_0x529722(0x310)]()[_0x529722(0x4de)])),_0x187d16=_0x99b881['filter'](_0x329c88=>_0x329c88[_0x529722(0x8bc)]())['length'],_0x370b3b=_0x99b881[_0x529722(0xba4)](_0xf28132=>_0xf28132[_0x529722(0x1fb)]())['length'];let _0x258255=0x0,_0xca3dc0=0x0;if(_0x28f72d[_0x529722(0x78e)](/front/i))_0x258255=_0x187d16>=_0x370b3b?_0x5b5b88:_0x43a9b5;else{if(_0x28f72d[_0x529722(0x78e)](/middle/i))_0x258255=(_0x5b5b88+_0x43a9b5)/0x2,melee=-0x1;else _0x28f72d[_0x529722(0x78e)](/back/i)&&(_0x258255=_0x187d16>=_0x370b3b?_0x43a9b5:_0x5b5b88);}if(_0x28f72d[_0x529722(0x78e)](/head/i)){if('QKMeZ'!==_0x529722(0x856)){function _0x48fa71(){const _0x15bad3=_0x529722;return _0x3db2e5[_0x15bad3(0x886)][_0x15bad3(0x581)][_0x15bad3(0x86d)](this);}}else _0xca3dc0=_0x12df88;}else{if(_0x28f72d[_0x529722(0x78e)](/center/i))_0xca3dc0=(_0x12df88+_0x192bb1)/0x2;else{if(_0x28f72d['match'](/base/i)){if(_0x529722(0x571)===_0x529722(0x571))_0xca3dc0=_0x192bb1;else{function _0x34d407(){const _0x5d8473=_0x529722;_0x14be7d[_0x5d8473(0x2dc)][_0x5d8473(0x8bf)][_0x5d8473(0x86d)](this),this['requestMotion'](_0x5d8473(0x7ac));}}}}}_0x258255+=(Graphics[_0x529722(0x41b)]-Graphics[_0x529722(0x760)])/0x2,_0xca3dc0+=(Graphics[_0x529722(0x902)]-Graphics[_0x529722(0x33f)])/0x2,_0x258255+=_0xb3ce06,_0xca3dc0+=_0xd9b64,_0x57adf8['setupZoomBlurImpactFilter'](_0xa08bd5,_0x258255,_0xca3dc0,_0x2e0445,_0x5c1708,_0x366bbf);}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x5bddea=>{const _0x485d9b=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x485d9b(0xbda)](_0x5bddea,_0x5bddea);const _0x84b6ba=$gameTemp[_0x485d9b(0x7da)](),_0x273780=BattleManager['_action'],_0x2eb6f1=BattleManager[_0x485d9b(0x370)],_0x8d4591=BattleManager[_0x485d9b(0x3a3)];if(!_0x84b6ba||!_0x273780||!_0x2eb6f1)return;if(!_0x273780[_0x485d9b(0x5b0)]())return;const _0xf48cf5=VisuMZ[_0x485d9b(0xa2c)](_0x5bddea[_0x485d9b(0x750)]);for(const _0x98e7b3 of _0xf48cf5){if(!_0x98e7b3)continue;_0x8d4591[_0x485d9b(0x580)](_0x485d9b(0x218),_0x2eb6f1,_0x98e7b3);}_0x84b6ba[_0x485d9b(0x8a6)](_0x485d9b(0x275));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Mechanics_AddBuffDebuff',_0x5a09f4=>{const _0x563b40=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x563b40(0xbda)](_0x5a09f4,_0x5a09f4);const _0x337fb3=[_0x563b40(0x561),_0x563b40(0x31d),'ATK',_0x563b40(0x24d),'MAT',_0x563b40(0x926),_0x563b40(0x8cd),_0x563b40(0x753)],_0x1253ab=_0x5a09f4['Buffs'],_0x304b16=_0x5a09f4[_0x563b40(0x826)],_0x318490=_0x5a09f4['Turns'],_0x574c4b=VisuMZ[_0x563b40(0xa2c)](_0x5a09f4[_0x563b40(0x750)]);for(const _0x3ee214 of _0x574c4b){if(!_0x3ee214)continue;for(const _0x2cb14f of _0x1253ab){const _0xf28fd7=_0x337fb3[_0x563b40(0x665)](_0x2cb14f[_0x563b40(0xa2e)]()[_0x563b40(0x669)]());_0xf28fd7>=0x0&&_0xf28fd7<=0x7&&_0x3ee214[_0x563b40(0x60b)](_0xf28fd7,_0x318490);}for(const _0x58f772 of _0x304b16){const _0x5e7084=_0x337fb3[_0x563b40(0x665)](_0x58f772[_0x563b40(0xa2e)]()[_0x563b40(0x669)]());if(_0x5e7084>=0x0&&_0x5e7084<=0x7){if(_0x563b40(0x237)!==_0x563b40(0x237)){function _0x5444b6(){const _0x2f300b=_0x563b40;this[_0x2f300b(0x700)](_0x2f300b(0x5d7));}}else _0x3ee214['addDebuff'](_0x5e7084,_0x318490);}}}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],'ActSeq_Mechanics_AddState',_0x272624=>{const _0x1deb79=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1deb79(0xbda)](_0x272624,_0x272624);const _0x17aecf=_0x272624[_0x1deb79(0x6d9)],_0x2eb9b9=VisuMZ[_0x1deb79(0xa2c)](_0x272624[_0x1deb79(0x750)]);for(const _0x4ac438 of _0x2eb9b9){if(!_0x4ac438)continue;for(const _0x1191fa of _0x17aecf){_0x4ac438[_0x1deb79(0x96c)](_0x1191fa);}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x655),_0x3e94bc=>{const _0x8934a5=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x8934a5(0xbda)](_0x3e94bc,_0x3e94bc);const _0x33290e=BattleManager[_0x8934a5(0x371)],_0x5912c6={'arPenRate':_0x3e94bc[_0x8934a5(0x233)],'arPenFlat':_0x3e94bc['ArPenFlat'],'arRedRate':_0x3e94bc['ArRedRate'],'arRedFlat':_0x3e94bc[_0x8934a5(0xb89)]};_0x33290e[_0x8934a5(0x204)]=_0x5912c6;}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x426),_0x2e8380=>{const _0xb0a457=_0xf2f935;if(!SceneManager[_0xb0a457(0x731)]())return;if(!Imported[_0xb0a457(0x427)])return;VisuMZ['ConvertParams'](_0x2e8380,_0x2e8380);const _0x3d74ca=VisuMZ[_0xb0a457(0xa2c)](_0x2e8380['Targets']),_0x3cfc30=_0x2e8380[_0xb0a457(0x94b)]||0x1;for(const _0x3b8001 of _0x3d74ca){if(!_0x3b8001)continue;if(!_0x3b8001[_0xb0a457(0x1fb)]())continue;_0x3b8001[_0xb0a457(0xa5f)](_0x3cfc30);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xb9d),_0x133807=>{const _0x2b3f1b=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;VisuMZ['ConvertParams'](_0x133807,_0x133807);const _0x478041=VisuMZ[_0x2b3f1b(0xa2c)](_0x133807[_0x2b3f1b(0x750)]),_0x23be72=_0x133807[_0x2b3f1b(0xaaa)],_0x5636fa=_0x133807[_0x2b3f1b(0xaaa)],_0x204203=_0x133807[_0x2b3f1b(0x3a6)];for(const _0x2e3761 of _0x478041){if(!_0x2e3761)continue;if(_0x2e3761['isAtbChargingState']())_0x2e3761[_0x2b3f1b(0xa57)](_0x23be72);else{if(_0x2e3761[_0x2b3f1b(0x73a)]()){_0x2e3761[_0x2b3f1b(0xa9a)](_0x5636fa);if(_0x204203)_0x2e3761[_0x2b3f1b(0xb64)]();}}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xbbb),_0x5e3e85=>{const _0x53d364=_0xf2f935;if(!SceneManager[_0x53d364(0x731)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ['ConvertParams'](_0x5e3e85,_0x5e3e85);const _0x1cc655=VisuMZ[_0x53d364(0xa2c)](_0x5e3e85['Targets']),_0x179a92=_0x5e3e85[_0x53d364(0x432)];for(const _0x27d997 of _0x1cc655){if(!_0x27d997)continue;_0x27d997[_0x53d364(0x3bf)](_0x179a92);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x93d),_0x52697a=>{const _0x1c5337=_0xf2f935;if(!SceneManager[_0x1c5337(0x731)]())return;if(!Imported[_0x1c5337(0xa9e)])return;if(!BattleManager[_0x1c5337(0x370)])return;VisuMZ[_0x1c5337(0xbda)](_0x52697a,_0x52697a);const _0x3ac06c=_0x52697a[_0x1c5337(0x862)];$gameVariables[_0x1c5337(0xa01)](_0x3ac06c,BattleManager[_0x1c5337(0x370)][_0x1c5337(0x736)]());}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0xa1b),_0x273fca=>{const _0x43a06e=_0xf2f935;if(!SceneManager[_0x43a06e(0x731)]())return;if(!Imported[_0x43a06e(0x7bc)])return;VisuMZ['ConvertParams'](_0x273fca,_0x273fca);const _0x1f146c=VisuMZ['CreateActionSequenceTargets'](_0x273fca[_0x43a06e(0x750)]),_0xf40a22=_0x273fca[_0x43a06e(0x7cc)];for(const _0x5a25cf of _0x1f146c){if(!_0x5a25cf)continue;if(_0x5a25cf[_0x43a06e(0x246)]())continue;if(!_0x5a25cf['isAffectedByBreakShield']())continue;_0x5a25cf[_0x43a06e(0x422)](_0xf40a22);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xbb3),_0x1d84df=>{const _0x5568b3=_0xf2f935;if(!SceneManager[_0x5568b3(0x731)]())return;if(!Imported[_0x5568b3(0x7bc)])return;VisuMZ[_0x5568b3(0xbda)](_0x1d84df,_0x1d84df);const _0x227d4e=VisuMZ['CreateActionSequenceTargets'](_0x1d84df[_0x5568b3(0x750)]);for(const _0x349483 of _0x227d4e){if(_0x5568b3(0x9b1)!==_0x5568b3(0x9b1)){function _0x39944a(){const _0x43710d=_0x5568b3;_0x2055d0['reserveCommonEvent'](_0xa92f79[_0x43710d(0x311)]);}}else{if(!_0x349483)continue;if(_0x349483[_0x5568b3(0x246)]())continue;if(!_0x349483[_0x5568b3(0x1d7)]())continue;_0x349483[_0x5568b3(0x32a)]();}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x20e),_0x3c50c7=>{const _0x24a5ee=_0xf2f935;if(!SceneManager[_0x24a5ee(0x731)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;VisuMZ['ConvertParams'](_0x3c50c7,_0x3c50c7);const _0x4b7a63=VisuMZ[_0x24a5ee(0xa2c)](_0x3c50c7[_0x24a5ee(0x750)]),_0x59d43a=_0x3c50c7['BravePoints'];for(const _0x25a0e1 of _0x4b7a63){if(!_0x25a0e1)continue;_0x25a0e1[_0x24a5ee(0x920)](_0x59d43a);}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x376),_0x17d96a=>{const _0x4d2850=_0xf2f935;if(!SceneManager[_0x4d2850(0x731)]())return;VisuMZ[_0x4d2850(0xbda)](_0x17d96a,_0x17d96a);const _0x13b0a1=$gameTemp['getLastPluginCommandInterpreter'](),_0x112aed=BattleManager[_0x4d2850(0x371)],_0x141991=BattleManager['_subject'];if(!_0x13b0a1||!_0x112aed||!_0x141991)return;if(!_0x112aed[_0x4d2850(0x5b0)]())return;const _0x72db3d=VisuMZ['CreateActionSequenceTargets'](_0x17d96a[_0x4d2850(0x750)]);for(const _0x1410dd of _0x72db3d){if(!_0x1410dd)continue;if(_0x17d96a[_0x4d2850(0x320)]){if(_0x4d2850(0x5d2)===_0x4d2850(0x651)){function _0x4f614e(){const _0x5a8d51=_0x4d2850,_0x7f90be=_0x122bc2['prototype']['extraHeight'](),_0x25a570=_0x4956fb[_0x5a8d51(0x760)],_0x38358d=this['windowAreaHeight']()+_0x7f90be,_0x13e6cd=0x0,_0x30d590=_0x418da2[_0x5a8d51(0x33f)]-_0x38358d+_0x7f90be;return new _0x5bdcf1(_0x13e6cd,_0x30d590,_0x25a570,_0x38358d);}}else _0x1410dd[_0x4d2850(0x6e3)](),_0x1410dd[_0x4d2850(0x96c)](_0x1410dd[_0x4d2850(0x498)]());}_0x1410dd[_0x4d2850(0x228)]()&&_0x1410dd[_0x4d2850(0x9ca)]();}_0x13b0a1['setWaitMode'](_0x4d2850(0xb16));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x991),_0x49e8cb=>{const _0x5afe4f=_0xf2f935;if(!SceneManager[_0x5afe4f(0x731)]())return;if(!Imported[_0x5afe4f(0xa64)])return;VisuMZ[_0x5afe4f(0xbda)](_0x49e8cb,_0x49e8cb);const _0x1dbf34=VisuMZ['CreateActionSequenceTargets'](_0x49e8cb[_0x5afe4f(0x750)]),_0x4cb3d3=_0x49e8cb[_0x5afe4f(0x8ff)];for(const _0x800ec of _0x1dbf34){if(_0x5afe4f(0x298)!==_0x5afe4f(0x298)){function _0x11147c(){const _0x48c02d=_0x5afe4f;for(const _0x2d6d7f of _0x1095e9){const _0x4eee48=_0xe7b81[0x0][_0x48c02d(0x460)](_0x2d6d7f[0x0],_0x22144e[0x0]),_0x32a038=_0x23633c[0x1]['format'](_0x2d6d7f[0x1],_0x29a9e2[0x1])[_0x48c02d(0x669)](),_0x43a706=new _0x1fe624(_0x1494ad[_0x48c02d(0x460)](_0x32a038),'i');_0x15f686[_0x4eee48]=_0x43a706;}}}else{if(!_0x800ec)continue;_0x800ec[_0x5afe4f(0x666)](_0x4cb3d3);}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x600),_0x4afe33=>{const _0x5463d9=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;VisuMZ[_0x5463d9(0xbda)](_0x4afe33,_0x4afe33);const _0x4f4361=VisuMZ[_0x5463d9(0xa2c)](_0x4afe33[_0x5463d9(0x750)]),_0x2fda03=_0x4afe33[_0x5463d9(0xaaa)],_0x4f11a9=_0x4afe33[_0x5463d9(0xaaa)];for(const _0x2d27aa of _0x4f4361){if(!_0x2d27aa)continue;if(_0x2d27aa[_0x5463d9(0x7e9)]===_0x5463d9(0x564))_0x2d27aa[_0x5463d9(0x679)](_0x2fda03);else _0x2d27aa[_0x5463d9(0x7e9)]==='casting'&&_0x2d27aa['changeCtbCastTime'](_0x4f11a9);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Mechanics_CustomDmgFormula',_0x5aae38=>{const _0x4fcb93=_0xf2f935;if(!SceneManager[_0x4fcb93(0x731)]())return;VisuMZ[_0x4fcb93(0xbda)](_0x5aae38,_0x5aae38);const _0x37816f=BattleManager[_0x4fcb93(0x371)];if(!_0x37816f)return;let _0x2a2c51=_0x5aae38[_0x4fcb93(0x5ad)];_0x37816f['setCustomDamageFormula'](_0x2a2c51);}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x654),_0x3073de=>{const _0x1b436a=_0xf2f935;if(!SceneManager[_0x1b436a(0x731)]())return;VisuMZ['ConvertParams'](_0x3073de,_0x3073de);const _0x2011a5=VisuMZ['CreateActionSequenceTargets'](_0x3073de[_0x1b436a(0x750)]);for(const _0x100440 of _0x2011a5){if(!_0x100440)continue;if(_0x100440['shouldPopupDamage']())_0x100440[_0x1b436a(0x225)]();}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x6d7),_0xf4ad5c=>{const _0xa25b23=_0xf2f935;if(!SceneManager[_0xa25b23(0x731)]())return;VisuMZ[_0xa25b23(0xbda)](_0xf4ad5c,_0xf4ad5c);const _0x543887=$gameTemp[_0xa25b23(0x7da)](),_0x5b763c=BattleManager[_0xa25b23(0x370)],_0x2cc0d8=_0xf4ad5c['JumpToLabel'];if(!_0x543887)return;if(!_0x5b763c)return;if(_0x5b763c&&_0x5b763c['isDead']()&&_0x2cc0d8['toUpperCase']()[_0xa25b23(0x669)]()!=='UNTITLED'){if(_0xa25b23(0xb09)!==_0xa25b23(0x249))_0x543887[_0xa25b23(0x593)]([_0x2cc0d8]);else{function _0x4ec5a7(){const _0x496d3f=_0xa25b23;_0xed04d9[_0x496d3f(0x886)][_0x496d3f(0xad5)][_0x496d3f(0x86d)](this);}}}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x694),_0x5a8cc1=>{const _0x3723bc=_0xf2f935;if(!SceneManager[_0x3723bc(0x731)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;VisuMZ[_0x3723bc(0xbda)](_0x5a8cc1,_0x5a8cc1);const _0x55ddb9=_0x5a8cc1['ActionCount'];if(BattleManager['_subject']){if(_0x3723bc(0x7f8)===_0x3723bc(0x4e0)){function _0xdf1337(){const _0xcab818=_0x3723bc;return _0x351362[_0xcab818(0x886)][_0xcab818(0x650)][_0xcab818(0x2af)]['CmdStyle'];}}else BattleManager[_0x3723bc(0x370)][_0x3723bc(0x684)]()[_0x3723bc(0xb10)](_0x55ddb9);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Mechanics_HpMpTp',_0x5b9196=>{const _0x28e284=_0xf2f935;if(!SceneManager[_0x28e284(0x731)]())return;VisuMZ['ConvertParams'](_0x5b9196,_0x5b9196);const _0x586a1d=VisuMZ[_0x28e284(0xa2c)](_0x5b9196[_0x28e284(0x750)]),_0x4a9c07=_0x5b9196[_0x28e284(0xa00)],_0xc239ee=_0x5b9196[_0x28e284(0x9cd)],_0x5ee297=_0x5b9196[_0x28e284(0xb04)],_0x53f16a=_0x5b9196[_0x28e284(0x5b7)],_0x4ce8f4=_0x5b9196[_0x28e284(0x316)],_0x29a4d8=_0x5b9196[_0x28e284(0x24f)],_0x927743=_0x5b9196[_0x28e284(0x279)];for(const _0x3c502c of _0x586a1d){if(!_0x3c502c)continue;const _0x17ff88=_0x3c502c[_0x28e284(0x33d)](),_0x26f4da=Math['round'](_0x4a9c07*_0x3c502c[_0x28e284(0xa9d)]+_0xc239ee),_0x5a07b5=Math['round'](_0x5ee297*_0x3c502c[_0x28e284(0xaeb)]+_0x53f16a),_0x25713c=Math[_0x28e284(0x78a)](_0x4ce8f4*_0x3c502c[_0x28e284(0xb5d)]()+_0x29a4d8);if(_0x26f4da!==0x0)_0x3c502c['gainHp'](_0x26f4da);if(_0x5a07b5!==0x0)_0x3c502c['gainMp'](_0x5a07b5);if(_0x25713c!==0x0)_0x3c502c[_0x28e284(0x40d)](_0x25713c);if(_0x927743)_0x3c502c['startDamagePopup']();_0x17ff88&&_0x3c502c[_0x28e284(0xb18)]()&&_0x3c502c[_0x28e284(0x9ca)]();}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],'ActSeq_Mechanics_Immortal',_0x5ea260=>{const _0x2e6c18=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2e6c18(0xbda)](_0x5ea260,_0x5ea260);const _0x289676=VisuMZ[_0x2e6c18(0xa2c)](_0x5ea260['Targets']);for(const _0x217f93 of _0x289676){if(!_0x217f93)continue;_0x217f93[_0x2e6c18(0xaf6)](_0x5ea260['Immortal']);}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0xa26),_0x404a7b=>{const _0x5745f6=_0xf2f935;if(!SceneManager[_0x5745f6(0x731)]())return;VisuMZ[_0x5745f6(0xbda)](_0x404a7b,_0x404a7b);const _0x47f1d3=BattleManager['_action'],_0x30e0a2={'criticalHitRate':_0x404a7b[_0x5745f6(0xa72)],'criticalHitFlat':_0x404a7b[_0x5745f6(0x6bc)],'criticalDmgRate':_0x404a7b[_0x5745f6(0x534)],'criticalDmgFlat':_0x404a7b[_0x5745f6(0x5aa)],'damageRate':_0x404a7b['DamageRate'],'damageFlat':_0x404a7b[_0x5745f6(0x59a)],'hitRate':_0x404a7b[_0x5745f6(0x6b9)],'hitFlat':_0x404a7b['HitFlat']};_0x47f1d3['_multipliers']=_0x30e0a2;}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x4d6),_0x8c13ff=>{const _0x3f6818=_0xf2f935;if(!SceneManager[_0x3f6818(0x731)]())return;if(!Imported[_0x3f6818(0x4be)])return;VisuMZ['ConvertParams'](_0x8c13ff,_0x8c13ff);const _0x52a0a7=VisuMZ['CreateActionSequenceTargets'](_0x8c13ff['Targets']);for(const _0x346558 of _0x52a0a7){if(!_0x346558)continue;let _0x146f16=_0x8c13ff['CurrentTurn'],_0x20f23e=_0x8c13ff['NextTurn'],_0x30b588=_0x8c13ff['FollowTurn'];if(BattleManager[_0x3f6818(0xbd4)]['includes'](_0x346558))_0x146f16+=_0x30b588;else{if(_0x3f6818(0x707)!==_0x3f6818(0x707)){function _0x528f84(){const _0x12a3be=_0x3f6818;if(!_0x1a7547['isSceneBattle']())return;_0x940de0['ConvertParams'](_0x3be9a9,_0x4b5b75);const _0xbcb1bd=_0xfb6b5e[_0x12a3be(0x371)],_0x2c0342={'arPenRate':_0x142051[_0x12a3be(0x233)],'arPenFlat':_0x3d56b9[_0x12a3be(0xa6c)],'arRedRate':_0x4554aa[_0x12a3be(0x384)],'arRedFlat':_0x304fa7[_0x12a3be(0xb89)]};_0xbcb1bd[_0x12a3be(0x204)]=_0x2c0342;}}else _0x20f23e+=_0x30b588;}BattleManager[_0x3f6818(0x939)](_0x346558,-_0x146f16,![]),BattleManager['turnOrderChangeOTB'](_0x346558,-_0x20f23e,!![]);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xb20),_0x33ad3f=>{const _0x4feb7f=_0xf2f935;if(!SceneManager[_0x4feb7f(0x731)]())return;VisuMZ[_0x4feb7f(0xbda)](_0x33ad3f,_0x33ad3f);const _0x2f2306=['MAXHP',_0x4feb7f(0x31d),_0x4feb7f(0x532),_0x4feb7f(0x24d),_0x4feb7f(0x3ae),'MDF',_0x4feb7f(0x8cd),_0x4feb7f(0x753)],_0x554b1a=_0x33ad3f[_0x4feb7f(0x79a)],_0x4c2264=_0x33ad3f[_0x4feb7f(0x826)],_0x1155a1=VisuMZ['CreateActionSequenceTargets'](_0x33ad3f[_0x4feb7f(0x750)]);for(const _0x40e46d of _0x1155a1){if(!_0x40e46d)continue;for(const _0x105422 of _0x554b1a){const _0x175f98=_0x2f2306['indexOf'](_0x105422['toUpperCase']()[_0x4feb7f(0x669)]());if(_0x175f98>=0x0&&_0x175f98<=0x7&&_0x40e46d['isBuffAffected'](_0x175f98)){if(_0x4feb7f(0x619)!==_0x4feb7f(0xb6a))_0x40e46d[_0x4feb7f(0x282)](_0x175f98);else{function _0x29b2bb(){const _0x51b150=_0x4feb7f;if(_0x18899b===_0x51b150(0x80b))this[_0x51b150(0x35b)]=!![];if(this[_0x51b150(0x45b)]&&this['_battler'][_0x51b150(0xb18)]()){this[_0x51b150(0x6f4)]=_0x4bfaa4['MOTIONS'][_0x51b150(0x7a2)];return;}const _0x5e3426=_0x5bcf06[_0x51b150(0x368)][_0x49a407];this[_0x51b150(0x6f4)]=_0x5e3426,this[_0x51b150(0x284)]=0x0,this[_0x51b150(0x2f1)]=0x0;}}}}for(const _0x4b19cf of _0x4c2264){if('uzfxo'!==_0x4feb7f(0x874)){function _0x5b1bc5(){const _0x38e66f=_0x4feb7f,_0x4dc8fc=new _0x792f78(0x0,0x0,_0x5daf92['width'],_0x5efa5c['height']);this[_0x38e66f(0x3f5)]=new _0x16946b(_0x4dc8fc),this[_0x38e66f(0x3f5)][_0x38e66f(0x9c2)]=0x0,this[_0x38e66f(0x8de)](this[_0x38e66f(0x3f5)]),this[_0x38e66f(0x899)]();}}else{const _0x2cd483=_0x2f2306['indexOf'](_0x4b19cf[_0x4feb7f(0xa2e)]()['trim']());_0x2cd483>=0x0&&_0x2cd483<=0x7&&_0x40e46d['isDebuffAffected'](_0x2cd483)&&_0x40e46d[_0x4feb7f(0x282)](_0x2cd483);}}}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x9c5),_0x3ed103=>{const _0xd985c6=_0xf2f935;if(!SceneManager[_0xd985c6(0x731)]())return;VisuMZ[_0xd985c6(0xbda)](_0x3ed103,_0x3ed103);const _0x4489ad=_0x3ed103[_0xd985c6(0x6d9)],_0x27e861=VisuMZ[_0xd985c6(0xa2c)](_0x3ed103['Targets']);for(const _0x1fc4b3 of _0x27e861){if(!_0x1fc4b3)continue;for(const _0x226135 of _0x4489ad){if(_0xd985c6(0x4c3)!==_0xd985c6(0x4c3)){function _0x5a5ed5(){const _0x42001d=_0xd985c6;this[_0x42001d(0x980)]=this[_0x42001d(0xa52)](this['_growX'],this[_0x42001d(0x31f)],_0x57b604,_0x5b5165,_0xf09b9f),this[_0x42001d(0x813)]=this[_0x42001d(0xa52)](this['_growY'],this[_0x42001d(0xa61)],_0x380cba,_0x1d7f3e,_0xda4ebd);}}else _0x1fc4b3[_0xd985c6(0x2b4)](_0x226135);}}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x583),_0x5a54c4=>{const _0x5bc804=_0xf2f935;if(!SceneManager[_0x5bc804(0x731)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;VisuMZ[_0x5bc804(0xbda)](_0x5a54c4,_0x5a54c4);const _0x2eb18=_0x5a54c4[_0x5bc804(0xb80)],_0x45ed8f=VisuMZ[_0x5bc804(0xa2c)](_0x5a54c4[_0x5bc804(0x750)]),_0x345653=_0x5a54c4['ForceExploited'],_0x204a0=_0x5a54c4[_0x5bc804(0x646)],_0x5f33a2=_0x5a54c4[_0x5bc804(0x267)],_0x312435=BattleManager[_0x5bc804(0x371)];if(_0x2eb18){if(_0x5bc804(0xb01)===_0x5bc804(0xb01))for(const _0x121dab of _0x45ed8f){if(!_0x121dab)continue;if(_0x121dab===user)continue;if(_0x345653)_0x121dab[_0x5bc804(0x1e4)](![]);_0x121dab[_0x5bc804(0x3db)](BattleManager[_0x5bc804(0x370)],_0x312435);}else{function _0x421bd6(){const _0x56ab04=_0x5bc804;return _0x4d1e71[_0x56ab04(0xbc2)]['match'](/<COMMAND TEXT: (.*)>/i)?_0x241308(_0x43ac59['$1']):_0x1aa1ee[_0x56ab04(0x222)];}}}if(_0x204a0&&BattleManager['_subject']){if(_0x5f33a2)BattleManager['_subject']['setSTBExploited'](![]);const _0x4b3605=_0x45ed8f[0x0];BattleManager[_0x5bc804(0xa4f)](_0x4b3605,_0x312435);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xada),_0x544ba0=>{const _0x3ea4bb=_0xf2f935;if(!SceneManager[_0x3ea4bb(0x731)]())return;if(!Imported[_0x3ea4bb(0x554)])return;VisuMZ[_0x3ea4bb(0xbda)](_0x544ba0,_0x544ba0);const _0x40144c=_0x544ba0[_0x3ea4bb(0x47c)];if(BattleManager['_subject']){if(_0x3ea4bb(0x26d)===_0x3ea4bb(0xb48)){function _0x3a0d0c(){const _0x3838c0=_0x3ea4bb,_0x3eb11f=_0x3a7eb6[_0x3838c0(0x9bb)](this[_0x3838c0(0x577)]),_0x19f705=_0x136010['DamageStyles'][_0x3eb11f];if(!_0x19f705)return this['getItemDamageAmountTextOriginal']();return _0x19f705[_0x3838c0(0x807)][_0x3838c0(0x86d)](this);}}else BattleManager[_0x3ea4bb(0x370)][_0x3ea4bb(0x5de)](_0x40144c);}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x2e9),_0x3e64b2=>{const _0xd914c=_0xf2f935;if(!SceneManager[_0xd914c(0x731)]())return;if(!Imported[_0xd914c(0x554)])return;VisuMZ[_0xd914c(0xbda)](_0x3e64b2,_0x3e64b2);let _0x5e16b9=_0x3e64b2[_0xd914c(0x47c)];if(BattleManager[_0xd914c(0x370)]){BattleManager[_0xd914c(0x370)][_0xd914c(0x9af)]=BattleManager[_0xd914c(0x370)][_0xd914c(0x9af)]||[];while(_0x5e16b9--){if(BattleManager['_subject']['_actions']['length']<=0x0)break;BattleManager[_0xd914c(0x370)][_0xd914c(0x9af)][_0xd914c(0x487)]();}}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x55e),_0x1c2d93=>{const _0x40b08e=_0xf2f935;if(!SceneManager[_0x40b08e(0x731)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x40b08e(0xbda)](_0x1c2d93,_0x1c2d93);const _0x10c02c=VisuMZ[_0x40b08e(0xa2c)](_0x1c2d93[_0x40b08e(0x750)]),_0xccf5f9=_0x1c2d93[_0x40b08e(0x38d)];for(const _0xa6bc9d of _0x10c02c){if(!_0xa6bc9d)continue;if(!_0xa6bc9d[_0x40b08e(0x8bc)]())continue;_0xa6bc9d['switchToWeaponType'](_0xccf5f9);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Mechanics_TextPopup',_0x545fd2=>{const _0x23a09f=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23a09f(0xbda)](_0x545fd2,_0x545fd2);const _0x4a9e12=VisuMZ[_0x23a09f(0xa2c)](_0x545fd2[_0x23a09f(0x750)]),_0x49a99c=_0x545fd2['Text'],_0x1fea3e={'textColor':ColorManager[_0x23a09f(0x7b3)](_0x545fd2[_0x23a09f(0xb42)]),'flashColor':_0x545fd2['FlashColor'],'flashDuration':_0x545fd2[_0x23a09f(0x533)]};for(const _0x2846ce of _0x4a9e12){if(!_0x2846ce)continue;_0x2846ce[_0x23a09f(0x353)](_0x49a99c,_0x1fea3e);}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x4f1),_0x120972=>{const _0x1f28b1=_0xf2f935;if(!SceneManager[_0x1f28b1(0x731)]())return;VisuMZ[_0x1f28b1(0xbda)](_0x120972,_0x120972);const _0x176e7d=VisuMZ[_0x1f28b1(0xa2c)](_0x120972[_0x1f28b1(0x750)]);let _0x489db4=$gameVariables[_0x1f28b1(0x99b)](_0x120972[_0x1f28b1(0xab6)]);Imported[_0x1f28b1(0x758)]&&_0x120972['DigitGrouping']&&(_0x489db4=VisuMZ[_0x1f28b1(0x872)](_0x489db4));const _0x24b29e=String(_0x489db4),_0x478a55={'textColor':ColorManager[_0x1f28b1(0x7b3)](_0x120972[_0x1f28b1(0xb42)]),'flashColor':_0x120972[_0x1f28b1(0x28c)],'flashDuration':_0x120972['FlashDuration']};for(const _0x1160ff of _0x176e7d){if(!_0x1160ff)continue;_0x1160ff['setupTextPopup'](_0x24b29e,_0x478a55);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xa28),_0x2669ff=>{const _0x20d657=_0xf2f935;if(!SceneManager['isSceneBattle']())return;const _0x33c0bc=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x33c0bc)return;_0x33c0bc[_0x20d657(0x8a6)](_0x20d657(0xb16));}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0xae6),_0x5b5c20=>{const _0x26ec78=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x26ec78(0xbda)](_0x5b5c20,_0x5b5c20);const _0x35cfc6=VisuMZ[_0x26ec78(0xa2c)](_0x5b5c20['Targets']);for(const _0x5bcb5a of _0x35cfc6){if(!_0x5bcb5a)continue;_0x5bcb5a[_0x26ec78(0x5f3)]();}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0xab7),_0x1bf460=>{const _0x566a57=_0xf2f935;if(!SceneManager[_0x566a57(0x731)]())return;VisuMZ[_0x566a57(0xbda)](_0x1bf460,_0x1bf460);const _0x57c83e=VisuMZ['CreateActionSequenceTargets'](_0x1bf460['Targets']),_0x47e7d2=_0x1bf460['MotionType'][_0x566a57(0x9cb)]()[_0x566a57(0x669)](),_0x3f7789=_0x1bf460[_0x566a57(0xa34)],_0xa5f25c=_0x1bf460['Frame'];for(const _0x5ea9ff of _0x57c83e){if(!_0x5ea9ff)continue;_0x5ea9ff[_0x566a57(0x440)](_0x47e7d2,_0x3f7789,_0xa5f25c);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Motion_MotionType',_0x1dd01e=>{const _0x1c26c8=_0xf2f935;if(!SceneManager[_0x1c26c8(0x731)]())return;VisuMZ[_0x1c26c8(0xbda)](_0x1dd01e,_0x1dd01e);const _0x145bd4=VisuMZ[_0x1c26c8(0xa2c)](_0x1dd01e[_0x1c26c8(0x750)]),_0x1422e6=_0x1dd01e[_0x1c26c8(0x5b1)][_0x1c26c8(0x9cb)]()[_0x1c26c8(0x669)](),_0xec0464=_0x1dd01e[_0x1c26c8(0xa34)];for(const _0x108fbb of _0x145bd4){if('iUFCJ'!==_0x1c26c8(0xbce)){if(!_0x108fbb)continue;if(_0x1422e6[_0x1c26c8(0x78e)](/ATTACK[ ](\d+)/i)){if(_0x1c26c8(0x691)==='KgsZk'){function _0x402df5(){const _0x47b5e6=_0x1c26c8,_0x3a0209=_0x3f5967[_0x47b5e6(0x460)](_0x65384a[_0x47b5e6(0x222)](),_0x1d130d[_0x47b5e6(0x5b8)](_0x2aae99));this[_0x47b5e6(0x580)]('popBaseLine'),this[_0x47b5e6(0x580)](_0x47b5e6(0x6bf)),this[_0x47b5e6(0x580)]('addText',_0x3a0209),this[_0x47b5e6(0x580)](_0x47b5e6(0xb93));}}else _0x108fbb[_0x1c26c8(0x950)](Number(RegExp['$1']));}else{if(_0x1422e6===_0x1c26c8(0x989)){if(_0x1c26c8(0xaf2)!==_0x1c26c8(0xaf2)){function _0x310aec(){const _0x54f5b3=_0x1c26c8;return _0x42ff92['VisuMZ_0_CoreEngine']?_0x2a300e['CoreEngine'][_0x54f5b3(0x650)][_0x54f5b3(0x5ca)][_0x54f5b3(0x529)]:![];}}else _0x108fbb[_0x1c26c8(0x387)]();}else _0x108fbb['requestMotion'](_0x1422e6);}if(!_0xec0464){if(_0x1c26c8(0xaf7)===_0x1c26c8(0xaf7))_0x108fbb[_0x1c26c8(0x8c4)](0x0);else{function _0x214bc1(){const _0x27270b=_0x1c26c8;this[_0x27270b(0xadb)]=_0x2acb00[_0x27270b(0xadb)];}}}else{if(_0xec0464&&['thrust',_0x1c26c8(0x423),_0x1c26c8(0x775)]['includes'](_0x1422e6)){}}}else{function _0x369a87(){const _0x427b4d=_0x1c26c8;return _0xfa024a[_0x427b4d(0xba4)](_0x3b857a=>_0x3b857a[_0x427b4d(0xb18)]());}}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x83d),_0x168318=>{const _0x247339=_0xf2f935;if(!SceneManager[_0x247339(0x731)]())return;VisuMZ['ConvertParams'](_0x168318,_0x168318);const _0x2ae797=BattleManager[_0x247339(0x371)];if(!_0x2ae797)return;if(!_0x2ae797['item']())return;const _0x54e745=VisuMZ[_0x247339(0xa2c)](_0x168318[_0x247339(0x750)]);for(const _0x36bc28 of _0x54e745){if(_0x247339(0x506)!==_0x247339(0x4f5)){if(!_0x36bc28)continue;_0x36bc28['performAction'](_0x2ae797);}else{function _0xc5261f(){const _0xc041ae=_0x247339;_0x8f23b7=_0x29d47b[_0x2addba][_0xc041ae(0x86d)](this,_0x1b207b,_0x22cdeb);if(_0x5e8b90)_0x32df5f=_0x276bec;}}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x2e0),_0x549a3f=>{const _0x3e98db=_0xf2f935;if(!SceneManager[_0x3e98db(0x731)]())return;VisuMZ[_0x3e98db(0xbda)](_0x549a3f,_0x549a3f);const _0xa6d3d3=VisuMZ[_0x3e98db(0xa2c)](_0x549a3f[_0x3e98db(0x750)]);for(const _0xafb212 of _0xa6d3d3){if(!_0xafb212)continue;if(!_0xafb212['battler']())continue;_0xafb212[_0x3e98db(0x310)]()['refreshMotion']();}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x252),_0x19c213=>{const _0x20a694=_0xf2f935;if(!SceneManager[_0x20a694(0x731)]())return;VisuMZ[_0x20a694(0xbda)](_0x19c213,_0x19c213);const _0x4341a8=$gameTemp[_0x20a694(0x7da)](),_0x2cc20a=_0x19c213[_0x20a694(0x55a)]*Sprite_Battler['_motionSpeed'];_0x4341a8[_0x20a694(0xb93)](_0x2cc20a);}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x710),_0x14b202=>{const _0x3f7f33=_0xf2f935;if(!SceneManager[_0x3f7f33(0x731)]())return;VisuMZ[_0x3f7f33(0xbda)](_0x14b202,_0x14b202);const _0x50d2db=$gameTemp[_0x3f7f33(0x7da)](),_0x3f342a=BattleManager[_0x3f7f33(0x371)];if(!_0x50d2db||!_0x3f342a)return;if(!_0x3f342a[_0x3f7f33(0x5b0)]())return;const _0xfffb78=VisuMZ[_0x3f7f33(0xa2c)](_0x14b202[_0x3f7f33(0x750)]);for(const _0x532c54 of _0xfffb78){if(!_0x532c54)continue;_0x532c54[_0x3f7f33(0xa8c)](_0x3f342a);}if(_0x14b202[_0x3f7f33(0x219)])_0x50d2db['setWaitMode'](_0x3f7f33(0xa0a));}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x974),_0x3ea782=>{const _0x372a49=_0xf2f935;if(!SceneManager[_0x372a49(0x731)]())return;if(!$gameSystem[_0x372a49(0x649)]())return;VisuMZ['ConvertParams'](_0x3ea782,_0x3ea782);const _0x3c3fc3=VisuMZ[_0x372a49(0xa2c)](_0x3ea782[_0x372a49(0x750)]);let _0x58128f=_0x3ea782['Direction'][_0x372a49(0x78e)](/back/i);for(const _0x9b684a of _0x3c3fc3){if(!_0x9b684a)continue;if(_0x3ea782[_0x372a49(0x57a)][_0x372a49(0x78e)](/rand/i))_0x58128f=Math[_0x372a49(0x631)](0x2);_0x9b684a[_0x372a49(0x41c)](!!_0x58128f);}}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x292),_0x416e7b=>{const _0x5b0782=_0xf2f935;if(!SceneManager[_0x5b0782(0x731)]())return;if(!$gameSystem[_0x5b0782(0x649)]())return;VisuMZ[_0x5b0782(0xbda)](_0x416e7b,_0x416e7b);const _0x423ce1=VisuMZ[_0x5b0782(0xa2c)](_0x416e7b[_0x5b0782(0x750)]);let _0x4e45e1=_0x416e7b['Point'];const _0x4649f1=_0x416e7b[_0x5b0782(0x86e)];for(const _0x11893b of _0x423ce1){if(!_0x11893b)continue;let _0x139b6f=_0x11893b[_0x5b0782(0x310)]()[_0x5b0782(0x58e)],_0x2dc8d4=_0x11893b[_0x5b0782(0x310)]()[_0x5b0782(0x4de)];if(_0x4e45e1['match'](/home/i))_0x139b6f=_0x11893b[_0x5b0782(0x310)]()['_homeX'],_0x2dc8d4=_0x11893b['battler']()['_homeY'];else{if(_0x4e45e1['match'](/center/i)){if(_0x5b0782(0x9ad)!==_0x5b0782(0x8cf))_0x139b6f=Graphics[_0x5b0782(0x760)]/0x2,_0x2dc8d4=Graphics[_0x5b0782(0x33f)]/0x2;else{function _0x42c512(){_0x1fc702+=_0x140538;}}}else _0x4e45e1[_0x5b0782(0x78e)](/point (\d+), (\d+)/i)&&(_0x139b6f=Number(RegExp['$1']),_0x2dc8d4=Number(RegExp['$2']));}_0x11893b[_0x5b0782(0x572)](Math[_0x5b0782(0x78a)](_0x139b6f),Math['round'](_0x2dc8d4),!!_0x4649f1);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Movement_FaceTarget',_0x3a1791=>{const _0x24350b=_0xf2f935;if(!SceneManager[_0x24350b(0x731)]())return;if(!$gameSystem[_0x24350b(0x649)]())return;VisuMZ[_0x24350b(0xbda)](_0x3a1791,_0x3a1791);const _0x1979f2=VisuMZ['CreateActionSequenceTargets'](_0x3a1791[_0x24350b(0x2b9)]),_0x1a200c=VisuMZ[_0x24350b(0xa2c)](_0x3a1791[_0x24350b(0x6ad)]),_0x428cd4=_0x1a200c['map'](_0xd5d5a5=>_0xd5d5a5&&_0xd5d5a5[_0x24350b(0x310)]()?_0xd5d5a5[_0x24350b(0x310)]()['_baseX']:0x0)/(_0x1a200c[_0x24350b(0x342)]||0x1),_0x5bc3c0=_0x1a200c[_0x24350b(0x2ab)](_0x41605e=>_0x41605e&&_0x41605e[_0x24350b(0x310)]()?_0x41605e['battler']()['_baseY']:0x0)/(_0x1a200c[_0x24350b(0x342)]||0x1),_0x3df296=_0x3a1791[_0x24350b(0x86e)];for(const _0x228e43 of _0x1979f2){if('IExyN'===_0x24350b(0x2ca)){function _0x466e4b(){const _0x5b3027=_0x24350b,_0x579959=_0x2a7262(_0x2aab19['$1'])[_0x5b3027(0x774)](/[\r\n]+/)[_0x5b3027(0xbb8)]('');_0x36a762[_0x5b3027(0xb84)]=_0x1e727d[_0x5b3027(0x648)](_0x579959);}}else{if(!_0x228e43)continue;_0x228e43[_0x24350b(0x572)](Math[_0x24350b(0x78a)](_0x428cd4),Math['round'](_0x5bc3c0),!!_0x3df296);}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xa37),_0x34e6b7=>{const _0x3ba519=_0xf2f935;if(!SceneManager[_0x3ba519(0x731)]())return;VisuMZ[_0x3ba519(0xbda)](_0x34e6b7,_0x34e6b7);const _0x179787=$gameTemp[_0x3ba519(0x7da)](),_0x1eecc3=VisuMZ[_0x3ba519(0xa2c)](_0x34e6b7[_0x3ba519(0x750)]),_0x4603fa=_0x34e6b7['Height'],_0x43d98a=_0x34e6b7[_0x3ba519(0x858)],_0x178e9e=_0x34e6b7[_0x3ba519(0x20a)],_0x46d035=_0x34e6b7[_0x3ba519(0x728)];if(!_0x179787)return;for(const _0x44471e of _0x1eecc3){if(!_0x44471e)continue;_0x44471e[_0x3ba519(0x6f6)](_0x4603fa,_0x43d98a,_0x178e9e);}if(_0x46d035)_0x179787[_0x3ba519(0x8a6)](_0x3ba519(0xa4a));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x5e3),_0x3cc8eb=>{const _0x33ed83=_0xf2f935;if(!SceneManager[_0x33ed83(0x731)]())return;VisuMZ['ConvertParams'](_0x3cc8eb,_0x3cc8eb);const _0x4d3573=$gameTemp[_0x33ed83(0x7da)]();if(!_0x4d3573)return;const _0x71d156=VisuMZ[_0x33ed83(0xa2c)](_0x3cc8eb[_0x33ed83(0x750)]);for(const _0x27188 of _0x71d156){if(_0x33ed83(0x6a4)===_0x33ed83(0x6a4)){if(!_0x27188)continue;_0x27188[_0x33ed83(0x6e9)](),_0x27188[_0x33ed83(0x248)]();}else{function _0x3550dc(){const _0x28e38d=_0x33ed83;return _0x17b0d7[_0x28e38d(0xba4)](_0x319940=>_0x319940[_0x28e38d(0x33d)]()&&_0x319940!==_0x103cc0);}}}if(_0x3cc8eb['WaitForMovement'])_0x4d3573[_0x33ed83(0x8a6)](_0x33ed83(0xa0a));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Movement_Jump',_0x5d57bf=>{const _0x4f6c30=_0xf2f935;if(!SceneManager[_0x4f6c30(0x731)]())return;VisuMZ['ConvertParams'](_0x5d57bf,_0x5d57bf);const _0x2b2e3a=$gameTemp['getLastPluginCommandInterpreter'](),_0x3af2c2=VisuMZ[_0x4f6c30(0xa2c)](_0x5d57bf[_0x4f6c30(0x750)]),_0x2c6560=_0x5d57bf[_0x4f6c30(0x6b4)],_0x9e7eb7=_0x5d57bf[_0x4f6c30(0x858)],_0x1df24f=_0x5d57bf[_0x4f6c30(0x756)];if(!_0x2b2e3a)return;for(const _0x4c402e of _0x3af2c2){if(_0x4f6c30(0x2e7)===_0x4f6c30(0x661)){function _0x4abfb2(){const _0x3572ef=_0x4f6c30;this[_0x3572ef(0x897)]()&&this[_0x3572ef(0x847)][_0x3572ef(0x9f7)]();}}else{if(!_0x4c402e)continue;_0x4c402e[_0x4f6c30(0x456)](_0x2c6560,_0x9e7eb7);}}if(_0x1df24f)_0x2b2e3a[_0x4f6c30(0x8a6)](_0x4f6c30(0xa89));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x8d7),_0x3c95f4=>{const _0x395c52=_0xf2f935;if(!SceneManager[_0x395c52(0x731)]())return;if(!$gameSystem[_0x395c52(0x649)]())return;VisuMZ[_0x395c52(0xbda)](_0x3c95f4,_0x3c95f4);const _0x566d5b=$gameTemp['getLastPluginCommandInterpreter'](),_0x278852=VisuMZ[_0x395c52(0xa2c)](_0x3c95f4['Targets']),_0x1fed81=_0x3c95f4[_0x395c52(0xb2d)],_0x5a624a=_0x3c95f4[_0x395c52(0x938)],_0x342e60=_0x3c95f4[_0x395c52(0x202)],_0x34c318=_0x3c95f4['Duration'],_0x2c74b4=_0x3c95f4[_0x395c52(0x96a)],_0x3a974f=_0x3c95f4[_0x395c52(0x20a)],_0x566d21=_0x3c95f4[_0x395c52(0x5b1)],_0x22f24f=_0x3c95f4[_0x395c52(0x219)];if(!_0x566d5b)return;for(const _0x537e08 of _0x278852){if(!_0x537e08)continue;let _0xd5980b=_0x5a624a,_0x450aa6=_0x342e60;if(_0x1fed81[_0x395c52(0x78e)](/horz/i))_0xd5980b*=_0x537e08[_0x395c52(0x8bc)]()?-0x1:0x1;if(_0x1fed81[_0x395c52(0x78e)](/vert/i))_0x450aa6*=_0x537e08[_0x395c52(0x8bc)]()?-0x1:0x1;_0x537e08[_0x395c52(0x657)](_0xd5980b,_0x450aa6,_0x34c318,_0x2c74b4,_0x3a974f),_0x537e08[_0x395c52(0x700)](_0x566d21);}if(_0x22f24f)_0x566d5b[_0x395c52(0x8a6)](_0x395c52(0xa0a));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x9df),_0xf7e74c=>{const _0x44c688=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x44c688(0xbda)](_0xf7e74c,_0xf7e74c);const _0x4de8e1=$gameTemp[_0x44c688(0x7da)](),_0x11c788=VisuMZ[_0x44c688(0xa2c)](_0xf7e74c['Targets']),_0x3470b4=_0xf7e74c['Destination'],_0x35efe2=_0xf7e74c[_0x44c688(0xbd3)],_0x2c9a21=_0xf7e74c[_0x44c688(0xa45)],_0x249f0e=_0xf7e74c['OffsetY'],_0x145df6=_0xf7e74c[_0x44c688(0x858)],_0x21633a=_0xf7e74c[_0x44c688(0x96a)],_0x560f34=_0xf7e74c[_0x44c688(0x20a)],_0x490fa1=_0xf7e74c[_0x44c688(0x5b1)],_0x54a3c5=_0xf7e74c[_0x44c688(0x219)];if(!_0x4de8e1)return;for(const _0x26f65d of _0x11c788){if(!_0x26f65d)continue;let _0xf22bb=_0x26f65d[_0x44c688(0x310)]()[_0x44c688(0x58e)],_0x2c1f55=_0x26f65d[_0x44c688(0x310)]()[_0x44c688(0x4de)];if(_0x3470b4[_0x44c688(0x78e)](/home/i))_0xf22bb=_0x26f65d[_0x44c688(0x310)]()['_homeX'],_0x2c1f55=_0x26f65d[_0x44c688(0x310)]()[_0x44c688(0x5e8)];else{if(_0x3470b4[_0x44c688(0x78e)](/center/i)){if('GeKWA'!==_0x44c688(0x41f)){function _0x5edd51(){const _0x2163be=_0x44c688;this[_0x2163be(0x9c2)]=(this[_0x2163be(0x9c2)]*(_0x1a2417-0x1)+this['_targetOpacity'])/_0x1160d9;}}else _0xf22bb=Graphics['boxWidth']/0x2,_0x2c1f55=Graphics[_0x44c688(0x33f)]/0x2;}else{if(_0x3470b4[_0x44c688(0x78e)](/point (\d+), (\d+)/i)){if(_0x44c688(0x5b4)==='EOZhA'){function _0xec13d1(){this['requestMotion']('swing');}}else _0xf22bb=Number(RegExp['$1']),_0x2c1f55=Number(RegExp['$2']);}}}if(_0x35efe2['match'](/none/i)){if(_0x44c688(0x478)!=='PTLGL')_0xf22bb+=_0x2c9a21,_0x2c1f55+=_0x249f0e;else{function _0x4931bc(){return![];}}}else{if(_0x35efe2[_0x44c688(0x78e)](/horz/i)&&_0x35efe2[_0x44c688(0x78e)](/vert/i))_0xf22bb+=_0x26f65d[_0x44c688(0x8bc)]()?-_0x2c9a21:_0x2c9a21,_0x2c1f55+=_0x26f65d[_0x44c688(0x8bc)]()?-_0x249f0e:_0x249f0e;else{if(_0x35efe2['match'](/horz/i))_0xf22bb+=_0x26f65d[_0x44c688(0x8bc)]()?-_0x2c9a21:_0x2c9a21,_0x2c1f55+=_0x249f0e;else _0x35efe2['match'](/vert/i)&&(_0xf22bb+=_0x2c9a21,_0x2c1f55+=_0x26f65d[_0x44c688(0x8bc)]()?-_0x249f0e:_0x249f0e);}}_0x26f65d[_0x44c688(0x9ce)](_0xf22bb,_0x2c1f55,_0x145df6,_0x21633a,_0x560f34,-0x1),_0x26f65d[_0x44c688(0x700)](_0x490fa1);}if(_0x54a3c5)_0x4de8e1['setWaitMode']('battleMove');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x466),_0x9f6608=>{const _0x27f840=_0xf2f935;if(!SceneManager[_0x27f840(0x731)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x27f840(0xbda)](_0x9f6608,_0x9f6608);const _0xb5170a=$gameTemp[_0x27f840(0x7da)](),_0x9ee60b=VisuMZ[_0x27f840(0xa2c)](_0x9f6608[_0x27f840(0x2b9)]),_0x964328=VisuMZ[_0x27f840(0xa2c)](_0x9f6608['Targets2']),_0x4bbc2f=_0x9f6608['TargetLocation'];let _0x2531a6=_0x9f6608[_0x27f840(0x21d)];const _0x49b6fd=_0x9f6608[_0x27f840(0xbd3)],_0x5ec7be=_0x9f6608[_0x27f840(0xa45)],_0x1849e4=_0x9f6608['OffsetY'],_0xcab82a=_0x9f6608['Duration'],_0x47598a=_0x9f6608['FaceDirection'],_0x16f176=_0x9f6608[_0x27f840(0x20a)],_0xea1086=_0x9f6608[_0x27f840(0x5b1)],_0x5575e6=_0x9f6608[_0x27f840(0x219)],_0x4315c1=Math[_0x27f840(0x8ec)](..._0x964328[_0x27f840(0x2ab)](_0x228945=>_0x228945[_0x27f840(0x310)]()['_baseX']-_0x228945[_0x27f840(0x310)]()[_0x27f840(0x29b)]()/0x2)),_0x1185df=Math[_0x27f840(0x205)](..._0x964328[_0x27f840(0x2ab)](_0xad2a05=>_0xad2a05['battler']()[_0x27f840(0x58e)]+_0xad2a05[_0x27f840(0x310)]()[_0x27f840(0x29b)]()/0x2)),_0x46bbc3=Math['min'](..._0x964328[_0x27f840(0x2ab)](_0x3d24a2=>_0x3d24a2[_0x27f840(0x310)]()[_0x27f840(0x4de)]-_0x3d24a2['battler']()['mainSpriteHeight']())),_0x134a03=Math[_0x27f840(0x205)](..._0x964328[_0x27f840(0x2ab)](_0x3a121a=>_0x3a121a[_0x27f840(0x310)]()[_0x27f840(0x4de)])),_0x2d64cc=_0x964328['filter'](_0x1c445c=>_0x1c445c[_0x27f840(0x8bc)]())[_0x27f840(0x342)],_0xc16f57=_0x964328['filter'](_0x398e81=>_0x398e81[_0x27f840(0x1fb)]())[_0x27f840(0x342)];let _0x33261b=0x0,_0x34c80d=0x0;if(_0x4bbc2f[_0x27f840(0x78e)](/front/i))_0x33261b=_0x2d64cc>=_0xc16f57?_0x4315c1:_0x1185df;else{if(_0x4bbc2f[_0x27f840(0x78e)](/middle/i))_0x33261b=(_0x4315c1+_0x1185df)/0x2,_0x2531a6=-0x1;else _0x4bbc2f['match'](/back/i)&&(_0x33261b=_0x2d64cc>=_0xc16f57?_0x1185df:_0x4315c1);}if(_0x4bbc2f[_0x27f840(0x78e)](/head/i)){if(_0x27f840(0x343)!==_0x27f840(0x343)){function _0x58d970(){const _0x2a1a23=_0x27f840;return _0x195e44[_0x2a1a23(0x2dc)][_0x2a1a23(0x2be)][_0x2a1a23(0x86d)](this);}}else _0x34c80d=_0x46bbc3;}else{if(_0x4bbc2f[_0x27f840(0x78e)](/center/i)){if('gMSCb'!=='gMSCb'){function _0x54d54e(){const _0x38a988=_0x27f840;if(!_0x1014d9[_0x38a988(0x8d2)])return;if(this[_0x38a988(0xb22)]===_0x30ba63)return;const _0x51e0a7=_0x26ad42[_0x38a988(0x886)][_0x38a988(0x650)]['HpGauge'],_0x15a5fc=new _0x1e56fc();_0x15a5fc[_0x38a988(0x281)]['x']=_0x51e0a7[_0x38a988(0xb5b)],_0x15a5fc['anchor']['y']=_0x51e0a7[_0x38a988(0xb86)],_0x15a5fc['scale']['x']=_0x15a5fc[_0x38a988(0x3f0)]['y']=_0x51e0a7['Scale'],this[_0x38a988(0x2c6)]=_0x15a5fc,this['addChild'](this[_0x38a988(0x2c6)]);}}else _0x34c80d=(_0x46bbc3+_0x134a03)/0x2;}else _0x4bbc2f[_0x27f840(0x78e)](/base/i)&&(_0x34c80d=_0x134a03);}if(!_0xb5170a)return;for(const _0x54950c of _0x9ee60b){if(!_0x54950c)continue;let _0x374c94=_0x33261b,_0x3740de=_0x34c80d;if(_0x49b6fd[_0x27f840(0x78e)](/none/i))_0x374c94+=_0x5ec7be,_0x3740de+=_0x1849e4;else{if(_0x49b6fd[_0x27f840(0x78e)](/horz/i)&&_0x49b6fd['match'](/vert/i))_0x374c94+=_0x54950c[_0x27f840(0x8bc)]()?-_0x5ec7be:_0x5ec7be,_0x3740de+=_0x54950c[_0x27f840(0x8bc)]()?-_0x1849e4:_0x1849e4;else{if(_0x49b6fd['match'](/horz/i))_0x374c94+=_0x54950c[_0x27f840(0x8bc)]()?-_0x5ec7be:_0x5ec7be,_0x3740de+=_0x1849e4;else{if(_0x49b6fd['match'](/vert/i)){if('xnLCt'==='xnLCt')_0x374c94+=_0x5ec7be,_0x3740de+=_0x54950c[_0x27f840(0x8bc)]()?-_0x1849e4:_0x1849e4;else{function _0x1d831e(){const _0x268b33=_0x27f840;return this['battlerSprites']()[_0x268b33(0xa60)](_0x4803f8=>_0x4803f8[_0x268b33(0xaa2)]());}}}}}}_0x54950c['moveBattlerToPoint'](_0x374c94,_0x3740de,_0xcab82a,_0x47598a,_0x16f176,_0x2531a6),_0x54950c['requestMotion'](_0xea1086);}if(_0x5575e6)_0xb5170a['setWaitMode'](_0x27f840(0xa0a));}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0xbcd),_0x40c566=>{const _0x52934c=_0xf2f935;if(!SceneManager[_0x52934c(0x731)]())return;VisuMZ[_0x52934c(0xbda)](_0x40c566,_0x40c566);const _0x3a3dbc=$gameTemp[_0x52934c(0x7da)](),_0x17ef0b=VisuMZ[_0x52934c(0xa2c)](_0x40c566[_0x52934c(0x750)]),_0x17a14f=_0x40c566[_0x52934c(0x1d6)],_0x5e642f=_0x40c566[_0x52934c(0x858)],_0x3ace95=_0x40c566['EasingType'],_0x9abd2c=_0x40c566[_0x52934c(0xb1f)];if(!_0x3a3dbc)return;for(const _0x10126e of _0x17ef0b){if('EfErb'!==_0x52934c(0x7ec)){function _0x1c7ad8(){const _0x1b2e37=_0x52934c,_0x528add=_0x51d6b5['getDamageStyle'](this[_0x1b2e37(0x577)]),_0x23d6d7=_0x101165['DamageStyles'][_0x528add];if(!_0x23d6d7)return this[_0x1b2e37(0x1ed)]();const _0x43fb4a=_0x1b2e37(0xab2)[_0x1b2e37(0x460)](this[_0x1b2e37(0x577)][_0x1b2e37(0xb5e)][_0x1b2e37(0x74f)]),_0x52afc7=[null,_0x1f2825['hp'],_0x46f69f['mp'],_0x115bfd['hp'],_0xd37ef5['mp'],_0xfb1fda['hp'],_0x38df34['mp']][this['_item'][_0x1b2e37(0xb5e)]['type']];return _0x23d6d7[_0x43fb4a]['format'](_0x52afc7);}}else{if(!_0x10126e)continue;_0x10126e[_0x52934c(0x8e1)](_0x17a14f,_0x5e642f,_0x3ace95);}}if(_0x9abd2c)_0x3a3dbc[_0x52934c(0x8a6)](_0x52934c(0xb0b));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0xace),_0x4b83ee=>{const _0x15a4b5=_0xf2f935;if(!SceneManager[_0x15a4b5(0x731)]())return;VisuMZ['ConvertParams'](_0x4b83ee,_0x4b83ee);const _0x4cf30=$gameTemp[_0x15a4b5(0x7da)](),_0x409b94=VisuMZ[_0x15a4b5(0xa2c)](_0x4b83ee[_0x15a4b5(0x750)]),_0x56af27=_0x4b83ee[_0x15a4b5(0x26f)],_0x333afa=_0x4b83ee[_0x15a4b5(0x4bd)],_0x547ffe=_0x4b83ee[_0x15a4b5(0x858)],_0x2128d8=_0x4b83ee['EasingType'],_0x4474fb=_0x4b83ee['WaitForScale'];if(!_0x4cf30)return;for(const _0x32013e of _0x409b94){if(_0x15a4b5(0x428)!=='tgSny'){function _0x5bafaf(){const _0x3db13c=_0x15a4b5,_0xb7ca75=this['item']()[_0x3db13c(0xbc2)];if(_0xb7ca75[_0x3db13c(0x78e)](/<ALWAYS HIT>/i))return 0x1;else{if(_0xb7ca75['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x4c2e70(_0x536a92['$1'])/0x64;else{let _0x487461=_0x10a858['BattleCore'][_0x3db13c(0x4df)][_0x3db13c(0x86d)](this,_0x5348fb);return _0x487461=this[_0x3db13c(0x8c3)][_0x3db13c(0x307)]*_0x487461+this[_0x3db13c(0x8c3)][_0x3db13c(0x64d)],_0x487461;}}}}else{if(!_0x32013e)continue;_0x32013e[_0x15a4b5(0x21b)](_0x56af27,_0x333afa,_0x547ffe,_0x2128d8);}}if(_0x4474fb)_0x4cf30[_0x15a4b5(0x8a6)](_0x15a4b5(0x2d8));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x936),_0xcab4f2=>{const _0x56337c=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x56337c(0xbda)](_0xcab4f2,_0xcab4f2);const _0x3b553d=$gameTemp[_0x56337c(0x7da)](),_0x165fbe=VisuMZ[_0x56337c(0xa2c)](_0xcab4f2[_0x56337c(0x750)]),_0x25613e=_0xcab4f2[_0x56337c(0x996)],_0xc2849=_0xcab4f2[_0x56337c(0x793)],_0x3457f1=_0xcab4f2[_0x56337c(0x858)],_0x57011d=_0xcab4f2[_0x56337c(0x20a)],_0x29c7ad=_0xcab4f2[_0x56337c(0x397)];if(!_0x3b553d)return;for(const _0x268c1f of _0x165fbe){if(!_0x268c1f)continue;_0x268c1f[_0x56337c(0x3e1)](_0x25613e,_0xc2849,_0x3457f1,_0x57011d);}if(_0x29c7ad)_0x3b553d[_0x56337c(0x8a6)]('battleSpriteSkew');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x462),_0x35b573=>{const _0x1d7fae=_0xf2f935;if(!SceneManager[_0x1d7fae(0x731)]())return;VisuMZ['ConvertParams'](_0x35b573,_0x35b573);const _0x40ebd7=$gameTemp[_0x1d7fae(0x7da)](),_0x57fb7f=VisuMZ[_0x1d7fae(0xa2c)](_0x35b573[_0x1d7fae(0x750)]),_0x49b629=_0x35b573[_0x1d7fae(0x37a)],_0xb033bf=_0x35b573[_0x1d7fae(0x858)],_0x138d7a=_0x35b573['EasingType'],_0x5cfe41=_0x35b573['RevertAngle'],_0x4c42aa=_0x35b573['WaitForSpin'];if(!_0x40ebd7)return;for(const _0x2be612 of _0x57fb7f){if(!_0x2be612)continue;_0x2be612[_0x1d7fae(0x325)](_0x49b629,_0xb033bf,_0x138d7a,_0x5cfe41);}if(_0x4c42aa)_0x40ebd7['setWaitMode']('battleSpin');}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x239),_0x108254=>{const _0x3fcdc5=_0xf2f935;if(!SceneManager[_0x3fcdc5(0x731)]())return;const _0x49683e=$gameTemp[_0x3fcdc5(0x7da)]();if(!_0x49683e)return;_0x49683e[_0x3fcdc5(0x8a6)](_0x3fcdc5(0xa4a));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xb3b),_0x349ec5=>{const _0x273a37=_0xf2f935;if(!SceneManager['isSceneBattle']())return;const _0x3689a1=$gameTemp[_0x273a37(0x7da)]();if(!_0x3689a1)return;_0x3689a1[_0x273a37(0x8a6)](_0x273a37(0xa89));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x739),_0x398bf5=>{const _0x3378e3=_0xf2f935;if(!SceneManager[_0x3378e3(0x731)]())return;const _0x19ee80=$gameTemp[_0x3378e3(0x7da)]();if(!_0x19ee80)return;_0x19ee80[_0x3378e3(0x8a6)](_0x3378e3(0xa0a));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],'ActSeq_Movement_WaitForOpacity',_0x5ab2e5=>{const _0x26b68b=_0xf2f935;if(!SceneManager[_0x26b68b(0x731)]())return;const _0x15bda3=$gameTemp[_0x26b68b(0x7da)]();if(!_0x15bda3)return;_0x15bda3[_0x26b68b(0x8a6)]('battleOpacity');}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x7be),_0x2f87e5=>{const _0x303b30=_0xf2f935;if(!SceneManager[_0x303b30(0x731)]())return;const _0x40155b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x40155b)return;_0x40155b[_0x303b30(0x8a6)](_0x303b30(0x2d8));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Movement_WaitForSkew',_0x30fe62=>{const _0x15d026=_0xf2f935;if(!SceneManager[_0x15d026(0x731)]())return;const _0x3a4d63=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3a4d63)return;_0x3a4d63[_0x15d026(0x8a6)](_0x15d026(0x256));}),PluginManager['registerCommand'](pluginData['name'],_0xf2f935(0x455),_0x358c26=>{const _0x3d2c8a=_0xf2f935;if(!SceneManager[_0x3d2c8a(0x731)]())return;const _0x50412b=$gameTemp[_0x3d2c8a(0x7da)]();if(!_0x50412b)return;_0x50412b[_0x3d2c8a(0x8a6)]('battleSpin');}),PluginManager['registerCommand'](pluginData['name'],_0xf2f935(0x7ee),_0x309156=>{const _0x5529de=_0xf2f935;if(!SceneManager[_0x5529de(0x731)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x5529de(0xbda)](_0x309156,_0x309156);const _0x573b1e=$gameTemp['getLastPluginCommandInterpreter'](),_0x532e79=_0x309156['WaitForProjectile'];if(!_0x573b1e)return;const _0x55bbee=BattleManager[_0x5529de(0x2c7)];if(!_0x55bbee)return;_0x55bbee['createActionSequenceProjectile'](_0x309156);if(_0x532e79)_0x573b1e[_0x5529de(0x8a6)](_0x5529de(0xad2));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0xb23),_0x1ca529=>{const _0x37db16=_0xf2f935;if(!SceneManager[_0x37db16(0x731)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x37db16(0xbda)](_0x1ca529,_0x1ca529);const _0x608f44=$gameTemp[_0x37db16(0x7da)](),_0x297d09=_0x1ca529[_0x37db16(0x95a)];if(!_0x608f44)return;const _0xa6fedf=BattleManager['_spriteset'];if(!_0xa6fedf)return;_0xa6fedf[_0x37db16(0x9ab)](_0x1ca529);if(_0x297d09)_0x608f44[_0x37db16(0x8a6)](_0x37db16(0xad2));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x32d),_0x4adace=>{const _0x5ce9c6=_0xf2f935;if(!SceneManager[_0x5ce9c6(0x731)]())return;if(!Imported[_0x5ce9c6(0x70a)])return;VisuMZ[_0x5ce9c6(0xbda)](_0x4adace,_0x4adace);const _0x283574=$gameTemp['getLastPluginCommandInterpreter'](),_0x46efc9=_0x4adace[_0x5ce9c6(0x95a)];if(!_0x283574)return;const _0x407e36=BattleManager[_0x5ce9c6(0x2c7)];if(!_0x407e36)return;_0x407e36[_0x5ce9c6(0x9ab)](_0x4adace);if(_0x46efc9)_0x283574[_0x5ce9c6(0x8a6)](_0x5ce9c6(0xad2));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x849),_0x5a51c4=>{const _0x283350=_0xf2f935;if(!SceneManager[_0x283350(0x731)]())return;if(!Imported[_0x283350(0x3de)])return;VisuMZ[_0x283350(0xbda)](_0x5a51c4,_0x5a51c4);const _0x7a48ae=$gameTemp['getLastPluginCommandInterpreter'](),_0x46c17=_0x5a51c4[_0x283350(0x397)];if(!_0x7a48ae)return;$gameScreen[_0x283350(0x27d)](_0x5a51c4[_0x283350(0x996)],_0x5a51c4[_0x283350(0x793)],_0x5a51c4['Duration'],_0x5a51c4[_0x283350(0x20a)]);if(_0x46c17)_0x7a48ae['setWaitMode'](_0x283350(0x238));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Skew_Reset',_0x15ce2f=>{const _0x5ad780=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ad780(0x3de)])return;VisuMZ['ConvertParams'](_0x15ce2f,_0x15ce2f);const _0x1c91f9=$gameTemp[_0x5ad780(0x7da)](),_0x39247d=_0x15ce2f['WaitForSkew'];if(!_0x1c91f9)return;$gameScreen[_0x5ad780(0x27d)](0x0,0x0,_0x15ce2f[_0x5ad780(0x858)],_0x15ce2f[_0x5ad780(0x20a)]);if(_0x39247d)_0x1c91f9[_0x5ad780(0x8a6)]('battleSkew');}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x7b8),_0x406c22=>{const _0x50cb4e=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x407120=$gameTemp[_0x50cb4e(0x7da)]();if(!_0x407120)return;_0x407120[_0x50cb4e(0x8a6)](_0x50cb4e(0x238));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xa41),_0x437bb4=>{const _0x42c0da=_0xf2f935;if(!SceneManager[_0x42c0da(0x731)]())return;VisuMZ[_0x42c0da(0xbda)](_0x437bb4,_0x437bb4);const _0x54d3e3=$gameTemp[_0x42c0da(0x7da)](),_0x3c408d=_0x437bb4[_0x42c0da(0x293)],_0x1340ea=_0x437bb4[_0x42c0da(0xb24)];if(!_0x54d3e3)return;BattleManager[_0x42c0da(0x4c7)]=_0x3c408d,BattleManager[_0x42c0da(0xaf5)]=BattleManager[_0x42c0da(0x4a1)]?BattleManager[_0x42c0da(0x4a1)][BattleManager[_0x42c0da(0x4c7)]]||null:null,BattleManager[_0x42c0da(0xaf5)]&&_0x1340ea[_0x42c0da(0xa2e)]()[_0x42c0da(0x669)]()!==_0x42c0da(0xa49)&&_0x54d3e3['command119']([_0x1340ea]);}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x2b5),_0x5ad730=>{const _0x40596c=_0xf2f935;if(!SceneManager[_0x40596c(0x731)]())return;VisuMZ['ConvertParams'](_0x5ad730,_0x5ad730);const _0x1e8bf5=$gameTemp['getLastPluginCommandInterpreter'](),_0x4d1abf=_0x5ad730[_0x40596c(0xb24)];if(!_0x1e8bf5)return;BattleManager[_0x40596c(0x4c7)]++,BattleManager[_0x40596c(0xaf5)]=BattleManager[_0x40596c(0x4a1)][BattleManager[_0x40596c(0x4c7)]]||null;if(BattleManager['_target']&&_0x4d1abf[_0x40596c(0xa2e)]()['trim']()!==_0x40596c(0xa49)){if(_0x40596c(0x43d)!==_0x40596c(0x43d)){function _0x161356(){const _0x371a70=_0x40596c;return _0x39f228['BattleCore'][_0x371a70(0x358)][_0x371a70(0x86d)](this);}}else _0x1e8bf5[_0x40596c(0x593)]([_0x4d1abf]);}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],'ActSeq_Target_PrevTarget',_0x131f73=>{const _0x4e1d6e=_0xf2f935;if(!SceneManager[_0x4e1d6e(0x731)]())return;VisuMZ[_0x4e1d6e(0xbda)](_0x131f73,_0x131f73);const _0x5bf63a=$gameTemp[_0x4e1d6e(0x7da)](),_0x750fbd=_0x131f73['JumpToLabel'];if(!_0x5bf63a)return;BattleManager[_0x4e1d6e(0x4c7)]--,BattleManager['_target']=BattleManager[_0x4e1d6e(0x4a1)][BattleManager[_0x4e1d6e(0x4c7)]]||null,BattleManager['_target']&&_0x750fbd['toUpperCase']()[_0x4e1d6e(0x669)]()!=='UNTITLED'&&_0x5bf63a['command119']([_0x750fbd]);}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x6c5),_0x2868ea=>{const _0x50e9e1=_0xf2f935;if(!SceneManager[_0x50e9e1(0x731)]())return;VisuMZ[_0x50e9e1(0xbda)](_0x2868ea,_0x2868ea);const _0x163196=$gameTemp[_0x50e9e1(0x7da)](),_0x546f51=_0x2868ea['ForceRandom'],_0x5c4023=_0x2868ea[_0x50e9e1(0xb24)];if(!_0x163196)return;const _0x10de8d=BattleManager[_0x50e9e1(0x4c7)];for(;;){BattleManager[_0x50e9e1(0x4c7)]=Math['randomInt'](BattleManager[_0x50e9e1(0x4a1)][_0x50e9e1(0x342)]);if(!_0x546f51)break;if(BattleManager['_targetIndex']!==_0x10de8d)break;if(BattleManager[_0x50e9e1(0x4a1)][_0x50e9e1(0x342)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager['_target']=BattleManager[_0x50e9e1(0x4a1)][BattleManager[_0x50e9e1(0x4c7)]]||null;if(BattleManager[_0x50e9e1(0xaf5)]&&_0x5c4023[_0x50e9e1(0xa2e)]()[_0x50e9e1(0x669)]()!==_0x50e9e1(0xa49)){if(_0x50e9e1(0xbb7)==='zgZJB')_0x163196['command119']([_0x5c4023]);else{function _0x10c476(){const _0x3b3919=_0x50e9e1;_0x151bb2=[_0x3b3919(0x882),_0x3b3919(0x423),_0x3b3919(0x5d7)][_0x500ee0[_0x3b3919(0x74f)]]||_0x3b3919(0x423);}}}}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x693),_0x32fbdf=>{const _0x401b0e=_0xf2f935;if(!SceneManager[_0x401b0e(0x731)]())return;VisuMZ[_0x401b0e(0xbda)](_0x32fbdf,_0x32fbdf);const _0x3d519a=VisuMZ[_0x401b0e(0xa2c)](_0x32fbdf[_0x401b0e(0x750)]);for(const _0x2910c9 of _0x3d519a){if(!_0x2910c9)continue;if(!_0x2910c9[_0x401b0e(0x8bc)]())continue;_0x2910c9[_0x401b0e(0xac6)]();}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xb46),_0x26508c=>{const _0x4c5c24=_0xf2f935;if(!SceneManager[_0x4c5c24(0x731)]())return;VisuMZ['ConvertParams'](_0x26508c,_0x26508c);const _0x28c219=$gameTemp[_0x4c5c24(0x7da)]();let _0x302c30=![];const _0x161c5c=_0x26508c[_0x4c5c24(0xb24)],_0x5aa0a0=VisuMZ[_0x4c5c24(0xa2c)](_0x26508c[_0x4c5c24(0x750)]);for(const _0x8810f5 of _0x5aa0a0){if(!_0x8810f5)continue;if(!_0x8810f5[_0x4c5c24(0x8bc)]())continue;_0x8810f5[_0x4c5c24(0x51d)]();if(_0x8810f5['weapons']()[_0x4c5c24(0x342)]>0x0){if(_0x4c5c24(0xb65)!=='cTlTD'){function _0x5020db(){return![];}}else _0x302c30=!![];}else _0x8810f5[_0x4c5c24(0xac6)]();}_0x302c30&&_0x161c5c['toUpperCase']()['trim']()!=='UNTITLED'&&_0x28c219[_0x4c5c24(0x593)]([_0x161c5c]);}),PluginManager['registerCommand'](pluginData[_0xf2f935(0x222)],_0xf2f935(0x7c5),_0x5a22f3=>{const _0x4bc086=_0xf2f935;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5a22f3,_0x5a22f3);let _0x2243e4=_0x5a22f3[_0x4bc086(0xa67)];_0x2243e4--,_0x2243e4=Math[_0x4bc086(0x205)](_0x2243e4,0x0);const _0xf3b751=VisuMZ['CreateActionSequenceTargets'](_0x5a22f3[_0x4bc086(0x750)]);for(const _0xd9f26b of _0xf3b751){if(_0x4bc086(0x545)!=='FtzXg'){if(!_0xd9f26b)continue;if(!_0xd9f26b[_0x4bc086(0x8bc)]())continue;_0xd9f26b[_0x4bc086(0x57f)](_0x2243e4);}else{function _0x1c618a(){const _0x4b7662=_0x4bc086,_0x6620dc=new _0x5b355c(_0x5739e2);this['_enemyNameContainer'][_0x4b7662(0x8de)](_0x6620dc);}}}}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0xb2e),_0x58087b=>{const _0x1cfe26=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1cfe26(0x3de)])return;VisuMZ[_0x1cfe26(0xbda)](_0x58087b,_0x58087b);const _0xaa2d65=$gameTemp[_0x1cfe26(0x7da)](),_0x223d0b=_0x58087b[_0x1cfe26(0x7c7)];if(!_0xaa2d65)return;$gameScreen[_0x1cfe26(0x838)](_0x58087b[_0x1cfe26(0x6bb)],_0x58087b[_0x1cfe26(0x858)],_0x58087b['EasingType']);if(_0x223d0b)_0xaa2d65[_0x1cfe26(0x8a6)](_0x1cfe26(0x3e9));}),PluginManager[_0xf2f935(0x45f)](pluginData['name'],_0xf2f935(0x6c2),_0x22e143=>{const _0x29a4be=_0xf2f935;if(!SceneManager[_0x29a4be(0x731)]())return;if(!Imported[_0x29a4be(0x3de)])return;VisuMZ[_0x29a4be(0xbda)](_0x22e143,_0x22e143);const _0x2b98c9=$gameTemp[_0x29a4be(0x7da)](),_0x1a7bde=_0x22e143['WaitForZoom'];if(!_0x2b98c9)return;$gameScreen[_0x29a4be(0x838)](0x1,_0x22e143[_0x29a4be(0x858)],_0x22e143[_0x29a4be(0x20a)]);if(_0x1a7bde)_0x2b98c9[_0x29a4be(0x8a6)](_0x29a4be(0x3e9));}),PluginManager[_0xf2f935(0x45f)](pluginData[_0xf2f935(0x222)],_0xf2f935(0x326),_0xc87ea4=>{const _0x49a77b=_0xf2f935;if(!SceneManager[_0x49a77b(0x731)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x6e1434=$gameTemp[_0x49a77b(0x7da)]();if(!_0x6e1434)return;_0x6e1434['setWaitMode'](_0x49a77b(0x3e9));}),VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x434)]=Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x509)],Scene_Boot[_0xf2f935(0x2dc)]['onDatabaseLoaded']=function(){const _0x1913d4=_0xf2f935;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x1913d4(0x827)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x1913d4(0x50e)](),VisuMZ[_0x1913d4(0x886)][_0x1913d4(0x434)][_0x1913d4(0x86d)](this),this[_0x1913d4(0x97f)](),this[_0x1913d4(0xabc)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent']();},Scene_Boot[_0xf2f935(0x2dc)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x4a919b=_0xf2f935;if(VisuMZ[_0x4a919b(0xabe)])return;this[_0x4a919b(0xa30)](),this[_0x4a919b(0x4e2)](),this[_0x4a919b(0x457)]();},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x3ad)]=function(){const _0x5b6676=_0xf2f935,_0x5e7b60=$dataSystem['weaponTypes'][_0x5b6676(0x342)];for(let _0x184781=0x0;_0x184781<_0x5e7b60;_0x184781++){if(_0x5b6676(0x7a5)!=='fPCIM'){const _0x6dc126=$dataSystem['attackMotions'][_0x184781];if(_0x6dc126)continue;$dataSystem['attackMotions'][_0x184781]=JsonEx[_0x5b6676(0x4ad)]($dataSystem[_0x5b6676(0x9f6)][0x0]);}else{function _0xf7ed4d(){const _0x544b39=_0x5b6676,_0x32c29b=this[_0x544b39(0x5b0)]()[_0x544b39(0xa25)];return _0x32c29b['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);}}}},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x827)]=function(){const _0x1e38d2=_0xf2f935,_0x463746=VisuMZ[_0x1e38d2(0x886)][_0x1e38d2(0x650)];_0x463746[_0x1e38d2(0xb17)][_0x1e38d2(0x6eb)]===undefined&&(_0x463746[_0x1e38d2(0xb17)][_0x1e38d2(0x6eb)]=_0x1e38d2(0x39d));_0x463746[_0x1e38d2(0x5df)][_0x1e38d2(0xb67)]===undefined&&(_0x463746['Actor'][_0x1e38d2(0xb67)]=![]);_0x463746[_0x1e38d2(0x9e1)][_0x1e38d2(0xb67)]===undefined&&(_0x463746['Enemy'][_0x1e38d2(0xb67)]=!![]);if(_0x463746[_0x1e38d2(0x5df)][_0x1e38d2(0x8ac)]===undefined){if('taavC'===_0x1e38d2(0x77c))_0x463746[_0x1e38d2(0x5df)][_0x1e38d2(0x8ac)]=![];else{function _0x5197a3(){const _0x3d06c1=_0x1e38d2;this[_0x3d06c1(0x41b)]=_0x1038d1[_0x3d06c1(0x41b)],this[_0x3d06c1(0x902)]=_0xf72891[_0x3d06c1(0x902)];const _0x393d39=_0x393afd[_0x3d06c1(0x8ec)](0x1,this[_0x3d06c1(0x41b)]/this[_0x3d06c1(0x266)][_0x3d06c1(0x41b)]),_0x4e8ecf=_0x22e30d[_0x3d06c1(0x8ec)](0x1,this[_0x3d06c1(0x902)]/this[_0x3d06c1(0x266)][_0x3d06c1(0x902)]),_0x30ca66=_0x6d354[_0x3d06c1(0x205)](_0x393d39,_0x4e8ecf);this['scale']['x']=_0x30ca66,this[_0x3d06c1(0x3f0)]['y']=_0x30ca66,this['x']=(_0x492946[_0x3d06c1(0x41b)]-this[_0x3d06c1(0x41b)])/0x2,this['y']=_0x73b737[_0x3d06c1(0x902)]-this[_0x3d06c1(0x902)];}}}if(_0x463746['Actor'][_0x1e38d2(0x5d1)]===undefined){if(_0x1e38d2(0x8be)==='rCozz'){function _0x36b461(){const _0x33f68d=_0x1e38d2;_0x4903eb-=_0x511b99;const _0x28faf6=_0x122f82[_0x33f68d(0x886)][_0x33f68d(0x650)][_0x33f68d(0xb17)][_0x33f68d(0x519)],_0x15c592=_0x31138d[_0x33f68d(0x205)](0x1-_0x2d62fc/((_0x250838-_0x57d8b3)*_0x28faf6+_0x16be1b),0.01);_0x3b0551*=_0x15c592,_0xb59d9+=_0x1bede4;}}else _0x463746[_0x1e38d2(0x5df)][_0x1e38d2(0x5d1)]=!![];}},VisuMZ[_0xf2f935(0x56e)]={},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x9ba)]=function(){const _0x255dc7=_0xf2f935;for(const _0xc61555 of VisuMZ['BattleCore'][_0x255dc7(0x650)][_0x255dc7(0xb17)][_0x255dc7(0x26c)]){if(!_0xc61555)continue;const _0x40bd7c=_0xc61555[_0x255dc7(0x8d5)][_0x255dc7(0xa2e)]()['trim']();VisuMZ[_0x255dc7(0x56e)][_0x40bd7c]=_0xc61555;}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa36)]={},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x50e)]=function(){const _0x38d01c=_0xf2f935,_0x508326=VisuMZ[_0x38d01c(0x886)][_0x38d01c(0xa36)],_0x501ae8=_0x38d01c(0x964),_0x5307e5=[[_0x38d01c(0xb66),'PRE-'],[_0x38d01c(0xade),_0x38d01c(0x5bb)]],_0x1ae27a=[[_0x38d01c(0xb25),_0x38d01c(0x4c2)],[_0x38d01c(0x7e6),_0x38d01c(0x7f5)]],_0xd028ee=[['',''],[_0x38d01c(0x622),_0x38d01c(0x722)],[_0x38d01c(0x3a0),_0x38d01c(0x69d)]];for(const _0x480547 of _0x1ae27a){if(_0x38d01c(0x5eb)!==_0x38d01c(0x5eb)){function _0x27bdd0(){const _0x356aa6=_0x38d01c;this[_0x356aa6(0x700)](_0x356aa6(0x882));}}else for(const _0xc3def1 of _0xd028ee){for(const _0xed8180 of _0x5307e5){const _0x3464d4=_0x480547[0x0][_0x38d01c(0x460)](_0xed8180[0x0],_0xc3def1[0x0]),_0x389d61=_0x480547[0x1][_0x38d01c(0x460)](_0xed8180[0x1],_0xc3def1[0x1])[_0x38d01c(0x669)](),_0xca824d=new RegExp(_0x501ae8[_0x38d01c(0x460)](_0x389d61),'i');_0x508326[_0x3464d4]=_0xca824d;}}}const _0x5f2f25=[[_0x38d01c(0x789),_0x38d01c(0x834)],[_0x38d01c(0x725),_0x38d01c(0x488)]];for(const _0x18c80d of _0x5f2f25){for(const _0x3beb74 of _0x5307e5){const _0x5920c9=_0x18c80d[0x0][_0x38d01c(0x460)](_0x3beb74[0x0]),_0x2ebb87=_0x18c80d[0x1][_0x38d01c(0x460)](_0x3beb74[0x1]),_0x264778=new RegExp(_0x501ae8[_0x38d01c(0x460)](_0x2ebb87),'i');_0x508326[_0x5920c9]=_0x264778;}}const _0x3c931d=[[_0x38d01c(0x9a5),_0x38d01c(0x8e6)],[_0x38d01c(0x38a),_0x38d01c(0x4b1)],[_0x38d01c(0x98c),_0x38d01c(0x5db)],['BattleDefeatJS',_0x38d01c(0xb0c)],[_0x38d01c(0x62b),_0x38d01c(0x2f7)],[_0x38d01c(0x9de),_0x38d01c(0x91a)],[_0x38d01c(0x76f),_0x38d01c(0x44a)],[_0x38d01c(0x334),_0x38d01c(0x922)],[_0x38d01c(0x773),'JS\x20%1REGENERATE']];for(const _0x333bb3 of _0x3c931d){if(_0x38d01c(0x244)==='FVRpf'){function _0x51df87(){const _0x24d34e=_0x38d01c;if(this[_0x24d34e(0x36e)]===_0x5a0466)return;this[_0x24d34e(0x36e)]=_0x2d1037,this[_0x24d34e(0x6d3)]=_0x1574e5,this[_0x24d34e(0xae5)]=_0x1f18e9,this[_0x24d34e(0xb26)]=_0x272dd5||'Linear';if(_0x5f38c3<=0x0)this[_0x24d34e(0x9c2)]=_0x671336;}}else for(const _0x19ad11 of _0x5307e5){const _0x2609ce=_0x333bb3[0x0]['format'](_0x19ad11[0x0]),_0x3bb596=_0x333bb3[0x1][_0x38d01c(0x460)](_0x19ad11[0x1]),_0x2de11c=new RegExp(_0x501ae8[_0x38d01c(0x460)](_0x3bb596),'i');_0x508326[_0x2609ce]=_0x2de11c;}}},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0xa30)]=function(){const _0x4a833d=_0xf2f935,_0x744fac=$dataSkills[_0x4a833d(0x6d5)]($dataItems);for(const _0x3118db of _0x744fac){if(_0x4a833d(0x770)===_0x4a833d(0x587)){function _0x2aa2e2(){const _0x2ae2cf=_0x4a833d;_0x29d225[_0x2ae2cf(0xa53)]=_0x4ce39d[_0x2ae2cf(0x205)](0x1,_0x35327d(_0x23fe0d['$1']));}}else{if(!_0x3118db)continue;VisuMZ[_0x4a833d(0x886)][_0x4a833d(0x8b1)](_0x3118db);}}},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x4e2)]=function(){const _0x420082=_0xf2f935,_0x38b933=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x37d320 of _0x38b933){if(!_0x37d320)continue;VisuMZ[_0x420082(0x886)][_0x420082(0x9ea)](_0x37d320);}},Scene_Boot['prototype'][_0xf2f935(0xabc)]=function(){const _0x5b0be4=_0xf2f935,_0x361ec3=VisuMZ['BattleCore'][_0x5b0be4(0x650)]['Mechanics'][_0x5b0be4(0xb14)],_0x342beb=[];for(const _0x24f32a of _0x361ec3){const _0x2537de=$dataTroops[_0x24f32a];if(_0x2537de)_0x342beb['push'](JsonEx[_0x5b0be4(0x4ad)](_0x2537de));}for(const _0x436241 of $dataTroops){if(!_0x436241)continue;for(const _0x11dd6e of _0x342beb){if(_0x11dd6e['id']===_0x436241['id'])continue;_0x436241[_0x5b0be4(0x8ad)]=_0x436241['pages'][_0x5b0be4(0x6d5)](_0x11dd6e[_0x5b0be4(0x8ad)]);}}},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x90e)]=function(){const _0x2ae0f1=_0xf2f935,_0x27cab5=VisuMZ[_0x2ae0f1(0x886)]['Settings'][_0x2ae0f1(0x43b)];if(_0x27cab5[_0x2ae0f1(0xa18)]>0x0&&$dataCommonEvents[_0x27cab5[_0x2ae0f1(0xa18)]]){const _0x2ce783=$dataCommonEvents[_0x27cab5[_0x2ae0f1(0xa18)]],_0x380672=_0x2ce783['list']['length']-0x2,_0x2db547=_0x2ce783[_0x2ae0f1(0x29a)][_0x380672];if(_0x2db547[_0x2ae0f1(0x396)]!==0xe6){if(_0x2ae0f1(0x81b)===_0x2ae0f1(0x81b)){const _0x5ed6ee={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x38d784=_0x2ce783[_0x2ae0f1(0x29a)][_0x2ae0f1(0x909)]();_0x2ce783[_0x2ae0f1(0x29a)][_0x2ae0f1(0x65e)](_0x5ed6ee),_0x2ce783[_0x2ae0f1(0x29a)]['unshift'](_0x38d784);}else{function _0x492c71(){this['targetActionSet'](_0x13f13b,_0x574277,_0xd267b8);}}}}},Scene_Boot[_0xf2f935(0x2dc)][_0xf2f935(0x457)]=function(){const _0x5e3b1d=_0xf2f935,_0x412209=$dataSkills['concat']($dataItems);for(const _0x5119c2 of _0x412209){if(!_0x5119c2)continue;VisuMZ[_0x5e3b1d(0x886)][_0x5e3b1d(0x5a2)](_0x5119c2);}},VisuMZ[_0xf2f935(0x886)]['ParseActorNotetags']=VisuMZ[_0xf2f935(0x8e7)],VisuMZ[_0xf2f935(0x8e7)]=function(_0x2cd696){const _0x29e686=_0xf2f935;VisuMZ[_0x29e686(0x886)]['ParseActorNotetags']&&VisuMZ[_0x29e686(0x886)][_0x29e686(0x8e7)][_0x29e686(0x86d)](this,_0x2cd696),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x2cd696);},VisuMZ['BattleCore']['ParseClassNotetags']=VisuMZ[_0xf2f935(0x5b9)],VisuMZ['ParseClassNotetags']=function(_0x503cd6){const _0x3a3aa0=_0xf2f935;if(VisuMZ[_0x3a3aa0(0x886)]['ParseClassNotetags']){if('OlRIK'!==_0x3a3aa0(0x779)){function _0x24692a(){const _0x53ab1b=_0x3a3aa0;this['_endBattle']=!![],this[_0x53ab1b(0xac9)]=![],this[_0x53ab1b(0xb99)](_0x53ab1b(0xb08)),_0x2c8498[_0x53ab1b(0x886)]['BattleManager_endBattle'][_0x53ab1b(0x86d)](this,_0x5c20f2),this['processBattleCoreJS'](_0x53ab1b(0x9b9));}}else VisuMZ['BattleCore']['ParseClassNotetags'][_0x3a3aa0(0x86d)](this,_0x503cd6);}VisuMZ['BattleCore'][_0x3a3aa0(0x9ea)](_0x503cd6);},VisuMZ['BattleCore'][_0xf2f935(0x58b)]=VisuMZ['ParseSkillNotetags'],VisuMZ[_0xf2f935(0x58b)]=function(_0x1b09b5){const _0x4ed66f=_0xf2f935;VisuMZ[_0x4ed66f(0x886)][_0x4ed66f(0x58b)]&&VisuMZ[_0x4ed66f(0x886)][_0x4ed66f(0x58b)]['call'](this,_0x1b09b5),VisuMZ[_0x4ed66f(0x886)][_0x4ed66f(0x8b1)](_0x1b09b5),VisuMZ['BattleCore'][_0x4ed66f(0x5a2)](_0x1b09b5);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xacc)]=VisuMZ[_0xf2f935(0xacc)],VisuMZ[_0xf2f935(0xacc)]=function(_0x2ca8c5){const _0x33ca81=_0xf2f935;VisuMZ[_0x33ca81(0x886)][_0x33ca81(0xacc)]&&VisuMZ[_0x33ca81(0x886)][_0x33ca81(0xacc)]['call'](this,_0x2ca8c5),VisuMZ[_0x33ca81(0x886)][_0x33ca81(0x8b1)](_0x2ca8c5),VisuMZ[_0x33ca81(0x886)][_0x33ca81(0x5a2)](_0x2ca8c5);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x802)]=VisuMZ[_0xf2f935(0x802)],VisuMZ['ParseWeaponNotetags']=function(_0x2fd7ad){const _0x31389c=_0xf2f935;VisuMZ[_0x31389c(0x886)][_0x31389c(0x802)]&&VisuMZ['BattleCore'][_0x31389c(0x802)][_0x31389c(0x86d)](this,_0x2fd7ad),VisuMZ[_0x31389c(0x886)]['Parse_Notetags_TraitObjects'](_0x2fd7ad);},VisuMZ['BattleCore'][_0xf2f935(0xac0)]=VisuMZ[_0xf2f935(0xac0)],VisuMZ[_0xf2f935(0xac0)]=function(_0x2542c1){const _0x4089f5=_0xf2f935;if(VisuMZ[_0x4089f5(0x886)][_0x4089f5(0xac0)]){if(_0x4089f5(0x9c7)===_0x4089f5(0xa19)){function _0x4db0a5(){const _0x3661fb=_0x4089f5;if(!_0x137217['isSceneBattle']())return;_0x5566da[_0x3661fb(0xbda)](_0x55ca91,_0xc4bc4e);const _0x3ecfc7=_0x450f0d[_0x3661fb(0x7da)](),_0x30c2d5=_0x967741[_0x3661fb(0x371)],_0x3230e5=_0x12bef4['_subject'],_0x3a5bd2=_0x3161e2[_0x3661fb(0xa2c)](_0x2fe18c[_0x3661fb(0x750)]),_0xa99c37=_0x86a62e['Mirror'],_0x1cf5a2=_0x290b6e[_0x3661fb(0x3a3)];if(!_0x3ecfc7||!_0x30c2d5||!_0x3230e5)return;if(!_0x30c2d5[_0x3661fb(0x5b0)]())return;let _0x118ab5=_0x30c2d5['item']()[_0x3661fb(0x582)];if(_0x118ab5<0x0)_0x118ab5=_0x3230e5[_0x3661fb(0x83b)]();_0x4d8ca6[_0x3661fb(0xb12)](_0x3a5bd2,_0x118ab5,_0xa99c37),_0x2b6bbf[_0x3661fb(0x86f)]&&_0x3ecfc7[_0x3661fb(0x8a6)](_0x3661fb(0x510));}}else VisuMZ[_0x4089f5(0x886)][_0x4089f5(0xac0)][_0x4089f5(0x86d)](this,_0x2542c1);}VisuMZ[_0x4089f5(0x886)]['Parse_Notetags_TraitObjects'](_0x2542c1);},VisuMZ['BattleCore'][_0xf2f935(0x4b2)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0xf2f935(0x4b2)]=function(_0x335ba5){const _0x1220d8=_0xf2f935;if(VisuMZ[_0x1220d8(0x886)][_0x1220d8(0x4b2)]){if('KWACa'===_0x1220d8(0x663)){function _0xd02596(){const _0x24a128=_0x1220d8;if(!this[_0x24a128(0x7d9)]())return;if(!this[_0x24a128(0xb06)])this[_0x24a128(0x85a)]();this[_0x24a128(0x712)](),this[_0x24a128(0x942)]();}}else VisuMZ['BattleCore'][_0x1220d8(0x4b2)][_0x1220d8(0x86d)](this,_0x335ba5);}VisuMZ[_0x1220d8(0x886)]['Parse_Notetags_TraitObjects'](_0x335ba5);},VisuMZ['BattleCore'][_0xf2f935(0x5f5)]=VisuMZ['ParseStateNotetags'],VisuMZ['ParseStateNotetags']=function(_0x34f631){const _0x51dfbe=_0xf2f935;VisuMZ[_0x51dfbe(0x886)][_0x51dfbe(0x5f5)]&&VisuMZ['BattleCore'][_0x51dfbe(0x5f5)]['call'](this,_0x34f631),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x34f631);},VisuMZ[_0xf2f935(0x886)]['Parse_Notetags_Action']=function(_0x518b44){const _0x477ad4=_0xf2f935,_0x189b5b=['PreApplyJS',_0x477ad4(0x49d),_0x477ad4(0x3d8),_0x477ad4(0x5e5),'PreStartActionJS',_0x477ad4(0x23d),'PreEndActionJS',_0x477ad4(0x5b6)];for(const _0x36a8b0 of _0x189b5b){VisuMZ[_0x477ad4(0x886)][_0x477ad4(0xa75)](_0x518b44,_0x36a8b0);}const _0x1eff60=_0x518b44[_0x477ad4(0xbc2)];if(_0x1eff60[_0x477ad4(0x78e)](/<ALWAYS CRITICAL/i)){if(_0x477ad4(0x714)!==_0x477ad4(0x2da))_0x518b44[_0x477ad4(0xb5e)]['critical']=!![];else{function _0x59d0e9(){const _0x40c568=_0x477ad4;this[_0x40c568(0x470)]=0x0,this[_0x40c568(0x91b)]=0x0;}}}if(_0x1eff60[_0x477ad4(0x78e)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if(_0x477ad4(0x757)!==_0x477ad4(0x3c6))_0x518b44[_0x477ad4(0xa53)]=Math[_0x477ad4(0x205)](0x1,Number(RegExp['$1']));else{function _0x253ffc(){const _0x4a7d73=_0x477ad4,_0x31f220=_0x39396c[_0x4a7d73(0x886)][_0x4a7d73(0x650)][_0x4a7d73(0x43b)];if(_0x31f220[_0x4a7d73(0xa18)]>0x0&&_0x411a12[_0x31f220['BattleStartEvent']]){const _0x2a4322=_0x1781da[_0x31f220[_0x4a7d73(0xa18)]],_0x4d4a5d=_0x2a4322['list'][_0x4a7d73(0x342)]-0x2,_0x46c0ac=_0x2a4322['list'][_0x4d4a5d];if(_0x46c0ac[_0x4a7d73(0x396)]!==0xe6){const _0x2aaa9c={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0xe16783=_0x2a4322[_0x4a7d73(0x29a)][_0x4a7d73(0x909)]();_0x2a4322[_0x4a7d73(0x29a)][_0x4a7d73(0x65e)](_0x2aaa9c),_0x2a4322[_0x4a7d73(0x29a)][_0x4a7d73(0x65e)](_0xe16783);}}}}}_0x1eff60[_0x477ad4(0x78e)](/<TARGET:[ ](.*)>/i)&&(_0x518b44[_0x477ad4(0xa25)]=String(RegExp['$1'])['toUpperCase']()[_0x477ad4(0x669)]());},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x9ea)]=function(_0x5748fd){const _0x5ed86d=_0xf2f935,_0x5d18df=[_0x5ed86d(0x337),'PostApplyAsUserJS','PreDamageAsUserJS',_0x5ed86d(0x567),_0x5ed86d(0x528),'PostApplyAsTargetJS','PreDamageAsTargetJS',_0x5ed86d(0x39f),'PreStartActionJS','PostStartActionJS',_0x5ed86d(0x79c),_0x5ed86d(0x5b6),'PreStartBattleJS',_0x5ed86d(0x837),_0x5ed86d(0xb08),_0x5ed86d(0x9b9),_0x5ed86d(0x98c),_0x5ed86d(0x1fc),_0x5ed86d(0x62b),_0x5ed86d(0x9de),_0x5ed86d(0x908),_0x5ed86d(0x47a),_0x5ed86d(0x295),_0x5ed86d(0x9a9),_0x5ed86d(0x7b7),'PostRegenerateJS'];for(const _0x22dbe8 of _0x5d18df){VisuMZ[_0x5ed86d(0x886)][_0x5ed86d(0xa75)](_0x5748fd,_0x22dbe8);}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x5a2)]=function(_0x1a5ea4){const _0x4c1954=_0xf2f935,_0x44c4bc=_0x1a5ea4[_0x4c1954(0xbc2)];if(_0x44c4bc[_0x4c1954(0x78e)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x119f31=String(RegExp['$1']),_0x26688d=VisuMZ[_0x4c1954(0x886)][_0x4c1954(0x3c0)](_0x1a5ea4,'Targets');VisuMZ[_0x4c1954(0x886)][_0x4c1954(0x9d8)](_0x119f31,_0x26688d);}if(_0x44c4bc[_0x4c1954(0x78e)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x37828f=String(RegExp['$1']),_0x179901=VisuMZ[_0x4c1954(0x886)][_0x4c1954(0x3c0)](_0x1a5ea4,_0x4c1954(0x4ba));VisuMZ['BattleCore'][_0x4c1954(0x2fb)](_0x37828f,_0x179901);}},VisuMZ[_0xf2f935(0x886)]['JS']={},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa75)]=function(_0x335191,_0x12ab6a){const _0x19f918=_0xf2f935,_0x4a0688=_0x335191[_0x19f918(0xbc2)];if(_0x4a0688['match'](VisuMZ[_0x19f918(0x886)][_0x19f918(0xa36)][_0x12ab6a])){const _0x5a48f5=RegExp['$1'],_0x4d0710='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x19f918(0x460)](_0x5a48f5),_0x4f0efd=VisuMZ['BattleCore'][_0x19f918(0x3c0)](_0x335191,_0x12ab6a);VisuMZ[_0x19f918(0x886)]['JS'][_0x4f0efd]=new Function(_0x4d0710);}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x3c0)]=function(_0x48761d,_0x556ec1){const _0x11d2d9=_0xf2f935;let _0x4fb80f='';if($dataActors['includes'](_0x48761d))_0x4fb80f=_0x11d2d9(0x366)[_0x11d2d9(0x460)](_0x48761d['id'],_0x556ec1);if($dataClasses[_0x11d2d9(0x7fe)](_0x48761d))_0x4fb80f=_0x11d2d9(0x268)[_0x11d2d9(0x460)](_0x48761d['id'],_0x556ec1);if($dataSkills[_0x11d2d9(0x7fe)](_0x48761d))_0x4fb80f='Skill-%1-%2'[_0x11d2d9(0x460)](_0x48761d['id'],_0x556ec1);if($dataItems[_0x11d2d9(0x7fe)](_0x48761d))_0x4fb80f='Item-%1-%2'[_0x11d2d9(0x460)](_0x48761d['id'],_0x556ec1);if($dataWeapons[_0x11d2d9(0x7fe)](_0x48761d))_0x4fb80f='Weapon-%1-%2'['format'](_0x48761d['id'],_0x556ec1);if($dataArmors[_0x11d2d9(0x7fe)](_0x48761d))_0x4fb80f=_0x11d2d9(0x792)[_0x11d2d9(0x460)](_0x48761d['id'],_0x556ec1);if($dataEnemies['includes'](_0x48761d))_0x4fb80f=_0x11d2d9(0x92b)['format'](_0x48761d['id'],_0x556ec1);if($dataStates['includes'](_0x48761d))_0x4fb80f=_0x11d2d9(0x41d)['format'](_0x48761d['id'],_0x556ec1);return _0x4fb80f;},VisuMZ[_0xf2f935(0x886)]['createTargetsJS']=function(_0xb2c179,_0x736dff){const _0x3da820=_0xf2f935,_0x113e6d=_0x3da820(0x690)[_0x3da820(0x460)](_0xb2c179);VisuMZ[_0x3da820(0x886)]['JS'][_0x736dff]=new Function(_0x113e6d);},VisuMZ['BattleCore'][_0xf2f935(0x2fb)]=function(_0x1c8fed,_0x3373aa){const _0x538e41=_0xf2f935,_0x54bf64=_0x538e41(0xb83)[_0x538e41(0x460)](_0x1c8fed);VisuMZ[_0x538e41(0x886)]['JS'][_0x3373aa]=new Function(_0x54bf64);},TextManager[_0xf2f935(0xb1c)]=VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x650)][_0xf2f935(0x2af)]['CmdTextAutoBattle'],TextManager[_0xf2f935(0x29c)]=VisuMZ[_0xf2f935(0x886)]['Settings']['AutoBattle'][_0xf2f935(0xb1a)],TextManager[_0xf2f935(0x5b5)]=VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x650)][_0xf2f935(0x814)]['StyleName'],TextManager['visualHpGauge']=VisuMZ['BattleCore'][_0xf2f935(0x650)][_0xf2f935(0x6b5)][_0xf2f935(0x8d5)],ColorManager['getColor']=function(_0x230aea){const _0x34e629=_0xf2f935;_0x230aea=String(_0x230aea);if(_0x230aea[_0x34e629(0x78e)](/#(.*)/i))return'#%1'[_0x34e629(0x460)](String(RegExp['$1']));else{if(_0x34e629(0x530)===_0x34e629(0xb79)){function _0x93a935(){const _0x45ab03=_0x34e629;if(!_0x32a27b[_0x45ab03(0x886)][_0x45ab03(0x650)][_0x45ab03(0x9e1)]['NameLegacy'])return;this[_0x45ab03(0x2d3)]=new _0x2bb642(),this[_0x45ab03(0x2d3)]['x']=this[_0x45ab03(0x451)]['x'],this['_enemyNameContainer']['y']=this[_0x45ab03(0x451)]['y'];const _0x339fe1=this[_0x45ab03(0x3d3)]['indexOf'](this['_windowLayer']);this['addChildAt'](this['_enemyNameContainer'],_0x339fe1);for(let _0x1a087c=0x0;_0x1a087c<0x8;_0x1a087c++){const _0xe3a089=new _0xb68a48(_0x1a087c);this[_0x45ab03(0x2d3)]['addChild'](_0xe3a089);}}}else return this['textColor'](Number(_0x230aea));}},DataManager[_0xf2f935(0x9bb)]=function(_0x533057){const _0x436e21=_0xf2f935;if(_0x533057['note'][_0x436e21(0x78e)](/<DAMAGE STYLE:[ ](.*)>/i)){if('NCsjC'===_0x436e21(0x453)){const _0x1e6e5c=String(RegExp['$1'])['toUpperCase']()[_0x436e21(0x669)]();if(_0x1e6e5c===_0x436e21(0x6ee))return _0x436e21(0x6ee);if(VisuMZ[_0x436e21(0x56e)][_0x1e6e5c])return _0x1e6e5c;}else{function _0x15d6ce(){const _0x4ca328=_0x436e21;if(!this[_0x4ca328(0x7e5)][_0x4ca328(0x463)](_0x1eac4a['id']))return![];}}}const _0x577c22=VisuMZ['BattleCore'][_0x436e21(0x650)][_0x436e21(0xb17)][_0x436e21(0x9f2)][_0x436e21(0xa2e)]()[_0x436e21(0x669)]();if(VisuMZ[_0x436e21(0x56e)][_0x577c22])return _0x577c22;return _0x436e21(0x6ee);},DataManager['getStypeIdWithName']=function(_0x2a35e8){const _0x137e88=_0xf2f935;_0x2a35e8=_0x2a35e8[_0x137e88(0xa2e)]()[_0x137e88(0x669)](),this[_0x137e88(0xb44)]=this[_0x137e88(0xb44)]||{};if(this['_stypeIDs'][_0x2a35e8])return this[_0x137e88(0xb44)][_0x2a35e8];for(let _0x487d63=0x1;_0x487d63<0x64;_0x487d63++){if(!$dataSystem['skillTypes'][_0x487d63])continue;let _0x25c37b=$dataSystem[_0x137e88(0x30f)][_0x487d63][_0x137e88(0xa2e)]()['trim']();_0x25c37b=_0x25c37b[_0x137e88(0x87e)](/\x1I\[(\d+)\]/gi,''),_0x25c37b=_0x25c37b[_0x137e88(0x87e)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x25c37b]=_0x487d63;}return this[_0x137e88(0xb44)][_0x2a35e8]||0x0;},DataManager['getSkillIdWithName']=function(_0xe8aea){const _0x125ada=_0xf2f935;_0xe8aea=_0xe8aea['toUpperCase']()['trim'](),this['_skillIDs']=this[_0x125ada(0x3f2)]||{};if(this[_0x125ada(0x3f2)][_0xe8aea])return this[_0x125ada(0x3f2)][_0xe8aea];for(const _0x4aacf8 of $dataSkills){if(!_0x4aacf8)continue;this[_0x125ada(0x3f2)][_0x4aacf8[_0x125ada(0x222)]['toUpperCase']()[_0x125ada(0x669)]()]=_0x4aacf8['id'];}return this[_0x125ada(0x3f2)][_0xe8aea]||0x0;},DataManager[_0xf2f935(0x80a)]=function(_0xc3a713){const _0x2f7235=_0xf2f935;_0xc3a713=_0xc3a713[_0x2f7235(0xa2e)]()[_0x2f7235(0x669)](),this[_0x2f7235(0x4e5)]=this[_0x2f7235(0x4e5)]||{};if(this[_0x2f7235(0x4e5)][_0xc3a713])return this['_enemyIDs'][_0xc3a713];for(const _0xd58a00 of $dataEnemies){if('BKyEd'==='BKyEd'){if(!_0xd58a00)continue;this[_0x2f7235(0x4e5)][_0xd58a00[_0x2f7235(0x222)][_0x2f7235(0xa2e)]()[_0x2f7235(0x669)]()]=_0xd58a00['id'];}else{function _0x3de0a7(){const _0x3cdf64=_0x2f7235;this[_0x3cdf64(0xa62)]['clear']();const _0x55325c=_0x4d8753[_0x3cdf64(0x886)]['Settings'][_0x3cdf64(0x814)][_0x3cdf64(0xb41)],_0x355604=_0x55325c[_0x3cdf64(0x460)](this[_0x3cdf64(0x7d0)](),this[_0x3cdf64(0x5ba)]()),_0x3557e4=this[_0x3cdf64(0xa0b)](_0x355604)[_0x3cdf64(0x41b)],_0x296d77=_0x1463c7[_0x3cdf64(0x7e8)]((this[_0x3cdf64(0x9d0)]-_0x3557e4)/0x2);this[_0x3cdf64(0xb7c)](_0x355604,_0x296d77,0x0,_0x3557e4);}}}return this[_0x2f7235(0x4e5)][_0xc3a713]||0x0;},DataManager['getWtypeIdWithName']=function(_0x137240){const _0x951eb=_0xf2f935;_0x137240=_0x137240['toUpperCase']()[_0x951eb(0x669)](),this[_0x951eb(0x3a4)]=this[_0x951eb(0x3a4)]||{};if(this[_0x951eb(0x3a4)][_0x137240])return this['_wtypeIDs'][_0x137240];for(let _0xd0c036=0x1;_0xd0c036<0x64;_0xd0c036++){if(!$dataSystem['weaponTypes'][_0xd0c036])continue;let _0x2d3e65=$dataSystem[_0x951eb(0x67b)][_0xd0c036][_0x951eb(0xa2e)]()[_0x951eb(0x669)]();_0x2d3e65=_0x2d3e65['replace'](/\x1I\[(\d+)\]/gi,''),_0x2d3e65=_0x2d3e65[_0x951eb(0x87e)](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x2d3e65]=_0xd0c036;}return this[_0x951eb(0x3a4)]['BARE\x20HANDS']=0x0,this[_0x951eb(0x3a4)][_0x137240]||0x0;},DataManager[_0xf2f935(0x71e)]=function(_0x49c48b){const _0x2132a1=_0xf2f935,_0x6ee214='\x5cI[%1]%2';let _0x2e5476=_0x49c48b[_0x2132a1(0x741)],_0x28ce8a=_0x49c48b[_0x2132a1(0x222)];const _0x285635=_0x49c48b[_0x2132a1(0xbc2)];if(_0x285635[_0x2132a1(0x78e)](/<DISPLAY ICON: (\d+)>/i)){if(_0x2132a1(0x6ed)!==_0x2132a1(0x6ed)){function _0x493257(){const _0x4a523c=_0x2132a1,_0x4d7581=_0x25f6ca['item']();this[_0x4a523c(0x1e9)](_0x352b94,_0x4d7581),this['push'](_0x4a523c(0x1df),_0x512020,_0x4b0bd5,!![]),this[_0x4a523c(0x580)](_0x4a523c(0xa8c),_0x430009,_0x2b9eee),this[_0x4a523c(0x580)](_0x4a523c(0x60c)),this['push'](_0x4a523c(0x6e0),_0xc42c2f,_0x307c92),this[_0x4a523c(0x580)](_0x4a523c(0xb0d));}}else _0x2e5476=Number(RegExp['$1']);}if(_0x285635[_0x2132a1(0x78e)](/<DISPLAY TEXT: (.*)>/i)){if(_0x2132a1(0x9be)!==_0x2132a1(0x9be)){function _0x457194(){const _0x54b76b=_0x2132a1,_0x193eed=this['_commandNameWindow'];_0x193eed['contents'][_0x54b76b(0xb40)]();const _0x3a6805=this[_0x54b76b(0x61e)](this['index']());if(_0x3a6805==='icon'&&this[_0x54b76b(0x20f)]()>0x0){const _0x5b6945=this[_0x54b76b(0x688)](this['index']());let _0x153432=this[_0x54b76b(0xbb6)](this[_0x54b76b(0x900)]());_0x153432=_0x153432[_0x54b76b(0x87e)](/\\I\[(\d+)\]/gi,''),_0x193eed[_0x54b76b(0x2f2)](),this[_0x54b76b(0x3d9)](_0x153432,_0x5b6945),this['commandNameWindowDrawText'](_0x153432,_0x5b6945),this['commandNameWindowCenter'](_0x153432,_0x5b6945);}}}else _0x28ce8a=String(RegExp['$1']);}return _0x6ee214[_0x2132a1(0x460)](_0x2e5476,_0x28ce8a);},DataManager[_0xf2f935(0x9ac)]=function(_0xe03c8b){const _0x450e60=_0xf2f935;return _0xe03c8b[_0x450e60(0xbc2)][_0x450e60(0x78e)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0xe03c8b[_0x450e60(0x222)];},DataManager[_0xf2f935(0xb13)]=function(_0x33f5f9){const _0x11b0f0=_0xf2f935;if(_0x33f5f9['note'][_0x11b0f0(0x78e)](/<COMMAND ICON: (\d+)>/i)){if(_0x11b0f0(0x4b4)!==_0x11b0f0(0x9cc))return Number(RegExp['$1']);else{function _0x284b6b(){const _0x4523ba=_0x11b0f0;return _0x11d27b[_0x4523ba(0x4de)]-_0x3650c8[_0x4523ba(0x4de)];}}}else return _0x33f5f9['iconIndex'];},DataManager[_0xf2f935(0x254)]=function(_0x1434c8){const _0x25fd08=_0xf2f935,_0x7bb612=$dataEnemies[_0x1434c8];if(_0x7bb612){if(_0x7bb612['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x34c793=String(RegExp['$1'])[_0x25fd08(0x774)](/[\r\n]+/)[_0x25fd08(0xbb8)](''),_0x2b48fa=this[_0x25fd08(0x648)](_0x34c793);_0x1434c8=this[_0x25fd08(0x80a)](_0x2b48fa)||_0x1434c8,_0x1434c8=DataManager[_0x25fd08(0x254)](_0x1434c8);}}return _0x1434c8;},DataManager['processRandomizedData']=function(_0x40c721){const _0x11cfd5=_0xf2f935;let _0x303f41=0x0;const _0x3f2038={};for(const _0x243d9b of _0x40c721){if('dDpJK'!==_0x11cfd5(0x956)){if(_0x243d9b['match'](/(.*):[ ](\d+)/i)){if(_0x11cfd5(0x53f)!=='sOfeV'){const _0x2f5aa6=String(RegExp['$1'])['trim'](),_0x41dfec=Number(RegExp['$2']);_0x3f2038[_0x2f5aa6]=_0x41dfec,_0x303f41+=_0x41dfec;}else{function _0x607cb0(){const _0x57e3ef=_0x11cfd5;if(!_0x13f33e[_0x57e3ef(0xac9)])return;(_0x1233a6[_0x57e3ef(0xb7d)]('ok')||_0x5e403b[_0x57e3ef(0xb7d)](_0x57e3ef(0x338))||_0x1f8416[_0x57e3ef(0x625)]()||_0x4aea1a['isCancelled']())&&(_0x41aca0[_0x57e3ef(0x4d8)](),_0x317cb4[_0x57e3ef(0xac9)]=![],_0x3c102e[_0x57e3ef(0xb40)](),_0x8ffc69[_0x57e3ef(0xb40)]());}}}else{if(_0x243d9b[_0x11cfd5(0x78e)](/(.*):[ ](\d+\.?\d+)/i)){const _0x172369=String(RegExp['$1'])[_0x11cfd5(0x669)](),_0x1d7548=Number(RegExp['$2']);_0x3f2038[_0x172369]=_0x1d7548,_0x303f41+=_0x1d7548;}else _0x243d9b!==''&&(_0x3f2038[_0x243d9b]=0x1,_0x303f41++);}}else{function _0x1ad5ba(){const _0x991408=_0x11cfd5;if(!_0x4112b3['isSceneBattle']())return;const _0x9a3c04=_0xab7ee6[_0x991408(0x7da)]();if(!_0x9a3c04)return;_0x9a3c04[_0x991408(0x8a6)](_0x991408(0x2d8));}}}if(_0x303f41<=0x0)return'';let _0x2d6f03=Math[_0x11cfd5(0x4e1)]()*_0x303f41;for(const _0x3d81ec in _0x3f2038){_0x2d6f03-=_0x3f2038[_0x3d81ec];if(_0x2d6f03<=0x0)return _0x3d81ec;}return'';},DataManager[_0xf2f935(0xbd0)]=function(_0x36725c){const _0x91116b=_0xf2f935;if(!_0x36725c)return![];if(!VisuMZ[_0x91116b(0x886)]['Settings']['ActionSequence'][_0x91116b(0x87c)])return![];if(_0x36725c['note']['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x36725c[_0x91116b(0xbc2)][_0x91116b(0x78e)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x54447f of _0x36725c[_0x91116b(0x8fd)]){if(!_0x54447f)continue;if(_0x54447f['code']===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},ConfigManager[_0xf2f935(0xadb)]=ConfigManager[_0xf2f935(0xadb)]??![],ConfigManager[_0xf2f935(0x491)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0xf2f935(0x8d2)]=ConfigManager['visualHpGauge']??!![],VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x5ef)]=ConfigManager[_0xf2f935(0x6b6)],ConfigManager[_0xf2f935(0x6b6)]=function(){const _0x49602e=_0xf2f935,_0x5625a6=VisuMZ[_0x49602e(0x886)]['ConfigManager_makeData'][_0x49602e(0x86d)](this);return _0x5625a6['autoBattleAtStart']=this[_0x49602e(0xadb)],_0x5625a6[_0x49602e(0x491)]=this[_0x49602e(0x491)],_0x5625a6['visualHpGauge']=this[_0x49602e(0x8d2)],_0x5625a6;},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x2b8)]=ConfigManager[_0xf2f935(0x9d5)],ConfigManager[_0xf2f935(0x9d5)]=function(_0x5d91d9){const _0x70760a=_0xf2f935;VisuMZ[_0x70760a(0x886)][_0x70760a(0x2b8)][_0x70760a(0x86d)](this,_0x5d91d9);if(_0x70760a(0xadb)in _0x5d91d9){if('qwXSV'!==_0x70760a(0x480)){function _0x2d0d3f(){const _0x423552=_0x70760a;_0x13dbe7-=_0x18a347[_0x423552(0xa0f)]()/0x2;}}else this['autoBattleAtStart']=_0x5d91d9['autoBattleAtStart'];}else{if('IYSXa'!==_0x70760a(0xa69)){function _0x5d25ed(){const _0x5df23f=_0x70760a;this['_stateIconSprite'][_0x5df23f(0x696)](this['_battler']);}}else this[_0x70760a(0xadb)]=![];}if(_0x70760a(0x491)in _0x5d91d9){if(_0x70760a(0x7ca)==='WrShg')this[_0x70760a(0x491)]=_0x5d91d9[_0x70760a(0x491)];else{function _0x43fc96(){const _0xc5aa6f=_0x70760a;_0x264bab[_0xc5aa6f(0x8a6)](_0xc5aa6f(0x510));}}}else{if(_0x70760a(0xa70)!==_0x70760a(0xa70)){function _0x4eadcb(){return!![];}}else this[_0x70760a(0x491)]=![];}'visualHpGauge'in _0x5d91d9?this[_0x70760a(0x8d2)]=_0x5d91d9[_0x70760a(0x8d2)]:this[_0x70760a(0x8d2)]=!![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xb0e)]=BattleManager[_0xf2f935(0x2a3)],BattleManager[_0xf2f935(0x2a3)]=function(){const _0x5554b8=_0xf2f935;VisuMZ[_0x5554b8(0x886)][_0x5554b8(0xb0e)][_0x5554b8(0x86d)](this),this[_0x5554b8(0x861)]=[];},BattleManager[_0xf2f935(0x983)]=function(){const _0x2a4d5c=_0xf2f935;if(!SceneManager[_0x2a4d5c(0x731)]())return;const _0x55f9e3=SceneManager[_0x2a4d5c(0xb95)][_0x2a4d5c(0xa6e)];if(_0x55f9e3)_0x55f9e3[_0x2a4d5c(0x4b7)]();},BattleManager[_0xf2f935(0xa74)]=function(){const _0x32204f=_0xf2f935;if(BattleManager['isTpb']())return _0x32204f(0x405);return _0x32204f(0x718);},BattleManager[_0xf2f935(0xad8)]=function(_0x58932f){const _0x4e9f0f=_0xf2f935;return _0x58932f=_0x58932f['toUpperCase']()['trim'](),this[_0x4e9f0f(0xa74)]()===_0x58932f;},BattleManager[_0xf2f935(0x217)]=function(){const _0x2c16e1=_0xf2f935;return this['isBattleSys'](_0x2c16e1(0x718));},BattleManager['isTurnBased']=function(){const _0x3d3676=_0xf2f935;return this[_0x3d3676(0x217)]();},BattleManager[_0xf2f935(0xbad)]=function(){const _0x2390c3=_0xf2f935;return!this[_0x2390c3(0x1e0)]();},BattleManager[_0xf2f935(0x738)]=function(){const _0x64ab20=_0xf2f935;return!this[_0x64ab20(0x1e0)]()&&!this[_0x64ab20(0xbad)]();},BattleManager[_0xf2f935(0xb99)]=function(_0xe21312){const _0x2ad1d4=_0xf2f935;$gameParty[_0x2ad1d4(0xb99)](_0xe21312),$gameTroop[_0x2ad1d4(0xb99)](_0xe21312);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa38)]=BattleManager['startBattle'],BattleManager[_0xf2f935(0x9a0)]=function(){const _0x1f0309=_0xf2f935;this[_0x1f0309(0x37e)]=![],this[_0x1f0309(0xac9)]=ConfigManager[_0x1f0309(0xadb)],this[_0x1f0309(0xb99)](_0x1f0309(0x5c0)),VisuMZ['BattleCore'][_0x1f0309(0xa38)]['call'](this),this[_0x1f0309(0xb99)]('PostStartBattleJS');},BattleManager[_0xf2f935(0xb9b)]=function(_0xe27099){const _0xabe79c=_0xf2f935,_0x33058c=VisuMZ[_0xabe79c(0x886)]['Settings'][_0xabe79c(0x43b)];_0x33058c[_0xabe79c(0x311)]&&VisuMZ[_0xabe79c(0x886)]['CheckMapBattleEventValid'](_0x33058c[_0xabe79c(0x311)])&&$gameTemp[_0xabe79c(0x815)](_0x33058c['BattleEndEvent']);const _0xb5728c=_0xabe79c(0x9ae)[_0xabe79c(0x460)](_0xe27099);if(_0x33058c[_0xb5728c]&&VisuMZ[_0xabe79c(0x886)][_0xabe79c(0x9a4)](_0x33058c[_0xb5728c])){if(_0xabe79c(0x8fb)==='wfStg')$gameTemp[_0xabe79c(0x815)](_0x33058c[_0xb5728c]);else{function _0x112ea8(){const _0x1f3c68=_0xabe79c,_0x40ee63=this[_0x1f3c68(0x471)]['bitmap'];this[_0x1f3c68(0x471)][_0x1f3c68(0x4b6)](0x0,0x0,_0x40ee63[_0x1f3c68(0x41b)],_0x40ee63[_0x1f3c68(0x902)]);}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x74d)]=BattleManager[_0xf2f935(0x904)],BattleManager[_0xf2f935(0x904)]=function(){const _0x1320e4=_0xf2f935;this['processBattleCoreJS'](_0x1320e4(0x98c)),VisuMZ[_0x1320e4(0x886)]['BattleManager_processVictory'][_0x1320e4(0x86d)](this),this[_0x1320e4(0xb9b)](_0x1320e4(0x9d9));},VisuMZ[_0xf2f935(0x886)]['BattleManager_processDefeat']=BattleManager[_0xf2f935(0x58f)],BattleManager[_0xf2f935(0x58f)]=function(){const _0x41f863=_0xf2f935;this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ['BattleCore'][_0x41f863(0x40b)][_0x41f863(0x86d)](this),this[_0x41f863(0xb9b)](_0x41f863(0x382));},VisuMZ['BattleCore'][_0xf2f935(0x2b7)]=BattleManager[_0xf2f935(0x71d)],BattleManager[_0xf2f935(0x71d)]=function(_0xa84c68){const _0x52099a=_0xf2f935;this['_endBattle']=!![],this['_autoBattle']=![],this['processBattleCoreJS'](_0x52099a(0xb08)),VisuMZ[_0x52099a(0x886)][_0x52099a(0x2b7)][_0x52099a(0x86d)](this,_0xa84c68),this['processBattleCoreJS'](_0x52099a(0x9b9));},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x542)]=BattleManager[_0xf2f935(0x8aa)],BattleManager[_0xf2f935(0x8aa)]=function(){const _0x5ae9cd=_0xf2f935;if(this[_0x5ae9cd(0x1e0)]())this[_0x5ae9cd(0xb99)]('PreStartTurnJS');VisuMZ[_0x5ae9cd(0x886)]['BattleManager_startTurn']['call'](this);if(this[_0x5ae9cd(0x1e0)]())this['processBattleCoreJS'](_0x5ae9cd(0x47a));},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa0e)]=BattleManager[_0xf2f935(0x3f4)],BattleManager[_0xf2f935(0x3f4)]=function(){const _0x3162db=_0xf2f935,_0x5b47c9=this[_0x3162db(0x370)]['currentAction']();if(_0x5b47c9)_0x5b47c9[_0x3162db(0x614)](_0x3162db(0x96b));VisuMZ[_0x3162db(0x886)][_0x3162db(0xa0e)][_0x3162db(0x86d)](this);if(_0x5b47c9)_0x5b47c9['actionBattleCoreJS'](_0x3162db(0x23d));},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa16)]=BattleManager['endAction'],BattleManager[_0xf2f935(0x735)]=function(){const _0x32c6f5=_0xf2f935,_0x47a4f0=this['_action'];_0x47a4f0&&_0x47a4f0[_0x32c6f5(0x614)](_0x32c6f5(0x79c));VisuMZ[_0x32c6f5(0x886)]['BattleManager_endAction'][_0x32c6f5(0x86d)](this);if(_0x47a4f0){if(_0x32c6f5(0x2ad)===_0x32c6f5(0x2ad))_0x47a4f0[_0x32c6f5(0x614)](_0x32c6f5(0x5b6));else{function _0x1fad96(){const _0x3ccb84=_0x32c6f5;_0x1a0d5c[_0x3ccb84(0x886)]['ParseWeaponNotetags'][_0x3ccb84(0x86d)](this,_0x1b3c52);}}}this[_0x32c6f5(0x6f9)](this['allBattleMembers']());},BattleManager[_0xf2f935(0x6f9)]=function(_0x47bab1){const _0x276417=_0xf2f935;for(const _0x430e90 of _0x47bab1){if(_0x276417(0x763)===_0x276417(0x763)){if(!_0x430e90)continue;if(!_0x430e90['battler']())continue;_0x430e90[_0x276417(0x310)]()[_0x276417(0x9f7)]();}else{function _0x534798(){return 0x0;}}}},BattleManager[_0xf2f935(0x90d)]=function(){const _0x2abc54=_0xf2f935;!this[_0x2abc54(0x3a3)][_0x2abc54(0xab9)]()&&this[_0x2abc54(0x735)]();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xae1)]=function(){const _0x1e1564=_0xf2f935;this[_0x1e1564(0xb92)]();if(Imported['VisuMZ_1_SkillsStatesCore']){if('XCqVo'!==_0x1e1564(0x61a)){const _0x165a42=VisuMZ['SkillsStatesCore'][_0x1e1564(0x650)][_0x1e1564(0x6d9)];if(_0x165a42&&_0x165a42['ActionEndUpdate']===![]){if(_0x1e1564(0x540)==='iSzqU'){function _0x20b0c0(){const _0x2e3c8e=_0x1e1564;this[_0x2e3c8e(0x41c)](![]);}}else this['removeStatesAuto'](0x1);}}else{function _0x4106f2(){const _0x1ed8fb=_0x1e1564;_0x411ca8[_0x1ed8fb(0x66f)]=![],this[_0x1ed8fb(0xb2c)]();}}}else{if(_0x1e1564(0xa66)!==_0x1e1564(0xa66)){function _0x8d8650(){const _0x56afcf=_0x1e1564,_0x5f1a36=_0x19b65e[_0x56afcf(0xbc2)];if(_0x5f1a36[_0x56afcf(0x78e)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0xe368e1=_0x142fcc(_0x2ebe7e['$1']),_0x3d8557=_0x410389[_0x56afcf(0x886)][_0x56afcf(0x3c0)](_0x22c37c,_0x56afcf(0x750));_0x39d96c[_0x56afcf(0x886)][_0x56afcf(0x9d8)](_0xe368e1,_0x3d8557);}if(_0x5f1a36[_0x56afcf(0x78e)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x536d94=_0x32b9a0(_0x575951['$1']),_0x132f04=_0x2626b4[_0x56afcf(0x886)]['createKeyJS'](_0x27ad08,_0x56afcf(0x4ba));_0x238060[_0x56afcf(0x886)][_0x56afcf(0x2fb)](_0x536d94,_0x132f04);}}}else this[_0x1e1564(0x1fd)](0x1);}this[_0x1e1564(0x596)]();},BattleManager[_0xf2f935(0xb56)]=function(){const _0x3e227b=_0xf2f935;this['_escapeRatio']=VisuMZ[_0x3e227b(0x886)][_0x3e227b(0x650)][_0x3e227b(0x43b)][_0x3e227b(0x84e)][_0x3e227b(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x3d5)]=BattleManager[_0xf2f935(0x390)],BattleManager[_0xf2f935(0x390)]=function(){const _0x5a4aa9=_0xf2f935;this['processBattleCoreJS'](_0x5a4aa9(0x62b)),BattleManager[_0x5a4aa9(0x2c7)][_0x5a4aa9(0x23f)](),VisuMZ[_0x5a4aa9(0x886)][_0x5a4aa9(0x3d5)][_0x5a4aa9(0x86d)](this),this[_0x5a4aa9(0xb9b)](_0x5a4aa9(0x294));},VisuMZ['BattleCore'][_0xf2f935(0x9eb)]=BattleManager[_0xf2f935(0x866)],BattleManager[_0xf2f935(0x866)]=function(){const _0x37ba94=_0xf2f935;this[_0x37ba94(0xb99)](_0x37ba94(0x9de));const _0x6d9caf=this[_0x37ba94(0x273)];VisuMZ[_0x37ba94(0x886)]['BattleManager_onEscapeFailure'][_0x37ba94(0x86d)](this),this[_0x37ba94(0x273)]=_0x6d9caf+VisuMZ[_0x37ba94(0x886)][_0x37ba94(0x650)][_0x37ba94(0x43b)][_0x37ba94(0x497)]['call'](this),this[_0x37ba94(0xb9b)](_0x37ba94(0xa78));},BattleManager[_0xf2f935(0xa8a)]=function(){const _0x5d3d51=_0xf2f935;let _0x56913d=![];if(this['isDisplayEmergedEnemies']())for(const _0x262cd0 of $gameTroop[_0x5d3d51(0x48c)]()){this['_logWindow']['push'](_0x5d3d51(0x209),TextManager[_0x5d3d51(0x751)][_0x5d3d51(0x460)](_0x262cd0)),this[_0x5d3d51(0x3a3)]['push'](_0x5d3d51(0xb93)),_0x56913d=!![];}if(this['_preemptive'])this[_0x5d3d51(0x3a3)]['push']('addText',TextManager[_0x5d3d51(0x906)]['format']($gameParty[_0x5d3d51(0x222)]())),this[_0x5d3d51(0x3a3)][_0x5d3d51(0x580)](_0x5d3d51(0xb93));else{if(this[_0x5d3d51(0x3d6)]){if(_0x5d3d51(0xbcf)!==_0x5d3d51(0x987))this[_0x5d3d51(0x3a3)][_0x5d3d51(0x580)]('addText',TextManager['surprise']['format']($gameParty[_0x5d3d51(0x222)]())),this[_0x5d3d51(0x3a3)][_0x5d3d51(0x580)]('wait');else{function _0x3a404c(){this['_forcedBattleLayout']=_0x5a5384;}}}}if(_0x56913d){if('ccNtO'==='NMuFG'){function _0x4e965f(){const _0x2550c4=_0x5d3d51;_0x5575d3=_0x49afcd['battler']()[_0x2550c4(0xa09)],_0x4e2591=_0x2bab67[_0x2550c4(0x310)]()['_homeY'];}}else this[_0x5d3d51(0x3a3)][_0x5d3d51(0x580)]('wait'),this[_0x5d3d51(0x3a3)][_0x5d3d51(0x580)](_0x5d3d51(0xb40));}if(this[_0x5d3d51(0x349)]()&&this[_0x5d3d51(0x957)]()){if(_0x5d3d51(0x6a8)===_0x5d3d51(0x6a8))this[_0x5d3d51(0x66f)]=![];else{function _0x839c3(){const _0x11cacb=_0x5d3d51;this[_0x11cacb(0x5e2)]=_0x11cacb(0x6ab);}}}},BattleManager[_0xf2f935(0x1f6)]=function(){const _0x1e7962=_0xf2f935;if(BattleManager['_autoBattle'])return![];return VisuMZ['BattleCore']['Settings'][_0x1e7962(0x9e1)][_0x1e7962(0x381)];},VisuMZ['BattleCore']['BattleManager_startInput']=BattleManager['startInput'],BattleManager['startInput']=function(){const _0x502de0=_0xf2f935;VisuMZ[_0x502de0(0x886)]['BattleManager_startInput'][_0x502de0(0x86d)](this),this[_0x502de0(0x217)]()&&this[_0x502de0(0x957)]()&&!this[_0x502de0(0x3d6)]&&$gameParty['canInput']()&&this['selectNextCommand']();},BattleManager[_0xf2f935(0x957)]=function(){const _0x5c8afb=_0xf2f935;return VisuMZ[_0x5c8afb(0x886)][_0x5c8afb(0x650)]['PartyCmd'][_0x5c8afb(0x836)];},BattleManager[_0xf2f935(0x481)]=function(){const _0x2fe14f=_0xf2f935;this[_0x2fe14f(0x555)]()&&this[_0x2fe14f(0x547)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x346)]=Scene_Battle['prototype'][_0xf2f935(0x9d4)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x9d4)]=function(){const _0x28fa37=_0xf2f935;VisuMZ[_0x28fa37(0x886)][_0x28fa37(0x346)][_0x28fa37(0x86d)](this);if(BattleManager[_0x28fa37(0x349)]()&&BattleManager[_0x28fa37(0x66f)]){if('NLdbg'===_0x28fa37(0x74e)){function _0x4e048f(){const _0x2b566a=_0x28fa37;_0xad925f[_0x2b566a(0x886)][_0x2b566a(0x500)][_0x2b566a(0x86d)](this,_0x59606e,_0x4b518e),this[_0x2b566a(0x2b0)]();}}else BattleManager[_0x28fa37(0x66f)]=![],this['actorCommandCancelTPB']();}},BattleManager[_0xf2f935(0x2d7)]=function(_0x2a842e,_0x27f0a9){const _0xb81fdb=_0xf2f935;this['_action'][_0xb81fdb(0x898)]=_0x27f0a9,this[_0xb81fdb(0x3a3)]['displayReflection'](_0x27f0a9),this[_0xb81fdb(0x3a3)][_0xb81fdb(0x6a2)](_0x2a842e,this['_action']),this[_0xb81fdb(0x371)][_0xb81fdb(0x2a9)](_0x2a842e),this[_0xb81fdb(0x3a3)][_0xb81fdb(0xa03)](_0x2a842e,_0x2a842e);},VisuMZ['BattleCore'][_0xf2f935(0x766)]=BattleManager['makeActionOrders'],BattleManager[_0xf2f935(0x75e)]=function(){const _0x30fabb=_0xf2f935;VisuMZ[_0x30fabb(0x886)][_0x30fabb(0x766)]['call'](this),this[_0x30fabb(0xbd4)]=this[_0x30fabb(0xbd4)]['filter'](_0x332365=>_0x332365&&_0x332365[_0x30fabb(0x3c7)]());},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x8b4)]=BattleManager[_0xf2f935(0x5c4)],BattleManager[_0xf2f935(0x5c4)]=function(_0x246709){const _0x58ba0c=_0xf2f935;if(this[_0x58ba0c(0x4a3)]===_0x58ba0c(0xbc6))this[_0x58ba0c(0x930)]();else this['_phase']===_0x58ba0c(0x788)?this[_0x58ba0c(0x4bb)]():VisuMZ[_0x58ba0c(0x886)][_0x58ba0c(0x8b4)]['call'](this,_0x246709);},BattleManager[_0xf2f935(0x272)]=function(){const _0x57db3d=_0xf2f935;this[_0x57db3d(0x4a1)]=this[_0x57db3d(0x9d3)][_0x57db3d(0x37f)](0x0),this['_targetIndex']=0x0,this[_0x57db3d(0xaf5)]=this['_allTargets'][0x0]||null,this['_phase']=_0x57db3d(0xbc6);},BattleManager['updateCustomActionSequence']=function(){const _0x48e226=_0xf2f935;!this['updateEventMain']()&&!this[_0x48e226(0x3a3)][_0x48e226(0xab9)]()&&(this[_0x48e226(0x4a3)]='action');},BattleManager[_0xf2f935(0x788)]=function(_0x202276){const _0x1b29eb=_0xf2f935;this[_0x1b29eb(0xbd4)][_0x1b29eb(0xbb8)](_0x202276);if(_0x202276===this[_0x1b29eb(0x370)])return;const _0x1a4092=JsonEx['makeDeepCopy'](_0x202276['currentAction']());this[_0x1b29eb(0x861)]['push']([_0x202276,_0x1a4092]);},BattleManager[_0xf2f935(0x296)]=function(){},BattleManager[_0xf2f935(0x7fb)]=function(){const _0x9ff53e=_0xf2f935;if(this[_0x9ff53e(0x349)]())this['_phase']=_0x9ff53e(0x283);else{if(this[_0x9ff53e(0x861)]['length']>0x0){if('tFKJp'===_0x9ff53e(0x918))this[_0x9ff53e(0x4a3)]='turn';else{function _0x3e5bc9(){const _0x39234b=_0x9ff53e;this[_0x39234b(0x555)]()&&this['selectNextCommand']();}}}else this[_0x9ff53e(0x7f7)]();}},BattleManager[_0xf2f935(0x82b)]=function(){const _0x39e84e=_0xf2f935,_0x1e0231=this[_0x39e84e(0x370)];_0x1e0231&&this['isTpb']()&&_0x1e0231[_0x39e84e(0x291)]('undecided');for(;;){const _0xa8467f=this['getNextSubjectFromPool']();if(!_0xa8467f)return null;if(_0xa8467f[_0x39e84e(0x91f)]()&&_0xa8467f[_0x39e84e(0x33d)]())return _0xa8467f;}},BattleManager[_0xf2f935(0x56a)]=function(){const _0xd7590b=_0xf2f935;if(this[_0xd7590b(0x861)][_0xd7590b(0x342)]>0x0){const _0x656ddf=this[_0xd7590b(0x861)][_0xd7590b(0x487)](),_0x1e199b=_0x656ddf[0x0];return _0x1e199b['_actions']=_0x1e199b[_0xd7590b(0x9af)]||[],_0x1e199b[_0xd7590b(0x9af)][0x0]=_0x656ddf[0x1],_0x1e199b;}else{if(_0xd7590b(0x8f4)!==_0xd7590b(0x8f1))return this[_0xd7590b(0xbd4)][_0xd7590b(0x487)]();else{function _0x303cf5(){return![];}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xaa0)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x788)],Game_Battler[_0xf2f935(0x2dc)]['forceAction']=function(_0x5d6d39,_0x3a6adf){const _0x167917=_0xf2f935;VisuMZ[_0x167917(0x886)][_0x167917(0xaa0)][_0x167917(0x86d)](this,_0x5d6d39,_0x3a6adf),this[_0x167917(0x9af)][this[_0x167917(0x9af)]['length']-0x1][_0x167917(0x44b)]=!![];},Game_Interpreter['prototype'][_0xf2f935(0x586)]=function(_0x5f0155){const _0x33441d=_0xf2f935;return this[_0x33441d(0x703)](_0x5f0155[0x0],_0x5f0155[0x1],_0x487584=>{const _0x1e04a=_0x33441d;if(!_0x487584['isDeathStateAffected']()){if(_0x1e04a(0x6ca)===_0x1e04a(0x6ca))_0x487584[_0x1e04a(0x788)](_0x5f0155[0x2],_0x5f0155[0x3]),BattleManager[_0x1e04a(0x788)](_0x487584);else{function _0x135ad5(){const _0x1c7396=_0x1e04a;this['_battlePortrait']='',this[_0x1c7396(0x3fa)]()&&this['actor']()[_0x1c7396(0xbc2)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x1c7396(0x546)]=_0x260295(_0x5b6dd0['$1']));}}}}),!![];},VisuMZ['BattleCore'][_0xf2f935(0x379)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x412)],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x412)]=function(){const _0x3c5b2b=_0xf2f935;VisuMZ[_0x3c5b2b(0x886)][_0x3c5b2b(0x379)][_0x3c5b2b(0x86d)](this),this[_0x3c5b2b(0x9af)][_0x3c5b2b(0x342)]<=0x0&&(this[_0x3c5b2b(0xafe)]=Number[_0x3c5b2b(0xa85)]);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x501)]=BattleManager[_0xf2f935(0x547)],BattleManager[_0xf2f935(0x547)]=function(){const _0x4a0082=_0xf2f935;this[_0x4a0082(0x349)]()?this[_0x4a0082(0x2c3)]():VisuMZ[_0x4a0082(0x886)][_0x4a0082(0x501)][_0x4a0082(0x86d)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x44856c=_0xf2f935;if(this['_currentActor']){if('tvsIV'===_0x44856c(0xbbd)){function _0x3da7cd(){return this['maxItems']();}}else{if(this['_currentActor'][_0x44856c(0x547)]())return;this[_0x44856c(0x851)](),this[_0x44856c(0x2fe)](),!this[_0x44856c(0x370)]&&!this[_0x44856c(0x5a1)]&&SceneManager['_scene'][_0x44856c(0xb6f)]();}}else!this[_0x44856c(0x370)]&&this[_0x44856c(0x699)]();},BattleManager[_0xf2f935(0x2fe)]=function(){const _0x199822=_0xf2f935;if(!this['isPartyTpbInputtable']()||this[_0x199822(0xb07)]()){if(_0x199822(0x69e)!=='uSHDv'){if(this['_tpbSceneChangeCacheActor']){if(_0x199822(0x3a1)!=='rxLlb'){if(!$gameParty[_0x199822(0x85c)]()[_0x199822(0x7fe)](this[_0x199822(0x3b6)])){if(_0x199822(0x6ea)!==_0x199822(0x66e))this[_0x199822(0x3b6)]=null;else{function _0x3991de(){const _0x4714ea=_0x199822;if(!_0x49745b[_0x4714ea(0x2dc)][_0x4714ea(0x438)][_0x4714ea(0x86d)](this,_0x3c55b0))return!![];if(!_0x334db3[_0x4714ea(0x2dc)][_0x4714ea(0x995)]['call'](this,_0x5bb753))return!![];if(!_0x3e555d['prototype'][_0x4714ea(0xae3)][_0x4714ea(0x86d)](this,_0x179e24))return!![];return![];}}}}else{function _0x28d379(){const _0x158488=_0x199822,_0x21a0dc=_0x459220[_0x14f105];if(_0x21a0dc)_0x4ddcc0[_0x158488(0x580)](_0x346502[_0x158488(0x4ad)](_0x21a0dc));}}}if(!this[_0x199822(0x3b6)])this[_0x199822(0x3c4)](),this[_0x199822(0x5a1)]=null,this['_inputting']=![];else{if(_0x199822(0x354)!==_0x199822(0x6fc))this['revertTpbCachedActor']();else{function _0x2f5956(){const _0x295bd3=_0x199822;return _0x550df6['friendsUnit']()[_0x295bd3(0x4c4)]();}}}}else{function _0x53b280(){const _0x44ba15=_0x199822;!this[_0x44ba15(0x3a3)][_0x44ba15(0xab9)]()&&this[_0x44ba15(0x735)]();}}}},BattleManager[_0xf2f935(0x3e2)]=function(){const _0x317e42=_0xf2f935;if(!$gameParty[_0x317e42(0x85c)]()[_0x317e42(0x7fe)](this[_0x317e42(0x3b6)])){if(_0x317e42(0x260)!==_0x317e42(0x947))this['_tpbSceneChangeCacheActor']=null;else{function _0x11ccdf(){const _0x8ae8a1=_0x317e42,_0x2d02bd=_0x18cab1[_0x8ae8a1(0x2e1)](_0x4a441f['x'],_0x4aa73b['y']);if(this[_0x8ae8a1(0x333)]&&this[_0x8ae8a1(0x859)][_0x2d02bd])return this[_0x8ae8a1(0x859)][_0x2d02bd];}}}if(this[_0x317e42(0x3b6)]){if('mbell'==='NpVpG'){function _0x4cd6d8(){const _0x177312=_0x317e42;_0x24c8f0[_0x177312(0x886)]['Scene_Map_initialize'][_0x177312(0x86d)](this),_0x11ff1e[_0x177312(0xbb5)]();}}else this['_currentActor']=this[_0x317e42(0x3b6)],this[_0x317e42(0x5a1)]['_tpbState']=_0x317e42(0xba3),this[_0x317e42(0xbc9)]=!![],this[_0x317e42(0x3b6)]=null;}else{if(_0x317e42(0xad0)!==_0x317e42(0x378))this['cancelActorInput'](),this[_0x317e42(0x5a1)]=null,this[_0x317e42(0xbc9)]=![];else{function _0x433524(){const _0x12e2ce=_0x317e42;if(!this['_actor'][_0x12e2ce(0x706)](_0x2530d4['id']))return![];}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x358)]=BattleManager[_0xf2f935(0xbc0)],BattleManager['isTpbMainPhase']=function(){const _0x523f1c=_0xf2f935;if(this['_phase']===_0x523f1c(0xbc6)){if(_0x523f1c(0xa33)===_0x523f1c(0xa33))return this[_0x523f1c(0x5c8)]();else{function _0x230dcb(){const _0x753dc9=_0x523f1c;this[_0x753dc9(0x700)](_0x753dc9(0xb5e));}}}else return VisuMZ['BattleCore'][_0x523f1c(0x358)][_0x523f1c(0x86d)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x3306c2=_0xf2f935;return this[_0x3306c2(0x4cb)]();},VisuMZ['BattleCore'][_0xf2f935(0x7ad)]=BattleManager[_0xf2f935(0x3c4)],BattleManager[_0xf2f935(0x3c4)]=function(){const _0x1abb43=_0xf2f935;if(this[_0x1abb43(0x349)]()&&this[_0x1abb43(0x4a3)]===_0x1abb43(0x51a)){if(_0x1abb43(0x35f)===_0x1abb43(0x35f))this[_0x1abb43(0x5a1)]=null;else{function _0x45c109(){return![];}}}VisuMZ[_0x1abb43(0x886)][_0x1abb43(0x7ad)]['call'](this);},VisuMZ[_0xf2f935(0x886)]['BattleManager_inputtingAction']=BattleManager[_0xf2f935(0x98f)],BattleManager[_0xf2f935(0x98f)]=function(){const _0x2cfbc7=_0xf2f935,_0x5c0f4a=this[_0x2cfbc7(0x5a1)];if(_0x5c0f4a&&!_0x5c0f4a[_0x2cfbc7(0x98f)]()){if(_0x2cfbc7(0x516)===_0x2cfbc7(0x516)){const _0x22c71b=_0x5c0f4a['_actionInputIndex'];_0x5c0f4a['_actions'][_0x22c71b]=new Game_Action(_0x5c0f4a);}else{function _0x229664(){const _0x25a824=_0x2cfbc7,_0x2173ff=_0x1b6786[_0x25a824(0x464)]['Settings']['States'];_0x2173ff&&_0x2173ff[_0x25a824(0x972)]===![]&&this['removeStatesAuto'](0x1);}}}return VisuMZ[_0x2cfbc7(0x886)]['BattleManager_inputtingAction'][_0x2cfbc7(0x86d)](this);},SceneManager[_0xf2f935(0x731)]=function(){const _0x12145f=_0xf2f935;return this[_0x12145f(0xb95)]&&this[_0x12145f(0xb95)][_0x12145f(0xb22)]===Scene_Battle;},SceneManager[_0xf2f935(0x842)]=function(){const _0x491b5a=_0xf2f935;return Spriteset_Battle['prototype'][_0x491b5a(0x61f)]();},SceneManager[_0xf2f935(0x960)]=function(){const _0x33dbb7=_0xf2f935;if(SceneManager[_0x33dbb7(0xa12)](Scene_Options))return!![];return![];},SceneManager[_0xf2f935(0x2d0)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},VisuMZ['BattleCore'][_0xf2f935(0x645)]=Game_Temp['prototype'][_0xf2f935(0xb12)],Game_Temp['prototype'][_0xf2f935(0xb12)]=function(_0x58ebc5,_0x494df6,_0x3fc645){const _0x3182d4=_0xf2f935;_0x58ebc5=_0x58ebc5[_0x3182d4(0xba4)]((_0x5b27d7,_0x541a4f,_0x455e1d)=>_0x455e1d[_0x3182d4(0x665)](_0x5b27d7)===_0x541a4f),SceneManager[_0x3182d4(0x731)]()&&SceneManager[_0x3182d4(0x842)]()&&(_0x3fc645=!_0x3fc645),VisuMZ['BattleCore'][_0x3182d4(0x645)][_0x3182d4(0x86d)](this,_0x58ebc5,_0x494df6,_0x3fc645),SceneManager['isSceneBattle']()&&BattleManager[_0x3182d4(0x2c7)][_0x3182d4(0x541)]();},Game_Temp[_0xf2f935(0x2dc)][_0xf2f935(0x9e0)]=function(_0x2e2580){const _0x2c75b0=_0xf2f935;this[_0x2c75b0(0x6f5)]=_0x2e2580;},Game_Temp['prototype']['getLastPluginCommandInterpreter']=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0xf2f935(0x2dc)][_0xf2f935(0xbb5)]=function(){const _0x436b9c=_0xf2f935;this[_0x436b9c(0x769)]=undefined;},Game_Temp['prototype'][_0xf2f935(0xb81)]=function(_0x4b10c4){const _0x52b865=_0xf2f935;$gameMap&&$dataMap&&$dataMap['note']&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x52b865(0xbc2)]);const _0x5f3cbc=$dataTroops[_0x4b10c4];if(_0x5f3cbc){if('Wmmsc'===_0x52b865(0xb2f)){function _0x1cf02d(){const _0x26f6e6=_0x52b865;_0x456011['BattleCore']['Game_Map_setupBattleback']['call'](this),this[_0x26f6e6(0x8d4)]();}}else this[_0x52b865(0x6ce)](_0x5f3cbc[_0x52b865(0x222)]);}},Game_Temp[_0xf2f935(0x2dc)][_0xf2f935(0x6ce)]=function(_0x39aab4){const _0x2dde30=_0xf2f935;if(!_0x39aab4)return;if(_0x39aab4[_0x2dde30(0x78e)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x5658d7=String(RegExp['$1']);if(_0x5658d7[_0x2dde30(0x78e)](/DEFAULT/i)){if(_0x2dde30(0x373)==='zkzJI'){function _0x20195a(){const _0x3c6b83=_0x2dde30;this['push'](_0x3c6b83(0x73f),_0x133b43,_0x368058);}}else this[_0x2dde30(0x769)]=_0x2dde30(0x6ab);}else{if(_0x5658d7['match'](/LIST/i)){if('fmTNq'===_0x2dde30(0x2c4)){function _0x50dc44(){const _0x15ebac=_0x2dde30;if(!_0x49d50f['isSceneBattle']())return;_0x1568c9[_0x15ebac(0xbda)](_0x5714b8,_0x3a5f37),_0x20e166[_0x15ebac(0xb95)][_0x15ebac(0x63f)](_0x5ac25d['ShowHide']);}}else this[_0x2dde30(0x769)]=_0x2dde30(0x29a);}else{if(_0x5658d7[_0x2dde30(0x78e)](/XP/i))this[_0x2dde30(0x769)]='xp';else{if(_0x5658d7[_0x2dde30(0x78e)](/PORTRAIT/i))this[_0x2dde30(0x769)]='portrait';else{if(_0x5658d7[_0x2dde30(0x78e)](/BORDER/i))this[_0x2dde30(0x769)]=_0x2dde30(0xacf);else{if(_0x5658d7[_0x2dde30(0x78e)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x2dde30(0x493)])this['_forcedBattleLayout']=_0x2dde30(0xb59);else{if(_0x2dde30(0xbb2)===_0x2dde30(0x8ba)){function _0x203845(){const _0x1d24bf=_0x2dde30;return _0x4435f4[_0x1d24bf(0x886)]['Game_Interpreter_command283'][_0x1d24bf(0x86d)](this,_0x28e8a1);}}else this[_0x2dde30(0x769)]=_0x2dde30(0x6ab);}}}}}}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x959)]=Game_System['prototype'][_0xf2f935(0x30e)],Game_System['prototype'][_0xf2f935(0x30e)]=function(){const _0x77f2a3=_0xf2f935;VisuMZ[_0x77f2a3(0x886)]['Game_System_initialize'][_0x77f2a3(0x86d)](this),this[_0x77f2a3(0x638)]();},Game_System['prototype'][_0xf2f935(0x638)]=function(){const _0x3bd3d1=_0xf2f935;this[_0x3bd3d1(0x8b8)]=this[_0x3bd3d1(0x8b8)]||[];},Game_System['prototype'][_0xf2f935(0xb38)]=function(){if(this['_defeatedEnemies']===undefined)this['initBattleCore']();return this['_defeatedEnemies'];},Game_System[_0xf2f935(0x2dc)][_0xf2f935(0xa88)]=function(_0x36f6c1){const _0x19ae9f=_0xf2f935;if(this[_0x19ae9f(0x8b8)]===undefined)this[_0x19ae9f(0x638)]();if(!_0x36f6c1)return;if(this['_defeatedEnemies']['includes'](_0x36f6c1))return;this['_defeatedEnemies'][_0x19ae9f(0x580)](_0x36f6c1),this['_defeatedEnemies'][_0x19ae9f(0xbdd)]((_0x4ca88c,_0x19ca36)=>_0x4ca88c-_0x19ca36);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x433)]=Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x4f6)],Game_BattlerBase['prototype']['addNewState']=function(_0x553d1b){const _0x1c68c9=_0xf2f935,_0x3a3eea=this['isAlive'](),_0x2a998f=this[_0x1c68c9(0x6d1)]();VisuMZ['BattleCore'][_0x1c68c9(0x433)][_0x1c68c9(0x86d)](this,_0x553d1b);if(this[_0x1c68c9(0x1fb)]()&&_0x3a3eea&&this[_0x1c68c9(0xb18)]()){if(_0x1c68c9(0xb15)!==_0x1c68c9(0xb15)){function _0x471462(){const _0x17e0d2=_0x1c68c9;if(!_0x29ac6e[_0x17e0d2(0x4a7)])return;const _0x1d4298=_0x6bfdf6[_0x17e0d2(0xb95)][_0x17e0d2(0x2c7)];if(!_0x1d4298)return;_0x1571a1[_0x17e0d2(0xbda)](_0x5f17a1,_0x1fc3c7);const _0x529557=_0x48defa['X']||0x0,_0x139376=_0xcaa1fd['Y']||0x0,_0x4c7d3a=_0xac9aa4[_0x17e0d2(0x8b0)]||0x0,_0xcc5105=_0x265da8[_0x17e0d2(0x2b3)]||0x0,_0x225550=_0x230585[_0x17e0d2(0x858)]||0x1;_0x1d4298[_0x17e0d2(0x9e2)](_0x529557,_0x139376,_0x4c7d3a,_0xcc5105,_0x225550);}}else this[_0x1c68c9(0xb3f)]=!this['hasBeenDefeatedBefore'](),$gameSystem['registerDefeatedEnemy'](this[_0x1c68c9(0x2cb)]());}if(SceneManager['isSceneBattle']()&&_0x2a998f!==this[_0x1c68c9(0x6d1)]()){if(_0x1c68c9(0x562)===_0x1c68c9(0x562)){if(this[_0x1c68c9(0x310)]()){if(_0x1c68c9(0xa15)!==_0x1c68c9(0xa15)){function _0x4eec2b(){const _0x4d9071=_0x1c68c9;if(!_0x2d2b53[_0x4d9071(0x649)]())return;const _0xa7cd47=this[_0x4d9071(0x310)]();if(!_0xa7cd47)return;_0x542c2c=_0x1d6568||0x0;if(_0x2882d8>0x0){if(_0xa7cd47['_baseX']>_0x4a019a)_0x47af4c+=_0xa7cd47[_0x4d9071(0x41b)]/0x2+_0x47fa86;if(_0xa7cd47['_baseX']<_0x217081)_0x437cf0-=_0xa7cd47['width']/0x2+_0x3d233e;}if(_0x1a102c)this[_0x4d9071(0x572)](_0x5100b0,_0x17c6ea,![]);_0x509c87-=_0xa7cd47[_0x4d9071(0xa09)],_0x312a09-=_0xa7cd47[_0x4d9071(0x5e8)],_0xa7cd47[_0x4d9071(0x4fa)](_0x4c31b0,_0x23797d,_0x1e25a2);if(_0xd3d19c['VisuMZ_0_CoreEngine'])_0xa7cd47[_0x4d9071(0x6f3)](_0x2aaddf||_0x4d9071(0xb54));}}else this[_0x1c68c9(0x310)]()['refreshMotion']();}}else{function _0x4bd05e(){const _0x29af12=_0x1c68c9;if(!_0x425c52[_0x29af12(0x731)]())return;_0x54acef[_0x29af12(0xbda)](_0x505eba,_0x25b9f0);const _0xf23db=_0x2ddcb2[_0x29af12(0x371)];if(!_0xf23db)return;let _0x422f68=_0x5f2553['Formula'];_0xf23db[_0x29af12(0x5d3)](_0x422f68);}}}},Game_Enemy['prototype'][_0xf2f935(0x60f)]=function(){const _0xa1081b=_0xf2f935;return $gameSystem[_0xa1081b(0xb38)]()['includes'](this[_0xa1081b(0x54c)]);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x23e)]=Game_BattlerBase[_0xf2f935(0x2dc)]['eraseState'],Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x686)]=function(_0x2e52a3){const _0x2bff49=_0xf2f935;VisuMZ[_0x2bff49(0x886)][_0x2bff49(0x23e)][_0x2bff49(0x86d)](this,_0x2e52a3);if(this[_0x2bff49(0x1fb)]()&&_0x2e52a3===this[_0x2bff49(0x498)]()&&this['isAlive']()){if(_0x2bff49(0x70e)==='LAYGF'){function _0x26aa3f(){const _0x39dfe6=_0x2bff49;if(!this['_actor'])return;const _0x329f92=this['_actor'][_0x39dfe6(0x1ff)]();for(const _0x5040c6 of _0x329f92){this[_0x39dfe6(0x66b)](_0x5040c6['toUpperCase']()[_0x39dfe6(0x669)]());}}}else this[_0x2bff49(0xb3f)]=![];}!this[_0x2bff49(0x673)]&&!this[_0x2bff49(0x90c)]&&SceneManager[_0x2bff49(0x731)]()&&this[_0x2bff49(0x25a)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xb96)]=Game_Action[_0xf2f935(0x2dc)]['clear'],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0xb40)]=function(){const _0xda722f=_0xf2f935;VisuMZ[_0xda722f(0x886)][_0xda722f(0xb96)][_0xda722f(0x86d)](this),this[_0xda722f(0x204)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0xda722f(0x8c3)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0xda722f(0x34b)]='default';},Game_Action['prototype'][_0xf2f935(0x721)]=function(_0x3023b4,_0x46da9c){const _0x3a8591=_0xf2f935;return VisuMZ[_0x3a8591(0x886)][_0x3a8591(0x650)]['Damage'][_0x3a8591(0xa8d)][_0x3a8591(0x86d)](this,_0x3023b4,_0x46da9c);},Game_Action['prototype'][_0xf2f935(0xb1d)]=function(_0x2d3f4d,_0x462f98){const _0x17b20c=_0xf2f935;return VisuMZ[_0x17b20c(0x886)][_0x17b20c(0x650)][_0x17b20c(0xb17)][_0x17b20c(0x50a)][_0x17b20c(0x86d)](this,_0x2d3f4d,_0x462f98);},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x852)]=function(_0x5b30b1,_0x4e7812){const _0x192267=_0xf2f935;return VisuMZ[_0x192267(0x886)]['Settings']['Damage'][_0x192267(0x803)]['call'](this,_0x5b30b1,_0x4e7812);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x4df)]=Game_Action['prototype'][_0xf2f935(0x221)],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x221)]=function(_0x36d3bf){const _0x38f19e=_0xf2f935,_0x14e359=this[_0x38f19e(0x5b0)]()[_0x38f19e(0xbc2)];if(_0x14e359[_0x38f19e(0x78e)](/<ALWAYS HIT>/i)){if('scCaH'!==_0x38f19e(0x2ee)){function _0x4b73b7(){const _0x162438=_0x38f19e;this[_0x162438(0x41e)]()?(this[_0x162438(0xa6e)][_0x162438(0x3cc)](),this[_0x162438(0x54f)]['hide'](),this[_0x162438(0x67f)][_0x162438(0x29d)]()):_0x54b850[_0x162438(0x886)][_0x162438(0x5fa)][_0x162438(0x86d)](this),this[_0x162438(0x468)]();}}else return 0x1;}else{if(_0x14e359[_0x38f19e(0x78e)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x38f19e(0x8bd)!==_0x38f19e(0x8bd)){function _0x12895d(){const _0x3a8f46=_0x38f19e,_0x66687f=_0x3e1169[_0x3a8f46(0x502)]('['+_0x47234d['$1']['match'](/\d+/g)+']');for(const _0x5a7c67 of _0x66687f){if(!_0x207d1f[_0x3a8f46(0x99b)](_0x5a7c67))return![];}return!![];}}else return Number(RegExp['$1'])/0x64;}else{if('JXOSP'===_0x38f19e(0x42a)){function _0x581e29(){const _0x1b665c=_0x38f19e;_0x487b78[_0x1b665c(0x886)]['ParseSkillNotetags'][_0x1b665c(0x86d)](this,_0xe26c5);}}else{let _0x7a4dd6=VisuMZ[_0x38f19e(0x886)][_0x38f19e(0x4df)]['call'](this,_0x36d3bf);return _0x7a4dd6=this[_0x38f19e(0x8c3)][_0x38f19e(0x307)]*_0x7a4dd6+this[_0x38f19e(0x8c3)][_0x38f19e(0x64d)],_0x7a4dd6;}}}},Game_Action[_0xf2f935(0x2dc)]['itemCri']=function(_0x21df28){const _0x35c01d=_0xf2f935;if(!this[_0x35c01d(0x5b0)]()[_0x35c01d(0xb5e)][_0x35c01d(0x569)])return 0x0;let _0x3911b8=VisuMZ[_0x35c01d(0x886)]['Settings']['Damage'][_0x35c01d(0x50f)]['call'](this,_0x21df28);return _0x3911b8=this[_0x35c01d(0x8c3)][_0x35c01d(0x251)]*_0x3911b8+this[_0x35c01d(0x8c3)]['criticalHitFlat'],_0x3911b8;},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x356)]=function(_0x2d483a){const _0x1bd488=_0xf2f935;return _0x2d483a=VisuMZ[_0x1bd488(0x886)][_0x1bd488(0x650)][_0x1bd488(0xb17)]['CriticalHitMultiplier'][_0x1bd488(0x86d)](this,_0x2d483a),_0x2d483a=this[_0x1bd488(0x8c3)][_0x1bd488(0xab4)]*_0x2d483a+this[_0x1bd488(0x8c3)][_0x1bd488(0x3bc)],_0x2d483a;},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa5b)]=Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x323)],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x323)]=function(_0x5e6041){const _0x2bd03c=_0xf2f935;if(this[_0x2bd03c(0x34b)]!=='default')return this['customDamageFormula'](_0x5e6041);else return DataManager[_0x2bd03c(0x9bb)](this[_0x2bd03c(0x5b0)]())===_0x2bd03c(0x6ee)?VisuMZ[_0x2bd03c(0x886)][_0x2bd03c(0xa5b)][_0x2bd03c(0x86d)](this,_0x5e6041):this[_0x2bd03c(0x90a)](_0x5e6041);},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x5d3)]=function(_0x6332ff){this['_customDamageFormula']=_0x6332ff;},Game_Action['prototype'][_0xf2f935(0xa5c)]=function(_0x44e396){const _0x2a3f2e=_0xf2f935,_0x5c4a6e=this[_0x2a3f2e(0x5b0)](),_0x3e146b=_0x5c4a6e[_0x2a3f2e(0xb5e)][_0x2a3f2e(0x3e3)];_0x5c4a6e[_0x2a3f2e(0xb5e)]['formula']=this[_0x2a3f2e(0x34b)];let _0x458797=VisuMZ[_0x2a3f2e(0x886)]['Game_Action_evalDamageFormula'][_0x2a3f2e(0x86d)](this,_0x44e396);return _0x5c4a6e[_0x2a3f2e(0xb5e)]['formula']=_0x3e146b,_0x458797;},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0xad1)]=function(){const _0x185a87=_0xf2f935;if(this[_0x185a87(0x5b0)]()[_0x185a87(0xbc2)][_0x185a87(0x78e)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x3fb22a=String(RegExp['$1'])[_0x185a87(0xa2e)]()[_0x185a87(0x669)]();return _0x3fb22a;}return _0x185a87(0x6ee);},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x90a)]=function(_0xf80275){const _0xc28f2b=_0xf2f935,_0x371208=DataManager['getDamageStyle'](this[_0xc28f2b(0x5b0)]()),_0x40eea3=VisuMZ['DamageStyles'][_0x371208];try{if(_0xc28f2b(0x1f3)!==_0xc28f2b(0x1f3)){function _0x57df47(){const _0x526f35=_0xc28f2b,_0x271933=_0x4a3d24[_0x526f35(0x886)][_0x526f35(0x650)][_0x526f35(0x903)];if(!_0x271933[_0x526f35(0x5fb)])return;this[_0x526f35(0x580)](_0x526f35(0x209),_0x271933[_0x526f35(0x62e)][_0x526f35(0x460)](_0x24ea7b[_0x526f35(0xb29)]())),this[_0x526f35(0x580)](_0x526f35(0x683),_0x271933[_0x526f35(0x514)]),this[_0x526f35(0x580)](_0x526f35(0xb40));}}else return _0x40eea3[_0xc28f2b(0x5ad)][_0xc28f2b(0x86d)](this,_0xf80275);}catch(_0x332507){if(_0xc28f2b(0x804)!==_0xc28f2b(0x89f)){if($gameTemp[_0xc28f2b(0x3ee)]())console['log'](_0x332507);return VisuMZ[_0xc28f2b(0x886)][_0xc28f2b(0xa5b)][_0xc28f2b(0x86d)](this);}else{function _0x41b622(){return!![];}}}},Game_Action['prototype']['applyArmorModifiers']=function(_0x27c269,_0x5de976){const _0x25a49e=_0xf2f935;if(this[_0x25a49e(0x732)]())return _0x5de976;const _0x5b5126=this[_0x25a49e(0x271)](),_0x3068e2=_0x27c269;let _0xc3c7d5=[],_0x37a16a=[];_0xc3c7d5['push'](this[_0x25a49e(0x204)][_0x25a49e(0x576)],this[_0x25a49e(0x204)][_0x25a49e(0x26a)]),_0x37a16a[_0x25a49e(0x580)](this['_armorPenetration']['arPenRate'],this[_0x25a49e(0x204)][_0x25a49e(0x30c)]);const _0x4fb381=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x1ec0c4=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x40aeb0=this[_0x25a49e(0x3eb)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x152646=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0xc3c7d5=_0xc3c7d5[_0x25a49e(0x6d5)](_0x3068e2[_0x25a49e(0x6f7)]()['map'](_0x1178a4=>_0x1178a4&&_0x1178a4[_0x25a49e(0xbc2)][_0x25a49e(0x78e)](_0x4fb381)?Number(RegExp['$1']):0x0)),_0x37a16a=_0x37a16a[_0x25a49e(0x6d5)](_0x3068e2[_0x25a49e(0x6f7)]()[_0x25a49e(0x2ab)](_0x4c28c9=>_0x4c28c9&&_0x4c28c9[_0x25a49e(0xbc2)][_0x25a49e(0x78e)](_0x1ec0c4)?Number(RegExp['$1'])/0x64:0x0)),_0xc3c7d5=_0xc3c7d5[_0x25a49e(0x6d5)](_0x5b5126['traitObjects']()[_0x25a49e(0x2ab)](_0xed3347=>_0xed3347&&_0xed3347[_0x25a49e(0xbc2)]['match'](_0x40aeb0)?Number(RegExp['$1']):0x0)),_0x37a16a=_0x37a16a[_0x25a49e(0x6d5)](_0x5b5126[_0x25a49e(0x6f7)]()['map'](_0x4b3803=>_0x4b3803&&_0x4b3803[_0x25a49e(0xbc2)][_0x25a49e(0x78e)](_0x152646)?Number(RegExp['$1'])/0x64:0x0)),this[_0x25a49e(0x5b0)]()['note']['match'](_0x40aeb0)&&_0xc3c7d5[_0x25a49e(0x580)](Number(RegExp['$1'])),this['item']()['note'][_0x25a49e(0x78e)](_0x152646)&&_0x37a16a[_0x25a49e(0x580)](Number(RegExp['$1'])),_0x5de976=_0xc3c7d5[_0x25a49e(0xbdb)]((_0x45eac7,_0x424d79)=>_0x45eac7-_0x424d79,_0x5de976),_0x5de976>0x0&&(_0x5de976=_0x37a16a['reduce']((_0x1f1998,_0x5f132c)=>_0x1f1998*(0x1-_0x5f132c),_0x5de976)),_0x5de976;},VisuMZ['BattleCore'][_0xf2f935(0x636)]=Game_Action['prototype'][_0xf2f935(0x88b)],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x88b)]=function(_0x1fd8a9,_0x4d5534){const _0x1a9c55=_0xf2f935;_0x4d5534=_0x4d5534*this[_0x1a9c55(0x8c3)]['damageRate'],_0x4d5534+=this['_multipliers'][_0x1a9c55(0x8e2)]*(_0x4d5534>=0x0?0x1:-0x1),_0x4d5534=this['applyBattleCoreJS'](_0x1a9c55(0x319),_0x1fd8a9,_0x4d5534,![]),_0x4d5534=this[_0x1a9c55(0x2a2)](_0x4d5534),_0x4d5534=Math['round'](_0x4d5534),this[_0x1a9c55(0x72a)]=_0x4d5534,this[_0x1a9c55(0x901)]=this[_0x1a9c55(0x901)]||0x0,this[_0x1a9c55(0x901)]+=_0x4d5534,VisuMZ[_0x1a9c55(0x886)][_0x1a9c55(0x636)][_0x1a9c55(0x86d)](this,_0x1fd8a9,_0x4d5534),this[_0x1a9c55(0x43c)](_0x1a9c55(0x67e),_0x1fd8a9,_0x4d5534,!![]);},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x2a2)]=function(_0x2bb366){const _0x7efee4=_0xf2f935;if(this[_0x7efee4(0x80c)]())return _0x2bb366;return _0x2bb366=this['applySoftDamageCap'](_0x2bb366),_0x2bb366=this[_0x7efee4(0xbc7)](_0x2bb366),_0x2bb366;},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x80c)]=function(){const _0xaa33ba=_0xf2f935,_0x42878b=/<BYPASS DAMAGE CAP>/i;if(this[_0xaa33ba(0x5b0)]()[_0xaa33ba(0xbc2)]['match'](_0x42878b))return!![];if(this[_0xaa33ba(0x271)]()[_0xaa33ba(0x6f7)]()[_0xaa33ba(0xa60)](_0x5d2bb6=>_0x5d2bb6&&_0x5d2bb6[_0xaa33ba(0xbc2)][_0xaa33ba(0x78e)](_0x42878b)))return!![];return!VisuMZ[_0xaa33ba(0x886)][_0xaa33ba(0x650)][_0xaa33ba(0xb17)]['EnableDamageCap'];},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x801)]=function(_0x2bae9d){const _0x117eb9=_0xf2f935;if(!VisuMZ['BattleCore']['Settings'][_0x117eb9(0xb17)][_0x117eb9(0x361)])return _0x2bae9d;const _0x357b15=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x117eb9(0x5b0)]()[_0x117eb9(0xbc2)][_0x117eb9(0x78e)](_0x357b15))return!![];if(this[_0x117eb9(0x271)]()[_0x117eb9(0x6f7)]()['some'](_0x1ef23c=>_0x1ef23c&&_0x1ef23c[_0x117eb9(0xbc2)][_0x117eb9(0x78e)](_0x357b15)))return!![];const _0x1c939a=_0x2bae9d<0x0?-0x1:0x1;_0x2bae9d=Math[_0x117eb9(0x824)](_0x2bae9d);let _0x5ad7cf=this['subject']()['softDamageCapRate']();if(this[_0x117eb9(0x5b0)]()[_0x117eb9(0xbc2)][_0x117eb9(0x78e)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)){if(_0x117eb9(0x425)!==_0x117eb9(0x44c))_0x5ad7cf+=Number(RegExp['$1'])/0x64;else{function _0x4515c6(){const _0x546f11=_0x117eb9;return _0x4a52be[_0x546f11(0x886)]['Settings'][_0x546f11(0x903)][_0x546f11(0xadc)]['call'](this);}}}_0x5ad7cf=_0x5ad7cf[_0x117eb9(0xaba)](0.01,0x1);const _0x11165f=this[_0x117eb9(0x90b)](),_0x17ade9=_0x5ad7cf*_0x11165f;if(_0x2bae9d>_0x17ade9&&_0x11165f>_0x17ade9){_0x2bae9d-=_0x17ade9;const _0x3a377c=VisuMZ[_0x117eb9(0x886)][_0x117eb9(0x650)][_0x117eb9(0xb17)][_0x117eb9(0x519)],_0x454eff=Math[_0x117eb9(0x205)](0x1-_0x2bae9d/((_0x11165f-_0x17ade9)*_0x3a377c+_0x2bae9d),0.01);_0x2bae9d*=_0x454eff,_0x2bae9d+=_0x17ade9;}return _0x2bae9d*_0x1c939a;},Game_Action[_0xf2f935(0x2dc)]['getHardDamageCap']=function(){const _0x4199f9=_0xf2f935;if(this[_0x4199f9(0x5b0)]()[_0x4199f9(0xbc2)][_0x4199f9(0x78e)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x4199f9(0xa93)===_0x4199f9(0xa93))return Number(RegExp['$1']);else{function _0x4d07e2(){const _0x2dd6c9=_0x4199f9;this[_0x2dd6c9(0x58e)]=0x0,this[_0x2dd6c9(0x4de)]=0x0,this[_0x2dd6c9(0x214)]=0x0,this[_0x2dd6c9(0xa50)]=0x0,this[_0x2dd6c9(0xbaf)]=0x0,this['_floatWholeDuration']=0x0,this[_0x2dd6c9(0x822)]='Linear',this[_0x2dd6c9(0x7df)]=0x0,this[_0x2dd6c9(0x79d)]=0x0,this[_0x2dd6c9(0x91c)]=0x0,this[_0x2dd6c9(0x8b3)]=0x0,this[_0x2dd6c9(0x36e)]=0xff,this[_0x2dd6c9(0x6d3)]=0x0,this[_0x2dd6c9(0xae5)]=0x0,this[_0x2dd6c9(0xb26)]='Linear',this[_0x2dd6c9(0x91b)]=0x0,this[_0x2dd6c9(0x470)]=0x0,this[_0x2dd6c9(0x31e)]=0x0,this['_angleWholeDuration']=0x0,this[_0x2dd6c9(0x98b)]=_0x2dd6c9(0xb54),this[_0x2dd6c9(0x999)]=!![],this['_skewX']=0x0,this[_0x2dd6c9(0x9b5)]=0x0,this[_0x2dd6c9(0xa0d)]=0x0,this[_0x2dd6c9(0x9c4)]=0x0,this[_0x2dd6c9(0x4f2)]=0x0,this[_0x2dd6c9(0x63b)]=0x0,this[_0x2dd6c9(0x6b1)]=_0x2dd6c9(0xb54),this['_growX']=0x1,this[_0x2dd6c9(0x813)]=0x1,this[_0x2dd6c9(0x31f)]=0x1,this[_0x2dd6c9(0xa61)]=0x1,this[_0x2dd6c9(0x6ec)]=0x0,this['_growWholeDuration']=0x0,this[_0x2dd6c9(0x6e4)]=_0x2dd6c9(0xb54),this[_0x2dd6c9(0x630)]=0x1;}}}else return this[_0x4199f9(0x271)]()['hardDamageCap']();},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0xbc7)]=function(_0x48c3e1){const _0x50858d=_0xf2f935;let _0x374794=this[_0x50858d(0x90b)]();return _0x48c3e1[_0x50858d(0xaba)](-_0x374794,_0x374794);},VisuMZ['BattleCore']['Game_Action_apply']=Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x2a9)],Game_Action['prototype'][_0xf2f935(0x2a9)]=function(_0x26fa51){const _0x25d5f5=_0xf2f935;this['applyBattleCoreJS']('PreApply%1JS',_0x26fa51,0x0,!![]),VisuMZ[_0x25d5f5(0x886)][_0x25d5f5(0x46e)][_0x25d5f5(0x86d)](this,_0x26fa51),this[_0x25d5f5(0x43c)]('PostApply%1JS',_0x26fa51,this[_0x25d5f5(0x72a)]||0x0,!![]),this[_0x25d5f5(0x8a3)](_0x26fa51);},Game_Action['prototype'][_0xf2f935(0x43c)]=function(_0x1ade77,_0x19ed38,_0x29cba4,_0x117ed3){const _0x56479a=_0xf2f935;if(this[_0x56479a(0x90c)]||this['_tempActor'])return;_0x29cba4=_0x29cba4||0x0;const _0x396be1=_0x29cba4,_0x2f04fb=VisuMZ[_0x56479a(0x886)][_0x56479a(0x650)][_0x56479a(0x43b)],_0x279f5c=_0x1ade77[_0x56479a(0x460)]('');if(_0x2f04fb[_0x279f5c]){_0x29cba4=_0x2f04fb[_0x279f5c][_0x56479a(0x86d)](this,_0x29cba4,_0x19ed38);if(_0x117ed3)_0x29cba4=_0x396be1;}let _0x14fc48=VisuMZ[_0x56479a(0x886)][_0x56479a(0x3c0)](this[_0x56479a(0x5b0)](),_0x1ade77[_0x56479a(0x460)](''));if(VisuMZ[_0x56479a(0x886)]['JS'][_0x14fc48]){if('gKScL'!==_0x56479a(0xaf0)){function _0x44244d(){const _0x135990=_0x56479a;this[_0x135990(0x580)](_0x135990(0x9ca),_0x40738e);}}else{_0x29cba4=VisuMZ['BattleCore']['JS'][_0x14fc48]['call'](this,this[_0x56479a(0x271)](),_0x19ed38,this[_0x56479a(0x5b0)](),_0x29cba4);if(_0x117ed3)_0x29cba4=_0x396be1;}}for(const _0x1cb1f5 of this['subject']()[_0x56479a(0x6f7)]()){if(!_0x1cb1f5)continue;_0x14fc48=VisuMZ['BattleCore'][_0x56479a(0x3c0)](_0x1cb1f5,_0x1ade77[_0x56479a(0x460)](_0x56479a(0x622)));if(VisuMZ['BattleCore']['JS'][_0x14fc48]){if(_0x56479a(0x2df)!=='nzCRd'){_0x29cba4=VisuMZ['BattleCore']['JS'][_0x14fc48][_0x56479a(0x86d)](this,this[_0x56479a(0x271)](),_0x19ed38,_0x1cb1f5,_0x29cba4);if(_0x117ed3)_0x29cba4=_0x396be1;}else{function _0x26b5aa(){const _0x45c510=_0x56479a;if(!_0x556713[_0x45c510(0x886)]['Settings'][_0x45c510(0x903)][_0x45c510(0x64e)])return;_0xd2d72a[_0x45c510(0x886)]['Window_BattleLog_displayTpDamage'][_0x45c510(0x86d)](this,_0x13af26);}}}}for(const _0x506934 of _0x19ed38[_0x56479a(0x6f7)]()){if(!_0x506934)continue;_0x14fc48=VisuMZ['BattleCore']['createKeyJS'](_0x506934,_0x1ade77['format'](_0x56479a(0x3a0)));if(VisuMZ['BattleCore']['JS'][_0x14fc48]){_0x29cba4=VisuMZ[_0x56479a(0x886)]['JS'][_0x14fc48]['call'](this,this['subject'](),_0x19ed38,_0x506934,_0x29cba4);if(_0x117ed3)_0x29cba4=_0x396be1;}}return _0x29cba4;},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x614)]=function(_0x237749){const _0x37dc70=_0xf2f935,_0x270ba2=this['_totalValue']||0x0,_0x1af276=VisuMZ[_0x37dc70(0x886)][_0x37dc70(0x650)][_0x37dc70(0x43b)],_0x1c746f=_0x237749['format']('');_0x1af276[_0x1c746f]&&_0x1af276[_0x1c746f][_0x37dc70(0x86d)](this,_0x270ba2);let _0x1bc331=VisuMZ[_0x37dc70(0x886)]['createKeyJS'](this['item'](),_0x237749);if(VisuMZ[_0x37dc70(0x886)]['JS'][_0x1bc331]){if('nPwse'!==_0x37dc70(0x881)){function _0x4c2eb5(){const _0xe00cc2=_0x37dc70;return 0x1*this[_0xe00cc2(0x813)];}}else VisuMZ[_0x37dc70(0x886)]['JS'][_0x1bc331][_0x37dc70(0x86d)](this,this['subject'](),this['subject'](),this[_0x37dc70(0x5b0)](),_0x270ba2);}for(const _0x401561 of this[_0x37dc70(0x271)]()['traitObjects']()){if(_0x37dc70(0x3ea)!==_0x37dc70(0x236)){if(!_0x401561)continue;_0x1bc331=VisuMZ[_0x37dc70(0x886)]['createKeyJS'](_0x401561,_0x237749),VisuMZ[_0x37dc70(0x886)]['JS'][_0x1bc331]&&VisuMZ[_0x37dc70(0x886)]['JS'][_0x1bc331]['call'](this,this['subject'](),this['subject'](),_0x401561,_0x270ba2);}else{function _0x4c38d7(){const _0x19050e=_0x37dc70;_0x46dc65[_0x19050e(0x886)]['Settings'][_0x19050e(0x5df)][_0x19050e(0x3ed)]?_0x5849b7[_0x19050e(0x886)]['Settings'][_0x19050e(0x5df)]['HomePosJS'][_0x19050e(0x86d)](this,_0x2bde8b):_0x45dd77[_0x19050e(0x886)][_0x19050e(0x685)][_0x19050e(0x86d)](this,_0x558692);}}}},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x7a0)]=function(){const _0x20acd3=_0xf2f935;return VisuMZ[_0x20acd3(0x886)][_0x20acd3(0x650)][_0x20acd3(0x43b)]['CalcActionSpeedJS']['call'](this);},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0xb5c)]=function(){const _0x562d67=_0xf2f935;return VisuMZ[_0x562d67(0x886)]['Settings'][_0x562d67(0x43b)][_0x562d67(0x780)];},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x924)]=function(){const _0x1981c8=_0xf2f935;return this[_0x1981c8(0x5b0)]()[_0x1981c8(0xbc2)][_0x1981c8(0x78e)](/<JS TARGETS>/i);},Game_Action[_0xf2f935(0x2dc)]['isBattleCoreTargetScope']=function(){const _0x32ed69=_0xf2f935;if(!this[_0x32ed69(0x81e)]&&this[_0x32ed69(0x271)]()[_0x32ed69(0x6ae)]())return![];if(this[_0x32ed69(0x924)]())return!![];return typeof this[_0x32ed69(0x5b0)]()['scope']===_0x32ed69(0x4ca);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xbca)]=Game_Action[_0xf2f935(0x2dc)]['isForOpponent'],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x6a0)]=function(){const _0x438c23=_0xf2f935;return this[_0x438c23(0x51f)]()&&!this[_0x438c23(0x924)]()?this['isForOpponentBattleCore']():VisuMZ['BattleCore']['Game_Action_isForOpponent'][_0x438c23(0x86d)](this);},Game_Action['prototype'][_0xf2f935(0x7a7)]=function(){const _0x4c41a9=_0xf2f935,_0x1b3f78=this[_0x4c41a9(0x5b0)]()['scope'];return _0x1b3f78[_0x4c41a9(0x78e)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0xf2f935(0x886)]['Game_Action_isForFriend']=Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x40a)],Game_Action['prototype'][_0xf2f935(0x40a)]=function(){const _0x55da9b=_0xf2f935;if(this[_0x55da9b(0x51f)]()&&!this[_0x55da9b(0x924)]()){if(_0x55da9b(0x8c1)!=='aElWx')return this[_0x55da9b(0x400)]();else{function _0x25e891(){const _0x2e566b=_0x55da9b;_0x5e6edb[_0x2e566b(0x886)][_0x2e566b(0x650)][_0x2e566b(0x6b5)][_0x2e566b(0x4a2)]&&this[_0x2e566b(0x362)](),_0x129b32[_0x2e566b(0x886)]['Sprite_Enemy_createStateIconSprite']['call'](this);}}}else return VisuMZ[_0x55da9b(0x886)]['Game_Action_isForFriend'][_0x55da9b(0x86d)](this);},Game_Action['prototype'][_0xf2f935(0x400)]=function(){const _0xcfea44=_0xf2f935,_0x4b369f=this[_0xcfea44(0x5b0)]()[_0xcfea44(0xa25)];return _0x4b369f[_0xcfea44(0x78e)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x961)]=Game_Action['prototype']['isForRandom'],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x7ed)]=function(){const _0x47b1d0=_0xf2f935;if(this[_0x47b1d0(0x51f)]()&&!this[_0x47b1d0(0x924)]())return this[_0x47b1d0(0x4cf)]();else{if(_0x47b1d0(0x59f)!=='UXCIU'){function _0x24b5de(){const _0x1b0d5c=_0x47b1d0;this[_0x1b0d5c(0x315)](_0x1b0d5c(0x4d4));}}else return VisuMZ[_0x47b1d0(0x886)][_0x47b1d0(0x961)][_0x47b1d0(0x86d)](this);}},Game_Action['prototype'][_0xf2f935(0x4cf)]=function(){const _0x25eb3e=_0xf2f935,_0x199d1f=this[_0x25eb3e(0x5b0)]()[_0x25eb3e(0xa25)];return _0x199d1f[_0x25eb3e(0x78e)](/(?:RAND|RANDOM)/i);},VisuMZ[_0xf2f935(0x886)]['Game_Action_needsSelection']=Game_Action['prototype'][_0xf2f935(0xb21)],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0xb21)]=function(){const _0x346cf6=_0xf2f935;if(this[_0x346cf6(0x51f)]()&&!this[_0x346cf6(0x924)]()){if(_0x346cf6(0xb00)!==_0x346cf6(0xb00)){function _0x46ac0b(){const _0x1c8492=_0x346cf6;this[_0x1c8492(0x3ff)]=_0x1c1a59,this[_0x1c8492(0x69f)]='';const _0x540f71=new _0x4bf5cf(0x0,0x0,_0x59cce2[_0x1c8492(0x760)],this[_0x1c8492(0xbd6)]()*0x4);_0x587e36[_0x1c8492(0x2dc)]['initialize'][_0x1c8492(0x86d)](this,_0x540f71),this[_0x1c8492(0x884)](0x2),this[_0x1c8492(0x51b)]=0x0;}}else return this[_0x346cf6(0x33e)]();}else return VisuMZ[_0x346cf6(0x886)][_0x346cf6(0x3ec)]['call'](this);},Game_Action['prototype'][_0xf2f935(0x33e)]=function(){const _0x2a50fa=_0xf2f935,_0x1d3465=this[_0x2a50fa(0x5b0)]()['scope'];if(_0x1d3465['match'](/RANDOM/i))return![];if(_0x1d3465[_0x2a50fa(0x78e)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x1d3465['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x2a50fa(0x3ec)][_0x2a50fa(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x2dd)]=Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x231)],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x231)]=function(){const _0x58ae2f=_0xf2f935;let _0x310508=[];if(this[_0x58ae2f(0x51f)]()){if(_0x58ae2f(0x5cd)===_0x58ae2f(0xaac)){function _0x57ad13(){const _0x5bd1ff=_0x58ae2f;_0x21fe63[_0x5bd1ff(0x5b0)]()[_0x5bd1ff(0xb5e)][_0x5bd1ff(0x74f)]>0x0?this[_0x5bd1ff(0x387)]():this[_0x5bd1ff(0x700)](_0x5bd1ff(0xb76));}}else _0x310508=this[_0x58ae2f(0x93c)]();}else _0x310508=VisuMZ[_0x58ae2f(0x886)][_0x58ae2f(0x2dd)][_0x58ae2f(0x86d)](this);return _0x310508=this[_0x58ae2f(0xb28)](_0x310508),_0x310508;},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x93c)]=function(){const _0x36f75c=_0xf2f935;let _0x35d4e6=[];const _0x21ecf9=String(this['item']()['scope']),_0x30c17e=VisuMZ[_0x36f75c(0x886)][_0x36f75c(0x3c0)](this[_0x36f75c(0x5b0)](),'Targets');if(VisuMZ[_0x36f75c(0x886)]['JS'][_0x30c17e]){if(_0x36f75c(0x608)===_0x36f75c(0x63a)){function _0x112b44(){_0x516b09['setImmortal'](![]);}}else{_0x35d4e6=VisuMZ[_0x36f75c(0x886)][_0x36f75c(0x2dd)]['call'](this);const _0x1d6b08=VisuMZ['BattleCore'][_0x36f75c(0x3c0)](this[_0x36f75c(0x5b0)](),_0x36f75c(0x750));return _0x35d4e6=VisuMZ['BattleCore']['JS'][_0x1d6b08]['call'](this,this[_0x36f75c(0x271)](),_0x35d4e6),this[_0x36f75c(0x220)](_0x35d4e6);}}if(_0x21ecf9['match'](/(\d+) RANDOM ANY/i)){let _0x3cc7a7=Number(RegExp['$1']);while(_0x3cc7a7--){const _0xaeb728=Math[_0x36f75c(0x631)](0x2)===0x0?this['opponentsUnit']():this['friendsUnit']();_0x35d4e6[_0x36f75c(0x580)](_0xaeb728[_0x36f75c(0x997)]());}return this[_0x36f75c(0x220)](_0x35d4e6);}if(_0x21ecf9[_0x36f75c(0x78e)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x36f75c(0x7c6)===_0x36f75c(0xa59)){function _0x3a8b91(){const _0x2753cd=_0x36f75c;_0x45f58c['prototype'][_0x2753cd(0x3cc)][_0x2753cd(0x86d)](this);if(!_0x68d043['isSideView']())this['refresh']();}}else{let _0x10d0d9=Number(RegExp['$1']);while(_0x10d0d9--){_0x35d4e6[_0x36f75c(0x580)](this[_0x36f75c(0x8c5)]()[_0x36f75c(0x997)]());}return this[_0x36f75c(0x220)](_0x35d4e6);}}if(_0x21ecf9['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x36f75c(0x9dd)==='RAtdS'){function _0x37a9b4(){const _0x3d022f=_0x4e9fd2(_0x29b19f['$1'])['trim'](),_0x80dd5a=_0x13bce8(_0x164bb6['$2']);_0x23fdfa[_0x3d022f]=_0x80dd5a,_0x2898aa+=_0x80dd5a;}}else{let _0x22c81f=Number(RegExp['$1']);while(_0x22c81f--){if('atfoQ'===_0x36f75c(0x8f3))_0x35d4e6[_0x36f75c(0x580)](this['friendsUnit']()[_0x36f75c(0x997)]());else{function _0x36d5b9(){const _0x4a073d=_0x36f75c;this[_0x4a073d(0x2c3)]();}}}return this['repeatTargets'](_0x35d4e6);}}if(_0x21ecf9[_0x36f75c(0x78e)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x36f75c(0xbb0)===_0x36f75c(0xbb0))return _0x35d4e6[_0x36f75c(0x580)](...this[_0x36f75c(0x684)]()[_0x36f75c(0x4ae)]()[_0x36f75c(0xba4)](_0x421c6f=>_0x421c6f!==this['subject']())),this['repeatTargets'](_0x35d4e6);else{function _0x2ed16e(){const _0x13fdf4=_0x36f75c;return this[_0x13fdf4(0x51f)]()&&!this[_0x13fdf4(0x924)]()?this['isForRandomBattleCore']():_0x4d6401[_0x13fdf4(0x886)][_0x13fdf4(0x961)][_0x13fdf4(0x86d)](this);}}}return VisuMZ[_0x36f75c(0x886)][_0x36f75c(0x2dd)][_0x36f75c(0x86d)](this);},Game_Action['prototype'][_0xf2f935(0x808)]=function(_0x7475dc){const _0x4c000f=_0xf2f935,_0x1faf21=[];for(let _0x5de388=0x0;_0x5de388<this[_0x4c000f(0x6d2)]();_0x5de388++){_0x1faf21[_0x4c000f(0x580)](_0x7475dc[_0x4c000f(0x997)]());}return _0x1faf21;},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0xb28)]=function(_0x1a7017){const _0x4f1970=_0xf2f935;if(!this['item']())return _0x1a7017;const _0x2ccf98=this[_0x4f1970(0x5b0)]()[_0x4f1970(0xbc2)];return _0x2ccf98[_0x4f1970(0x78e)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x1a7017['remove'](this[_0x4f1970(0x271)]()),_0x1a7017;},VisuMZ['BattleCore'][_0xf2f935(0x89c)]=Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x22c)],Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x22c)]=function(_0x1f8122,_0x25a30d){const _0x14e205=_0xf2f935,_0x54ad07=_0x1f8122[_0x14e205(0x6c6)]();if(this[_0x14e205(0x271)]()[_0x14e205(0x4ab)]()[_0x14e205(0x7fe)](_0x1f8122['deathStateId']())){if(_0x14e205(0x990)==='KehhE'){function _0x2a369b(){const _0x3b95e4=_0x14e205;this[_0x3b95e4(0x84b)]();}}else _0x1f8122[_0x14e205(0xaf6)](![]);}VisuMZ['BattleCore'][_0x14e205(0x89c)][_0x14e205(0x86d)](this,_0x1f8122,_0x25a30d),_0x1f8122['setImmortal'](_0x54ad07);},VisuMZ[_0xf2f935(0x886)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x6a5)],Game_Action['prototype'][_0xf2f935(0x6a5)]=function(_0x254b9e,_0x4949ce){const _0x5460a6=_0xf2f935,_0x3fbe23=_0x254b9e[_0x5460a6(0x6c6)]();_0x4949ce[_0x5460a6(0x795)]===_0x254b9e[_0x5460a6(0x498)]()&&_0x254b9e[_0x5460a6(0xaf6)](![]),VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState'][_0x5460a6(0x86d)](this,_0x254b9e,_0x4949ce),_0x254b9e[_0x5460a6(0xaf6)](_0x3fbe23);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x3aa)]=Game_Action[_0xf2f935(0x2dc)]['applyGlobal'],Game_Action[_0xf2f935(0x2dc)]['applyGlobal']=function(){const _0x27f183=_0xf2f935;VisuMZ[_0x27f183(0x886)][_0x27f183(0x3aa)][_0x27f183(0x86d)](this),this['applyGlobalCommonEventNotetags'](),this['resetResultSwitches']();},Game_Action[_0xf2f935(0x2dc)]['applyGlobalCommonEventNotetags']=function(){const _0x46b526=_0xf2f935;if(!SceneManager['isSceneBattle']())return;const _0xa169ef=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x446470=this['item']()[_0x46b526(0xbc2)][_0x46b526(0x78e)](_0xa169ef);if(_0x446470){if(_0x46b526(0x59c)!==_0x46b526(0x59c)){function _0x967e4a(){const _0x5ba450=_0x46b526;this['isTpb']()?this[_0x5ba450(0x2c3)]():_0x5c3acd['BattleCore'][_0x5ba450(0x501)][_0x5ba450(0x86d)](this);}}else for(const _0x4e061d of _0x446470){if(!_0x4e061d)continue;_0x4e061d['match'](_0xa169ef);const _0x591b34=String(RegExp['$1'])[_0x46b526(0x774)](',')['map'](_0x2ea53d=>String(_0x2ea53d)[_0x46b526(0x669)]()),_0xbc8ac8=_0x591b34['map'](_0x4a6044=>DataManager[_0x46b526(0xb98)](_0x4a6044));for(const _0x18999c of _0xbc8ac8){const _0x36eaf9=$dataCommonEvents[_0x18999c];if(_0x36eaf9){if(_0x46b526(0x212)==='rWsVO'){function _0xaf8deb(){const _0x5a22b4=_0x4818b6(_0xf2f909['$1']);return[_0x2ebdfe['members']()[_0x5a22b4]];}}else $gameTemp[_0x46b526(0x815)](_0x18999c);}}}}},DataManager[_0xf2f935(0xb98)]=function(_0x22da9a){const _0x57b2c5=_0xf2f935;_0x22da9a=_0x22da9a[_0x57b2c5(0xa2e)]()[_0x57b2c5(0x669)](),this[_0x57b2c5(0x3b0)]=this['_commonEventIDs']||{};if(this['_commonEventIDs'][_0x22da9a])return this[_0x57b2c5(0x3b0)][_0x22da9a];for(const _0x586da5 of $dataCommonEvents){if(!_0x586da5)continue;let _0x22ce97=_0x586da5[_0x57b2c5(0x222)];_0x22ce97=_0x22ce97[_0x57b2c5(0x87e)](/\x1I\[(\d+)\]/gi,''),_0x22ce97=_0x22ce97['replace'](/\\I\[(\d+)\]/gi,''),this[_0x57b2c5(0x3b0)][_0x22ce97[_0x57b2c5(0xa2e)]()[_0x57b2c5(0x669)]()]=_0x586da5['id'];}return this[_0x57b2c5(0x3b0)][_0x22da9a]||0x0;},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x5d0)]=function(){const _0x48d854=_0xf2f935;if(!SceneManager[_0x48d854(0x731)]())return;const _0x3921b9=VisuMZ[_0x48d854(0x886)][_0x48d854(0x650)]['Mechanics'];_0x3921b9['SwitchCritical']&&$gameSwitches[_0x48d854(0xa01)](_0x3921b9[_0x48d854(0x563)],![]);_0x3921b9[_0x48d854(0x1eb)]&&$gameSwitches[_0x48d854(0xa01)](_0x3921b9[_0x48d854(0x1eb)],![]);_0x3921b9['VariableDmg']&&$gameVariables[_0x48d854(0xa01)](_0x3921b9[_0x48d854(0x83c)],0x0);if(_0x3921b9[_0x48d854(0x794)]){if(_0x48d854(0x264)==='DrtNH'){function _0x47e74a(){const _0x3e13d5=_0x48d854;if(!_0x82886)return![];if(!_0x2b839a[_0x3e13d5(0x76c)])return![];if(_0x59ea57[_0x3e13d5(0x76c)][_0x3e13d5(0x83e)]!==0x0)return![];if(!_0x4029bd[_0x3e13d5(0x6b7)][0x0])return![];if(!_0x5c4f72[_0x3e13d5(0x6b7)][0x0]['isActor']())return![];if(_0x4aeb07[_0x3e13d5(0x649)]())return![];if(!this[_0x3e13d5(0x234)]())return![];return _0x401dae[_0x3e13d5(0x2dc)]['battleLayoutStyle']()==='portrait';}}else $gameVariables[_0x48d854(0xa01)](_0x3921b9[_0x48d854(0x794)],0x0);}},Game_Action[_0xf2f935(0x2dc)][_0xf2f935(0x8a3)]=function(_0x41befe){const _0x19d539=_0xf2f935;if(!SceneManager['isSceneBattle']())return;if(!_0x41befe)return;const _0x3559d5=_0x41befe[_0x19d539(0x893)](),_0x1382a8=VisuMZ[_0x19d539(0x886)][_0x19d539(0x650)][_0x19d539(0x43b)];if(_0x1382a8[_0x19d539(0x563)]&&_0x3559d5[_0x19d539(0x569)]){if('hQmIX'!==_0x19d539(0x302))$gameSwitches[_0x19d539(0xa01)](_0x1382a8[_0x19d539(0x563)],!![]);else{function _0x414d3c(){const _0x537fe2=_0x19d539;if(_0x24f796['note'][_0x537fe2(0x78e)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x72a8ae=_0x417fb9(_0x310743['$1'])['split'](/[\r\n]+/)[_0x537fe2(0xbb8)](''),_0x57a124=this[_0x537fe2(0x648)](_0x72a8ae);_0x518df2=this[_0x537fe2(0x80a)](_0x57a124)||_0x38cb0e,_0x2b7e5e=_0x568a7f['swapEnemyIDs'](_0x49a580);}}}}if(_0x1382a8['SwitchMissEvade']&&(_0x3559d5['missed']||_0x3559d5[_0x19d539(0x443)])){if('uJsXO'!==_0x19d539(0x83a)){function _0x3714ac(){const _0xeac83b=_0x19d539;this[_0xeac83b(0xb4a)]=![],this['refresh'](),this[_0xeac83b(0x89a)]();}}else $gameSwitches[_0x19d539(0xa01)](_0x1382a8['SwitchMissEvade'],!![]);}if(_0x1382a8[_0x19d539(0x83c)]){let _0x10a0fe=$gameVariables[_0x19d539(0x99b)](_0x1382a8[_0x19d539(0x83c)]);_0x3559d5['hpDamage']>0x0&&(_0x10a0fe+=Math['abs'](_0x3559d5[_0x19d539(0xa1f)])),$gameVariables[_0x19d539(0xa01)](_0x1382a8[_0x19d539(0x83c)],_0x10a0fe);}if(_0x1382a8['VariableHeal']){let _0x384301=$gameVariables[_0x19d539(0x99b)](_0x1382a8[_0x19d539(0x794)]);_0x3559d5['hpDamage']<0x0&&(_0x384301+=Math[_0x19d539(0x824)](_0x3559d5[_0x19d539(0xa1f)])),$gameVariables[_0x19d539(0xa01)](_0x1382a8[_0x19d539(0x794)],_0x384301);}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x917)]=Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x2a3)],Game_BattlerBase[_0xf2f935(0x2dc)]['initMembers']=function(){VisuMZ['BattleCore']['Game_BattlerBase_initMembers']['call'](this),this['initMembersBattleCore']();},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x76a)]=function(){const _0x3d7ede=_0xf2f935;this[_0x3d7ede(0x360)]=![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x2a1)]=Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x57c)],Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x57c)]=function(){const _0x3ff1df=_0xf2f935;this[_0x3ff1df(0x9db)]={},VisuMZ[_0x3ff1df(0x886)][_0x3ff1df(0x2a1)]['call'](this);},Game_BattlerBase['prototype']['checkCacheKey']=function(_0x32575d){return this['_cache']=this['_cache']||{},this['_cache'][_0x32575d]!==undefined;},Game_BattlerBase[_0xf2f935(0x2dc)]['hardDamageCap']=function(){const _0x3c7134=_0xf2f935;if(this[_0x3c7134(0x9db)][_0x3c7134(0x94c)]!==undefined)return this['_cache'][_0x3c7134(0x94c)];const _0x349b9b=/<DAMAGE CAP:[ ](\d+)>/i,_0x501574=this[_0x3c7134(0x6f7)]()[_0x3c7134(0x2ab)](_0x3d71a7=>_0x3d71a7&&_0x3d71a7['note'][_0x3c7134(0x78e)](_0x349b9b)?Number(RegExp['$1']):0x0);let _0x160171=_0x501574[_0x3c7134(0x342)]>0x0?Math[_0x3c7134(0x205)](..._0x501574):0x0;if(_0x160171<=0x0)_0x160171=VisuMZ[_0x3c7134(0x886)][_0x3c7134(0x650)][_0x3c7134(0xb17)][_0x3c7134(0x1d8)];return this['_cache'][_0x3c7134(0x94c)]=_0x160171,this[_0x3c7134(0x9db)][_0x3c7134(0x94c)];},Game_BattlerBase[_0xf2f935(0x2dc)]['softDamageCapRate']=function(){const _0x1436e8=_0xf2f935;if(this[_0x1436e8(0x9db)][_0x1436e8(0x2f9)]!==undefined)return this[_0x1436e8(0x9db)][_0x1436e8(0x2f9)];let _0x4d06cf=VisuMZ['BattleCore'][_0x1436e8(0x650)]['Damage'][_0x1436e8(0x2fd)];const _0x55057f=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x202850=this[_0x1436e8(0x6f7)]()['map'](_0x58d1cd=>_0x58d1cd&&_0x58d1cd[_0x1436e8(0xbc2)]['match'](_0x55057f)?Number(RegExp['$1'])/0x64:0x0);return _0x4d06cf=_0x202850[_0x1436e8(0xbdb)]((_0x1fcbc5,_0xe3927f)=>_0x1fcbc5+_0xe3927f,_0x4d06cf),this['_cache'][_0x1436e8(0x2f9)]=_0x4d06cf,this[_0x1436e8(0x9db)][_0x1436e8(0x2f9)][_0x1436e8(0xaba)](0.01,0x1);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x2f0)]=Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x20c)],Game_BattlerBase['prototype'][_0xf2f935(0x20c)]=function(){const _0x419b35=_0xf2f935;VisuMZ['BattleCore'][_0x419b35(0x2f0)][_0x419b35(0x86d)](this),SceneManager[_0x419b35(0x731)]()&&this[_0x419b35(0x700)](_0x419b35(0x7a2));},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x310)]=function(){const _0x52303f=_0xf2f935;if(!SceneManager[_0x52303f(0x731)]())return null;if(!SceneManager[_0x52303f(0xb95)][_0x52303f(0x2c7)])return null;return SceneManager[_0x52303f(0xb95)][_0x52303f(0x2c7)][_0x52303f(0x63e)](this);},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0xa97)]=function(){const _0x348888=_0xf2f935;return VisuMZ[_0x348888(0x886)][_0x348888(0x650)]['Actor']['AnchorX'];},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x7db)]=function(){const _0x1ff27e=_0xf2f935;return VisuMZ[_0x1ff27e(0x886)][_0x1ff27e(0x650)][_0x1ff27e(0x5df)][_0x1ff27e(0xb86)];},Game_BattlerBase['prototype'][_0xf2f935(0x31c)]=function(){const _0x5aa5da=_0xf2f935;if(this[_0x5aa5da(0x8bc)]&&this[_0x5aa5da(0x8bc)]())return VisuMZ[_0x5aa5da(0x886)][_0x5aa5da(0x650)][_0x5aa5da(0x5df)][_0x5aa5da(0xae0)];else{if('WdTGO'===_0x5aa5da(0x835)){function _0x252ca1(){const _0x2d571a=_0x5aa5da,_0xad2352=this[_0x2d571a(0x4e8)]();this[_0x2d571a(0x8c4)](_0xad2352);}}else return VisuMZ[_0x5aa5da(0x886)][_0x5aa5da(0x650)][_0x5aa5da(0x9e1)][_0x5aa5da(0xae0)];}},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x7bf)]=function(){return!![];},Game_BattlerBase[_0xf2f935(0x2dc)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0xf2f935(0x2dc)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x269)]=function(_0x4aeef5){const _0x461aad=_0xf2f935;if(!_0x4aeef5)return 0x0;let _0x1fb1b4=0x0;const _0x5a204b=_0x4aeef5[_0x461aad(0xbc2)];if(_0x5a204b[_0x461aad(0x78e)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x461aad(0x5ff)!==_0x461aad(0x4da))_0x1fb1b4+=Number(RegExp['$1']);else{function _0x4d47a4(){const _0x3b9273=_0x461aad;if(!_0x4ec5f0[_0x3b9273(0x649)]())return;if(this[_0x3b9273(0x590)])return;this[_0x3b9273(0x590)]=!![];const _0x5ee3b9=this[_0x3b9273(0x310)]();if(_0x5ee3b9)_0x5ee3b9[_0x3b9273(0x265)]();}}}return _0x5a204b['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1fb1b4+=Number(RegExp['$1'])),_0x1fb1b4;},Game_BattlerBase['prototype'][_0xf2f935(0xa56)]=function(_0x5bd7b6){const _0x574071=_0xf2f935;if(!_0x5bd7b6)return 0x0;let _0x2fa31d=0x0;const _0x5410e0=_0x5bd7b6[_0x574071(0xbc2)];if(_0x5410e0[_0x574071(0x78e)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if('ZqcVz'===_0x574071(0xab8))_0x2fa31d+=Number(RegExp['$1']);else{function _0x41159e(){const _0x13d9c5=_0x574071,_0x411e01=this[_0x13d9c5(0x658)]();if(['xp'][_0x13d9c5(0x7fe)](_0x411e01)&&!_0x15873e[_0x13d9c5(0x649)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}_0x5b08f6['prototype'][_0x13d9c5(0x522)][_0x13d9c5(0x86d)](this);}}}if(_0x5410e0[_0x574071(0x78e)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x574071(0x588)!==_0x574071(0x588)){function _0x3dca31(){const _0x429186=_0x574071;if(!_0x355c7f['isSceneBattle']())return;const _0x37b47a=_0x150df5[_0x429186(0x3a3)];_0x37b47a[_0x429186(0xb40)]();}}else _0x2fa31d+=Number(RegExp['$2']);}return _0x2fa31d;},VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']=Game_BattlerBase['prototype'][_0xf2f935(0x7fa)],Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x7fa)]=function(_0x176f22){const _0x58e090=_0xf2f935;if(_0x176f22===this[_0x58e090(0x498)]()&&this[_0x58e090(0x6c6)]()){if(_0x58e090(0x53c)!==_0x58e090(0x53c)){function _0x58e927(){const _0x5ee3a6=_0x58e090;if(!_0x52b766['isSceneBattle']())return;_0x30f4d8[_0x5ee3a6(0xbda)](_0x2d1a9e,_0x31dacb);const _0x385fc8=_0x1c4e49[_0x5ee3a6(0x371)],_0x4f208e={'criticalHitRate':_0x5bce07[_0x5ee3a6(0xa72)],'criticalHitFlat':_0x4d351c['CriticalHitFlat'],'criticalDmgRate':_0x16ea23[_0x5ee3a6(0x534)],'criticalDmgFlat':_0x44f9d1['CriticalDmgFlat'],'damageRate':_0x557575[_0x5ee3a6(0xb2a)],'damageFlat':_0x10e79f[_0x5ee3a6(0x59a)],'hitRate':_0x493323[_0x5ee3a6(0x6b9)],'hitFlat':_0x183a68[_0x5ee3a6(0x985)]};_0x385fc8[_0x5ee3a6(0x8c3)]=_0x4f208e;}}else return!![];}return VisuMZ[_0x58e090(0x886)][_0x58e090(0x7dc)][_0x58e090(0x86d)](this,_0x176f22);},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x6c6)]=function(){return this['_immortal'];},Game_BattlerBase[_0xf2f935(0x2dc)]['setImmortal']=function(_0x36031e){const _0x563e74=_0xf2f935;if(_0x36031e){if('wiVqK'!=='wiVqK'){function _0x419a1f(){const _0x3ea6ca=_0x33da;if(!this[_0x3ea6ca(0x45b)]['isSpriteVisible']())return;const _0x5d8af6=_0x17128f[_0x3ea6ca(0x886)]['Settings'][_0x3ea6ca(0xb17)],_0x18f168=new _0x1ba8bb();_0x18f168[_0x3ea6ca(0x7c4)]=_0x5d8af6[_0x3ea6ca(0x640)],this[_0x3ea6ca(0xa06)](_0x18f168),_0x18f168[_0x3ea6ca(0x353)](_0x24108d,_0x24718e),this[_0x3ea6ca(0xa6a)](_0x18f168);}}else this[_0x563e74(0x955)]();}else this[_0x563e74(0x6e3)]();},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x955)]=function(){const _0x1a876e=_0xf2f935;if(this[_0x1a876e(0xb18)]())return;this['_immortal']=!![];},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x6e3)]=function(){const _0x2ecfa2=_0xf2f935,_0x35e905=this[_0x2ecfa2(0x33d)]();this[_0x2ecfa2(0x360)]=![],this[_0x2ecfa2(0x57c)]();if(this[_0x2ecfa2(0xb18)]()&&_0x35e905){if(_0x2ecfa2(0x85f)===_0x2ecfa2(0x8ea)){function _0x5a8ade(){const _0x53edc8=_0x2ecfa2;_0x3c00b6[_0x53edc8(0x886)][_0x53edc8(0x575)]['call'](this),this['updateShadowVisibility']();}}else this[_0x2ecfa2(0x9ca)](),this['requestMotionRefresh']();}},VisuMZ['BattleCore'][_0xf2f935(0xb02)]=Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x30b)],Game_BattlerBase['prototype'][_0xf2f935(0x30b)]=function(){const _0x5a7192=_0xf2f935;if(!this[_0x5a7192(0x1e8)]())return![];return VisuMZ['BattleCore'][_0x5a7192(0xb02)][_0x5a7192(0x86d)](this);},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x1e8)]=function(){const _0x37c2a5=_0xf2f935;for(const _0x1da891 of this[_0x37c2a5(0x6f7)]()){if(_0x37c2a5(0x395)==='vTLfv'){function _0x25407b(){const _0x313588=_0x37c2a5;this[_0x313588(0x43c)]('PreApply%1JS',_0x1339c9,0x0,!![]),_0x2cf7d1['BattleCore'][_0x313588(0x46e)][_0x313588(0x86d)](this,_0x3d8aa5),this[_0x313588(0x43c)]('PostApply%1JS',_0x42dc11,this[_0x313588(0x72a)]||0x0,!![]),this[_0x313588(0x8a3)](_0x5a485c);}}else{if(!_0x1da891)continue;if(_0x1da891[_0x37c2a5(0xbc2)][_0x37c2a5(0x78e)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ['BattleCore'][_0xf2f935(0x58a)]=Game_BattlerBase['prototype'][_0xf2f935(0x5bf)],Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0x5bf)]=function(){const _0x3d76e1=_0xf2f935;if(!this[_0x3d76e1(0x3a7)]())return![];return VisuMZ[_0x3d76e1(0x886)][_0x3d76e1(0x58a)]['call'](this);},Game_BattlerBase['prototype']['canGuardBattleCore']=function(){const _0x54d3c5=_0xf2f935;for(const _0x451501 of this[_0x54d3c5(0x6f7)]()){if('mqeRQ'===_0x54d3c5(0x7c1)){function _0x4184e6(){const _0x455c75=_0x54d3c5;_0x17a64f[_0x455c75(0x5a1)][_0x455c75(0x291)]('inputting');}}else{if(!_0x451501)continue;if(_0x451501['note'][_0x54d3c5(0x78e)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase['prototype'][_0xf2f935(0x517)]=function(){const _0x30a012=_0xf2f935;for(const _0x2db627 of this['traitObjects']()){if('XMAIJ'!==_0x30a012(0x40c)){if(!_0x2db627)continue;if(_0x2db627['note']['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}else{function _0x16ea0e(){const _0xfd8d62=_0x30a012,_0x5f5bb9=_0x1787f6(_0x58b04f['$1'])['split'](/[\r\n]+/)[_0xfd8d62(0xbb8)]('');_0x3af813[_0xfd8d62(0x222)]=_0x5e4076[_0xfd8d62(0x648)](_0x5f5bb9);}}}return!![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x3e4)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5c6)],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5c6)]=function(){const _0xb51a42=_0xf2f935;if(SceneManager[_0xb51a42(0x731)]()&&$gameTroop[_0xb51a42(0xb29)]()<=0x0)return;if(SceneManager[_0xb51a42(0x731)]()&&BattleManager['isTpb']()&&this[_0xb51a42(0x76b)]===Graphics[_0xb51a42(0x642)])return;this[_0xb51a42(0x76b)]=Graphics[_0xb51a42(0x642)],this[_0xb51a42(0xb99)](_0xb51a42(0x7b7)),VisuMZ['BattleCore']['Game_Battler_regenerateAll'][_0xb51a42(0x86d)](this),this['regenerateAllBattleCore'](),this[_0xb51a42(0xb99)](_0xb51a42(0x2c5));},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa2d)]=function(){const _0x583b7c=_0xf2f935;if(SceneManager[_0x583b7c(0x731)]()){if(_0x583b7c(0x7a3)===_0x583b7c(0x7a3))for(const _0x1f2aba of this[_0x583b7c(0x6f7)]()){if(_0x583b7c(0x484)===_0x583b7c(0x484)){if(!_0x1f2aba)continue;this['onRegeneratePlayStateAnimation'](_0x1f2aba);}else{function _0x32a9e8(){const _0x407409=_0x583b7c;_0x1f67f3[_0x407409(0x250)](this['updateBattlebackBitmap2'][_0x407409(0x6cb)](this,_0x1070c1,_0x2e16b3,_0x5cd62e,_0x23796f));}}}else{function _0x174386(){const _0x2446d3=_0x583b7c;if(!this[_0x2446d3(0x45b)])return 0x0;if(this['_cacheTextWidth'])return this['_cacheTextWidth'];const _0x13e0f4=this[_0x2446d3(0x222)]();return this[_0x2446d3(0xb57)](),this['_cacheTextWidth']=this[_0x2446d3(0x266)]['measureTextWidth'](_0x13e0f4)||0x1,this[_0x2446d3(0x973)];}}}},Game_Battler[_0xf2f935(0x2dc)]['onRegeneratePlayStateAnimation']=function(_0x44d661){const _0x237f56=_0xf2f935;if(!Imported[_0x237f56(0x758)])return;if(!SceneManager[_0x237f56(0x731)]())return;if(this[_0x237f56(0xb18)]())return;if(this[_0x237f56(0x49e)]())return;if(_0x44d661[_0x237f56(0xbc2)][_0x237f56(0x78e)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x2ad6aa=Number(RegExp['$1']);$gameTemp[_0x237f56(0xbdc)]([this],_0x2ad6aa,![],![]);}},VisuMZ[_0xf2f935(0x886)]['Game_Battler_startTpbTurn']=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x49a)],Game_Battler['prototype'][_0xf2f935(0x49a)]=function(){const _0x4ada2a=_0xf2f935;this[_0x4ada2a(0xb99)]('PreStartTurnJS'),VisuMZ[_0x4ada2a(0x886)][_0x4ada2a(0x447)][_0x4ada2a(0x86d)](this),this[_0x4ada2a(0xb99)]('PostStartTurnJS');},VisuMZ[_0xf2f935(0x886)]['Game_Battler_onTurnEnd']=Game_Battler[_0xf2f935(0x2dc)]['onTurnEnd'],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb87)]=function(){const _0x4e5152=_0xf2f935;this[_0x4e5152(0xb99)](_0x4e5152(0x295)),VisuMZ[_0x4e5152(0x886)][_0x4e5152(0xab5)][_0x4e5152(0x86d)](this),this[_0x4e5152(0xb99)](_0x4e5152(0x9a9));},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb99)]=function(_0x2e8244){const _0x5e9df5=_0xf2f935;if(this[_0x5e9df5(0x90c)]||this[_0x5e9df5(0x673)])return;const _0x39a1d9=VisuMZ[_0x5e9df5(0x886)][_0x5e9df5(0x650)]['Mechanics'];if(_0x39a1d9[_0x2e8244])_0x39a1d9[_0x2e8244][_0x5e9df5(0x86d)](this);for(const _0x3c4e7d of this[_0x5e9df5(0x6f7)]()){if(!_0x3c4e7d)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x3c4e7d,_0x2e8244),VisuMZ[_0x5e9df5(0x886)]['JS'][key]&&VisuMZ[_0x5e9df5(0x886)]['JS'][key][_0x5e9df5(0x86d)](this,this,this,_0x3c4e7d,0x0);}},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x880)]=function(){const _0x24c88f=_0xf2f935;return VisuMZ[_0x24c88f(0x886)][_0x24c88f(0x650)][_0x24c88f(0x5df)][_0x24c88f(0x7ba)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0x4e102e=_0xf2f935;if(this[_0x4e102e(0x6de)]()){if(this[_0x4e102e(0x880)]()){if(this['_actions']['some'](_0x85dcb5=>_0x85dcb5[_0x4e102e(0x5b0)]()&&_0x85dcb5[_0x4e102e(0x6df)]())){if(_0x4e102e(0x2ec)===_0x4e102e(0x9bd)){function _0x62ada1(){const _0x3e39c7=_0x4e102e;_0x3667c9['BattleCore']['Scene_Battle_createCancelButton'][_0x3e39c7(0x86d)](this),this[_0x3e39c7(0x658)]()===_0x3e39c7(0xacf)&&this[_0x3e39c7(0x4bf)]();}}else return!![];}}else{if(_0x4e102e(0x68f)!=='qdEyu'){function _0x2457bf(){const _0x10348f=_0x4e102e;return this['battlerSprites']()[_0x10348f(0xa60)](_0x53b7fb=>_0x53b7fb[_0x10348f(0x8c6)]());}}else{if(this['_actions'][_0x4e102e(0xa60)](_0x18147b=>_0x18147b[_0x4e102e(0x5b0)]()&&_0x18147b['isMagicSkill']())){if(_0x4e102e(0xb35)==='bAprR'){function _0x4ffd04(){const _0x12fa46=_0x4e102e;_0x48a9a7[_0x12fa46(0x886)][_0x12fa46(0x96e)][_0x12fa46(0x86d)](this,_0x1e3403);}}else return!![];}}}}if(BattleManager['isTpb']()&&this[_0x4e102e(0x7e9)]==='casting'){if(this[_0x4e102e(0x880)]()){if(_0x4e102e(0xb11)!==_0x4e102e(0xaf3))return this['currentAction']()&&this['currentAction']()[_0x4e102e(0x5b0)]()&&this[_0x4e102e(0x50c)]()['isMagical']();else{function _0x12b285(){const _0x496c84=_0x4e102e;if(!_0x477ac4[_0x496c84(0x886)]['Settings']['Damage'][_0x496c84(0x361)])return _0x509720;const _0x278f0f=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x496c84(0x5b0)]()[_0x496c84(0xbc2)][_0x496c84(0x78e)](_0x278f0f))return!![];if(this['subject']()[_0x496c84(0x6f7)]()[_0x496c84(0xa60)](_0x3f264e=>_0x3f264e&&_0x3f264e[_0x496c84(0xbc2)][_0x496c84(0x78e)](_0x278f0f)))return!![];const _0x364939=_0x5358f5<0x0?-0x1:0x1;_0x245955=_0x401f1b[_0x496c84(0x824)](_0x4fa4bd);let _0x10b7e0=this['subject']()[_0x496c84(0xb50)]();this[_0x496c84(0x5b0)]()[_0x496c84(0xbc2)][_0x496c84(0x78e)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x10b7e0+=_0x1acbdd(_0x488814['$1'])/0x64);_0x10b7e0=_0x10b7e0[_0x496c84(0xaba)](0.01,0x1);const _0x6c61ef=this[_0x496c84(0x90b)](),_0x4bc220=_0x10b7e0*_0x6c61ef;if(_0x3adfb2>_0x4bc220&&_0x6c61ef>_0x4bc220){_0xaeaa6c-=_0x4bc220;const _0x5f2854=_0x351930[_0x496c84(0x886)][_0x496c84(0x650)][_0x496c84(0xb17)][_0x496c84(0x519)],_0x5f3263=_0x2b5ebf[_0x496c84(0x205)](0x1-_0x213d00/((_0x6c61ef-_0x4bc220)*_0x5f2854+_0x160ba0),0.01);_0x57050e*=_0x5f3263,_0x34475f+=_0x4bc220;}return _0x45ff11*_0x364939;}}}else return this[_0x4e102e(0x50c)]()&&this[_0x4e102e(0x50c)]()[_0x4e102e(0x5b0)]()&&this[_0x4e102e(0x50c)]()[_0x4e102e(0x86a)]();}return![];},Game_Battler['prototype']['isCharging']=function(){const _0x1ed3d4=_0xf2f935;if(BattleManager['isTpb']()&&this['_tpbState']===_0x1ed3d4(0xab1)){if(_0x1ed3d4(0x82d)===_0x1ed3d4(0xb58)){function _0x4310f8(){const _0x6a25a5=_0x1ed3d4;this[_0x6a25a5(0x4a3)]=_0x6a25a5(0x5d6);}}else{if(this['chantStyle']()){if('CchZU'==='CchZU')return this[_0x1ed3d4(0x50c)]()&&this['currentAction']()[_0x1ed3d4(0x5b0)]()&&!this[_0x1ed3d4(0x50c)]()[_0x1ed3d4(0x6df)]();else{function _0x105601(){const _0x306cb8=_0x1ed3d4;this[_0x306cb8(0x470)]=0x0,this[_0x306cb8(0x91b)]=0x0;}}}else{if(_0x1ed3d4(0x698)==='FCSDZ')return this[_0x1ed3d4(0x50c)]()&&this['currentAction']()[_0x1ed3d4(0x5b0)]()&&!this[_0x1ed3d4(0x50c)]()[_0x1ed3d4(0x86a)]();else{function _0x49d4ac(){const _0x3625cd=_0x1ed3d4;_0x527aed[_0x3625cd(0x886)][_0x3625cd(0x305)][_0x3625cd(0x86d)](this,_0xa1f2a3);if(!_0x5f5719['isGuard']()){const _0x1f059c=this['battler']();_0x1f059c&&_0x1f059c[_0x3625cd(0xaa3)]();}this[_0x3625cd(0x41c)](![]);}}}}}return![];},VisuMZ['BattleCore'][_0xf2f935(0x726)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x96f)],Game_Battler['prototype'][_0xf2f935(0x96f)]=function(){const _0x5d06=_0xf2f935;VisuMZ[_0x5d06(0x886)][_0x5d06(0x726)][_0x5d06(0x86d)](this),this[_0x5d06(0x798)]=[];},Game_Battler['prototype'][_0xf2f935(0x3fe)]=function(){const _0x6f5df4=_0xf2f935;if(!this['_damagePopupArray'])this[_0x6f5df4(0x96f)]();return this[_0x6f5df4(0x798)][_0x6f5df4(0x342)]>0x0;},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x225)]=function(){const _0x1afac2=_0xf2f935;if(!SceneManager[_0x1afac2(0x731)]())return;if(!this[_0x1afac2(0x798)])this['clearDamagePopup']();this[_0x1afac2(0x242)]();const _0x561518=this[_0x1afac2(0x310)]();if(_0x561518)_0x561518[_0x1afac2(0x783)]();},Game_Battler['prototype'][_0xf2f935(0x242)]=function(){const _0xfafd65=_0xf2f935,_0x51834a=this[_0xfafd65(0x893)]();if(_0x51834a[_0xfafd65(0x375)]||_0x51834a['evaded']){if(_0xfafd65(0x6d4)===_0xfafd65(0x6d4)){const _0x512c5d=JsonEx[_0xfafd65(0x4ad)](_0x51834a);_0x512c5d['hpAffected']=![],_0x512c5d[_0xfafd65(0x28a)]=0x0,this['_damagePopupArray'][_0xfafd65(0x580)](_0x512c5d);}else{function _0x2bde70(){const _0x1e3887=_0xfafd65;this['_battlerContainer'][_0x1e3887(0x3d3)][_0x1e3887(0xbdd)](this['compareBattlerSprites'][_0x1e3887(0x6cb)](this)),this[_0x1e3887(0x404)]();}}}if(_0x51834a['hpAffected']){const _0x20e03a=JsonEx[_0xfafd65(0x4ad)](_0x51834a);_0x20e03a[_0xfafd65(0x375)]=![],_0x20e03a[_0xfafd65(0x443)]=![],_0x20e03a[_0xfafd65(0x28a)]=0x0,this['_damagePopupArray'][_0xfafd65(0x580)](_0x20e03a);}if(_0x51834a[_0xfafd65(0x28a)]!==0x0){if(_0xfafd65(0x704)===_0xfafd65(0xa8f)){function _0x12c27e(){const _0x37c3c2=_0xfafd65;return this['_cache']=this[_0x37c3c2(0x9db)]||{},this['_cache'][_0x2d76bd]!==_0x4fa2c5;}}else{const _0x28cd51=JsonEx[_0xfafd65(0x4ad)](_0x51834a);_0x28cd51['missed']=![],_0x28cd51[_0xfafd65(0x443)]=![],_0x28cd51[_0xfafd65(0x276)]=![],this[_0xfafd65(0x798)][_0xfafd65(0x580)](_0x28cd51);}}},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x3e7)]=function(){const _0x71b397=_0xf2f935;if(!this[_0x71b397(0x798)])this['clearDamagePopup']();if(VisuMZ[_0x71b397(0x886)][_0x71b397(0x650)][_0x71b397(0xb17)][_0x71b397(0x78b)]){if('ZieST'===_0x71b397(0x8d6))return this[_0x71b397(0x798)][_0x71b397(0x487)]();else{function _0x55b538(){const _0x1e4493=_0x71b397,_0x5d697b=_0x233f76(_0x593730['$1'])[_0x1e4493(0x774)](/[\r\n]+/)[_0x1e4493(0xbb8)]('');_0x3f9b2f['name']=_0x45a709[_0x1e4493(0x648)](_0x5d697b);}}}else{if('TSwGw'!==_0x71b397(0x941))return this['_damagePopupArray'][_0x71b397(0x909)]();else{function _0x1866d7(){return _0x46b809;}}}},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x353)]=function(_0x3113f5,_0x20b8d6){const _0x3be10f=_0xf2f935;if(!SceneManager[_0x3be10f(0x731)]())return;if(!this[_0x3be10f(0x310)]())return;if(_0x3113f5[_0x3be10f(0x342)]<=0x0)return;_0x20b8d6=_0x20b8d6||{},_0x20b8d6[_0x3be10f(0x568)]=_0x20b8d6[_0x3be10f(0x568)]||_0x3be10f(0xae4),_0x20b8d6['flashColor']=_0x20b8d6[_0x3be10f(0x7d1)]||[0x0,0x0,0x0,0x0],_0x20b8d6['flashDuration']=_0x20b8d6[_0x3be10f(0x43f)]||0x0,this[_0x3be10f(0x310)]()[_0x3be10f(0x353)](_0x3113f5,_0x20b8d6);},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5c7)]=function(_0x31efe0,_0x2cb0e6,_0x178f13){const _0x2603d0=_0xf2f935;if(!SceneManager[_0x2603d0(0x731)]())return;if(!this[_0x2603d0(0x310)]())return;if(_0x2cb0e6[_0x2603d0(0x342)]<=0x0)return;_0x178f13=_0x178f13||{},_0x178f13[_0x2603d0(0x568)]=_0x178f13[_0x2603d0(0x568)]||_0x2603d0(0xae4),_0x178f13[_0x2603d0(0x7d1)]=_0x178f13[_0x2603d0(0x7d1)]||[0x0,0x0,0x0,0x0],_0x178f13[_0x2603d0(0x43f)]=_0x178f13[_0x2603d0(0x43f)]||0x0,this[_0x2603d0(0x310)]()['setupIconTextPopup'](_0x31efe0,_0x2cb0e6,_0x178f13);},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x446)]=function(){const _0x282d3a=_0xf2f935;if(this[_0x282d3a(0x49e)]())return![];if(this['isAlive']()&&this['isAppeared']())return!![];if(this['isEnemy']()&&this['hasSvBattler']()){if(_0x282d3a(0x5fc)!==_0x282d3a(0x46c)){if(this[_0x282d3a(0xb18)]()&&this[_0x282d3a(0x72b)]())return![];}else{function _0x389b2d(){const _0x13f3d6=_0x282d3a;if(!_0x2da8da[_0x13f3d6(0x731)]())return;if(!this[_0x13f3d6(0x310)]())return;if(_0x5b69f0['length']<=0x0)return;_0x4a8312=_0x4d2770||{},_0x2044ac[_0x13f3d6(0x568)]=_0xcafad4[_0x13f3d6(0x568)]||_0x13f3d6(0xae4),_0x392387[_0x13f3d6(0x7d1)]=_0x1a9fa4[_0x13f3d6(0x7d1)]||[0x0,0x0,0x0,0x0],_0xf9222['flashDuration']=_0x324a91[_0x13f3d6(0x43f)]||0x0,this[_0x13f3d6(0x310)]()[_0x13f3d6(0x5c7)](_0x39eed0,_0x4e8813,_0x1e6b08);}}}else{if(this['isDead']()){if(_0x282d3a(0xadd)===_0x282d3a(0x928)){function _0x425e47(){const _0x242cdf=_0x282d3a;return _0x309f9a[_0x242cdf(0xb4d)];}}else return![];}}return!![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x626)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa81)],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa81)]=function(){const _0x517c20=_0xf2f935;VisuMZ[_0x517c20(0x886)][_0x517c20(0x626)][_0x517c20(0x86d)](this),this[_0x517c20(0x5f3)]();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x54d)]=function(){return!![];},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x52a)]=function(){return![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x599)]=Game_Battler['prototype'][_0xf2f935(0x21e)],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x21e)]=function(_0x1057da){const _0x5d9860=_0xf2f935;VisuMZ[_0x5d9860(0x886)]['Game_Battler_onBattleStart'][_0x5d9860(0x86d)](this,_0x1057da),this[_0x5d9860(0x3a8)](_0x1057da);},Game_Battler[_0xf2f935(0x2dc)]['onBattleStartBattleCore']=function(_0x2b14e0){this['setBattlerFlip'](![]);},VisuMZ['BattleCore'][_0xf2f935(0x305)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa8c)],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa8c)]=function(_0x54cb8f){const _0x4d6940=_0xf2f935;VisuMZ[_0x4d6940(0x886)]['Game_Battler_performActionStart'][_0x4d6940(0x86d)](this,_0x54cb8f);if(!_0x54cb8f[_0x4d6940(0x322)]()){const _0x34a200=this[_0x4d6940(0x310)]();_0x34a200&&_0x34a200[_0x4d6940(0xaa3)]();}this[_0x4d6940(0x41c)](![]);},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x248)]=function(){const _0x3ce300=_0xf2f935,_0x4c0127=this[_0x3ce300(0x590)];this[_0x3ce300(0x590)]=![];if(BattleManager[_0x3ce300(0x4cb)]()&&this[_0x3ce300(0x615)]()){if('tlmbe'!==_0x3ce300(0x39c)){function _0x2faa4d(){const _0x365707=_0x3ce300;this[_0x365707(0x6ce)](_0x433d16[_0x365707(0xbc2)]);}}else{const _0x2f4251=this[_0x3ce300(0x310)]();if(_0x2f4251&&_0x4c0127)_0x2f4251[_0x3ce300(0xaa3)]();return;}}const _0x465cfb=this[_0x3ce300(0x310)]();if(_0x465cfb)_0x465cfb[_0x3ce300(0x4ac)]();this['setBattlerFlip'](![]),this[_0x3ce300(0x25a)]();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x508)]=function(_0x5ebadf){const _0x2c9887=_0xf2f935;if(_0x5ebadf[_0x2c9887(0x933)]())this[_0x2c9887(0x387)]();else{if(_0x5ebadf['isGuard']()){if('PpbGQ'===_0x2c9887(0x413)){function _0x1ef55e(){const _0x53fdbb=_0x2c9887;if(_0x5c3c6a[_0x53fdbb(0x2c7)][_0x53fdbb(0x69c)]())return!![];this[_0x53fdbb(0x48a)]='';}}else this[_0x2c9887(0x700)](_0x2c9887(0x7c0));}else{if(_0x5ebadf[_0x2c9887(0x6df)]())this['requestMotion'](_0x2c9887(0x5cc));else{if(_0x5ebadf['isSkill']()){if(_0x2c9887(0x7d3)!==_0x2c9887(0x93b)){if(_0x5ebadf['item']()['damage'][_0x2c9887(0x74f)]>0x0){if(_0x2c9887(0x6cd)!==_0x2c9887(0x39a))this[_0x2c9887(0x387)]();else{function _0x4bd0d6(){const _0x51ebce=_0x2c9887;_0x9598d7[_0x51ebce(0x4ff)]=![];}}}else{if(_0x2c9887(0xaea)===_0x2c9887(0xaea))this[_0x2c9887(0x700)]('skill');else{function _0x993820(){const _0x55163d=_0x2c9887;this[_0x55163d(0xbb6)](_0x3a9627)[_0x55163d(0x78e)](/\\I\[(\d+)\]/i);const _0x3e0fc0=_0x1257b0(_0x2e00b1['$1'])||0x0,_0x15c92c=this['itemLineRect'](_0x17ddff),_0x30a635=_0x15c92c['x']+_0x21de33[_0x55163d(0x7e8)]((_0x15c92c[_0x55163d(0x41b)]-_0x1585f8[_0x55163d(0xba2)])/0x2),_0x52d7c1=_0x15c92c['y']+(_0x15c92c[_0x55163d(0x902)]-_0x374911[_0x55163d(0x570)])/0x2;this[_0x55163d(0xb5f)](_0x3e0fc0,_0x30a635,_0x52d7c1);}}}}else{function _0x55e0c5(){const _0x3ca5c0=_0x2c9887;_0x2ddf9f+=_0x3226c4['x']-this['damageOffsetX']();const _0x15bdf2=_0x365c1c[_0x3ca5c0(0xbd6)]()*0x3/0x4;_0x41bb1a=_0x4355a9['y']+_0x15bdf2,_0x649605=_0x3dc96c['min'](_0x5c19c8,_0x541663['y']+this['y']-this[_0x3ca5c0(0x902)]+_0x15bdf2);}}}else _0x5ebadf['isItem']()&&this[_0x2c9887(0x700)]('item');}}}},Game_Battler[_0xf2f935(0x2dc)]['getAttackMotion']=function(){const _0x26416b=_0xf2f935;return $dataSystem[_0x26416b(0x9f6)][0x0];},Game_Battler['prototype']['getAttackWeaponAnimationId']=function(){const _0x2d22a0=_0xf2f935,_0x3f7588=this['getAttackMotion']();return _0x3f7588?_0x3f7588[_0x2d22a0(0x92d)]:0x0;},Game_Battler['prototype'][_0xf2f935(0x890)]=function(_0x4bc7b0){const _0x5bbb9c=_0xf2f935;if(!$gameSystem['isSideView']())return;const _0x25fcf6=this[_0x5bbb9c(0x310)](),_0x4b0ca0=_0x4bc7b0[_0x5bbb9c(0x310)]();if(!_0x25fcf6||!_0x4b0ca0)return;const _0xfa6ec=_0x4b0ca0[_0x5bbb9c(0x58e)],_0x2fbc70=_0x4b0ca0['_baseY'];this['moveBattlerToPoint'](_0xfa6ec,_0x2fbc70,0x0,![],_0x5bbb9c(0xb54),-0x1),_0x25fcf6['updatePosition']();const _0x8d5e96=VisuMZ['BattleCore']['Settings'][_0x5bbb9c(0xb3e)];let _0x80e54b=(_0x4b0ca0[_0x5bbb9c(0x41b)]+_0x25fcf6[_0x5bbb9c(0x41b)])/0x2;_0x80e54b*=this['isActor']()?0x1:-0x1;let _0x5956f2=_0x8d5e96[_0x5bbb9c(0x595)]*(this['isActor']()?0x1:-0x1);_0x4bc7b0[_0x5bbb9c(0x657)](_0x80e54b,_0x5956f2,0x0,![],'Linear'),_0x4b0ca0['updatePosition']();},Game_Battler['prototype'][_0xf2f935(0x700)]=function(_0x36f3ac){const _0x5c866f=_0xf2f935;if(SceneManager['isSceneBattle']()){const _0x61e5fd=this['battler']();if(_0x61e5fd){_0x61e5fd[_0x5c866f(0x940)](_0x36f3ac);if([_0x5c866f(0x423),_0x5c866f(0x882),_0x5c866f(0x5d7)]['includes'](_0x36f3ac)){if(_0x5c866f(0x560)!==_0x5c866f(0x560)){function _0x58d35e(){const _0x2f5914=_0x5c866f;if(this['_skewDuration']<=0x0)return;if(!this[_0x2f5914(0x8ae)])return;const _0x5bde16=this[_0x2f5914(0x4f2)],_0x5f3e09=this[_0x2f5914(0x63b)],_0x5756c0=this[_0x2f5914(0x6b1)],_0x254622=this[_0x2f5914(0x8ae)];_0x5bf76c[_0x2f5914(0x758)]?(_0x254622[_0x2f5914(0x216)]['x']=this[_0x2f5914(0xa52)](_0x254622['skew']['x'],this[_0x2f5914(0xa0d)],_0x5bde16,_0x5f3e09,_0x5756c0),_0x254622['skew']['y']=this[_0x2f5914(0xa52)](_0x254622[_0x2f5914(0x216)]['y'],this[_0x2f5914(0x9c4)],_0x5bde16,_0x5f3e09,_0x5756c0)):(_0x254622['skew']['x']=(_0x254622[_0x2f5914(0x216)]['x']*(_0x5bde16-0x1)+this['_targetSkewX'])/_0x5bde16,_0x254622['skew']['y']=(_0x254622[_0x2f5914(0x216)]['y']*(_0x5bde16-0x1)+this[_0x2f5914(0x9c4)])/_0x5bde16);this[_0x2f5914(0x4f2)]--;if(this[_0x2f5914(0x4f2)]<=0x0)this[_0x2f5914(0x6d6)]();}}else this[_0x5c866f(0xb73)]();}}}this[_0x5c866f(0x5f3)]();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb73)]=function(){},Game_Battler[_0xf2f935(0x2dc)]['startWeaponAnimation']=function(_0x359c6f){const _0x1355bc=_0xf2f935;if(SceneManager[_0x1355bc(0x731)]()){const _0x21af9e=this[_0x1355bc(0x310)]();if(_0x21af9e)_0x21af9e[_0x1355bc(0x22a)](_0x359c6f);}},Game_Battler[_0xf2f935(0x2dc)]['startAttackWeaponAnimation']=function(){const _0x33a29c=_0xf2f935;if(SceneManager[_0x33a29c(0x731)]()){if(_0x33a29c(0x8e5)===_0x33a29c(0x8e5)){const _0x4e8bc5=this[_0x33a29c(0x4e8)]();this[_0x33a29c(0x8c4)](_0x4e8bc5);}else{function _0x4e8bd1(){const _0x4846cd=_0x33a29c;this[_0x4846cd(0x809)]();}}}},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x6e0)]=function(_0x1aeeee,_0x5427f0){const _0x1030f4=_0xf2f935;if(!_0x1aeeee)return;if(!_0x1aeeee['item']())return;if(_0x1aeeee[_0x1030f4(0x933)]())return;if(_0x1aeeee[_0x1030f4(0x322)]())return;if(_0x1aeeee[_0x1030f4(0x8a9)]())return;let _0x2081a9=0x0;const _0x5cfdf8=VisuMZ[_0x1030f4(0x886)][_0x1030f4(0x650)]['ActionSequence'],_0x1dd0d3=_0x1aeeee[_0x1030f4(0x5b0)]()[_0x1030f4(0xbc2)];if(_0x1dd0d3[_0x1030f4(0x78e)](/<CAST ANIMATION: (\d+)>/i))_0x2081a9=Number(RegExp['$1']);else{if(_0x1dd0d3[_0x1030f4(0x78e)](/<NO CAST ANIMATION>/i))return;else{if(_0x1aeeee[_0x1030f4(0x732)]())_0x2081a9=_0x5cfdf8['CastCertain'];else{if(_0x1aeeee[_0x1030f4(0x3eb)]())_0x2081a9=_0x5cfdf8[_0x1030f4(0x4f8)];else _0x1aeeee[_0x1030f4(0x6df)]()&&(_0x2081a9=_0x5cfdf8[_0x1030f4(0xb94)]);}}}if(_0x2081a9>0x0){if(_0x1030f4(0x6b3)!=='VuSSr')$gameTemp[_0x1030f4(0xb12)]([this],_0x2081a9,!!_0x5427f0);else{function _0xdab467(){const _0x3c8d4e=_0x1030f4;_0x1deff2=_0x1a5413[_0x3c8d4e(0x4f8)];}}}},Game_Battler['prototype'][_0xf2f935(0x4a8)]=function(){const _0x18220b=_0xf2f935;SoundManager[_0x18220b(0x6dc)]();let _0x1e2cb6=VisuMZ[_0x18220b(0x886)][_0x18220b(0x650)][_0x18220b(0xb3e)][_0x18220b(0x416)];if(_0x1e2cb6>0x0){if(_0x18220b(0x34d)!=='nRklG'){function _0x4c490a(){const _0x56f6b0=_0x18220b;return _0x4c2063[_0x56f6b0(0x1e6)][_0x56f6b0(0x650)][_0x56f6b0(0x5ca)][_0x56f6b0(0x529)];}}else $gameTemp['requestAnimation']([this],_0x1e2cb6);}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x4d5)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x8f6)],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x8f6)]=function(){const _0x2b3110=_0xf2f935;VisuMZ[_0x2b3110(0x886)][_0x2b3110(0x4d5)][_0x2b3110(0x86d)](this),this['performFlinch']();},VisuMZ['BattleCore'][_0xf2f935(0x5ae)]=Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb55)],Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb55)]=function(){const _0x32a6d5=_0xf2f935;VisuMZ[_0x32a6d5(0x886)][_0x32a6d5(0x5ae)]['call'](this),this[_0x32a6d5(0x55c)]();},VisuMZ['BattleCore'][_0xf2f935(0x3f7)]=Game_Battler['prototype']['performEvasion'],Game_Battler['prototype'][_0xf2f935(0x8bf)]=function(){const _0x1be0ed=_0xf2f935;VisuMZ[_0x1be0ed(0x886)][_0x1be0ed(0x3f7)][_0x1be0ed(0x86d)](this),this[_0x1be0ed(0x55c)]();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x55c)]=function(){const _0x5997aa=_0xf2f935;if(!$gameSystem[_0x5997aa(0x649)]())return;if(this[_0x5997aa(0x590)])return;this['_flinched']=!![];const _0x58c7d9=this[_0x5997aa(0x310)]();if(_0x58c7d9)_0x58c7d9[_0x5997aa(0x265)]();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x25a)]=function(){const _0x32cfc0=_0xf2f935;if(this[_0x32cfc0(0xb18)]()&&this[_0x32cfc0(0x73d)]!=='dead'){this[_0x32cfc0(0x700)]('dead');return;}if(this['isDead']()&&this[_0x32cfc0(0x73d)]==='dead')return;if(!!this[_0x32cfc0(0x9b3)])return;if(this[_0x32cfc0(0x1fb)]()){if(!this[_0x32cfc0(0x8e3)]()&&this!==BattleManager['_subject']){if(_0x32cfc0(0xaff)==='qeNjC'){function _0x239217(){const _0x3d1fbb=_0x32cfc0;_0xc5c451[_0x3d1fbb(0x886)][_0x3d1fbb(0x802)]&&_0x421d55[_0x3d1fbb(0x886)][_0x3d1fbb(0x802)]['call'](this,_0x19dc90),_0x5391df[_0x3d1fbb(0x886)][_0x3d1fbb(0x9ea)](_0x2ec3c7);}}else{if(this[_0x32cfc0(0x310)]())this['battler']()['refreshMotion']();}}this[_0x32cfc0(0x5f3)]();return;}if(this[_0x32cfc0(0x73d)]===_0x32cfc0(0x80b))return;if(this[_0x32cfc0(0x73d)]===_0x32cfc0(0x4d4)&&!BattleManager[_0x32cfc0(0x615)]())return;if(this[_0x32cfc0(0x73d)]===_0x32cfc0(0x7c0)&&!BattleManager[_0x32cfc0(0x615)]())return;this[_0x32cfc0(0xa81)]();if(this[_0x32cfc0(0x310)]()&&BattleManager[_0x32cfc0(0x615)]()){if(_0x32cfc0(0x5b2)!==_0x32cfc0(0x5c2)){this[_0x32cfc0(0x310)]()['refreshMotion'](),this[_0x32cfc0(0x5f3)]();return;}else{function _0xeea82(){const _0x417354=_0x32cfc0;_0x38b948[_0x417354(0x2dc)]['initialize'][_0x417354(0x86d)](this,_0x3bbfca),this['setBackgroundType'](this['bgType']()),this[_0x417354(0x57c)]();}}}},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x8e3)]=function(){const _0x186360=_0xf2f935;if(!this[_0x186360(0x897)]())return![];const _0xfd5bf2=this['battler']();if(!_0xfd5bf2)return![];const _0x255d4b=_0xfd5bf2[_0x186360(0x847)];if(!_0x255d4b)return![];const _0x251700=_0x255d4b[_0x186360(0x6f4)];return _0x251700&&!_0x251700[_0x186360(0x2d2)];},Game_Battler[_0xf2f935(0x2dc)]['isBattlerFlipped']=function(){const _0x3207c4=_0xf2f935;return this[_0x3207c4(0x25f)];},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x41c)]=function(_0x49d688){const _0x31a401=_0xf2f935;if(!$gameSystem[_0x31a401(0x649)]())return;this[_0x31a401(0x25f)]=_0x49d688;const _0xceaeb0=this[_0x31a401(0x310)]();if(_0xceaeb0)_0xceaeb0['updateFlip']();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x572)]=function(_0x3ec8a5,_0xdebef3,_0xd5aba){const _0xdc42fd=_0xf2f935;if(!$gameSystem[_0xdc42fd(0x649)]())return;const _0x22a4d8=this[_0xdc42fd(0x310)]();if(!_0x22a4d8)return;if(_0x3ec8a5===_0x22a4d8[_0xdc42fd(0x58e)])return;let _0x5d644b=![];if(this['isActor']()){if(_0x3ec8a5>_0x22a4d8['_baseX'])_0x5d644b=!![];if(_0x3ec8a5<_0x22a4d8[_0xdc42fd(0x58e)])_0x5d644b=![];}else{if(this['isEnemy']()){if(_0x3ec8a5>_0x22a4d8[_0xdc42fd(0x58e)])_0x5d644b=![];if(_0x3ec8a5<_0x22a4d8[_0xdc42fd(0x58e)])_0x5d644b=!![];}};this[_0xdc42fd(0x41c)](_0xd5aba?!_0x5d644b:_0x5d644b),_0x22a4d8[_0xdc42fd(0xad6)]();},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x657)]=function(_0x16b041,_0x6a47ad,_0x508d6e,_0x2e1d6b,_0x44ae18){const _0x5cf0c2=_0xf2f935;if(!$gameSystem['isSideView']())return;const _0x4f4548=this[_0x5cf0c2(0x310)]();if(!_0x4f4548)return;if(_0x2e1d6b)this[_0x5cf0c2(0x572)](_0x16b041+_0x4f4548[_0x5cf0c2(0x58e)],_0x6a47ad+_0x4f4548[_0x5cf0c2(0x4de)],![]);_0x16b041+=_0x4f4548[_0x5cf0c2(0x58e)]-_0x4f4548[_0x5cf0c2(0xa09)],_0x6a47ad+=_0x4f4548[_0x5cf0c2(0x4de)]-_0x4f4548[_0x5cf0c2(0x5e8)],_0x4f4548[_0x5cf0c2(0x4fa)](_0x16b041,_0x6a47ad,_0x508d6e);if(Imported[_0x5cf0c2(0x758)])_0x4f4548['setMoveEasingType'](_0x44ae18||_0x5cf0c2(0xb54));},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x9ce)]=function(_0x11a4de,_0x38e7b2,_0xf083f3,_0x44f9f6,_0x28f992,_0x2bbd12){const _0x32cd91=_0xf2f935;if(!$gameSystem['isSideView']())return;const _0x171b49=this[_0x32cd91(0x310)]();if(!_0x171b49)return;_0x2bbd12=_0x2bbd12||0x0;if(_0x2bbd12>0x0){if(_0x171b49['_baseX']>_0x11a4de)_0x11a4de+=_0x171b49[_0x32cd91(0x41b)]/0x2+_0x2bbd12;if(_0x171b49[_0x32cd91(0x58e)]<_0x11a4de)_0x11a4de-=_0x171b49[_0x32cd91(0x41b)]/0x2+_0x2bbd12;}if(_0x44f9f6)this['setBattlerFacePoint'](_0x11a4de,_0x38e7b2,![]);_0x11a4de-=_0x171b49[_0x32cd91(0xa09)],_0x38e7b2-=_0x171b49[_0x32cd91(0x5e8)],_0x171b49['startMove'](_0x11a4de,_0x38e7b2,_0xf083f3);if(Imported[_0x32cd91(0x758)])_0x171b49['setMoveEasingType'](_0x28f992||_0x32cd91(0xb54));},Game_Battler['prototype'][_0xf2f935(0x6f6)]=function(_0x1c96d5,_0x19c959,_0xcb520){const _0x4a6032=_0xf2f935;if(!$gameSystem[_0x4a6032(0x649)]())return;const _0x3037a9=this[_0x4a6032(0x310)]();if(!_0x3037a9)return;_0x3037a9[_0x4a6032(0x6dd)](_0x1c96d5,_0x19c959,_0xcb520);},Game_Battler[_0xf2f935(0x2dc)]['jumpBattler']=function(_0x187066,_0xd098be){const _0x59f264=_0xf2f935;if(!$gameSystem[_0x59f264(0x649)]())return;const _0x23d2ca=this[_0x59f264(0x310)]();if(!_0x23d2ca)return;_0x23d2ca[_0x59f264(0x9fb)](_0x187066,_0xd098be);},Game_Battler[_0xf2f935(0x2dc)]['spinBattler']=function(_0x4826e9,_0x3a09c6,_0x5508b0,_0x5f5189){const _0x190e9f=_0xf2f935;if(!$gameSystem[_0x190e9f(0x649)]())return;const _0x43e6f9=this['battler']();if(!_0x43e6f9)return;_0x43e6f9[_0x190e9f(0x47b)](_0x4826e9,_0x3a09c6,_0x5508b0,_0x5f5189);},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x3e1)]=function(_0x1881a1,_0x11a73a,_0x4f3ae4,_0x44e9c7){const _0x2f9662=_0xf2f935;if(!$gameSystem[_0x2f9662(0x649)]())return;const _0x29b221=this['battler']();if(!_0x29b221)return;if(this[_0x2f9662(0x8bc)]()){if('rNGfc'!=='UxoGh')_0x1881a1*=-0x1,_0x11a73a*=-0x1;else{function _0x5461fe(){const _0x137286=_0x2f9662;_0x5bb794[_0x137286(0x2dc)][_0x137286(0xae2)]['call'](this),this[_0x137286(0x700)](_0x137286(0x7ac));}}}_0x29b221[_0x2f9662(0x717)](_0x1881a1,_0x11a73a,_0x4f3ae4,_0x44e9c7);},Game_Battler['prototype'][_0xf2f935(0x21b)]=function(_0x49443f,_0xf8c34d,_0x16150f,_0x3acf82){const _0x5d300d=_0xf2f935;if(!$gameSystem['isSideView']())return;const _0x981ecf=this[_0x5d300d(0x310)]();if(!_0x981ecf)return;_0x981ecf[_0x5d300d(0x7e7)](_0x49443f,_0xf8c34d,_0x16150f,_0x3acf82);},Game_Battler['prototype'][_0xf2f935(0x8e1)]=function(_0x43a9cf,_0x217391,_0x1f29c0){const _0x17f06b=_0xf2f935;if(!$gameSystem['isSideView']())return;const _0x56fbee=this[_0x17f06b(0x310)]();if(!_0x56fbee)return;_0x56fbee[_0x17f06b(0x832)](_0x43a9cf,_0x217391,_0x1f29c0);},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5f3)]=function(){const _0x361d54=_0xf2f935,_0x31b1ef=!!this['_freezeMotionData'];this[_0x361d54(0x9b3)]=undefined,_0x31b1ef&&(this[_0x361d54(0x25a)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x385)]=function(){const _0x174a30=_0xf2f935;if(!SceneManager['isSceneBattle']())return;const _0xd3b807=this[_0x174a30(0x310)]();if(!_0xd3b807)return;let _0x19e0fa=this[_0x174a30(0x8bc)]()?_0xd3b807[_0x174a30(0x472)]:_0xd3b807[_0x174a30(0x847)][_0x174a30(0x472)];if(_0x19e0fa){if(_0x174a30(0x549)===_0x174a30(0x8f5)){function _0x1d4a0c(){const _0x4d787c=_0x174a30;_0x1bbead[_0x4d787c(0x2dc)][_0x4d787c(0x29d)][_0x4d787c(0x86d)](this);const _0x1ca374=this[_0x4d787c(0x658)]();_0x1ca374===_0x4d787c(0xacf)&&this[_0x4d787c(0x84c)]();}}else _0x19e0fa['setup'](0x0);}},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x440)]=function(_0x381e18,_0x2a9a30,_0x3e79c4){const _0x3af1cd=_0xf2f935;if(this[_0x3af1cd(0x1fb)]()&&!this[_0x3af1cd(0x897)]())return;let _0x23b9a8=0x0,_0xaf06d7=0x0;if(_0x381e18[_0x3af1cd(0x78e)](/ATTACK[ ](\d+)/i)){if(_0x3af1cd(0xa7f)===_0x3af1cd(0x2d9)){function _0x528314(){const _0x420778=_0x3af1cd;this[_0x420778(0x315)](_0x420778(0x8f9));}}else _0xaf06d7=Number(RegExp['$1']),_0xaf06d7--;}if(this[_0x3af1cd(0x8bc)]()){const _0x520755=this[_0x3af1cd(0xa6d)]();_0x23b9a8=_0x520755[_0xaf06d7]?_0x520755[_0xaf06d7]['wtypeId']:0x0;}else{if(this[_0x3af1cd(0x1fb)]()){if(_0x3af1cd(0xba8)===_0x3af1cd(0x865)){function _0x761c37(){const _0x527040=_0x3af1cd;_0x4c95ab['BattleCore'][_0x527040(0x5ac)][_0x527040(0x86d)](this,_0x2fd45d),this[_0x527040(0x2b0)]();}}else _0x23b9a8=this[_0x3af1cd(0x979)]()['wtypeId']||0x0;}}const _0x19c5c1=$dataSystem['attackMotions'][_0x23b9a8];if(_0x381e18[_0x3af1cd(0x78e)](/attack/i)){if(_0x3af1cd(0x681)!=='FIGGW'){function _0x20a7c2(){const _0x37dc99=_0x3af1cd,_0x2dce2d=_0xdf5e57[_0x37dc99(0x886)][_0x37dc99(0x5ef)][_0x37dc99(0x86d)](this);return _0x2dce2d[_0x37dc99(0xadb)]=this['autoBattleAtStart'],_0x2dce2d[_0x37dc99(0x491)]=this[_0x37dc99(0x491)],_0x2dce2d[_0x37dc99(0x8d2)]=this[_0x37dc99(0x8d2)],_0x2dce2d;}}else _0x381e18=[_0x3af1cd(0x882),_0x3af1cd(0x423),_0x3af1cd(0x5d7)][_0x19c5c1[_0x3af1cd(0x74f)]]||'swing';}this['_freezeMotionData']={'motionType':_0x381e18,'weaponImageId':_0x2a9a30?_0x19c5c1[_0x3af1cd(0x92d)]:0x0,'pattern':_0x3e79c4};},Game_Battler[_0xf2f935(0x2dc)]['isFriendly']=function(_0xeb58dd){const _0x4bcca5=_0xf2f935;if(!_0xeb58dd)return![];return _0xeb58dd['friendsUnit']()===this[_0x4bcca5(0x684)]();},Game_Battler['prototype'][_0xf2f935(0x28f)]=function(_0x20f6dc){const _0x20e68c=_0xf2f935;if(!_0x20f6dc)return![];return _0x20f6dc[_0x20e68c(0x8c5)]()===this[_0x20e68c(0x684)]();},VisuMZ['BattleCore'][_0xf2f935(0x223)]=Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x696)],Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x696)]=function(_0x1a9487){const _0x2d227a=_0xf2f935;VisuMZ['BattleCore'][_0x2d227a(0x223)][_0x2d227a(0x86d)](this,_0x1a9487),this[_0x2d227a(0x7b2)]();},Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x7b2)]=function(){const _0xf1901d=_0xf2f935;this[_0xf1901d(0x546)]='',this['actor']()&&this[_0xf1901d(0x3fa)]()[_0xf1901d(0xbc2)][_0xf1901d(0x78e)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0xf1901d(0x546)]=String(RegExp['$1']));},Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x923)]=function(){const _0x175e7e=_0xf2f935;if(this[_0x175e7e(0x678)]()!==''){if('aRqoF'!==_0x175e7e(0xaab)){function _0x4fab18(){const _0x1db131=_0x175e7e;if(_0x76601e[_0x1db131(0xbc2)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x3e96fc=_0x1787bb(_0x3ae0e2['$1'])[_0x1db131(0xa2e)]()[_0x1db131(0x669)]();if(_0x3e96fc===_0x1db131(0x6ee))return _0x1db131(0x6ee);if(_0x34e4f9[_0x1db131(0x56e)][_0x3e96fc])return _0x3e96fc;}const _0x119dc0=_0x2ef5f7[_0x1db131(0x886)][_0x1db131(0x650)]['Damage']['DefaultDamageStyle']['toUpperCase']()[_0x1db131(0x669)]();if(_0x4e3cf2['DamageStyles'][_0x119dc0])return _0x119dc0;return'MANUAL';}}else return this[_0x175e7e(0x678)]();}else{if(Imported[_0x175e7e(0x632)]&&this[_0x175e7e(0x335)]()!=='')return this[_0x175e7e(0x335)]();}return'';},Game_Actor[_0xf2f935(0x2dc)]['getBattlePortrait']=function(){const _0x227763=_0xf2f935;if(this[_0x227763(0x546)]===undefined)this[_0x227763(0x7b2)]();return this[_0x227763(0x546)];},Game_Actor[_0xf2f935(0x2dc)]['setBattlePortrait']=function(_0x5d4d9d){const _0x5164ff=_0xf2f935;if(this[_0x5164ff(0x546)]===undefined)this[_0x5164ff(0x7b2)]();this[_0x5164ff(0x546)]=_0x5d4d9d;if(SceneManager[_0x5164ff(0x731)]()&&$gameParty[_0x5164ff(0x85c)]()[_0x5164ff(0x7fe)](this)){if('PtFCX'===_0x5164ff(0xba0)){function _0x5b771a(){const _0x211b6d=_0x5164ff;return this['_enemy'][_0x211b6d(0x72b)]();}}else{const _0x11722c=SceneManager['_scene'][_0x5164ff(0xa6e)];if(_0x11722c)_0x11722c['refreshActorPortrait'](this);}}},Game_Actor['prototype'][_0xf2f935(0x85b)]=function(){return!![];},Game_Actor['prototype']['isAutoBattle']=function(){const _0x3f5cce=_0xf2f935;if(!this['isConfused']()&&BattleManager[_0x3f5cce(0xac9)])return!![];return Game_Battler['prototype'][_0x3f5cce(0x697)][_0x3f5cce(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x489)]=Game_Actor[_0xf2f935(0x2dc)]['makeActionList'],Game_Actor[_0xf2f935(0x2dc)]['makeActionList']=function(){const _0x5dd22e=_0xf2f935;if(BattleManager['_autoBattle']&&!ConfigManager['autoBattleUseSkills']){if(_0x5dd22e(0x505)!==_0x5dd22e(0x52b))return this[_0x5dd22e(0x785)]();else{function _0x40a643(){return!![];}}}else{return VisuMZ['BattleCore'][_0x5dd22e(0x489)][_0x5dd22e(0x86d)](this);;}},Game_Actor[_0xf2f935(0x2dc)]['makeActionListAutoAttack']=function(){const _0xd91e64=_0xf2f935,_0x32d12a=[],_0x1a5084=new Game_Action(this);return _0x1a5084[_0xd91e64(0x616)](),_0x32d12a[_0xd91e64(0x580)](_0x1a5084),_0x32d12a;},Game_Actor[_0xf2f935(0x2dc)]['battleCommands']=function(){const _0x82a01f=_0xf2f935;if(this['currentClass']()['note'][_0x82a01f(0x78e)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x82a01f(0x8bb)!==_0x82a01f(0x8bb)){function _0x35c86b(){const _0x24428e=_0x82a01f,_0x4ac46c=this['faceRect'](_0x409d36);this[_0x24428e(0x574)](_0x3e085a,_0x4ac46c['x'],_0x4ac46c['y'],_0x4ac46c[_0x24428e(0x41b)],_0x4ac46c[_0x24428e(0x902)]);}}else return String(RegExp['$1'])[_0x82a01f(0x774)](/[\r\n]+/);}else{if('zMTVl'===_0x82a01f(0x643)){function _0x44070d(){return 0x1;}}else return VisuMZ[_0x82a01f(0x886)][_0x82a01f(0x650)][_0x82a01f(0x550)][_0x82a01f(0x869)];}},Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xa97)]=function(){const _0x4e242d=_0xf2f935;if(this[_0x4e242d(0x9db)]['svAnchorX']!==undefined)return this[_0x4e242d(0x9db)][_0x4e242d(0x57e)];if(this['actor']()[_0x4e242d(0xbc2)][_0x4e242d(0x78e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x4e242d(0x75c)!==_0x4e242d(0x210))this[_0x4e242d(0x9db)][_0x4e242d(0x57e)]=eval(RegExp['$1']),this[_0x4e242d(0x9db)]['svAnchorY']=eval(RegExp['$2']);else{function _0x3cae40(){const _0x113feb=_0x4e242d;let _0x51d8ca=[];return this['isBattleCoreTargetScope']()?_0x51d8ca=this['makeTargetsBattleCore']():_0x51d8ca=_0x3f325e['BattleCore'][_0x113feb(0x2dd)][_0x113feb(0x86d)](this),_0x51d8ca=this[_0x113feb(0xb28)](_0x51d8ca),_0x51d8ca;}}}else this[_0x4e242d(0x9db)][_0x4e242d(0x57e)]=Game_Battler['prototype']['svBattlerAnchorX'][_0x4e242d(0x86d)](this);return this[_0x4e242d(0x9db)][_0x4e242d(0x57e)];},Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x7db)]=function(){const _0x145ddd=_0xf2f935;if(this[_0x145ddd(0x9db)]['svAnchorY']!==undefined)return this[_0x145ddd(0x9db)][_0x145ddd(0x2a6)];if(this['actor']()['note'][_0x145ddd(0x78e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x145ddd(0x9db)]['svAnchorX']=eval(RegExp['$1']),this[_0x145ddd(0x9db)][_0x145ddd(0x2a6)]=eval(RegExp['$2']);else{if(_0x145ddd(0x5ce)===_0x145ddd(0x820)){function _0x391524(){const _0x4f6376=_0x145ddd;this[_0x4f6376(0x746)](),_0x4bb2af[_0x4f6376(0x886)]['Scene_Battle_createAllWindows']['call'](this),this[_0x4f6376(0x9b6)]();}}else this['_cache']['svAnchorY']=Game_Battler[_0x145ddd(0x2dc)][_0x145ddd(0x7db)][_0x145ddd(0x86d)](this);}return this[_0x145ddd(0x9db)][_0x145ddd(0x2a6)];},Game_Actor[_0xf2f935(0x2dc)]['svBattlerShadowVisible']=function(){const _0x9551e7=_0xf2f935;if(this['_cache'][_0x9551e7(0x67c)]!==undefined)return this[_0x9551e7(0x9db)][_0x9551e7(0x67c)];if(this[_0x9551e7(0x3fa)]()[_0x9551e7(0xbc2)][_0x9551e7(0x78e)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x9551e7(0x9db)]['svShadow']=!![];else{if(this[_0x9551e7(0x3fa)]()['note'][_0x9551e7(0x78e)](/<SIDEVIEW HIDE SHADOW>/i))this[_0x9551e7(0x9db)][_0x9551e7(0x67c)]=![];else{if(_0x9551e7(0x515)!==_0x9551e7(0x7c2))this[_0x9551e7(0x9db)][_0x9551e7(0x67c)]=Game_Battler[_0x9551e7(0x2dc)]['svBattlerShadowVisible'][_0x9551e7(0x86d)](this);else{function _0x498a75(){const _0x25dce3=_0x9551e7;if(!_0x4684ab[_0x25dce3(0x886)]['JS'][_0x56d942][_0x25dce3(0x86d)](this,this[_0x25dce3(0x7e5)],_0x1340e5))return![];}}}}return this[_0x9551e7(0x9db)][_0x9551e7(0x67c)];},Game_Actor[_0xf2f935(0x2dc)]['battlerSmoothImage']=function(){const _0x5d8aac=_0xf2f935;return VisuMZ[_0x5d8aac(0x886)][_0x5d8aac(0x650)][_0x5d8aac(0x5df)][_0x5d8aac(0xb67)];},Game_Actor[_0xf2f935(0x2dc)]['performWeaponAnimation']=function(){const _0x1534cf=_0xf2f935,_0x4762f0=this[_0x1534cf(0xa6d)](),_0x2b9f51=_0x4762f0[0x0]?_0x4762f0[0x0][_0x1534cf(0x833)]:0x0,_0x5bcb4d=$dataSystem[_0x1534cf(0x9f6)][_0x2b9f51];_0x5bcb4d&&this[_0x1534cf(0x8c4)](_0x5bcb4d[_0x1534cf(0x92d)]);},Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x82a)]=function(_0x2d3b48){const _0x5af15e=_0xf2f935;Game_Battler[_0x5af15e(0x2dc)][_0x5af15e(0x82a)][_0x5af15e(0x86d)](this,_0x2d3b48),this['performActionMotions'](_0x2d3b48);},Game_Actor[_0xf2f935(0x2dc)]['getAttackMotion']=function(){const _0x18f57e=_0xf2f935,_0x43a345=this[_0x18f57e(0xa6d)](),_0x2977f5=_0x43a345[0x0]?_0x43a345[0x0][_0x18f57e(0x833)]:0x0;return $dataSystem[_0x18f57e(0x9f6)][_0x2977f5];},Game_Actor['prototype']['attackAnimationIdSlot']=function(_0x4e42ea){const _0x4cd8a4=_0xf2f935;_0x4e42ea=_0x4e42ea||0x1,_0x4e42ea--;const _0x218a74=this['weapons']();return _0x218a74[_0x4e42ea]?_0x218a74[_0x4e42ea][_0x4cd8a4(0x582)]:0x0;},Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x32f)]=function(_0x16b9c7){const _0x39915a=_0xf2f935;_0x16b9c7=_0x16b9c7||0x1,_0x16b9c7--;const _0x196fa5=this[_0x39915a(0xa6d)](),_0x1f71e9=_0x196fa5[_0x16b9c7]?_0x196fa5[_0x16b9c7][_0x39915a(0x833)]:0x0;return $dataSystem[_0x39915a(0x9f6)][_0x1f71e9];},Game_Actor['prototype'][_0xf2f935(0x950)]=function(_0x33eb29){const _0x1fb3d0=_0xf2f935;_0x33eb29=_0x33eb29||0x1,_0x33eb29--;const _0x46e500=this[_0x1fb3d0(0xa6d)](),_0x14aefd=_0x46e500[_0x33eb29]?_0x46e500[_0x33eb29][_0x1fb3d0(0x833)]:0x0,_0xbabef4=$dataSystem['attackMotions'][_0x14aefd];if(_0xbabef4){if(_0xbabef4['type']===0x0)this[_0x1fb3d0(0x700)](_0x1fb3d0(0x882));else{if(_0xbabef4['type']===0x1)this['requestMotion'](_0x1fb3d0(0x423));else _0xbabef4[_0x1fb3d0(0x74f)]===0x2&&this['requestMotion'](_0x1fb3d0(0x5d7));}this[_0x1fb3d0(0x8c4)](_0xbabef4['weaponImageId']);}},Game_Battler['prototype'][_0xf2f935(0x57f)]=function(_0x402969){const _0x5c8b52=_0xf2f935;this[_0x5c8b52(0xb61)]=_0x402969||0x0;},Game_Battler['prototype'][_0xf2f935(0x51d)]=function(){const _0x192dcf=_0xf2f935;this['_activeWeaponSlot']=this[_0x192dcf(0xb61)]||0x0,this[_0x192dcf(0xb61)]++;},Game_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xac6)]=function(){this['_activeWeaponSlot']=undefined;},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x8a1)]=Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x9a6)],Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x9a6)]=function(){const _0x253d37=_0xf2f935;let _0x30606e=VisuMZ[_0x253d37(0x886)][_0x253d37(0x8a1)]['call'](this);if(this[_0x253d37(0x377)])return _0x30606e;if(this['_activeWeaponSlot']!==undefined){this[_0x253d37(0x377)]=!![];const _0xb519a3=this[_0x253d37(0x695)]();for(let _0x5c08b1=0x0;_0x5c08b1<_0xb519a3[_0x253d37(0x342)];_0x5c08b1++){_0xb519a3[_0x5c08b1]===0x1&&this[_0x253d37(0xb61)]!==_0x5c08b1&&(_0x30606e[_0x5c08b1]=null);}this[_0x253d37(0x377)]=undefined;}return _0x30606e;},Window_BattleLog['prototype'][_0xf2f935(0x74a)]=function(_0x51f440){const _0x54a70a=_0xf2f935;if(_0x51f440[_0x54a70a(0x8bc)]()){if(_0x54a70a(0x450)!=='NiKAi')return _0x51f440[_0x54a70a(0xa6d)]()['length']||0x1;else{function _0x2fe1ff(){this['_active']=!![],_0x418440['_battleCoreBattleResumeAfter']=_0x23955c;}}}else return 0x1;},Window_BattleLog['prototype'][_0xf2f935(0x73f)]=function(_0x47eb0e,_0x32b08b){const _0x5c527e=_0xf2f935;if(_0x47eb0e&&_0x47eb0e['isActor']()){if(_0x5c527e(0x7d2)!=='xrBxM')_0x47eb0e['setActiveWeaponSlot'](_0x32b08b);else{function _0xa3e152(){const _0x1e181a=_0x5c527e;return this[_0x1e181a(0x51f)]()&&!this[_0x1e181a(0x924)]()?this['needsSelectionBattleCore']():_0x1201a5[_0x1e181a(0x886)][_0x1e181a(0x3ec)][_0x1e181a(0x86d)](this);}}}this[_0x5c527e(0x2b0)]();},Window_BattleLog['prototype'][_0xf2f935(0x63c)]=function(_0x46dc07){const _0x3669e8=_0xf2f935;if(_0x46dc07&&_0x46dc07['isActor']()){if(_0x3669e8(0x55b)!==_0x3669e8(0x55b)){function _0x54b8ae(){const _0x3e702d=_0x3669e8;this[_0x3e702d(0x99f)](_0x545105,_0x1c1d6e,_0x54ec9a);}}else _0x46dc07[_0x3669e8(0xac6)]();}this[_0x3669e8(0x2b0)]();},Game_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xb72)]=function(){const _0x2af7fb=_0xf2f935;let _0x313e0b=_0x2af7fb(0xb72);if(this['checkCacheKey'](_0x313e0b))return this[_0x2af7fb(0x9db)][_0x313e0b];return this['_cache'][_0x313e0b]=this[_0x2af7fb(0x269)](this[_0x2af7fb(0x3fa)]()),this[_0x2af7fb(0x9db)][_0x313e0b];},Game_Actor['prototype'][_0xf2f935(0xac4)]=function(){const _0xce822f=_0xf2f935;let _0x52d503='battleUIOffsetY';if(this[_0xce822f(0x253)](_0x52d503))return this[_0xce822f(0x9db)][_0x52d503];return this[_0xce822f(0x9db)][_0x52d503]=this['createBattleUIOffsetY'](this[_0xce822f(0x3fa)]()),this['_cache'][_0x52d503];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x9f5)]=Game_Enemy['prototype'][_0xf2f935(0x696)],Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x696)]=function(_0x3a550a,_0x5de6df,_0x2db298){const _0x255dc5=_0xf2f935;_0x3a550a=DataManager['swapEnemyIDs'](_0x3a550a),VisuMZ[_0x255dc5(0x886)]['Game_Enemy_setup'][_0x255dc5(0x86d)](this,_0x3a550a,_0x5de6df,_0x2db298);Imported[_0x255dc5(0xb90)]&&this[_0x255dc5(0x40f)]();this[_0x255dc5(0xa4c)](),this[_0x255dc5(0xa02)]();if(Imported[_0x255dc5(0xb90)]){if(_0x255dc5(0x6c1)===_0x255dc5(0x47d)){function _0xe0bcce(){const _0xe5f20c=_0x255dc5;_0x5e0845[_0xe5f20c(0x886)][_0xe5f20c(0x5b9)]&&_0x28efcc['BattleCore'][_0xe5f20c(0x5b9)][_0xe5f20c(0x86d)](this,_0x306c78),_0x30f079[_0xe5f20c(0x886)][_0xe5f20c(0x9ea)](_0x149484);}}else this[_0x255dc5(0x3d0)]();}},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xa4c)]=function(){const _0x425eae=_0xf2f935,_0x378d3c=VisuMZ[_0x425eae(0x886)]['Settings'][_0x425eae(0x9e1)];this[_0x425eae(0x89b)]=_0x378d3c[_0x425eae(0x3d1)],this['_svBattlerData']={};},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xa02)]=function(){const _0x203b2e=_0xf2f935,_0x50f9ed=VisuMZ[_0x203b2e(0x886)][_0x203b2e(0x650)][_0x203b2e(0x9e1)],_0x313c2c=this['enemy']()['note'];this[_0x203b2e(0x7f0)]={'name':'','wtypeId':_0x50f9ed[_0x203b2e(0x729)],'collapse':_0x50f9ed[_0x203b2e(0x5a5)],'motionIdle':_0x50f9ed[_0x203b2e(0x1da)],'width':_0x50f9ed['Width']||0x40,'height':_0x50f9ed[_0x203b2e(0x6b4)]||0x40,'anchorX':_0x50f9ed[_0x203b2e(0xb5b)]||0x0,'anchorY':_0x50f9ed['AnchorY']||0x0,'shadow':_0x50f9ed[_0x203b2e(0xae0)]};if(_0x313c2c[_0x203b2e(0x78e)](/<ATTACK ANIMATION:[ ](\d+)>/i)){if(_0x203b2e(0x8dc)==='nXrxW'){function _0x5aabd6(){this['requestMotionRefresh']();}}else this[_0x203b2e(0x89b)]=Number(RegExp['$1']);}const _0xc561c9=this['_svBattlerData'];if(_0x313c2c['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0xc561c9[_0x203b2e(0x222)]=String(RegExp['$1']);else{if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x83ba03=String(RegExp['$1'])[_0x203b2e(0x774)](/[\r\n]+/)[_0x203b2e(0xbb8)]('');_0xc561c9[_0x203b2e(0x222)]=DataManager[_0x203b2e(0x648)](_0x83ba03);}}if(_0x313c2c['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x203b2e(0x892)!==_0x203b2e(0x48d))_0xc561c9['anchorX']=eval(RegExp['$1']),_0xc561c9[_0x203b2e(0x9c0)]=eval(RegExp['$2']);else{function _0x26e2f8(){const _0x580a9d=_0x203b2e;this[_0x580a9d(0x4a1)]=this[_0x580a9d(0x9d3)][_0x580a9d(0x37f)](0x0),this['_targetIndex']=0x0,this[_0x580a9d(0xaf5)]=this[_0x580a9d(0x4a1)][0x0]||null,this[_0x580a9d(0x4a3)]=_0x580a9d(0xbc6);}}}if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW COLLAPSE>/i))_0xc561c9['collapse']=!![];else{if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x203b2e(0xb19)===_0x203b2e(0xb19))_0xc561c9['collapse']=![];else{function _0x415de5(){const _0x8d685a=_0x203b2e;this[_0x8d685a(0x980)]=(this['_growX']*(_0x121a73-0x1)+this[_0x8d685a(0x31f)])/_0x1487f7,this['_growY']=(this[_0x8d685a(0x813)]*(_0x203169-0x1)+this['_targetGrowY'])/_0x238fc0;}}}}if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x203b2e(0x332)!==_0x203b2e(0x332)){function _0x195834(){const _0x1da7c3=_0x203b2e;_0x5bb648[_0x1da7c3(0x886)]['JS'][_0x16c1b6][_0x1da7c3(0x86d)](this,this['subject'](),this[_0x1da7c3(0x271)](),this[_0x1da7c3(0x5b0)](),_0x449c2c);}}else _0xc561c9[_0x203b2e(0x592)]=!![];}else{if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x203b2e(0xa3e)==='xtpUY'){function _0x28c1d1(){const _0x2f58ef=_0x203b2e,_0x3a7e2d=this['battleLayoutStyle']();['xp',_0x2f58ef(0x6cf),_0x2f58ef(0xacf)][_0x2f58ef(0x7fe)](_0x3a7e2d)&&this[_0x2f58ef(0x67f)][_0x2f58ef(0x4c5)](),this[_0x2f58ef(0x53b)]();}}else _0xc561c9[_0x203b2e(0x592)]=![];}}if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0xc561c9['motionIdle']=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0xff748e=String(RegExp['$1'])[_0x203b2e(0x774)](/[\r\n]+/)[_0x203b2e(0xbb8)]('');_0xc561c9[_0x203b2e(0xb84)]=DataManager[_0x203b2e(0x648)](_0xff748e);}}_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0xc561c9[_0x203b2e(0x41b)]=Number(RegExp['$1']),_0xc561c9[_0x203b2e(0x902)]=Number(RegExp['$2']));if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW WEAPON: (.*)>/i))_0xc561c9[_0x203b2e(0x833)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x313c2c[_0x203b2e(0x78e)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x203b2e(0x46d)==='XCxnK'){const _0x38d08e=String(RegExp['$1'])[_0x203b2e(0x774)](/[\r\n]+/)[_0x203b2e(0xbb8)](''),_0x60710d=DataManager['processRandomizedData'](_0x38d08e);_0xc561c9[_0x203b2e(0x833)]=DataManager[_0x203b2e(0x75d)](_0x60710d);}else{function _0x20be01(){const _0x5bfd3f=_0x203b2e;_0x104a13[_0x5bfd3f(0x349)]()?(this[_0x5bfd3f(0x88e)](),this[_0x5bfd3f(0x9d4)]()):_0x1403e6[_0x5bfd3f(0x886)][_0x5bfd3f(0x7c9)][_0x5bfd3f(0x86d)](this);}}}}if(Imported[_0x203b2e(0xb90)]){const _0x171fe8=this[_0x203b2e(0x93f)]();for(const _0x5e84b3 of _0x171fe8){if(_0x203b2e(0xa05)===_0x203b2e(0xa05)){const _0x5ad832=this[_0x203b2e(0x743)](_0x5e84b3)[_0x203b2e(0x8d5)][_0x203b2e(0xa2e)]()[_0x203b2e(0x669)](),_0x4ef019=_0x5e84b3[_0x203b2e(0xa2e)]()[_0x203b2e(0x669)]();if(_0x313c2c[_0x203b2e(0x78e)](VisuMZ[_0x203b2e(0x9f4)]['RegExp']['SvBattlerSolo-%1-%2'[_0x203b2e(0x460)](_0x4ef019,_0x5ad832)])){if('NbjkK'!=='NbjkK'){function _0x20d32c(){const _0x1c1ea0=_0x203b2e;_0x1cc32d[_0x1c1ea0(0x593)]([_0x57e5f2]);}}else _0xc561c9[_0x203b2e(0x222)]=String(RegExp['$1']);}else{if(_0x313c2c[_0x203b2e(0x78e)](VisuMZ['ElementStatusCore']['RegExp'][_0x203b2e(0x559)[_0x203b2e(0x460)](_0x4ef019,_0x5ad832)])){const _0x1f5b9d=String(RegExp['$1'])[_0x203b2e(0x774)](/[\r\n]+/)[_0x203b2e(0xbb8)]('');_0xc561c9[_0x203b2e(0x222)]=DataManager[_0x203b2e(0x648)](_0x1f5b9d);}}if(_0x313c2c[_0x203b2e(0x78e)](VisuMZ[_0x203b2e(0x9f4)][_0x203b2e(0xa36)][_0x203b2e(0x496)['format'](_0x4ef019,_0x5ad832)]))_0xc561c9[_0x203b2e(0x833)]=DataManager[_0x203b2e(0x75d)](RegExp['$1']);else{if(_0x313c2c[_0x203b2e(0x78e)](VisuMZ[_0x203b2e(0x9f4)][_0x203b2e(0xa36)][_0x203b2e(0x29f)[_0x203b2e(0x460)](_0x4ef019,_0x5ad832)])){const _0x2a710b=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x203b2e(0xbb8)](''),_0x2ec373=DataManager['processRandomizedData'](_0x2a710b);_0xc561c9[_0x203b2e(0x833)]=DataManager['getWtypeIdWithName'](_0x2ec373);}}if(_0x313c2c[_0x203b2e(0x78e)](VisuMZ[_0x203b2e(0x9f4)][_0x203b2e(0xa36)][_0x203b2e(0x82c)[_0x203b2e(0x460)](_0x4ef019,_0x5ad832)])){if('zgaPM'===_0x203b2e(0x331)){function _0xa5b245(){const _0x128ad3=_0x203b2e;this[_0x128ad3(0xb5a)](),this[_0x128ad3(0x3ca)](),this[_0x128ad3(0x853)](),this[_0x128ad3(0x8e8)]();}}else _0xc561c9['motionIdle']=String(RegExp['$1'])['toLowerCase']()[_0x203b2e(0x669)]();}else{if(_0x313c2c[_0x203b2e(0x78e)](VisuMZ['ElementStatusCore'][_0x203b2e(0xa36)][_0x203b2e(0x8c8)[_0x203b2e(0x460)](_0x4ef019,_0x5ad832)])){const _0x6f77e2=String(RegExp['$1'])[_0x203b2e(0x774)](/[\r\n]+/)['remove']('');_0xc561c9[_0x203b2e(0xb84)]=DataManager[_0x203b2e(0x648)](_0x6f77e2);}}}else{function _0x1d14b6(){const _0x50b3ca=_0x203b2e,_0x34ead7=_0x3d207a[_0x50b3ca(0xbc2)];if(_0x34ead7[_0x50b3ca(0x78e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x389674(_0x52cdb9['$1'])*0.01;else{if(_0x34ead7[_0x50b3ca(0x78e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x55cdc9(_0x261634['$1'])||0x0;}}}}}},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x83b)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x3b8)]=function(){const _0xb5648=_0xf2f935;return this[_0xb5648(0x83b)]();},Game_Enemy['prototype'][_0xf2f935(0x7b0)]=function(_0x333674){const _0x66391=_0xf2f935;return this[_0x66391(0x83b)]();},Game_Enemy['prototype'][_0xf2f935(0x54d)]=function(){const _0x1eed01=_0xf2f935;if(this[_0x1eed01(0x767)]()[_0x1eed01(0xbc2)][_0x1eed01(0x78e)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x1eed01(0x2dc)][_0x1eed01(0x54d)][_0x1eed01(0x86d)](this);},Game_Enemy[_0xf2f935(0x2dc)]['isBattlerGrounded']=function(){const _0x4880dc=_0xf2f935;if(this[_0x4880dc(0x767)]()[_0x4880dc(0xbc2)][_0x4880dc(0x78e)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype']['skills']=function(){const _0x27589d=_0xf2f935,_0x500c21=[];for(const _0x1dc0b2 of this[_0x27589d(0x767)]()[_0x27589d(0x765)]){const _0x39b4c2=$dataSkills[_0x1dc0b2[_0x27589d(0x6c3)]];if(_0x39b4c2&&!_0x500c21[_0x27589d(0x7fe)](_0x39b4c2))_0x500c21[_0x27589d(0x580)](_0x39b4c2);}return _0x500c21;},Game_Enemy['prototype'][_0xf2f935(0xb72)]=function(){const _0x4b9896=_0xf2f935;let _0x1478a3=_0x4b9896(0xb72);if(this[_0x4b9896(0x253)](_0x1478a3))return this[_0x4b9896(0x9db)][_0x1478a3];return this[_0x4b9896(0x9db)][_0x1478a3]=this[_0x4b9896(0x269)](this[_0x4b9896(0x767)]()),this[_0x4b9896(0x9db)][_0x1478a3];},Game_Enemy['prototype'][_0xf2f935(0xac4)]=function(){const _0x3bb531=_0xf2f935;let _0x28a360=_0x3bb531(0xac4);if(this['checkCacheKey'](_0x28a360))return this[_0x3bb531(0x9db)][_0x28a360];return this[_0x3bb531(0x9db)][_0x28a360]=this[_0x3bb531(0xa56)](this[_0x3bb531(0x767)]()),this[_0x3bb531(0x9db)][_0x28a360];},Game_Enemy['prototype'][_0xf2f935(0x979)]=function(){const _0xb49834=_0xf2f935;if(this['_svBattlerData']!==undefined)return this[_0xb49834(0x7f0)];return this[_0xb49834(0xa02)](),this['_svBattlerData'];},Game_Enemy['prototype'][_0xf2f935(0x897)]=function(){const _0x1a3b60=_0xf2f935;return this[_0x1a3b60(0x979)]()[_0x1a3b60(0x222)]!=='';},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x620)]=function(){const _0x40decc=_0xf2f935;return this[_0x40decc(0x979)]()[_0x40decc(0x222)];},Game_Enemy[_0xf2f935(0x2dc)]['battlerSmoothImage']=function(){const _0x1ac807=_0xf2f935;return this['hasSvBattler']()?VisuMZ[_0x1ac807(0x886)][_0x1ac807(0x650)][_0x1ac807(0x5df)]['SmoothImage']:VisuMZ[_0x1ac807(0x886)][_0x1ac807(0x650)][_0x1ac807(0x9e1)][_0x1ac807(0xb67)];},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x82a)]=function(_0x3d7443){const _0x4c5d7e=_0xf2f935;Game_Battler[_0x4c5d7e(0x2dc)][_0x4c5d7e(0x82a)]['call'](this,_0x3d7443);if(this[_0x4c5d7e(0x897)]())this[_0x4c5d7e(0x508)](_0x3d7443);},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x387)]=function(){const _0x502bad=_0xf2f935,_0x528692=this[_0x502bad(0x979)]()[_0x502bad(0x833)]||0x0,_0x10860e=$dataSystem['attackMotions'][_0x528692];if(_0x10860e){if(_0x10860e[_0x502bad(0x74f)]===0x0)this[_0x502bad(0x700)](_0x502bad(0x882));else{if(_0x10860e['type']===0x1)this[_0x502bad(0x700)](_0x502bad(0x423));else _0x10860e[_0x502bad(0x74f)]===0x2&&this[_0x502bad(0x700)]('missile');}}},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xb73)]=function(){const _0x36dad9=_0xf2f935,_0x10ddf8=this[_0x36dad9(0x979)]()[_0x36dad9(0x833)]||0x0,_0x1aea5c=$dataSystem[_0x36dad9(0x9f6)][_0x10ddf8];if(_0x1aea5c){if(_0x36dad9(0x986)===_0x36dad9(0x986))this[_0x36dad9(0x8c4)](_0x1aea5c[_0x36dad9(0x92d)]);else{function _0x4d15c6(){const _0x9bf87a=_0x36dad9;if(_0x564172[_0x9bf87a(0x45b)]['isActor']()&&_0x2c835a[_0x9bf87a(0x45b)][_0x9bf87a(0x1fb)]())return 0x1;else{if(_0x58dad5[_0x9bf87a(0x45b)]['isActor']()&&_0x408328[_0x9bf87a(0x45b)][_0x9bf87a(0x1fb)]())return-0x1;}}}}},Game_Enemy[_0xf2f935(0x2dc)]['getAttackMotion']=function(){const _0x5cbf5b=_0xf2f935,_0x23eead=this[_0x5cbf5b(0x979)]()['wtypeId']||0x0;return $dataSystem[_0x5cbf5b(0x9f6)][_0x23eead];},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x32f)]=function(_0x273685){const _0x5649a9=_0xf2f935;return this[_0x5649a9(0x9e9)]();},Game_Enemy[_0xf2f935(0x2dc)]['performDamage']=function(){const _0x10dd9a=_0xf2f935;Game_Battler[_0x10dd9a(0x2dc)][_0x10dd9a(0x8f6)][_0x10dd9a(0x86d)](this),this[_0x10dd9a(0x85b)]()&&this[_0x10dd9a(0x897)]()&&this['requestMotion'](_0x10dd9a(0xb5e)),SoundManager[_0x10dd9a(0xa27)]();},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x8bf)]=function(){const _0x12477e=_0xf2f935;Game_Battler[_0x12477e(0x2dc)][_0x12477e(0x8bf)][_0x12477e(0x86d)](this),this[_0x12477e(0x700)](_0x12477e(0x7ac));},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xae2)]=function(){const _0x1c84a4=_0xf2f935;Game_Battler['prototype']['performMagicEvasion'][_0x1c84a4(0x86d)](this),this['requestMotion'](_0x1c84a4(0x7ac));},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x3e0)]=function(){const _0x2b2713=_0xf2f935;Game_Battler[_0x2b2713(0x2dc)][_0x2b2713(0x3e0)][_0x2b2713(0x86d)](this),this[_0x2b2713(0x387)]();},Game_Enemy['prototype'][_0xf2f935(0x72b)]=function(){const _0x2d24d1=_0xf2f935;if(this[_0x2d24d1(0x897)]()){if(this[_0x2d24d1(0x988)]()>=0x1)return!![];return this['svBattlerData']()[_0x2d24d1(0x4ff)];}else return!![];},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xa97)]=function(){return this['svBattlerData']()['anchorX'];},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x7db)]=function(){const _0x4e8430=_0xf2f935;return this[_0x4e8430(0x979)]()[_0x4e8430(0x9c0)];},Game_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x31c)]=function(){const _0x18f743=_0xf2f935;return this[_0x18f743(0x979)]()['shadow'];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x431)]=Game_Enemy['prototype'][_0xf2f935(0x967)],Game_Enemy['prototype'][_0xf2f935(0x967)]=function(_0x27cbb4){const _0x238b60=_0xf2f935;VisuMZ[_0x238b60(0x886)]['Game_Enemy_transform'][_0x238b60(0x86d)](this,_0x27cbb4),this[_0x238b60(0xa4c)](),this[_0x238b60(0xa02)]();const _0x359906=this[_0x238b60(0x310)]();if(_0x359906)_0x359906[_0x238b60(0x94f)](this);},Game_Unit[_0xf2f935(0x2dc)][_0xf2f935(0xb99)]=function(_0xc4e1cc){const _0x4a60d6=_0xf2f935;for(const _0x46bbef of this[_0x4a60d6(0x7d5)]()){if(_0x46bbef)_0x46bbef[_0x4a60d6(0xb99)](_0xc4e1cc);}},Game_Unit['prototype'][_0xf2f935(0x997)]=function(){const _0x442e74=_0xf2f935,_0x4dcd55=this[_0x442e74(0x4ae)]();return _0x4dcd55[Math['randomInt'](_0x4dcd55[_0x442e74(0x342)])];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x812)]=Game_Party['prototype']['addActor'],Game_Party[_0xf2f935(0x2dc)]['addActor']=function(_0x426429){const _0x1784ea=_0xf2f935;VisuMZ[_0x1784ea(0x886)][_0x1784ea(0x812)][_0x1784ea(0x86d)](this,_0x426429),BattleManager[_0x1784ea(0x983)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x61c)]=Game_Party[_0xf2f935(0x2dc)][_0xf2f935(0x6fa)],Game_Party[_0xf2f935(0x2dc)][_0xf2f935(0x6fa)]=function(_0x498a76){const _0x7398b0=_0xf2f935;VisuMZ[_0x7398b0(0x886)][_0x7398b0(0x61c)]['call'](this,_0x498a76),BattleManager[_0x7398b0(0x983)]();},VisuMZ['BattleCore'][_0xf2f935(0x449)]=Game_Troop['prototype'][_0xf2f935(0x696)],Game_Troop[_0xf2f935(0x2dc)][_0xf2f935(0x696)]=function(_0xa360b8){const _0x3836a0=_0xf2f935;$gameTemp[_0x3836a0(0xbb5)](),$gameTemp[_0x3836a0(0xb81)](_0xa360b8),VisuMZ[_0x3836a0(0x886)]['Game_Troop_setup']['call'](this,_0xa360b8);},VisuMZ['BattleCore']['Game_Map_setupBattleback']=Game_Map['prototype'][_0xf2f935(0x692)],Game_Map['prototype'][_0xf2f935(0x692)]=function(){const _0x59ce1a=_0xf2f935;VisuMZ[_0x59ce1a(0x886)][_0x59ce1a(0x1f8)]['call'](this),this[_0x59ce1a(0x8d4)]();},Game_Map['prototype']['setupBattlebackBattleCore']=function(){const _0x13300a=_0xf2f935;this[_0x13300a(0x333)]={},this[_0x13300a(0x859)]={};if(!$dataMap)return;const _0x30be39=$dataMap[_0x13300a(0xbc2)];if(!_0x30be39)return;const _0x1e28cb=_0x30be39[_0x13300a(0x78e)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x1e28cb)for(const _0x5f4ac5 of _0x1e28cb){if('WwapF'===_0x13300a(0x6d8)){_0x5f4ac5['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x237fe2=Number(RegExp['$1']),_0x17a9be=Number(RegExp['$2']),_0x1c86a3=_0x17a9be===0x1?this[_0x13300a(0x333)]:this[_0x13300a(0x859)],_0xda70ed=String(RegExp['$3']);_0x1c86a3[_0x237fe2]=_0xda70ed;}else{function _0x56bedd(){const _0x464b51=_0x13300a;if(!_0x3dd1bc[_0x464b51(0x731)]())return;_0x542631[_0x464b51(0xbda)](_0x150874,_0x133c7f);const _0x194714=_0x415229['getLastPluginCommandInterpreter'](),_0x29ff55=_0x299846[_0x464b51(0x55a)]*_0x202092['_motionSpeed'];_0x194714['wait'](_0x29ff55);}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa32)]=Game_Map[_0xf2f935(0x2dc)][_0xf2f935(0x34a)],Game_Map[_0xf2f935(0x2dc)][_0xf2f935(0x34a)]=function(){const _0x3b5558=_0xf2f935;if(!BattleManager[_0x3b5558(0x687)]()){if(_0x3b5558(0x791)===_0x3b5558(0x4d1)){function _0x5d068d(){const _0x470818=_0x3b5558,_0x47ec60=_0x30457b[_0x470818(0x886)][_0x470818(0x650)]['BattleLayout'],_0x57a344=_0x569dd7[_0x470818(0x77d)]?0x4:0x3,_0x306a42=_0x57a344*0x80+(_0x57a344-0x1)*0x8+0x4,_0x52c7b2=this[_0x470818(0x3fa)](_0x650900),_0x330e1f=this[_0x470818(0x8b2)](_0x4fc679);let _0x24e249=_0x330e1f['x']+this[_0x470818(0xa7a)];_0x47ec60[_0x470818(0x407)]?_0x24e249=_0x330e1f['x']+_0x16d1e5[_0x470818(0xba1)]+0x8:_0x24e249+=_0x115262['iconWidth'];const _0x24b2c5=_0x373e57[_0x470818(0x78a)](_0x1e9586[_0x470818(0x8ec)](_0x330e1f['x']+_0x330e1f[_0x470818(0x41b)]-_0x306a42,_0x24e249)),_0x2abb06=_0x2cb64e[_0x470818(0x78a)](_0x330e1f['y']+(_0x330e1f['height']-_0xc2e630[_0x470818(0x2dc)][_0x470818(0xbb1)]())/0x2),_0x38a8bd=_0x10bd44[_0x470818(0x78a)](_0x24b2c5-_0x39085b[_0x470818(0xba2)]/0x2-0x4),_0x3d8182=_0x3442cf[_0x470818(0x78a)](_0x330e1f['y']+(_0x330e1f[_0x470818(0x902)]-_0x76cfb5[_0x470818(0x570)])/0x2+_0x5ba5f2[_0x470818(0x570)]/0x2);let _0x46c1ab=_0x24b2c5+0x88;const _0x9efe38=_0x2abb06;this[_0x470818(0x5af)](_0x52c7b2,_0x24b2c5-0x4+(_0x47ec60[_0x470818(0x97a)]||0x0),_0x2abb06+(_0x47ec60[_0x470818(0xbd9)]||0x0)),this[_0x470818(0x521)](_0x52c7b2,_0x24b2c5+(_0x47ec60[_0x470818(0x4ed)]||0x0),_0x2abb06+(_0x47ec60[_0x470818(0x59b)]||0x0)),this[_0x470818(0x68e)](_0x52c7b2,_0x38a8bd+(_0x47ec60['StateIconOffsetX']||0x0),_0x3d8182+(_0x47ec60[_0x470818(0x8d1)]||0x0)),this[_0x470818(0x492)](_0x52c7b2,'hp',_0x46c1ab+0x88*0x0+(_0x47ec60[_0x470818(0x49c)]||0x0),_0x9efe38+(_0x47ec60[_0x470818(0xb6d)]||0x0)),this[_0x470818(0x492)](_0x52c7b2,'mp',_0x46c1ab+0x88*0x1+(_0x47ec60[_0x470818(0x3ce)]||0x0),_0x9efe38+(_0x47ec60[_0x470818(0x74c)]||0x0)),_0x2ffee9[_0x470818(0x77d)]&&this[_0x470818(0x492)](_0x52c7b2,'tp',_0x46c1ab+0x88*0x2+(_0x47ec60[_0x470818(0x339)]||0x0),_0x9efe38+(_0x47ec60[_0x470818(0x8a5)]||0x0));}}else{const _0x25c29f=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3b5558(0x333)]&&this[_0x3b5558(0x333)][_0x25c29f]){if(_0x3b5558(0x873)===_0x3b5558(0x873))return this['_regionBattleback1'][_0x25c29f];else{function _0x359f91(){const _0xad6d8f=_0x3b5558;this['_hpGaugeSprite'][_0xad6d8f(0x56c)]=![];}}}}}return VisuMZ['BattleCore'][_0x3b5558(0xa32)][_0x3b5558(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x868)]=Game_Map[_0xf2f935(0x2dc)][_0xf2f935(0x48b)],Game_Map['prototype'][_0xf2f935(0x48b)]=function(){const _0x3cbe26=_0xf2f935;if(!BattleManager[_0x3cbe26(0x687)]()){const _0x413152=$gamePlayer[_0x3cbe26(0x2e1)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3cbe26(0x333)]&&this[_0x3cbe26(0x859)][_0x413152])return this['_regionBattleback2'][_0x413152];}return VisuMZ[_0x3cbe26(0x886)][_0x3cbe26(0x868)]['call'](this);},VisuMZ['BattleCore'][_0xf2f935(0x2e3)]=Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0x7d4)],Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0x7d4)]=function(_0x5b7f6a){const _0x1da79a=_0xf2f935;return $gameTemp[_0x1da79a(0x9e0)](this),VisuMZ[_0x1da79a(0x886)][_0x1da79a(0x2e3)]['call'](this,_0x5b7f6a);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x36f)]=Game_Interpreter[_0xf2f935(0x2dc)]['updateWaitMode'],Game_Interpreter['prototype'][_0xf2f935(0x20d)]=function(){const _0x5c1fa7=_0xf2f935;if(SceneManager[_0x5c1fa7(0x731)]())switch(this[_0x5c1fa7(0x48a)]){case _0x5c1fa7(0x52e):if(Imported[_0x5c1fa7(0x3de)]){if(_0x5c1fa7(0x3b5)!==_0x5c1fa7(0x3b5)){function _0x7aa07b(){const _0x176a75=_0x5c1fa7;_0x1c3603[_0x176a75(0x886)]['Game_Battler_onBattleStart'][_0x176a75(0x86d)](this,_0x7e2441),this[_0x176a75(0x3a8)](_0x1dfb27);}}else{if($gameScreen[_0x5c1fa7(0x878)]()[_0x5c1fa7(0x806)]>0x0)return!![];this[_0x5c1fa7(0x48a)]='';}}break;case _0x5c1fa7(0x510):if(BattleManager[_0x5c1fa7(0x2c7)]['isAnimationPlaying']())return!![];this[_0x5c1fa7(0x48a)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x5c1fa7(0x25b)!==_0x5c1fa7(0x25b)){function _0x381026(){const _0xa7f28=_0x5c1fa7;this[_0xa7f28(0x3ef)]['close'](),this[_0xa7f28(0x914)][_0xa7f28(0x98d)]();}}else{if($gameScreen[_0x5c1fa7(0x878)]()[_0x5c1fa7(0x2d4)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x5c1fa7(0x7e0)]>0x0)return!![];this[_0x5c1fa7(0x48a)]='';}}break;case _0x5c1fa7(0xb16):if(BattleManager[_0x5c1fa7(0x2c7)][_0x5c1fa7(0x29e)]())return!![];this[_0x5c1fa7(0x48a)]='';break;case _0x5c1fa7(0xa4a):if(BattleManager['_spriteset'][_0x5c1fa7(0x25e)]())return!![];this[_0x5c1fa7(0x48a)]='';break;case _0x5c1fa7(0xa89):if(BattleManager[_0x5c1fa7(0x2c7)][_0x5c1fa7(0x2f6)]())return!![];this[_0x5c1fa7(0x48a)]='';break;case _0x5c1fa7(0x275):if(BattleManager[_0x5c1fa7(0x3a3)][_0x5c1fa7(0xab9)]())return!![];this['_waitMode']='';break;case _0x5c1fa7(0xa0a):if(BattleManager[_0x5c1fa7(0x2c7)][_0x5c1fa7(0x921)]())return!![];this[_0x5c1fa7(0x48a)]='';break;case _0x5c1fa7(0xb0b):if(BattleManager[_0x5c1fa7(0x2c7)][_0x5c1fa7(0x299)]())return!![];this[_0x5c1fa7(0x48a)]='';break;case _0x5c1fa7(0x2d8):if(BattleManager[_0x5c1fa7(0x2c7)]['isAnyoneGrowing']())return!![];this['_waitMode']='';break;case _0x5c1fa7(0x256):if(BattleManager['_spriteset'][_0x5c1fa7(0x51c)]())return!![];this['_waitMode']='';break;case _0x5c1fa7(0xad2):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager['_spriteset']['isAnyProjectilePresent']())return!![];this[_0x5c1fa7(0x48a)]='';}break;case'battleSkew':if(Imported[_0x5c1fa7(0x3de)]){if($gameScreen[_0x5c1fa7(0x878)]()[_0x5c1fa7(0x3cd)]>0x0)return!![];this['_waitMode']='';}break;case _0x5c1fa7(0x675):if(BattleManager[_0x5c1fa7(0x2c7)][_0x5c1fa7(0x84a)]())return!![];this[_0x5c1fa7(0x48a)]='';break;case _0x5c1fa7(0x3e9):if(Imported[_0x5c1fa7(0x3de)]){if('cONwS'===_0x5c1fa7(0x915)){if($gameScreen[_0x5c1fa7(0x878)]()[_0x5c1fa7(0x97c)]>0x0)return!![];this['_waitMode']='';}else{function _0x12721d(){const _0x280955=_0x5c1fa7;_0x61db67[_0x280955(0x2dc)][_0x280955(0x90f)][_0x280955(0x86d)](this),this['_lastEnemy']=this['enemy']();}}}break;}return VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode'][_0x5c1fa7(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x419)]=Game_Interpreter[_0xf2f935(0x2dc)]['command301'],Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0xb63)]=function(_0x23f4a4){const _0x29af63=_0xf2f935;if(!$gameParty['inBattle']()){if(_0x29af63(0x64a)==='QGOpF')return this[_0x29af63(0x402)](_0x23f4a4);else{function _0x4b3d8e(){_0x274690+=_0x3ee940,_0x25e98f+=_0x5c4120;}}}else{if('ItYHH'!==_0x29af63(0xabb))return VisuMZ[_0x29af63(0x886)][_0x29af63(0x419)][_0x29af63(0x86d)](this,_0x23f4a4);else{function _0x5dde9a(){const _0x5862d1=_0x29af63;this[_0x5862d1(0x387)]();}}}},Game_Interpreter['prototype'][_0xf2f935(0x5f9)]=function(_0x1e1319){const _0x270ada=_0xf2f935;return VisuMZ[_0x270ada(0x886)][_0x270ada(0x419)][_0x270ada(0x86d)](this,_0x1e1319),BattleManager['setEventCallback'](_0x357951=>{const _0xcdee8f=_0x270ada;this[_0xcdee8f(0x4a5)][this[_0xcdee8f(0x3b9)]]=_0x357951;}),!![];},VisuMZ[_0xf2f935(0x886)]['CheckMapBattleEventValid']=function(_0x4f846f){const _0x1e42b2=_0xf2f935,_0x6fd260=$dataCommonEvents[_0x4f846f];if(!_0x6fd260)return![];if(_0x6fd260[_0x1e42b2(0x29a)][_0x1e42b2(0x342)]<=0x1)return![];return!![];},Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0x402)]=function(_0x3b332e){const _0x55d8c8=_0xf2f935,_0x172356=VisuMZ[_0x55d8c8(0x886)][_0x55d8c8(0x650)][_0x55d8c8(0x43b)],_0x2fc97c=_0x172356[_0x55d8c8(0xa18)],_0x5bcfc5=$dataCommonEvents[_0x2fc97c];if(_0x5bcfc5&&VisuMZ['BattleCore'][_0x55d8c8(0x9a4)](_0x2fc97c)){if('AtKgE'===_0x55d8c8(0x9ed)){const _0x10d446=this[_0x55d8c8(0x2cf)]()?this[_0x55d8c8(0x72e)]:0x0,_0xab01bb=_0x5bcfc5[_0x55d8c8(0x29a)];this[_0x55d8c8(0x2bf)](_0xab01bb,_0x10d446),this['_list']=JsonEx[_0x55d8c8(0x4ad)](this['_list']);const _0x34c383={'code':0xbc3,'indent':this[_0x55d8c8(0x3b9)],'parameters':JsonEx['makeDeepCopy'](_0x3b332e)};return this[_0x55d8c8(0xa2f)][_0x55d8c8(0x5f1)](this[_0x55d8c8(0x6a9)]+0x1,0x0,_0x34c383),!![];}else{function _0x983051(){const _0xf46d8f=_0x55d8c8;return this['svBattlerData']()[_0xf46d8f(0x592)];}}}else return VisuMZ[_0x55d8c8(0x886)]['Game_Interpreter_command301'][_0x55d8c8(0x86d)](this,_0x3b332e);},VisuMZ[_0xf2f935(0x886)]['BattleManager_onEncounter']=BattleManager[_0xf2f935(0xaca)],BattleManager[_0xf2f935(0xaca)]=function(){const _0x38b3d9=_0xf2f935;VisuMZ[_0x38b3d9(0x886)][_0x38b3d9(0x25d)][_0x38b3d9(0x86d)](this),this[_0x38b3d9(0x301)]();},BattleManager['onEncounterBattleCore']=function(){const _0x3bd2db=_0xf2f935,_0x310ce2=VisuMZ['BattleCore'][_0x3bd2db(0x650)][_0x3bd2db(0x43b)],_0x19e56d=_0x310ce2['BattleStartEvent'];if(_0x19e56d&&VisuMZ[_0x3bd2db(0x886)]['CheckMapBattleEventValid'](_0x19e56d)){if(_0x3bd2db(0x6ef)==='AFEAp'){function _0x131925(){const _0x4ea35e=_0x3bd2db;this['_branch'][this[_0x4ea35e(0x3b9)]]=_0x2f6f5d;}}else this[_0x3bd2db(0x617)]=!![],$gameTemp['reserveCommonEvent'](_0x310ce2[_0x3bd2db(0xa18)]),$gameMap['updateInterpreter'](),$gameMap[_0x3bd2db(0x8ab)][_0x3bd2db(0x520)]=!![];}if(_0x310ce2[_0x3bd2db(0xa4b)]>0x0){if(_0x3bd2db(0x647)!==_0x3bd2db(0x4ce))this[_0x3bd2db(0xb3d)]=!![];else{function _0x2b7ad6(){const _0x1d84ae=_0x3bd2db;this[_0x1d84ae(0xb06)][_0x1d84ae(0x266)]=_0x49f8d0[_0x1d84ae(0xb43)];return;}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x776)]=Scene_Map[_0xf2f935(0x2dc)][_0xf2f935(0x911)],Scene_Map[_0xf2f935(0x2dc)][_0xf2f935(0x911)]=function(){const _0xd6d39=_0xf2f935;if(BattleManager[_0xd6d39(0x617)])return;VisuMZ[_0xd6d39(0x886)][_0xd6d39(0x776)]['call'](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x994)]=Scene_Map['prototype'][_0xf2f935(0xa65)],Scene_Map[_0xf2f935(0x2dc)]['launchBattle']=function(){const _0x40f904=_0xf2f935;if(BattleManager[_0x40f904(0x617)]){if(_0x40f904(0x37c)!==_0x40f904(0x37c)){function _0x5073a1(){const _0xb2c241=_0x40f904;_0x1814eb['prototype'][_0xb2c241(0x6db)][_0xb2c241(0x86d)](this),this[_0xb2c241(0x854)]();}}else this[_0x40f904(0xaa5)]();}else VisuMZ[_0x40f904(0x886)][_0x40f904(0x994)][_0x40f904(0x86d)](this);},Scene_Map[_0xf2f935(0x2dc)][_0xf2f935(0xaa5)]=function(){const _0x221223=_0xf2f935;this[_0x221223(0xa3a)]=!![];},VisuMZ[_0xf2f935(0x886)]['SceneManager_isSceneChanging']=SceneManager[_0xf2f935(0x27a)],SceneManager[_0xf2f935(0x27a)]=function(){const _0x22ef1a=_0xf2f935;if(BattleManager[_0x22ef1a(0x617)])return![];return VisuMZ[_0x22ef1a(0x886)][_0x22ef1a(0x73e)]['call'](this);},VisuMZ[_0xf2f935(0x886)]['Game_Interpreter_terminate']=Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0xafd)],Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0xafd)]=function(){const _0x986545=_0xf2f935;VisuMZ[_0x986545(0x886)][_0x986545(0x70d)][_0x986545(0x86d)](this),this[_0x986545(0x520)]&&(this[_0x986545(0x520)]=undefined,SceneManager['_scene'][_0x986545(0x364)]());},Scene_Map[_0xf2f935(0x2dc)][_0xf2f935(0x364)]=function(){const _0x4fe496=_0xf2f935;BattleManager[_0x4fe496(0x617)]=undefined,BattleManager[_0x4fe496(0x8c0)]=!![],this[_0x4fe496(0x87a)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x891)]=Scene_Map['prototype'][_0xf2f935(0x30e)],Scene_Map[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(){const _0xc9752b=_0xf2f935;VisuMZ[_0xc9752b(0x886)][_0xc9752b(0x891)][_0xc9752b(0x86d)](this);if(BattleManager[_0xc9752b(0x8c0)]){if('irYuy'!==_0xc9752b(0x39e)){function _0x1928cc(){const _0x12dda8=_0xc9752b;this[_0x12dda8(0x547)]();}}else this[_0xc9752b(0xa3a)]=!![],BattleManager[_0xc9752b(0x8c0)]=undefined;}},VisuMZ['BattleCore'][_0xf2f935(0xba5)]=Scene_Map[_0xf2f935(0x2dc)]['initialize'],Scene_Map[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(){const _0x433d85=_0xf2f935;VisuMZ[_0x433d85(0x886)][_0x433d85(0xba5)][_0x433d85(0x86d)](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ['BattleCore'][_0xf2f935(0xa46)]=Scene_ItemBase['prototype']['applyItem'],Scene_ItemBase['prototype'][_0xf2f935(0x715)]=function(){const _0x2717ab=_0xf2f935;VisuMZ['BattleCore']['Scene_ItemBase_applyItem']['call'](this),this[_0x2717ab(0x5b0)]()['note'][_0x2717ab(0x78e)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x2717ab(0xb3c)]=[]),DataManager[_0x2717ab(0xbd0)](this[_0x2717ab(0x5b0)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x1dc)]=Scene_Options['prototype'][_0xf2f935(0x573)],Scene_Options[_0xf2f935(0x2dc)][_0xf2f935(0x573)]=function(){const _0x1380a7=_0xf2f935;let _0x4d2530=VisuMZ[_0x1380a7(0x886)][_0x1380a7(0x1dc)][_0x1380a7(0x86d)](this);const _0x9a775f=VisuMZ['BattleCore'][_0x1380a7(0x650)];if(_0x9a775f['AutoBattle'][_0x1380a7(0x452)]&&_0x9a775f[_0x1380a7(0x814)]['AdjustRect'])_0x4d2530+=0x2;if(_0x9a775f[_0x1380a7(0x6b5)][_0x1380a7(0x452)]&&_0x9a775f[_0x1380a7(0x6b5)][_0x1380a7(0x7a8)])_0x4d2530+=0x1;return _0x4d2530;},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x610)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x278)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x278)]=function(){const _0x5b6c95=_0xf2f935;if(SceneManager[_0x5b6c95(0x960)]()){if('dAGAN'!==_0x5b6c95(0x52d)){Scene_Message[_0x5b6c95(0x2dc)][_0x5b6c95(0x278)][_0x5b6c95(0x86d)](this);if(this[_0x5b6c95(0x2c7)]){if(_0x5b6c95(0xb6e)===_0x5b6c95(0x602)){function _0x48666a(){return;}}else this['_spriteset'][_0x5b6c95(0xb36)]();}BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0x5b6c95(0x3e2)]();}else{function _0x36cf7e(){const _0x17c05b=_0x5b6c95;if(_0x4b2fd2[_0x17c05b(0x886)]['Settings'][_0x17c05b(0xb3e)][_0x17c05b(0x52c)]){const _0x5845c9=_0xa5b0d6[_0x17c05b(0x5b0)]();this['push'](_0x17c05b(0x504),_0x303c21,[_0x1610d0],_0x5845c9['animationId']);}}}}else VisuMZ[_0x5b6c95(0x886)][_0x5b6c95(0x610)][_0x5b6c95(0x86d)](this);},VisuMZ['BattleCore'][_0xf2f935(0xa54)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x87a)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x87a)]=function(){const _0x316b65=_0xf2f935;if(SceneManager[_0x316b65(0x2d0)]())Scene_Message[_0x316b65(0x2dc)]['stop'][_0x316b65(0x86d)](this);else{if(_0x316b65(0x727)===_0x316b65(0x727))VisuMZ[_0x316b65(0x886)]['Scene_Battle_stop']['call'](this);else{function _0x238661(){const _0xfb1bfe=_0x316b65;return this['isActor']&&this[_0xfb1bfe(0x8bc)]()?_0x2ea6b0['BattleCore'][_0xfb1bfe(0x650)][_0xfb1bfe(0x5df)]['Shadow']:_0x3e8683[_0xfb1bfe(0x886)][_0xfb1bfe(0x650)][_0xfb1bfe(0x9e1)][_0xfb1bfe(0xae0)];}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x618)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xafd)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xafd)]=function(){const _0x311908=_0xf2f935;if(SceneManager['isNextSceneBattleTransitionable']())Scene_Message['prototype'][_0x311908(0xafd)][_0x311908(0x86d)](this);else{if(_0x311908(0x579)!==_0x311908(0x60a))VisuMZ['BattleCore'][_0x311908(0x618)][_0x311908(0x86d)](this);else{function _0x2cf3c1(){const _0xc3b3cc=_0x311908;if(_0x557068)_0x1a3c67[_0xc3b3cc(0xb99)](_0x3750eb);}}}},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x46a)]=function(){const _0xc3e339=_0xf2f935;if(ConfigManager[_0xc3e339(0x85e)]&&ConfigManager[_0xc3e339(0x42f)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0xc3e339(0x658)]()===_0xc3e339(0xacf))return![];else{return Scene_Message[_0xc3e339(0x2dc)][_0xc3e339(0x46a)][_0xc3e339(0x86d)](this);;}}},VisuMZ['BattleCore'][_0xf2f935(0x2a5)]=Scene_Battle[_0xf2f935(0x2dc)]['createAllWindows'],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x93e)]=function(){const _0x5d301c=_0xf2f935;this[_0x5d301c(0x746)](),VisuMZ[_0x5d301c(0x886)][_0x5d301c(0x2a5)][_0x5d301c(0x86d)](this),this[_0x5d301c(0x9b6)]();},VisuMZ[_0xf2f935(0x886)]['Scene_Battle_createCancelButton']=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x24e)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x24e)]=function(){const _0x300174=_0xf2f935;VisuMZ[_0x300174(0x886)][_0x300174(0x475)][_0x300174(0x86d)](this),this[_0x300174(0x658)]()==='border'&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x63f)]=function(_0x2f02ad){const _0x119174=_0xf2f935;if(_0x2f02ad)this[_0x119174(0x451)]['x']=(Graphics['width']-Graphics[_0x119174(0x760)])/0x2,this[_0x119174(0x451)]['y']=(Graphics['height']-Graphics[_0x119174(0x33f)])/0x2;else{if('pourQ'!==_0x119174(0x303))this['_windowLayer']['x']=Graphics[_0x119174(0x41b)]*0xa,this['_windowLayer']['y']=Graphics[_0x119174(0x902)]*0xa;else{function _0x3b9b60(){const _0x6a4d2e=_0x119174;this[_0x6a4d2e(0x315)](_0x6a4d2e(0x4cd));}}}},VisuMZ[_0xf2f935(0x886)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x547)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x547)]=function(){const _0x182c14=_0xf2f935,_0x4491e7=BattleManager[_0x182c14(0x3fa)]();VisuMZ[_0x182c14(0x886)][_0x182c14(0x1fa)][_0x182c14(0x86d)](this);if(_0x4491e7){if(_0x4491e7===BattleManager[_0x182c14(0x3fa)]())return;if(_0x4491e7===BattleManager['_subject'])return;if(_0x4491e7[_0x182c14(0x310)]())_0x4491e7[_0x182c14(0x310)]()[_0x182c14(0x4ac)]();}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xad4)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x203)],Scene_Battle[_0xf2f935(0x2dc)]['selectPreviousCommand']=function(){const _0x2aadcb=_0xf2f935,_0x4c29f2=BattleManager[_0x2aadcb(0x3fa)]();if(_0x4c29f2&&_0x4c29f2[_0x2aadcb(0x310)])_0x4c29f2[_0x2aadcb(0x310)]()[_0x2aadcb(0x4ac)]();VisuMZ[_0x2aadcb(0x886)][_0x2aadcb(0xad4)]['call'](this);},VisuMZ[_0xf2f935(0x886)]['Scene_Battle_logWindowRect']=Scene_Battle['prototype'][_0xf2f935(0x927)],Scene_Battle['prototype']['logWindowRect']=function(){const _0xd71336=_0xf2f935;if(VisuMZ[_0xd71336(0x886)]['Settings'][_0xd71336(0x903)][_0xd71336(0xadc)]){if(_0xd71336(0x5a4)===_0xd71336(0x5a4))return VisuMZ[_0xd71336(0x886)][_0xd71336(0x650)][_0xd71336(0x903)][_0xd71336(0xadc)][_0xd71336(0x86d)](this);else{function _0x1f7bc9(){const _0x53f901=_0xd71336;if(!this[_0x53f901(0x62c)])return;if(!_0x4cb506)return;if(!_0x5b3ad2)return;const _0x53d124=this[_0x53f901(0x8b2)](_0x64338[_0x53f901(0x900)]());_0x53d124['x']+=_0x53d124[_0x53f901(0x41b)]/0x2+this['padding'],_0x122ed7['x']=_0x53d124['x'],_0x34eb7e['y']=_0x53d124['y'],this[_0x53f901(0x62c)][_0x53f901(0x8de)](_0x53dcc5);}}}return VisuMZ[_0xd71336(0x886)]['Scene_Battle_logWindowRect'][_0xd71336(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x314)]=Scene_Battle['prototype'][_0xf2f935(0x895)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x895)]=function(){const _0x41d734=_0xf2f935;VisuMZ[_0x41d734(0x886)]['Scene_Battle_createPartyCommandWindow'][_0x41d734(0x86d)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0xf2f935(0x2dc)]['createPartyCommandWindowBattleCore']=function(){const _0x32e6bf=_0xf2f935,_0x2561cc=this[_0x32e6bf(0xad9)];_0x2561cc[_0x32e6bf(0x52f)](_0x32e6bf(0xb1c),this['commandAutoBattle'][_0x32e6bf(0x6cb)](this)),_0x2561cc[_0x32e6bf(0x52f)](_0x32e6bf(0x429),this[_0x32e6bf(0x476)][_0x32e6bf(0x6cb)](this));const _0x465ab0=this[_0x32e6bf(0x658)]();switch(_0x465ab0){case'xp':case _0x32e6bf(0x6cf):return this[_0x32e6bf(0xad9)][_0x32e6bf(0x884)](0x1);break;}},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x81f)]=function(){const _0x9b78d0=_0xf2f935;BattleManager['_autoBattle']=!![],$gameParty[_0x9b78d0(0x805)](),this[_0x9b78d0(0x547)]();if(BattleManager[_0x9b78d0(0x349)]()){if('whjRc'===_0x9b78d0(0x9b2)){function _0x50e814(){const _0x4f20c7=_0x9b78d0;this[_0x4f20c7(0xb99)](_0x4f20c7(0x908)),_0x5abd85[_0x4f20c7(0x886)][_0x4f20c7(0x447)][_0x4f20c7(0x86d)](this),this['processBattleCoreJS']('PostStartTurnJS');}}else BattleManager[_0x9b78d0(0xbc9)]=![];}},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x476)]=function(){const _0x336a4e=_0xf2f935;if(this[_0x336a4e(0xaa4)]()){if('PVFjJ'!==_0x336a4e(0x782)){function _0x2d1f04(){const _0x440547=_0x336a4e,_0x2477e0=_0x234caf[_0x440547(0x2e1)](_0x1d378d['x'],_0xec3ddf['y']);if(this[_0x440547(0x333)]&&this[_0x440547(0x333)][_0x2477e0])return this[_0x440547(0x333)][_0x2477e0];}}else this['_callSceneOptions']=!![],this[_0x336a4e(0x3a3)][_0x336a4e(0x580)](_0x336a4e(0x209),VisuMZ[_0x336a4e(0x886)][_0x336a4e(0x650)][_0x336a4e(0x2af)][_0x336a4e(0x8cb)]);}else{if(_0x336a4e(0x557)===_0x336a4e(0x557))this['callOptions']();else{function _0x272385(){const _0x48dd99=_0x336a4e;this[_0x48dd99(0x9c2)]-=0x10;}}}},Scene_Battle[_0xf2f935(0x2dc)]['isQueueOptionsMenu']=function(){const _0x2744cf=_0xf2f935;return BattleManager[_0x2744cf(0x4cb)]();},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x7d7)]=function(){const _0x38f68b=_0xf2f935;this[_0x38f68b(0x240)]=![],this[_0x38f68b(0x2c7)][_0x38f68b(0xb36)](),this[_0x38f68b(0x451)][_0x38f68b(0x56c)]=![];if(BattleManager['isBattleTest']())($dataSystem['battleback1Name']||$dataSystem['battleback2Name'])&&SceneManager['snapForBackground']();else($gameMap[_0x38f68b(0x34a)]()||$gameMap[_0x38f68b(0x48b)]())&&SceneManager['snapForBackground']();SceneManager[_0x38f68b(0x580)](Scene_Options);if(BattleManager['isTpb']()){if('fcZgy'!==_0x38f68b(0xa17))BattleManager[_0x38f68b(0x3b6)]=BattleManager[_0x38f68b(0x3fa)]();else{function _0x3e3188(){const _0x3813ce=_0x38f68b;_0x15bdb3+=_0x4215d6[_0x3813ce(0x8bc)]()?-_0x23307d:_0x27df6,_0x56bba1+=_0x23a841['isActor']()?-_0x535e26:_0xa71ed9;}}}},VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess']=Scene_Battle['prototype'][_0xf2f935(0xb6f)],Scene_Battle['prototype'][_0xf2f935(0xb6f)]=function(){const _0x3ed60a=_0xf2f935;VisuMZ['BattleCore'][_0x3ed60a(0x4eb)]['call'](this);if(this[_0x3ed60a(0x240)]&&!BattleManager[_0x3ed60a(0x370)])this[_0x3ed60a(0x7d7)]();},Scene_Battle['prototype'][_0xf2f935(0x9b6)]=function(){const _0x4add09=_0xf2f935,_0x37d113=this[_0x4add09(0x3b2)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x37d113),this[_0x4add09(0x88c)][_0x4add09(0x5f0)](),this['addChild'](this['_autoBattleWindow']);},Scene_Battle[_0xf2f935(0x2dc)]['autoBattleWindowRect']=function(){const _0xfa7982=_0xf2f935;return VisuMZ['BattleCore']['Settings'][_0xfa7982(0x814)][_0xfa7982(0x486)][_0xfa7982(0x86d)](this);},Scene_Battle[_0xf2f935(0x2dc)]['isPartyCommandWindowDisabled']=function(){const _0x595f33=_0xf2f935;return VisuMZ['BattleCore']['Settings'][_0x595f33(0x2af)]['DisablePartyCmd'];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xad5)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x9f0)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x9f0)]=function(){const _0x202261=_0xf2f935;if(this[_0x202261(0xb70)]())this['onDisabledPartyCommandSelection']();else{if(_0x202261(0xb45)===_0x202261(0xa90)){function _0xe13c21(){const _0x24db05=_0x202261;if(_0x44f7a4['battleCameraData']()['angleDuration']>0x0)return!![];this[_0x24db05(0x48a)]='';}}else VisuMZ['BattleCore'][_0x202261(0xad5)][_0x202261(0x86d)](this);}},Scene_Battle[_0xf2f935(0x2dc)]['onDisabledPartyCommandSelection']=function(){const _0x2c923a=_0xf2f935;if(BattleManager[_0x2c923a(0x217)]()){if(_0x2c923a(0x841)===_0x2c923a(0x5f8)){function _0x222c13(){const _0xa69374=_0x2c923a;_0xca62b5[_0xa69374(0x886)][_0xa69374(0xa46)][_0xa69374(0x86d)](this),this[_0xa69374(0x5b0)]()[_0xa69374(0xbc2)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5e9b0c[_0xa69374(0xb3c)]=[]),_0x282f0c[_0xa69374(0xbd0)](this[_0xa69374(0x5b0)]())&&(_0x40a24a[_0xa69374(0xb3c)]=[]);}}else this[_0x2c923a(0x547)]();}else{if(BattleManager[_0x2c923a(0x349)]()){if(_0x2c923a(0x469)!==_0x2c923a(0x469)){function _0x23bf08(){const _0x243476=_0x2c923a,_0x59c346=_0x2be4fb[_0x243476(0x205)](this[_0x243476(0x95b)](),_0x5546d3[_0x243476(0x570)]),_0x2abede=_0x370a80[_0x243476(0x7e8)](_0x59c346*0x1e),_0xfca427=this[_0x243476(0x6a3)](_0x2abede,_0x59c346),_0x5dddc2=_0x4257b0['iconWidth']/0x2,_0x9df751=_0xfca427[_0x243476(0x266)][_0x243476(0x95f)](_0x2ff0ca+'\x20');_0xfca427[_0x243476(0x266)]['textColor']=_0x48ecb8[_0x243476(0x7b3)](_0x21cb5d[_0x243476(0x568)]),_0xfca427[_0x243476(0x266)][_0x243476(0xb39)](_0x3f92e3,_0x5dddc2,0x0,_0x2abede-_0x5dddc2,_0x59c346,_0x243476(0x535));const _0x50c209=_0x43ba4a[_0x243476(0x78a)]((_0x59c346-_0x176a8b[_0x243476(0x570)])/0x2),_0x51ebc9=_0x2abede/0x2-_0x4e8525[_0x243476(0xba2)]-_0x9df751/0x2+_0x5dddc2/0x2,_0x3b98b8=_0x2f7efd[_0x243476(0x7ef)](_0x243476(0x6e5)),_0x10ed2e=_0x1eceee[_0x243476(0xba2)],_0x1cd0d3=_0x3f08b1[_0x243476(0x570)],_0xde2369=_0x1f4104%0x10*_0x10ed2e,_0x27941a=_0x5c57cc['floor'](_0x5ec299/0x10)*_0x1cd0d3;_0xfca427[_0x243476(0x266)]['blt'](_0x3b98b8,_0xde2369,_0x27941a,_0x10ed2e,_0x1cd0d3,_0x51ebc9,_0x50c209),this['_flashColor']=_0x50ba2f[_0x243476(0x7d1)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x4301c8[_0x243476(0x4ad)](this['_flashColor']),this[_0x243476(0x5e9)]=_0x286b16[_0x243476(0x43f)]||0x0,_0xfca427['dy']=0x0;}}else VisuMZ[_0x2c923a(0x886)][_0x2c923a(0xad5)][_0x2c923a(0x86d)](this);}}},VisuMZ[_0xf2f935(0x886)]['Scene_Battle_commandFight']=Scene_Battle['prototype']['commandFight'],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x708)]=function(){const _0x537d95=_0xf2f935;if(BattleManager[_0x537d95(0x349)]()){if(_0x537d95(0x3d2)==='CXrCZ')this['tpbCommandFight'](),this[_0x537d95(0x9d4)]();else{function _0xcf7bad(){const _0x3c8e27=_0x537d95;_0x4ec630=_0x48c2bd[this[_0x3c8e27(0xa2f)][_0x541446][_0x3c8e27(0x229)]];}}}else{if(_0x537d95(0x77b)!==_0x537d95(0x787))VisuMZ[_0x537d95(0x886)]['Scene_Battle_commandFight'][_0x537d95(0x86d)](this);else{function _0x48042a(){_0x2e78dd=_0xc79609;}}}},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x88e)]=function(){const _0x4002d5=_0xf2f935;if(!VisuMZ[_0x4002d5(0x886)]['TpbActiveChangeEnabled'])return;if(Imported[_0x4002d5(0xa64)]&&BattleManager[_0x4002d5(0x3d7)]())return;const _0x36df40=$gameParty[_0x4002d5(0x4ae)]()['filter'](_0xa8ff32=>_0xa8ff32[_0x4002d5(0x6c0)]()&&_0xa8ff32['canInput']());BattleManager[_0x4002d5(0x5a1)]=_0x36df40[0x0]||null,BattleManager['_currentActor']&&BattleManager[_0x4002d5(0x5a1)][_0x4002d5(0x291)](_0x4002d5(0x430));},VisuMZ[_0xf2f935(0x886)]['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x748)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x748)]=function(){const _0x5cd417=_0xf2f935;VisuMZ[_0x5cd417(0x886)]['Scene_Battle_createActorCommandWindow'][_0x5cd417(0x86d)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xa08)]=function(){const _0x35741c=_0xf2f935,_0x1ac9a9=this['_actorCommandWindow'];_0x1ac9a9[_0x35741c(0x52f)](_0x35741c(0x4d4),this[_0x35741c(0xb4b)][_0x35741c(0x6cb)](this)),_0x1ac9a9[_0x35741c(0x52f)](_0x35741c(0xb1c),this['actorCommandAutoBattle'][_0x35741c(0x6cb)](this)),_0x1ac9a9[_0x35741c(0x52f)]('singleSkill',this[_0x35741c(0x5e6)][_0x35741c(0x6cb)](this));if(BattleManager[_0x35741c(0x349)]()){if(this[_0x35741c(0xb70)]()){if(_0x35741c(0x80e)===_0x35741c(0x896)){function _0x13e040(){return _0x335801['boxWidth'];}}else delete _0x1ac9a9[_0x35741c(0xa07)][_0x35741c(0x338)];}else _0x1ac9a9[_0x35741c(0x52f)](_0x35741c(0x338),this['actorCommandCancelTPB']['bind'](this));}},Scene_Battle[_0xf2f935(0x2dc)]['actorCommandEscape']=function(){const _0x4510ee=_0xf2f935;this[_0x4510ee(0x670)]();},Scene_Battle['prototype'][_0xf2f935(0x6cc)]=function(){const _0xb69c1=_0xf2f935;BattleManager[_0xb69c1(0x3fa)]()[_0xb69c1(0xa39)](),BattleManager[_0xb69c1(0x851)](),BattleManager[_0xb69c1(0x699)](),this[_0xb69c1(0x26e)]();},Scene_Battle[_0xf2f935(0x2dc)]['actorCommandSingleSkill']=function(){const _0x4e298c=_0xf2f935,_0x579de3=BattleManager[_0x4e298c(0x98f)]();_0x579de3[_0x4e298c(0xa35)](this[_0x4e298c(0x67f)][_0x4e298c(0x35e)]()),this[_0x4e298c(0x5f6)]();},Scene_Battle[_0xf2f935(0x2dc)]['actorCommandCancelTPB']=function(){const _0x2830b7=_0xf2f935;this[_0x2830b7(0xa6b)]()?this['performTpbActiveCheckSwitch']():this[_0x2830b7(0x391)]();},VisuMZ['BattleCore']['TpbActiveChangeEnabled']=![],Scene_Battle[_0xf2f935(0x2dc)]['tpbActorSwitchConditionsMet']=function(){const _0xff9d02=_0xf2f935;if(Imported[_0xff9d02(0xa64)]&&BattleManager[_0xff9d02(0x3d7)]())return![];else{if('chIof'===_0xff9d02(0xa73)){function _0x29d50c(){const _0x53e02f=_0xff9d02;this[_0x53e02f(0x492)](_0x314c10,'tp',_0x4d51fa+0x88*0x2+(_0x26a522[_0x53e02f(0x339)]||0x0),_0x483301+(_0x124885[_0x53e02f(0x8a5)]||0x0));}}else{if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return![];const _0x307a19=$gameParty[_0xff9d02(0x4ae)]()[_0xff9d02(0xba4)](_0x2298c7=>_0x2298c7[_0xff9d02(0x6c0)]()&&_0x2298c7['canInput']());return _0x307a19['length']>0x0&&BattleManager[_0xff9d02(0x3fa)]()!==_0x307a19[_0x307a19[_0xff9d02(0x342)]-0x1];}}},Scene_Battle['prototype']['performTpbActiveCheckSwitch']=function(){const _0x3eb723=_0xf2f935,_0x103989=BattleManager[_0x3eb723(0x3fa)](),_0x4f96d4=_0x103989['battler']();if(_0x4f96d4)_0x4f96d4[_0x3eb723(0x4ac)]();const _0x2047c3=$gameParty[_0x3eb723(0x4ae)]()[_0x3eb723(0xba4)](_0x235cf5=>_0x235cf5[_0x3eb723(0x6c0)]()&&_0x235cf5[_0x3eb723(0x2ff)]()),_0x242db8=_0x2047c3[_0x3eb723(0x665)](_0x103989),_0x4f7058=_0x2047c3[_0x242db8+0x1];BattleManager[_0x3eb723(0x5a1)]=_0x4f7058||null;if(_0x4f7058)_0x4f7058[_0x3eb723(0x291)](_0x3eb723(0x430));_0x103989[_0x3eb723(0x291)](_0x3eb723(0x92e)),this['changeInputWindow']();},Scene_Battle[_0xf2f935(0x2dc)]['processActorCommandCancelTPB']=function(){const _0x1254fa=_0xf2f935;this['_partyCommandWindow']['setup'](),this[_0x1254fa(0x67f)][_0x1254fa(0x98d)]();if(!VisuMZ[_0x1254fa(0x886)][_0x1254fa(0x558)])return;if(Imported[_0x1254fa(0xa64)]&&BattleManager[_0x1254fa(0x3d7)]())return;if(BattleManager['_currentActor']){if('ESqOh'!==_0x1254fa(0x259)){BattleManager[_0x1254fa(0x5a1)][_0x1254fa(0x291)](_0x1254fa(0x92e));const _0x6b8214=BattleManager[_0x1254fa(0x5a1)][_0x1254fa(0x310)]();if(_0x6b8214)_0x6b8214[_0x1254fa(0x4ac)]();}else{function _0x1c0f21(){const _0x83a357=_0x1254fa;_0x34243b=_0x156832[this[_0x83a357(0x7e5)][_0x83a357(0xb82)]()];}}}BattleManager[_0x1254fa(0x5a1)]=null;},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa2a)]=Scene_Battle[_0xf2f935(0x2dc)]['createHelpWindow'],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xa82)]=function(){const _0x54963b=_0xf2f935;VisuMZ[_0x54963b(0x886)]['Scene_Battle_createHelpWindow'][_0x54963b(0x86d)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x30d)]=function(){const _0x3d82dd=_0xf2f935;this[_0x3d82dd(0x67f)][_0x3d82dd(0x970)](this[_0x3d82dd(0x309)]),this['_partyCommandWindow'][_0x3d82dd(0x970)](this[_0x3d82dd(0x309)]);},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x658)]=function(){const _0x1d2ce8=_0xf2f935;if($gameTemp[_0x1d2ce8(0x769)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x1d2ce8(0x5e2)])return this[_0x1d2ce8(0x5e2)];return this[_0x1d2ce8(0x5e2)]=VisuMZ[_0x1d2ce8(0x886)][_0x1d2ce8(0x650)]['BattleLayout'][_0x1d2ce8(0x578)][_0x1d2ce8(0x9cb)]()[_0x1d2ce8(0x669)](),this[_0x1d2ce8(0x5e2)]===_0x1d2ce8(0xb59)&&!Imported[_0x1d2ce8(0x493)]&&(this['_battleLayoutStyle']=_0x1d2ce8(0x6ab)),this[_0x1d2ce8(0x5e2)];},VisuMZ['BattleCore']['Scene_Battle_windowAreaHeight']=Scene_Battle['prototype'][_0xf2f935(0x8fe)],Scene_Battle[_0xf2f935(0x2dc)]['windowAreaHeight']=function(){const _0x152f7f=_0xf2f935,_0x34d93b=this['battleLayoutStyle']();switch(_0x34d93b){case'list':return this['calcWindowHeight'](Math[_0x152f7f(0x205)](0x1,$gameParty[_0x152f7f(0xa80)]()),!![]);break;default:return VisuMZ[_0x152f7f(0x886)][_0x152f7f(0x3fd)][_0x152f7f(0x86d)](this);break;}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x929)]=Scene_Battle['prototype'][_0xf2f935(0x22e)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x22e)]=function(){const _0x374d14=_0xf2f935,_0x3b3898=this[_0x374d14(0x658)]();switch(_0x3b3898){case _0x374d14(0xacf):return this['helpWindowRectBorderStyle']();break;case _0x374d14(0x6ab):case'list':case'xp':case _0x374d14(0x6cf):default:return VisuMZ[_0x374d14(0x886)]['Scene_Battle_helpWindowRect'][_0x374d14(0x86d)](this);break;}},Scene_Battle['prototype'][_0xf2f935(0x65b)]=function(){const _0x1de118=_0xf2f935,_0x294574=this[_0x1de118(0x658)]();switch(_0x294574){case'xp':case _0x1de118(0x6cf):return this['statusWindowRectXPStyle']();break;case _0x1de118(0xacf):return this[_0x1de118(0x64b)]();break;case'default':case _0x1de118(0x29a):default:return this[_0x1de118(0x4b3)]();break;}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x2f4)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x42e)],Scene_Battle['prototype']['partyCommandWindowRect']=function(){const _0x2a43f3=_0xf2f935,_0x3296d7=this[_0x2a43f3(0x658)]();switch(_0x3296d7){case'xp':case'portrait':return this[_0x2a43f3(0x6b2)]();break;case _0x2a43f3(0xacf):return this[_0x2a43f3(0x62d)]();case _0x2a43f3(0x6ab):case _0x2a43f3(0x29a):default:return this[_0x2a43f3(0xaa7)]();break;}},Scene_Battle['prototype'][_0xf2f935(0xaa7)]=function(){const _0x17beaf=_0xf2f935,_0x1fcbda=VisuMZ[_0x17beaf(0x886)][_0x17beaf(0x650)][_0x17beaf(0x4a4)],_0x24e30e=_0x1fcbda[_0x17beaf(0x4e6)]||0xc0,_0x3d5d50=this[_0x17beaf(0x8fe)](),_0x5a72f0=this[_0x17beaf(0x46a)]()?Graphics[_0x17beaf(0x760)]-_0x24e30e:0x0,_0x247049=Graphics[_0x17beaf(0x33f)]-_0x3d5d50;return new Rectangle(_0x5a72f0,_0x247049,_0x24e30e,_0x3d5d50);},Scene_Battle[_0xf2f935(0x2dc)]['actorCommandWindowRect']=function(){return this['partyCommandWindowRect']();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x503)]=Scene_Battle['prototype'][_0xf2f935(0x7f6)],Scene_Battle['prototype'][_0xf2f935(0x7f6)]=function(){const _0x5401c8=_0xf2f935,_0x363ca1=this[_0x5401c8(0x658)]();switch(_0x363ca1){case'xp':case _0x5401c8(0x6cf):case'border':break;case _0x5401c8(0x6ab):case'list':default:VisuMZ[_0x5401c8(0x886)][_0x5401c8(0x503)][_0x5401c8(0x86d)](this);break;}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa63)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x2f5)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x2f5)]=function(){const _0x5b90d3=_0xf2f935;VisuMZ[_0x5b90d3(0x886)][_0x5b90d3(0xa63)][_0x5b90d3(0x86d)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x9f9)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xb4e)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xb4e)]=function(){const _0x71456d=_0xf2f935;VisuMZ[_0x71456d(0x886)][_0x71456d(0x9f9)]['call'](this),this[_0x71456d(0x54f)][_0x71456d(0x274)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xa22)]=function(){const _0x240bbc=_0xf2f935,_0x2ced9f=this[_0x240bbc(0x658)]();['xp',_0x240bbc(0x6cf),'border'][_0x240bbc(0x7fe)](_0x2ced9f)&&this[_0x240bbc(0x67f)]['close'](),(_0x2ced9f===_0x240bbc(0xacf)||this[_0x240bbc(0xa2b)]())&&(this[_0x240bbc(0x3ef)][_0x240bbc(0x98d)](),this['_itemWindow']['close']());},VisuMZ['BattleCore'][_0xf2f935(0x3f6)]=Scene_Battle['prototype']['onActorOk'],Scene_Battle['prototype']['onActorOk']=function(){const _0x3bbaef=_0xf2f935;VisuMZ['BattleCore']['Scene_Battle_onActorOk'][_0x3bbaef(0x86d)](this),this[_0x3bbaef(0x53b)]();},Scene_Battle['prototype']['isNonSubmenuCancel']=function(){const _0x5b8eda=_0xf2f935;return[_0x5b8eda(0x989),'guard','singleSkill'][_0x5b8eda(0x7fe)](this['_actorCommandWindow'][_0x5b8eda(0x8df)]());},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x207)]=Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x7e4)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x7e4)]=function(){const _0x5e6ab9=_0xf2f935;this['isNonSubmenuCancel']()?(this[_0x5e6ab9(0xa6e)][_0x5e6ab9(0x3cc)](),this[_0x5e6ab9(0x2ce)]['hide'](),this[_0x5e6ab9(0x67f)][_0x5e6ab9(0x29d)]()):VisuMZ[_0x5e6ab9(0x886)][_0x5e6ab9(0x207)][_0x5e6ab9(0x86d)](this),this[_0x5e6ab9(0x468)]();},VisuMZ[_0xf2f935(0x886)]['Scene_Battle_onEnemyOk']=Scene_Battle['prototype'][_0xf2f935(0x597)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x597)]=function(){const _0x5475eb=_0xf2f935;VisuMZ[_0x5475eb(0x886)]['Scene_Battle_onEnemyOk']['call'](this),this[_0x5475eb(0x53b)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x5fa)]=Scene_Battle['prototype'][_0xf2f935(0xac1)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xac1)]=function(){const _0x41610d=_0xf2f935;this[_0x41610d(0x41e)]()?(this[_0x41610d(0xa6e)][_0x41610d(0x3cc)](),this['_enemyWindow'][_0x41610d(0x5f0)](),this[_0x41610d(0x67f)][_0x41610d(0x29d)]()):VisuMZ[_0x41610d(0x886)][_0x41610d(0x5fa)]['call'](this),this['cancelTargetSelectionVisibility']();},Scene_Battle['prototype'][_0xf2f935(0x53b)]=function(){const _0x550e0e=_0xf2f935,_0xfa01a6=this[_0x550e0e(0x658)]();if(_0xfa01a6===_0x550e0e(0xacf)||this['isSkillItemWindowsMiddle']()){if(_0x550e0e(0x6f1)==='mSfsk'){function _0x577cbe(){const _0x6a341b=_0x550e0e;_0x2743a5[_0x6a341b(0x593)]([_0x319a72]);}}else{this[_0x550e0e(0x3ef)][_0x550e0e(0x4c5)]();if(this['_skillWindow'][_0x550e0e(0x613)]){if(_0x550e0e(0x441)!==_0x550e0e(0x6f8))this[_0x550e0e(0x3ef)]['show']();else{function _0x1f493c(){const _0xeb4ec4=_0x550e0e,_0x4ea787=this[_0xeb4ec4(0x3f5)];_0x4ea787[_0xeb4ec4(0xb39)](_0x3a3943,0x0,_0x26a976['y'],_0x4ea787[_0xeb4ec4(0x9d0)],'center');}}}this[_0x550e0e(0x914)]['open'](),this['_itemWindow'][_0x550e0e(0x613)]&&this[_0x550e0e(0x914)][_0x550e0e(0x3cc)]();}}},Scene_Battle['prototype'][_0xf2f935(0x468)]=function(){const _0x31abb3=_0xf2f935,_0x4488b4=this['battleLayoutStyle']();['xp',_0x31abb3(0x6cf),_0x31abb3(0xacf)][_0x31abb3(0x7fe)](_0x4488b4)&&this[_0x31abb3(0x67f)][_0x31abb3(0x4c5)](),this[_0x31abb3(0x53b)]();},Scene_Battle['prototype'][_0xf2f935(0x4b3)]=function(){const _0x266058=_0xf2f935,_0x37619f=VisuMZ['BattleCore'][_0x266058(0x650)][_0x266058(0x4a4)],_0x53ef3b=Window_BattleStatus['prototype'][_0x266058(0x846)](),_0x13a105=Graphics[_0x266058(0x760)]-(_0x37619f['CommandWidth']||0xc0),_0x343064=this[_0x266058(0x8fe)]()+_0x53ef3b,_0x376a08=this[_0x266058(0x46a)]()?0x0:Graphics[_0x266058(0x760)]-_0x13a105,_0x91f955=Graphics[_0x266058(0x33f)]-_0x343064+_0x53ef3b;return new Rectangle(_0x376a08,_0x91f955,_0x13a105,_0x343064);},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xa68)]=function(){const _0x21390e=_0xf2f935,_0x49bcdf=Window_BattleStatus['prototype'][_0x21390e(0x846)](),_0x7aee5=Graphics['boxWidth'],_0x45149b=this['windowAreaHeight']()+_0x49bcdf,_0x2a891f=0x0,_0x5a717a=Graphics[_0x21390e(0x33f)]-_0x45149b+_0x49bcdf;return new Rectangle(_0x2a891f,_0x5a717a,_0x7aee5,_0x45149b);},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x6b2)]=function(){const _0x334d5a=_0xf2f935,_0x1e6876=Graphics['boxWidth']/0x2,_0x280b33=this[_0x334d5a(0x680)](VisuMZ[_0x334d5a(0x886)][_0x334d5a(0x650)][_0x334d5a(0x4a4)][_0x334d5a(0x46b)],!![]),_0x590af8=Math[_0x334d5a(0x78a)]((Graphics[_0x334d5a(0x760)]-_0x1e6876)/0x2),_0x1ad614=Graphics[_0x334d5a(0x33f)]-_0x280b33-this[_0x334d5a(0xa68)]()[_0x334d5a(0x902)];return new Rectangle(_0x590af8,_0x1ad614,_0x1e6876,_0x280b33);},Scene_Battle['prototype'][_0xf2f935(0x3c3)]=function(){const _0x363691=_0xf2f935,_0x3e5e1e=Graphics[_0x363691(0x41b)],_0x971306=Math[_0x363691(0x78a)]((Graphics[_0x363691(0x760)]-_0x3e5e1e)/0x2),_0x248e30=this[_0x363691(0x737)](),_0x5cbc71=(Graphics[_0x363691(0x902)]-Graphics[_0x363691(0x33f)])/-0x2;return new Rectangle(_0x971306,_0x5cbc71,_0x3e5e1e,_0x248e30);},Scene_Battle[_0xf2f935(0x2dc)]['statusWindowRectBorderStyle']=function(){const _0x5d245f=_0xf2f935,_0x47d29b=Graphics[_0x5d245f(0x41b)],_0x2cfcf6=Math[_0x5d245f(0x78a)]((Graphics['boxWidth']-_0x47d29b)/0x2),_0x35dbaf=this['calcWindowHeight'](0x4,!![]),_0x417386=Graphics[_0x5d245f(0x33f)]-_0x35dbaf+(Graphics[_0x5d245f(0x902)]-Graphics[_0x5d245f(0x33f)])/0x2;return new Rectangle(_0x2cfcf6,_0x417386,_0x47d29b,_0x35dbaf);},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x62d)]=function(){const _0x8a4c74=_0xf2f935,_0x12d376=Math[_0x8a4c74(0x7e8)](Graphics[_0x8a4c74(0x41b)]/0x3),_0x59d5c6=this['isRightInputMode']()?(Graphics[_0x8a4c74(0x41b)]+Graphics[_0x8a4c74(0x760)])/0x2-_0x12d376:(Graphics[_0x8a4c74(0x41b)]-Graphics['boxWidth'])/-0x2,_0x69725e=this[_0x8a4c74(0x3c3)](),_0x134212=_0x69725e['y']+_0x69725e['height'],_0x46a270=this[_0x8a4c74(0x64b)](),_0x233e52=_0x46a270['y']-_0x134212;return new Rectangle(_0x59d5c6,_0x134212,_0x12d376,_0x233e52);},Scene_Battle['prototype'][_0xf2f935(0xb33)]=function(){const _0x584261=_0xf2f935,_0x12cb40=Math[_0x584261(0x89d)](Graphics['width']/0x3),_0x5a4a0d=Math['round']((Graphics['boxWidth']-_0x12cb40)/0x2),_0x1c5a72=this['partyCommandWindowRectBorderStyle'](),_0x513fb1=_0x1c5a72['y'],_0x2ab818=_0x1c5a72['height'];return new Rectangle(_0x5a4a0d,_0x513fb1,_0x12cb40,_0x2ab818);},Scene_Battle[_0xf2f935(0x2dc)]['repositionCancelButtonBorderStyle']=function(){const _0x4dbdc2=_0xf2f935;this['_cancelButton']['y']=this['_helpWindow']['y']+this['_helpWindow'][_0x4dbdc2(0x902)];if(this[_0x4dbdc2(0x46a)]()){if(this[_0x4dbdc2(0x658)]()===_0x4dbdc2(0xacf)){if(_0x4dbdc2(0x811)===_0x4dbdc2(0xab3)){function _0x47e130(){const _0x3a6299=_0x4dbdc2;_0x4ab8ab+=_0x1cbd0f,_0x1e7fa9+=_0x15a6fe[_0x3a6299(0x8bc)]()?-_0x4f791d:_0x19ed85;}}else this[_0x4dbdc2(0x5ed)]['x']=0x8;}else{if('WqFAb'===_0x4dbdc2(0x8ce))this[_0x4dbdc2(0x5ed)]['x']=-this[_0x4dbdc2(0x5ed)]['width']-0x4;else{function _0x76bcd0(){const _0x52c43b=_0x4dbdc2;_0x1fc791['BattleCore']['Window_BattleLog_pushBaseLine'][_0x52c43b(0x86d)](this),this[_0x52c43b(0x2b0)]();}}}}else{if(_0x4dbdc2(0x2e5)!==_0x4dbdc2(0x2e5)){function _0xfbd39a(){const _0x21b820=_0x4dbdc2;return _0x3feb4e[_0x21b820(0x4ae)]()[_0x21b820(0xba4)](_0x2cd616=>_0x2cd616!==_0x2c3a1d);}}else this[_0x4dbdc2(0x5ed)]['x']=Graphics[_0x4dbdc2(0x41b)]-(Graphics[_0x4dbdc2(0x41b)]-Graphics['boxWidth'])/0x2-this[_0x4dbdc2(0x5ed)][_0x4dbdc2(0x41b)]-0x4;}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x9d6)]=Scene_Battle['prototype'][_0xf2f935(0x548)],Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x548)]=function(){const _0x3adff7=_0xf2f935;if(this[_0x3adff7(0x658)]()==='border')return this[_0x3adff7(0xb33)]();else return this['isSkillItemWindowsMiddle']()?this[_0x3adff7(0x511)]():VisuMZ[_0x3adff7(0x886)]['Scene_Battle_skillWindowRect'][_0x3adff7(0x86d)](this);},VisuMZ['BattleCore']['Scene_Battle_itemWindowRect']=Scene_Battle[_0xf2f935(0x2dc)]['itemWindowRect'],Scene_Battle[_0xf2f935(0x2dc)]['itemWindowRect']=function(){const _0x155088=_0xf2f935;if(this[_0x155088(0x658)]()===_0x155088(0xacf)){if('wdDAm'===_0x155088(0x262))return this[_0x155088(0xb33)]();else{function _0x5f16e9(){const _0x390978=_0x155088;this['_defeatedEnemies']=this[_0x390978(0x8b8)]||[];}}}else return this[_0x155088(0xa2b)]()?this[_0x155088(0x511)]():VisuMZ[_0x155088(0x886)][_0x155088(0x512)][_0x155088(0x86d)](this);},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xa2b)]=function(){const _0x24bb74=_0xf2f935;return VisuMZ[_0x24bb74(0x886)][_0x24bb74(0x650)][_0x24bb74(0x4a4)][_0x24bb74(0x971)];},Scene_Battle['prototype'][_0xf2f935(0x511)]=function(){const _0x4d2692=_0xf2f935,_0x28c583=Sprite_Button[_0x4d2692(0x2dc)]['blockWidth']()*0x2+0x4;let _0x1fd06f=Graphics[_0x4d2692(0x760)]-_0x28c583;Imported[_0x4d2692(0x758)]&&SceneManager[_0x4d2692(0xaee)]()&&(_0x1fd06f+=_0x28c583);const _0x38e6b6=this['helpAreaBottom'](),_0x2fdd50=Graphics[_0x4d2692(0x33f)]-_0x38e6b6-this['statusWindowRect']()[_0x4d2692(0x902)]+Window_BattleStatus[_0x4d2692(0x2dc)]['extraHeight'](),_0x2d5407=0x0;return new Rectangle(_0x2d5407,_0x38e6b6,_0x1fd06f,_0x2fdd50);},Scene_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x746)]=function(){const _0x1907f7=_0xf2f935;if(!VisuMZ['BattleCore'][_0x1907f7(0x650)][_0x1907f7(0x9e1)]['NameLegacy'])return;this[_0x1907f7(0x2d3)]=new Sprite(),this[_0x1907f7(0x2d3)]['x']=this[_0x1907f7(0x451)]['x'],this[_0x1907f7(0x2d3)]['y']=this[_0x1907f7(0x451)]['y'];const _0x184862=this[_0x1907f7(0x3d3)][_0x1907f7(0x665)](this[_0x1907f7(0x451)]);this[_0x1907f7(0xb9f)](this[_0x1907f7(0x2d3)],_0x184862);for(let _0x58eab4=0x0;_0x58eab4<0x8;_0x58eab4++){const _0x3f8d9f=new Window_EnemyName(_0x58eab4);this[_0x1907f7(0x2d3)][_0x1907f7(0x8de)](_0x3f8d9f);}},Sprite_Battler[_0xf2f935(0xb4d)]=VisuMZ['BattleCore'][_0xf2f935(0x650)][_0xf2f935(0x5df)]['MotionSpeed'],VisuMZ[_0xf2f935(0x886)]['Sprite_Battler_initMembers']=Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x2a3)],Sprite_Battler['prototype']['initMembers']=function(){const _0x130c1b=_0xf2f935;VisuMZ[_0x130c1b(0x886)]['Sprite_Battler_initMembers'][_0x130c1b(0x86d)](this),this[_0x130c1b(0x76a)]();if(this[_0x130c1b(0xb22)]===Sprite_Enemy)this['createShadowSprite']();this[_0x130c1b(0x9a7)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x76a)]=function(){const _0x47fe9f=_0xf2f935;this[_0x47fe9f(0x58e)]=0x0,this[_0x47fe9f(0x4de)]=0x0,this[_0x47fe9f(0x214)]=0x0,this[_0x47fe9f(0xa50)]=0x0,this[_0x47fe9f(0xbaf)]=0x0,this[_0x47fe9f(0x8a0)]=0x0,this[_0x47fe9f(0x822)]=_0x47fe9f(0xb54),this[_0x47fe9f(0x7df)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x47fe9f(0x91c)]=0x0,this[_0x47fe9f(0x8b3)]=0x0,this['_targetOpacity']=0xff,this['_opacityDuration']=0x0,this['_opacityWholeDuration']=0x0,this[_0x47fe9f(0xb26)]='Linear',this[_0x47fe9f(0x91b)]=0x0,this[_0x47fe9f(0x470)]=0x0,this[_0x47fe9f(0x31e)]=0x0,this[_0x47fe9f(0x393)]=0x0,this[_0x47fe9f(0x98b)]=_0x47fe9f(0xb54),this[_0x47fe9f(0x999)]=!![],this[_0x47fe9f(0x7ff)]=0x0,this[_0x47fe9f(0x9b5)]=0x0,this[_0x47fe9f(0xa0d)]=0x0,this[_0x47fe9f(0x9c4)]=0x0,this[_0x47fe9f(0x4f2)]=0x0,this[_0x47fe9f(0x63b)]=0x0,this['_skewEasing']=_0x47fe9f(0xb54),this[_0x47fe9f(0x980)]=0x1,this[_0x47fe9f(0x813)]=0x1,this['_targetGrowX']=0x1,this[_0x47fe9f(0xa61)]=0x1,this[_0x47fe9f(0x6ec)]=0x0,this[_0x47fe9f(0x3bd)]=0x0,this[_0x47fe9f(0x6e4)]='Linear',this[_0x47fe9f(0x630)]=0x1;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x327)]=function(){const _0x4c13af=_0xf2f935;this[_0x4c13af(0x471)]=new Sprite(),this[_0x4c13af(0x471)][_0x4c13af(0x266)]=ImageManager[_0x4c13af(0x7ef)]('Shadow2'),this['_shadowSprite'][_0x4c13af(0x266)]['smooth']=VisuMZ['BattleCore'][_0x4c13af(0x650)][_0x4c13af(0x5df)][_0x4c13af(0xb67)],this[_0x4c13af(0x471)][_0x4c13af(0x281)]['x']=0.5,this['_shadowSprite'][_0x4c13af(0x281)]['y']=0.5,this[_0x4c13af(0x471)]['y']=-0x2,this[_0x4c13af(0x471)][_0x4c13af(0x56c)]=![],this[_0x4c13af(0x8de)](this[_0x4c13af(0x471)]);},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x9a7)]=function(){const _0x54a8b4=_0xf2f935;this[_0x54a8b4(0x8ae)]=new Sprite(),this['_distortionSprite'][_0x54a8b4(0x281)]['x']=0.5,this[_0x54a8b4(0x8ae)][_0x54a8b4(0x281)]['y']=0.5,this[_0x54a8b4(0x8de)](this['_distortionSprite']);},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x21c)]=function(){const _0x30ccc2=_0xf2f935;if(!this[_0x30ccc2(0x8ae)])return;if(this['_shadowSprite']){if(_0x30ccc2(0xaae)===_0x30ccc2(0x448)){function _0x424b10(){const _0x108a40=_0x30ccc2;return this[_0x108a40(0x89b)]||0x0;}}else{const _0x352a14=this['getChildIndex'](this['_distortionSprite']);this[_0x30ccc2(0xb9f)](this[_0x30ccc2(0x471)],_0x352a14),this[_0x30ccc2(0x4cc)]();}}if(this[_0x30ccc2(0x847)]){if(_0x30ccc2(0x8d0)===_0x30ccc2(0x408)){function _0x39d9bf(){const _0x159b1b=_0x30ccc2;return _0x159b1b(0xbc4);}}else this[_0x30ccc2(0x8ae)]['addChild'](this[_0x30ccc2(0x847)]);}this['_weaponSprite']&&this['_distortionSprite']['addChild'](this[_0x30ccc2(0x472)]),this['_mainSprite']&&this[_0x30ccc2(0x8ae)][_0x30ccc2(0x8de)](this['_mainSprite']),this[_0x30ccc2(0x230)]&&this[_0x30ccc2(0x8ae)][_0x30ccc2(0x8de)](this[_0x30ccc2(0x230)]);},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x4cc)]=function(){const _0xad816a=_0xf2f935;if(!this['_shadowSprite'])return;if(this['_battler']&&this[_0xad816a(0x45b)][_0xad816a(0x31c)]()){const _0x2d0102=this[_0xad816a(0x471)][_0xad816a(0x266)];this[_0xad816a(0x471)]['setFrame'](0x0,0x0,_0x2d0102[_0xad816a(0x41b)],_0x2d0102[_0xad816a(0x902)]);}else this[_0xad816a(0x471)][_0xad816a(0x4b6)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5bd)]=function(){const _0x14cc1f=_0xf2f935;if(SceneManager[_0x14cc1f(0x731)]()){if(_0x14cc1f(0x969)!==_0x14cc1f(0x969)){function _0x2c9ffe(){const _0x46f87a=_0x14cc1f,_0x303513=_0x179b28[_0x46f87a(0x502)]('['+_0x3dcbc0['$1'][_0x46f87a(0x78e)](/\d+/g)+']');for(const _0x1a57da of _0x303513){if(!_0x3c96b7[_0x46f87a(0x99b)](_0x1a57da))return!![];}return![];}}else return SceneManager[_0x14cc1f(0xb95)]['_spriteset'][_0x14cc1f(0x62c)];}else return this[_0x14cc1f(0xb03)];},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x353)]=function(_0xf017fd,_0x2648e9){const _0x2bc5d0=_0xf2f935;if(!this[_0x2bc5d0(0x45b)]['isSpriteVisible']())return;const _0x10ee69=VisuMZ[_0x2bc5d0(0x886)][_0x2bc5d0(0x650)][_0x2bc5d0(0xb17)],_0x1bb1df=new Sprite_Damage();_0x1bb1df['_duration']=_0x10ee69[_0x2bc5d0(0x640)],this[_0x2bc5d0(0xa06)](_0x1bb1df),_0x1bb1df['setupTextPopup'](_0xf017fd,_0x2648e9),this[_0x2bc5d0(0xa6a)](_0x1bb1df);},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5c7)]=function(_0x36b6d4,_0x57da3b,_0x54a8d7){const _0x12e959=_0xf2f935;if(!this[_0x12e959(0x45b)][_0x12e959(0x85b)]())return;const _0x144f3f=VisuMZ[_0x12e959(0x886)][_0x12e959(0x650)][_0x12e959(0xb17)],_0x5ec45c=new Sprite_Damage();_0x5ec45c['_duration']=_0x144f3f[_0x12e959(0x640)],this['sortDamageSprites'](_0x5ec45c),_0x5ec45c[_0x12e959(0x5c7)](_0x36b6d4,_0x57da3b,_0x54a8d7),this[_0x12e959(0xa6a)](_0x5ec45c);},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x783)]=function(){const _0x189e12=_0xf2f935;if(!this[_0x189e12(0x45b)][_0x189e12(0x3fe)]())return;while(this[_0x189e12(0x45b)][_0x189e12(0x3fe)]()){this['_battler'][_0x189e12(0x85b)]()&&this['createDamageSprite']();}this[_0x189e12(0x45b)][_0x189e12(0x96f)](),this[_0x189e12(0x45b)][_0x189e12(0xb92)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x9e7)]=function(){const _0x45fc7c=_0xf2f935,_0x4fdfbd=VisuMZ[_0x45fc7c(0x886)]['Settings'][_0x45fc7c(0xb17)],_0x4e9bbe=new Sprite_Damage();_0x4e9bbe[_0x45fc7c(0x7c4)]=_0x4fdfbd['PopupDuration'],this[_0x45fc7c(0xa06)](_0x4e9bbe),_0x4e9bbe[_0x45fc7c(0x696)](this[_0x45fc7c(0x45b)]),_0x4e9bbe['setupBattleCore'](this[_0x45fc7c(0x45b)]),this[_0x45fc7c(0xa6a)](_0x4e9bbe);},Sprite_Battler[_0xf2f935(0x2dc)]['addDamageSprite']=function(_0x36d6fe){const _0x5031bc=_0xf2f935;this[_0x5031bc(0x23b)][_0x5031bc(0x580)](_0x36d6fe);if(this[_0x5031bc(0x919)]()){if(_0x5031bc(0x644)!==_0x5031bc(0x644)){function _0x2bc3a0(){_0x32906c=_0x174127(_0x4da7ae['$1']);}}else SceneManager[_0x5031bc(0xb95)]['_statusWindow'][_0x5031bc(0xa6a)](_0x36d6fe,this[_0x5031bc(0x45b)]);}else{this[_0x5031bc(0x5bd)]()['addChild'](_0x36d6fe);if(SceneManager[_0x5031bc(0x842)]())_0x36d6fe[_0x5031bc(0x3f0)]['x']=-0x1;}},Sprite_Battler['prototype']['isShownOnBattlePortrait']=function(){const _0x1b1a58=_0xf2f935;return!$gameSystem[_0x1b1a58(0x649)]()&&this[_0x1b1a58(0x45b)]&&this[_0x1b1a58(0x45b)][_0x1b1a58(0x8bc)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa06)]=function(_0x5f419d){const _0x2e0bf4=_0xf2f935;this[_0x2e0bf4(0x24a)](_0x5f419d,!![]);const _0x2b1660=VisuMZ[_0x2e0bf4(0x886)][_0x2e0bf4(0x650)]['Damage'],_0x154b7b=SceneManager[_0x2e0bf4(0x842)]()?-0x1:0x1;if(_0x2b1660[_0x2e0bf4(0x78b)])for(const _0x791543 of this[_0x2e0bf4(0x23b)]){if(_0x2e0bf4(0xa58)===_0x2e0bf4(0xa58))_0x791543['x']+=_0x2b1660['PopupShiftX']*_0x154b7b,_0x791543['y']+=_0x2b1660[_0x2e0bf4(0x255)];else{function _0x2bb8ce(){const _0x5cc232=_0x2e0bf4;_0x485c2f=this['_baseLineStack'][this[_0x5cc232(0x5dc)][_0x5cc232(0x342)]-0x1];}}}else{if(_0x2e0bf4(0xae7)!==_0x2e0bf4(0x8f0)){const _0x46efea=this[_0x2e0bf4(0x23b)][this[_0x2e0bf4(0x23b)]['length']-0x1];_0x46efea&&(_0x5f419d['x']=_0x46efea['x']+_0x2b1660[_0x2e0bf4(0x73b)]*_0x154b7b,_0x5f419d['y']=_0x46efea['y']+_0x2b1660[_0x2e0bf4(0x255)]);}else{function _0x467431(){const _0x451f60=_0x2e0bf4;_0x356fa6[_0x451f60(0x96c)](_0x531a2b);}}}},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x24a)]=function(_0x2646a6,_0x11188d){const _0x3169a4=_0xf2f935,_0x33621a=SceneManager[_0x3169a4(0x842)]()?-0x1:0x1;let _0x1e6e58=this['_baseX'];_0x1e6e58+=this[_0x3169a4(0x9d1)]();let _0x94cbf4=this['_baseY'];const _0x5f665=this[_0x3169a4(0x8ae)][_0x3169a4(0x3f0)]['y'];_0x94cbf4+=this[_0x3169a4(0x5fd)]();const _0xde23d0=SceneManager['_scene'][_0x3169a4(0xa6e)];if(_0xde23d0&&this[_0x3169a4(0xb03)]===_0xde23d0){_0x1e6e58+=_0xde23d0['x']-this[_0x3169a4(0x2d6)]();const _0xfe534d=_0xde23d0[_0x3169a4(0xbd6)]()*0x3/0x4;_0x94cbf4=_0xde23d0['y']+_0xfe534d,_0x94cbf4=Math[_0x3169a4(0x8ec)](_0x94cbf4,_0xde23d0['y']+this['y']-this[_0x3169a4(0x902)]+_0xfe534d);}_0x2646a6['x']=Math['round'](_0x1e6e58+this[_0x3169a4(0x2d6)]()*_0x33621a),_0x2646a6['y']=Math[_0x3169a4(0x78a)](_0x94cbf4+this[_0x3169a4(0xb8e)]());},VisuMZ[_0xf2f935(0x886)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0xf2f935(0x2dc)]['damageOffsetX'],Sprite_Battler[_0xf2f935(0x2dc)]['damageOffsetX']=function(){const _0x21c7ef=_0xf2f935;let _0x14b6f2=VisuMZ[_0x21c7ef(0x886)][_0x21c7ef(0x461)][_0x21c7ef(0x86d)](this),_0xe72b61=VisuMZ[_0x21c7ef(0x886)][_0x21c7ef(0x650)]['Damage'][_0x21c7ef(0x465)]||0x0;return Math[_0x21c7ef(0x78a)](_0x14b6f2+_0xe72b61);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x7b5)]=Sprite_Battler['prototype'][_0xf2f935(0xb8e)],Sprite_Battler[_0xf2f935(0x2dc)]['damageOffsetY']=function(){const _0x3fb60a=_0xf2f935;let _0x3c5cb=VisuMZ[_0x3fb60a(0x886)][_0x3fb60a(0x7b5)][_0x3fb60a(0x86d)](this);switch(VisuMZ[_0x3fb60a(0x886)][_0x3fb60a(0x650)][_0x3fb60a(0xb17)]['PopupPosition']){case _0x3fb60a(0x777):_0x3c5cb-=this['height']*this['scale']['y'];break;case _0x3fb60a(0x535):_0x3c5cb-=this[_0x3fb60a(0x902)]*this['scale']['y']*0.5;break;}let _0x5f1971=VisuMZ[_0x3fb60a(0x886)][_0x3fb60a(0x650)][_0x3fb60a(0xb17)][_0x3fb60a(0x4fb)]||0x0;return Math[_0x3fb60a(0x78a)](_0x3c5cb+_0x5f1971);},Sprite_Actor['prototype'][_0xf2f935(0x2d6)]=function(){const _0x989216=_0xf2f935;return Sprite_Battler[_0x989216(0x2dc)]['damageOffsetX'][_0x989216(0x86d)](this);},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xb8e)]=function(){const _0x166e08=_0xf2f935;return Sprite_Battler[_0x166e08(0x2dc)][_0x166e08(0xb8e)]['call'](this);},Sprite_Battler['prototype'][_0xf2f935(0xb2b)]=function(_0x7826d){const _0x22ffda=_0xf2f935;this[_0x22ffda(0x919)]()?SceneManager[_0x22ffda(0xb95)][_0x22ffda(0xa6e)][_0x22ffda(0x73c)](_0x7826d):(this['damageContainer']()[_0x22ffda(0xa7b)](_0x7826d),this[_0x22ffda(0x23b)][_0x22ffda(0xbb8)](_0x7826d),_0x7826d['destroy']());},VisuMZ['BattleCore'][_0xf2f935(0x5bc)]=Sprite_Battler['prototype'][_0xf2f935(0x386)],Sprite_Battler['prototype'][_0xf2f935(0x386)]=function(_0x32d0bb,_0x448dad){const _0x428822=_0xf2f935,_0x3f664b=VisuMZ[_0x428822(0x886)][_0x428822(0x650)];if(this[_0x428822(0xb22)]===Sprite_Actor){if('ehGil'!==_0x428822(0x91d))_0x32d0bb+=_0x3f664b[_0x428822(0x5df)][_0x428822(0xa45)]||0x0,_0x448dad+=_0x3f664b[_0x428822(0x5df)]['OffsetY']||0x0;else{function _0x2dfdf7(){const _0x515ad9=_0x428822;this[_0x515ad9(0xa87)](),this[_0x515ad9(0x472)][_0x515ad9(0x696)](_0x797d21),this['_actor'][_0x515ad9(0x7bb)]();}}}else{if(this[_0x428822(0xb22)]===Sprite_Enemy){if('fQSna'===_0x428822(0x601))_0x32d0bb+=_0x3f664b[_0x428822(0x9e1)][_0x428822(0xa45)]||0x0,_0x448dad+=_0x3f664b[_0x428822(0x9e1)][_0x428822(0x1f1)]||0x0;else{function _0x59990a(){const _0x79340f=_0x428822;this['_distortionSprite'][_0x79340f(0x216)]['x']=this[_0x79340f(0xa0d)],this['_distortionSprite'][_0x79340f(0x216)]['y']=this[_0x79340f(0x9c4)];}}}}VisuMZ[_0x428822(0x886)][_0x428822(0x5bc)][_0x428822(0x86d)](this,_0x32d0bb,_0x448dad);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x8f8)]=Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb36)],Sprite_Battler[_0xf2f935(0x2dc)]['update']=function(){const _0x95a6c3=_0xf2f935;VisuMZ[_0x95a6c3(0x886)][_0x95a6c3(0x8f8)][_0x95a6c3(0x86d)](this),!this['_battler']&&this['_hpGaugeSprite']&&(this[_0x95a6c3(0x2c6)][_0x95a6c3(0x56c)]=![]);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x3e5)]=Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x403)],Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x403)]=function(){const _0x437659=_0xf2f935;this[_0x437659(0x27e)](),this[_0x437659(0x72c)](),this['updateSpin'](),this[_0x437659(0xad6)](),this[_0x437659(0xad7)](),VisuMZ[_0x437659(0x886)][_0x437659(0x3e5)][_0x437659(0x86d)](this);if(this[_0x437659(0xb22)]===Sprite_Enemy)this[_0x437659(0x49b)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xbba)]=Sprite_Battler['prototype'][_0xf2f935(0x885)],Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x885)]=function(){const _0x410599=_0xf2f935;VisuMZ[_0x410599(0x886)][_0x410599(0xbba)]['call'](this),this[_0x410599(0xa14)](),this[_0x410599(0xbcc)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa14)]=function(){const _0x93b589=_0xf2f935;this['_baseX']=this['x'],this[_0x93b589(0x4de)]=this['y'],this[_0x93b589(0x75b)](),this[_0x93b589(0x479)](),this['x']+=this[_0x93b589(0x9d1)](),this['y']+=this[_0x93b589(0x5fd)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x93b589(0x7e8)](this['x']),this['y']=Math[_0x93b589(0x7e8)](this['y']);},Sprite_Battler['prototype']['extraPositionX']=function(){let _0x38ff27=0x0;return _0x38ff27;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5fd)]=function(){const _0x4c07de=_0xf2f935;let _0x5b40ec=0x0;if(this[_0x4c07de(0x45b)]&&!this['_battler'][_0x4c07de(0x52a)]()){if(_0x4c07de(0xa7d)===_0x4c07de(0xa7d))_0x5b40ec-=this['_floatHeight'],_0x5b40ec-=this[_0x4c07de(0x7df)];else{function _0x37f108(){const _0x4376f1=_0x4c07de;if(!_0x1692de[_0x4376f1(0x886)][_0x4376f1(0x650)][_0x4376f1(0x903)][_0x4376f1(0x4a6)])return;_0x3754a0['BattleCore']['Window_BattleLog_displayCurrentState'][_0x4376f1(0x86d)](this,_0x943de2);}}}return _0x5b40ec;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x907)]=function(){const _0xbed2eb=_0xf2f935;let _0x1906f6=0x0;if(this[_0xbed2eb(0x8ae)]&&this['constructor']!==Sprite_SvEnemy){if(_0xbed2eb(0xb6c)!==_0xbed2eb(0x270)){const _0xcbae50=this['_distortionSprite'][_0xbed2eb(0x3f0)]['y'];_0x1906f6-=(_0xcbae50-0x1)*this[_0xbed2eb(0x902)];}else{function _0x51d751(){const _0x3c7027=_0xbed2eb;for(const _0x11c48e of this[_0x3c7027(0x7d5)]()){if(_0x11c48e)_0x11c48e[_0x3c7027(0xb99)](_0x348cc7);}}}}return _0x1906f6;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xad6)]=function(){const _0x3a7701=_0xf2f935,_0x3be9f7=this[_0x3a7701(0x45b)]&&this['_battler'][_0x3a7701(0x3e8)]();this[_0x3a7701(0x630)]=(_0x3be9f7?-0x1:0x1)*Math['abs'](this[_0x3a7701(0x3f0)]['x']);},Sprite_Battler['prototype'][_0xf2f935(0x6dd)]=function(_0x537528,_0x1e302f,_0x18ee5b){const _0x13c708=_0xf2f935;if(!this[_0x13c708(0x99e)]())return;if(this[_0x13c708(0xa50)]===_0x537528)return;this[_0x13c708(0xa50)]=_0x537528,this[_0x13c708(0xbaf)]=_0x1e302f,this['_floatWholeDuration']=_0x1e302f,this[_0x13c708(0x822)]=_0x18ee5b||_0x13c708(0xb54);if(_0x1e302f<=0x0)this[_0x13c708(0x214)]=_0x537528;},Sprite_Battler['prototype'][_0xf2f935(0x75b)]=function(){const _0x42c939=_0xf2f935;if(this[_0x42c939(0xbaf)]<=0x0)return;const _0x63a04b=this[_0x42c939(0xbaf)],_0x26c1c1=this[_0x42c939(0x8a0)],_0x3455f4=this[_0x42c939(0x822)];if(Imported[_0x42c939(0x758)]){if('ewBpf'!==_0x42c939(0x553)){function _0x65c293(){const _0x71d95=_0x42c939;this[_0x71d95(0x955)]();}}else this[_0x42c939(0x214)]=this['applyEasing'](this['_floatHeight'],this['_targetFloatHeight'],_0x63a04b,_0x26c1c1,_0x3455f4);}else this[_0x42c939(0x214)]=(this[_0x42c939(0x214)]*(_0x63a04b-0x1)+this[_0x42c939(0xa50)])/_0x63a04b;this[_0x42c939(0xbaf)]--;if(this[_0x42c939(0xbaf)]<=0x0)this[_0x42c939(0xb37)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb37)]=function(){const _0x2b0cd6=_0xf2f935;this[_0x2b0cd6(0x214)]=this[_0x2b0cd6(0xa50)];},Sprite_Battler[_0xf2f935(0x2dc)]['isFloating']=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x9fb)]=function(_0x36f1d4,_0x507f67){const _0x1936a0=_0xf2f935;if(!this[_0x1936a0(0x99e)]())return;if(_0x507f67<=0x0)return;this[_0x1936a0(0x79d)]=_0x36f1d4,this[_0x1936a0(0x91c)]=_0x507f67,this[_0x1936a0(0x8b3)]=_0x507f67;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x479)]=function(){const _0x16bc38=_0xf2f935;if(this[_0x16bc38(0x91c)]<=0x0)return;const _0x35c49a=this[_0x16bc38(0x8b3)]-this[_0x16bc38(0x91c)],_0x17ba47=this[_0x16bc38(0x8b3)]/0x2,_0x3594f4=this[_0x16bc38(0x79d)],_0x206dc7=-_0x3594f4/Math[_0x16bc38(0xa51)](_0x17ba47,0x2);this[_0x16bc38(0x7df)]=_0x206dc7*Math['pow'](_0x35c49a-_0x17ba47,0x2)+_0x3594f4,this[_0x16bc38(0x91c)]--;if(this[_0x16bc38(0x91c)]<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x705)]=function(){const _0x4a93a5=_0xf2f935;this[_0x4a93a5(0x7df)]=0x0;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x8c6)]=function(){const _0x1c121b=_0xf2f935;return this[_0x1c121b(0x91c)]>0x0;},Sprite_Battler['prototype'][_0xf2f935(0x832)]=function(_0x3591e3,_0x4f2429,_0x19dc20){const _0x5b2533=_0xf2f935;if(this[_0x5b2533(0x36e)]===_0x3591e3)return;this[_0x5b2533(0x36e)]=_0x3591e3,this[_0x5b2533(0x6d3)]=_0x4f2429,this[_0x5b2533(0xae5)]=_0x4f2429,this['_opacityEasing']=_0x19dc20||_0x5b2533(0xb54);if(_0x4f2429<=0x0)this[_0x5b2533(0x9c2)]=_0x3591e3;},Sprite_Battler[_0xf2f935(0x2dc)]['updateOpacity']=function(){const _0x1cf731=_0xf2f935;if(this[_0x1cf731(0x6d3)]<=0x0)return;const _0x3e6531=this[_0x1cf731(0x6d3)],_0x300634=this[_0x1cf731(0xae5)],_0x26c69b=this[_0x1cf731(0xb26)];if(Imported[_0x1cf731(0x758)]){if(_0x1cf731(0xb7b)!==_0x1cf731(0xb77))this[_0x1cf731(0x9c2)]=this['applyEasing'](this[_0x1cf731(0x9c2)],this['_targetOpacity'],_0x3e6531,_0x300634,_0x26c69b);else{function _0x3d18ca(){const _0x3ae57e=_0x1cf731,_0x420fad=this['autoBattleWindowRect']();this[_0x3ae57e(0x88c)]=new _0x15bc8d(_0x420fad),this['_autoBattleWindow'][_0x3ae57e(0x5f0)](),this[_0x3ae57e(0x8de)](this[_0x3ae57e(0x88c)]);}}}else this[_0x1cf731(0x9c2)]=(this[_0x1cf731(0x9c2)]*(_0x3e6531-0x1)+this[_0x1cf731(0x36e)])/_0x3e6531;this[_0x1cf731(0x6d3)]--;if(this[_0x1cf731(0x6d3)]<=0x0)this[_0x1cf731(0xb8c)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb8c)]=function(){const _0xd92a4f=_0xf2f935;this[_0xd92a4f(0x9c2)]=this[_0xd92a4f(0x36e)];},Sprite_Battler[_0xf2f935(0x2dc)]['isChangingOpacity']=function(){const _0x44e92e=_0xf2f935;return this[_0x44e92e(0x6d3)]>0x0;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x49b)]=function(){const _0x187075=_0xf2f935;this[_0x187075(0x471)][_0x187075(0x56c)]=this[_0x187075(0x45b)][_0x187075(0x897)](),this[_0x187075(0x1de)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x1de)]=function(){const _0x26d34a=_0xf2f935;if(!this[_0x26d34a(0x471)])return;this['_shadowSprite']['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x8d9)]=function(){const _0x1898d8=_0xf2f935;if(!this[_0x1898d8(0x45b)])return;this[_0x1898d8(0x912)]=this[_0x1898d8(0x45b)][_0x1898d8(0x556)](),this['_shadowScaleY']=this[_0x1898d8(0x45b)][_0x1898d8(0xaad)]();},Game_BattlerBase['prototype'][_0xf2f935(0x556)]=function(){const _0x534b34=_0xf2f935,_0x4d051e=this[_0x534b34(0x8bc)]()?this[_0x534b34(0x3fa)]():this['enemy']();if(_0x4d051e){if('TvvjH'===_0x534b34(0x69a)){function _0xc3414e(){const _0x4da6ba=_0x534b34;if(_0x8b1300[_0x4da6ba(0x886)]['Settings']['BattleLog'][_0x4da6ba(0xadc)])return _0x575fbe[_0x4da6ba(0x886)]['Settings'][_0x4da6ba(0x903)][_0x4da6ba(0xadc)][_0x4da6ba(0x86d)](this);return _0x2a455d[_0x4da6ba(0x886)][_0x4da6ba(0x3ab)]['call'](this);}}else{const _0x37a44c=_0x4d051e[_0x534b34(0xbc2)];if(_0x37a44c['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x37a44c['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x534b34(0x9d7)!=='eZmdF'){function _0x5852c4(){const _0x545be6=_0x534b34;return this[_0x545be6(0x41b)]*this[_0x545be6(0xb8a)]();}}else return Number(RegExp['$1'])||0x0;}}}}return 0x1;},Game_BattlerBase[_0xf2f935(0x2dc)][_0xf2f935(0xaad)]=function(){const _0x55305e=_0xf2f935,_0x10c920=this[_0x55305e(0x8bc)]()?this['actor']():this['enemy']();if(_0x10c920){if(_0x55305e(0x350)===_0x55305e(0x724)){function _0x2fe319(){const _0x62577e=_0x55305e;this['_stateIconSprite'][_0x62577e(0x9c2)]=0x0;return;}}else{const _0x46a53b=_0x10c920[_0x55305e(0xbc2)];if(_0x46a53b[_0x55305e(0x78e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x46a53b['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x27e)]=function(){const _0x3ff5f3=_0xf2f935;if(this[_0x3ff5f3(0xb22)]===Sprite_SvEnemy)return;this['updateGrow'](),this['finalizeScale']();},Sprite_Battler[_0xf2f935(0x2dc)]['finalizeScale']=function(){const _0x5be1df=_0xf2f935,_0x17bb23=this['_distortionSprite'];_0x17bb23&&(_0x17bb23[_0x5be1df(0x3f0)]['x']=this['mainSpriteScaleX'](),_0x17bb23[_0x5be1df(0x3f0)]['y']=this[_0x5be1df(0x7e3)]());},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb8a)]=function(){const _0x41c98c=_0xf2f935;let _0x2d14f5=0x1;return _0x2d14f5*=this[_0x41c98c(0x630)],_0x2d14f5*=this['_growX'],_0x2d14f5;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x7e3)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x29b)]=function(){const _0x3b9933=_0xf2f935;return this[_0x3b9933(0x41b)]*this['mainSpriteScaleX']();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xa0f)]=function(){const _0x455183=_0xf2f935;return this[_0x455183(0x902)]*this[_0x455183(0x7e3)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x7e7)]=function(_0x550736,_0x5bdad3,_0x163c0c,_0x4015a8){const _0x2cc0ae=_0xf2f935;if(!this[_0x2cc0ae(0x99e)]())return;if(!this[_0x2cc0ae(0x8ae)])return;if(this[_0x2cc0ae(0x31f)]===_0x550736&&this[_0x2cc0ae(0xa61)]===_0x5bdad3)return;this[_0x2cc0ae(0x31f)]=_0x550736,this[_0x2cc0ae(0xa61)]=_0x5bdad3,this['_growDuration']=_0x163c0c,this[_0x2cc0ae(0x3bd)]=_0x163c0c,this[_0x2cc0ae(0x6e4)]=_0x4015a8||_0x2cc0ae(0xb54);if(_0x163c0c<=0x0){if('OfiFt'==='BpnxE'){function _0x380936(){const _0x247da4=_0x2cc0ae;if(!_0x4339c3[_0x247da4(0x886)][_0x247da4(0x650)]['BattleLayout'][_0x247da4(0x43a)])return![];if(_0x4de537[_0x247da4(0x678)]())return!![];return _0x507c71[_0x247da4(0x632)]&&_0xc7844f['getMenuImage']();}}else this[_0x2cc0ae(0x980)]=this[_0x2cc0ae(0x31f)],this[_0x2cc0ae(0x813)]=this['_targetGrowY'];}},Sprite_Battler['prototype'][_0xf2f935(0x3fc)]=function(){const _0x3e7f1a=_0xf2f935;if(this[_0x3e7f1a(0x6ec)]<=0x0)return;if(!this[_0x3e7f1a(0x8ae)])return;const _0x28d921=this['_growDuration'],_0x97f4af=this[_0x3e7f1a(0x3bd)],_0x2960f0=this['_growEasing'];if(Imported[_0x3e7f1a(0x758)]){if(_0x3e7f1a(0x749)!==_0x3e7f1a(0x749)){function _0x558b0b(){const _0x1b7349=_0x3e7f1a;this[_0x1b7349(0x474)][_0x1b7349(0x5f1)](_0x1947f0,0x0,_0x3945f9);}}else this[_0x3e7f1a(0x980)]=this[_0x3e7f1a(0xa52)](this['_growX'],this[_0x3e7f1a(0x31f)],_0x28d921,_0x97f4af,_0x2960f0),this[_0x3e7f1a(0x813)]=this[_0x3e7f1a(0xa52)](this[_0x3e7f1a(0x813)],this[_0x3e7f1a(0xa61)],_0x28d921,_0x97f4af,_0x2960f0);}else this['_growX']=(this[_0x3e7f1a(0x980)]*(_0x28d921-0x1)+this[_0x3e7f1a(0x31f)])/_0x28d921,this[_0x3e7f1a(0x813)]=(this[_0x3e7f1a(0x813)]*(_0x28d921-0x1)+this[_0x3e7f1a(0xa61)])/_0x28d921;this[_0x3e7f1a(0x6ec)]--;if(this[_0x3e7f1a(0x6ec)]<=0x0)this[_0x3e7f1a(0x531)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x531)]=function(){const _0x222b2f=_0xf2f935;this[_0x222b2f(0x980)]=this['_targetGrowX'],this[_0x222b2f(0x813)]=this['_targetGrowY'];},Sprite_Battler[_0xf2f935(0x2dc)]['isGrowing']=function(){const _0x9d829e=_0xf2f935;return this[_0x9d829e(0x6ec)]>0x0;},Sprite_Battler[_0xf2f935(0x2dc)]['startSkew']=function(_0x1ee92b,_0x1ff7f4,_0x14d16b,_0x1387c6){const _0x30466e=_0xf2f935;if(!this[_0x30466e(0x99e)]())return;if(!this[_0x30466e(0x8ae)])return;if(this[_0x30466e(0xa0d)]===_0x1ee92b&&this['_targetSkewY']===_0x1ff7f4)return;this[_0x30466e(0xa0d)]=_0x1ee92b,this[_0x30466e(0x9c4)]=_0x1ff7f4,this['_skewDuration']=_0x14d16b,this[_0x30466e(0x63b)]=_0x14d16b,this[_0x30466e(0x6b1)]=_0x1387c6||_0x30466e(0xb54);if(_0x14d16b<=0x0){if('IPwzc'===_0x30466e(0x411))this[_0x30466e(0x8ae)]['skew']['x']=this[_0x30466e(0xa0d)],this[_0x30466e(0x8ae)][_0x30466e(0x216)]['y']=this[_0x30466e(0x9c4)];else{function _0x56a7f9(){const _0x387da4=_0x30466e;this['_distortionSprite']['skew']['x']=this[_0x387da4(0xa0d)],this[_0x387da4(0x8ae)][_0x387da4(0x216)]['y']=this[_0x387da4(0x9c4)];}}}},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x72c)]=function(){const _0x4023f2=_0xf2f935;if(this[_0x4023f2(0x4f2)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x2b0645=this[_0x4023f2(0x4f2)],_0x210cac=this['_skewWholeDuration'],_0x54affe=this[_0x4023f2(0x6b1)],_0x3d9cbc=this['_distortionSprite'];if(Imported[_0x4023f2(0x758)])_0x3d9cbc[_0x4023f2(0x216)]['x']=this[_0x4023f2(0xa52)](_0x3d9cbc['skew']['x'],this[_0x4023f2(0xa0d)],_0x2b0645,_0x210cac,_0x54affe),_0x3d9cbc[_0x4023f2(0x216)]['y']=this[_0x4023f2(0xa52)](_0x3d9cbc[_0x4023f2(0x216)]['y'],this[_0x4023f2(0x9c4)],_0x2b0645,_0x210cac,_0x54affe);else{if(_0x4023f2(0x2e2)!==_0x4023f2(0xac8))_0x3d9cbc[_0x4023f2(0x216)]['x']=(_0x3d9cbc[_0x4023f2(0x216)]['x']*(_0x2b0645-0x1)+this[_0x4023f2(0xa0d)])/_0x2b0645,_0x3d9cbc[_0x4023f2(0x216)]['y']=(_0x3d9cbc[_0x4023f2(0x216)]['y']*(_0x2b0645-0x1)+this[_0x4023f2(0x9c4)])/_0x2b0645;else{function _0x4d4c4f(){_0x168fd1=_0x32df26;}}}this[_0x4023f2(0x4f2)]--;if(this[_0x4023f2(0x4f2)]<=0x0)this[_0x4023f2(0x6d6)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x6d6)]=function(){const _0x154d34=_0xf2f935;this[_0x154d34(0x8ae)]['skew']['x']=this[_0x154d34(0xa0d)],this['_distortionSprite'][_0x154d34(0x216)]['y']=this[_0x154d34(0x9c4)];},Sprite_Battler[_0xf2f935(0x2dc)]['isSkewing']=function(){const _0x11203b=_0xf2f935;return this[_0x11203b(0x4f2)]>0x0;},Sprite_Battler[_0xf2f935(0x2dc)]['startSpin']=function(_0x163164,_0x3486b9,_0x2a6e27,_0x3b01ab){const _0x575c78=_0xf2f935;if(!this[_0x575c78(0x99e)]())return;if(!this[_0x575c78(0x8ae)])return;if(this[_0x575c78(0x470)]===_0x163164)return;this[_0x575c78(0x470)]=_0x163164,this[_0x575c78(0x31e)]=_0x3486b9,this[_0x575c78(0x393)]=_0x3486b9,this[_0x575c78(0x98b)]=_0x2a6e27||'Linear',this['_angleRevertOnFinish']=_0x3b01ab,this[_0x575c78(0x999)]===undefined&&(this[_0x575c78(0x999)]=!![]),_0x3486b9<=0x0&&(this['_currentAngle']=_0x163164,this[_0x575c78(0x999)]&&(this[_0x575c78(0x470)]=0x0,this[_0x575c78(0x91b)]=0x0));},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5a7)]=function(){const _0x4afc29=_0xf2f935;this[_0x4afc29(0x5a6)](),this[_0x4afc29(0x49f)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x5a6)]=function(){const _0xc840f8=_0xf2f935;if(this[_0xc840f8(0x31e)]<=0x0)return;const _0x1508ef=this[_0xc840f8(0x31e)],_0xeb182=this['_angleWholeDuration'],_0x569c68=this[_0xc840f8(0x98b)];if(Imported[_0xc840f8(0x758)])this[_0xc840f8(0x91b)]=this['applyEasing'](this[_0xc840f8(0x91b)],this['_targetAngle'],_0x1508ef,_0xeb182,_0x569c68);else{if(_0xc840f8(0xa5e)!==_0xc840f8(0xa5e)){function _0x38863a(){const _0x3c5f83=_0xc840f8;if(this[_0x3c5f83(0x9af)][_0x3c5f83(0xa60)](_0xeba9f1=>_0xeba9f1[_0x3c5f83(0x5b0)]()&&_0xeba9f1[_0x3c5f83(0x86a)]()))return!![];}}else this[_0xc840f8(0x91b)]=(this[_0xc840f8(0x91b)]*(_0x1508ef-0x1)+this[_0xc840f8(0x470)])/_0x1508ef;}this['_angleDuration']--;if(this[_0xc840f8(0x31e)]<=0x0)this[_0xc840f8(0x88a)]();},Sprite_Battler['prototype'][_0xf2f935(0x88a)]=function(){const _0x313227=_0xf2f935;this[_0x313227(0x91b)]=this[_0x313227(0x470)];if(this[_0x313227(0x999)]){if('stYTB'!==_0x313227(0x35c))this['_targetAngle']=0x0,this[_0x313227(0x91b)]=0x0;else{function _0x4cb589(){const _0x129dfb=_0x313227;if(this[_0x129dfb(0xb22)]===_0x1b7513)return;_0x1852ef[_0x129dfb(0x2dc)][_0x129dfb(0x5f0)]['call'](this);}}}},Sprite_Battler['prototype']['isSpinning']=function(){const _0x834102=_0xf2f935;return this[_0x834102(0x31e)]>0x0;},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x49f)]=function(){const _0x214b9c=_0xf2f935;if(!this[_0x214b9c(0x8ae)])return;const _0x3b1bee=this[_0x214b9c(0x91b)],_0x3cc71c=this[_0x214b9c(0x3f0)]['x'],_0x523658=this['_battler'][_0x214b9c(0x8bc)]()?-0x1:0x1;this[_0x214b9c(0x8ae)][_0x214b9c(0x97e)]=_0x3b1bee*_0x3cc71c*_0x523658;const _0x473ebe=this[_0x214b9c(0x8ae)]['scale']['y'];this['_distortionSprite']['y']=this[_0x214b9c(0x902)]*-0.5*(0x2-_0x473ebe),this['_distortionSprite']['y']=Math[_0x214b9c(0x89d)](this[_0x214b9c(0x8ae)]['y']);const _0x2b99e3=[this[_0x214b9c(0xba9)],this[_0x214b9c(0x847)],this[_0x214b9c(0x230)]];for(const _0x5bdf8a of _0x2b99e3){if(!_0x5bdf8a)continue;_0x5bdf8a['y']=this['height']*0.5;}this['_shadowSprite']&&(this['_shadowScaleX']=this[_0x214b9c(0x912)]??0x1,this['_shadowScaleY']=this[_0x214b9c(0x74b)]??0x1,this[_0x214b9c(0x471)][_0x214b9c(0x3f0)]['x']=this[_0x214b9c(0x8ae)]['scale']['x']*this[_0x214b9c(0x912)],this[_0x214b9c(0x471)][_0x214b9c(0x3f0)]['y']=this[_0x214b9c(0x8ae)]['scale']['y']*this[_0x214b9c(0x74b)]);},VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']=Sprite_Actor['prototype']['createStateSprite'],Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x848)]=function(){const _0x4a69b4=_0xf2f935;VisuMZ[_0x4a69b4(0x886)]['Sprite_Actor_createStateSprite'][_0x4a69b4(0x86d)](this),VisuMZ[_0x4a69b4(0x886)][_0x4a69b4(0x650)][_0x4a69b4(0x6b5)]['ShowActorGauge']&&this[_0x4a69b4(0x362)]();},VisuMZ['BattleCore']['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x258)],Sprite_Enemy[_0xf2f935(0x2dc)]['createStateIconSprite']=function(){const _0xfc3308=_0xf2f935;VisuMZ[_0xfc3308(0x886)][_0xfc3308(0x650)][_0xfc3308(0x6b5)][_0xfc3308(0x4a2)]&&this[_0xfc3308(0x362)](),VisuMZ[_0xfc3308(0x886)]['Sprite_Enemy_createStateIconSprite'][_0xfc3308(0x86d)](this);},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x362)]=function(){const _0x24fc09=_0xf2f935;if(!ConfigManager['visualHpGauge'])return;if(this[_0x24fc09(0xb22)]===Sprite_SvEnemy)return;const _0x2a3013=VisuMZ['BattleCore']['Settings'][_0x24fc09(0x6b5)],_0x1d36b5=new Sprite_HpGauge();_0x1d36b5[_0x24fc09(0x281)]['x']=_0x2a3013[_0x24fc09(0xb5b)],_0x1d36b5[_0x24fc09(0x281)]['y']=_0x2a3013[_0x24fc09(0xb86)],_0x1d36b5['scale']['x']=_0x1d36b5[_0x24fc09(0x3f0)]['y']=_0x2a3013[_0x24fc09(0x6bb)],this[_0x24fc09(0x2c6)]=_0x1d36b5,this[_0x24fc09(0x8de)](this[_0x24fc09(0x2c6)]);},VisuMZ['BattleCore'][_0xf2f935(0x80d)]=Sprite_Battler[_0xf2f935(0x2dc)]['setBattler'],Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x94f)]=function(_0xc2c98b){const _0x84dee6=_0xf2f935,_0x322058=this[_0x84dee6(0x45b)];VisuMZ[_0x84dee6(0x886)]['Sprite_Battler_setBattler']['call'](this,_0xc2c98b),this[_0x84dee6(0x3cf)](_0xc2c98b);if(_0x322058!==_0xc2c98b)this[_0x84dee6(0x8d9)]();},Sprite_Battler[_0xf2f935(0x2dc)]['setupHpGaugeSprite']=function(_0x33eef9){const _0x4db4c1=_0xf2f935;if(!_0x33eef9)return;if(!this[_0x4db4c1(0x2c6)])return;if(_0x33eef9[_0x4db4c1(0x8bc)]()){}else{if(_0x33eef9[_0x4db4c1(0x1fb)]()){if(this[_0x4db4c1(0xb22)]===Sprite_SvEnemy&&!_0x33eef9[_0x4db4c1(0x897)]())return;}}this[_0x4db4c1(0x2c6)]['setup'](_0x33eef9,'hp');},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xad7)]=function(){const _0x27922f=_0xf2f935;if(!this['_battler'])return;if(!this[_0x27922f(0x2c6)])return;const _0x4097da=VisuMZ['BattleCore'][_0x27922f(0x650)][_0x27922f(0x6b5)],_0x42d377=this['_hpGaugeSprite'];_0x42d377['visible']=this[_0x27922f(0xb27)]();const _0x284e0c=_0x4097da['OffsetX'],_0x599b42=_0x4097da[_0x27922f(0x1f1)];_0x42d377['x']=_0x284e0c,_0x42d377['x']+=this[_0x27922f(0x45b)][_0x27922f(0xb72)](),_0x42d377['y']=-this[_0x27922f(0x902)]+_0x599b42,_0x42d377['y']+=this[_0x27922f(0x45b)][_0x27922f(0xac4)]();},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0xb27)]=function(){const _0x2f7eee=_0xf2f935;if(!this[_0x2f7eee(0x45b)])return![];if(this[_0x2f7eee(0x45b)]['isActor']())return!![];const _0x133424=this[_0x2f7eee(0x45b)][_0x2f7eee(0x767)]()[_0x2f7eee(0xbc2)];if(_0x133424['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x133424[_0x2f7eee(0x78e)](/<HIDE HP GAUGE>/i))return![];const _0x34ceb6=VisuMZ['BattleCore'][_0x2f7eee(0x650)][_0x2f7eee(0x6b5)];if(_0x34ceb6[_0x2f7eee(0x365)]){if(_0x34ceb6['BTestBypass']&&BattleManager[_0x2f7eee(0x687)]())return!![];if(this[_0x2f7eee(0x45b)]['_visualHpGauge_JustDied'])return![];return this[_0x2f7eee(0x45b)][_0x2f7eee(0x60f)]();}return!![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x78f)]=Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x2be)],Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x2be)]=function(){const _0x39c171=_0xf2f935;if(!this[_0x39c171(0x45b)])return![];return VisuMZ[_0x39c171(0x886)]['Sprite_Battler_isMoving'][_0x39c171(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x9bf)]=Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x4fa)],Sprite_Battler[_0xf2f935(0x2dc)]['startMove']=function(_0x22ad11,_0x57e5a0,_0x6d7caa){const _0x526356=_0xf2f935;this['canMove']()&&VisuMZ[_0x526356(0x886)]['Sprite_Battler_startMove'][_0x526356(0x86d)](this,_0x22ad11,_0x57e5a0,_0x6d7caa);},Sprite_Battler['prototype'][_0xf2f935(0x99e)]=function(){const _0x35b3f3=_0xf2f935;if(this[_0x35b3f3(0x45b)]&&this[_0x35b3f3(0x45b)][_0x35b3f3(0xb18)]())return![];if(this['_battler']&&!this[_0x35b3f3(0x45b)][_0x35b3f3(0x54d)]())return![];return $gameSystem[_0x35b3f3(0x649)]();},Sprite_Battler['prototype'][_0xf2f935(0xaa3)]=function(){},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x4ac)]=function(){const _0x2834b0=_0xf2f935;this[_0x2834b0(0x4fa)](0x0,0x0,0xc);},Sprite_Battler[_0xf2f935(0x2dc)]['retreat']=function(){},Sprite_Battler[_0xf2f935(0x2dc)][_0xf2f935(0x265)]=function(){const _0x559d95=_0xf2f935,_0x2c9e0b=VisuMZ[_0x559d95(0x886)][_0x559d95(0x650)][_0x559d95(0x5df)],_0x88f7cb=this[_0x559d95(0x45b)]&&this[_0x559d95(0x45b)][_0x559d95(0x8bc)]()?0x1:-0x1,_0x33dbda=this[_0x559d95(0x58e)]-this[_0x559d95(0xa09)]+_0x88f7cb*_0x2c9e0b['FlinchDistanceX'],_0x4e9592=this[_0x559d95(0x4de)]-this['_homeY']+_0x88f7cb*_0x2c9e0b['FlinchDistanceY'],_0x504b64=_0x2c9e0b[_0x559d95(0xb9c)];this[_0x559d95(0x4fa)](_0x33dbda,_0x4e9592,_0x504b64);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xb88)]=Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x2a3)],Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x2a3)]=function(){const _0x325f9f=_0xf2f935;VisuMZ[_0x325f9f(0x886)][_0x325f9f(0xb88)]['call'](this),this[_0x325f9f(0x21c)]();},Sprite_Actor[_0xf2f935(0x2dc)]['mainSprite']=function(){return this['_distortionSprite']||this['_mainSprite']||this;},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x7fd)]=Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xbc8)],Sprite_Actor[_0xf2f935(0x2dc)]['moveToStartPosition']=function(){},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x72d)]=function(_0x2554da){const _0x384db3=_0xf2f935;if(SceneManager[_0x384db3(0x960)]())return;if(!_0x2554da)return;if(!_0x2554da['canMove']())return;VisuMZ['BattleCore'][_0x384db3(0x7fd)][_0x384db3(0x86d)](this);},VisuMZ[_0xf2f935(0x886)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x888)],Sprite_Actor[_0xf2f935(0x2dc)]['setActorHome']=function(_0x2f3e9d){const _0x40d570=_0xf2f935;if(VisuMZ[_0x40d570(0x886)][_0x40d570(0x650)][_0x40d570(0x5df)][_0x40d570(0x3ed)]){if(_0x40d570(0x958)!==_0x40d570(0x4b8))VisuMZ['BattleCore'][_0x40d570(0x650)]['Actor'][_0x40d570(0x3ed)][_0x40d570(0x86d)](this,_0x2f3e9d);else{function _0xfb2602(){const _0x55a373=_0x40d570,_0x4fd9d5=this[_0x55a373(0xbb6)](_0x28028a);if(_0x4fd9d5[_0x55a373(0x78e)](/\\I\[(\d+)\]/i)){const _0x3eebab=this[_0x55a373(0x688)](_0x1e2038),_0x4ec91b=this['textSizeEx'](_0x4fd9d5)[_0x55a373(0x41b)];return _0x4ec91b<=_0x3eebab[_0x55a373(0x41b)]?_0x55a373(0x436):_0x55a373(0xbc4);}}}}else VisuMZ[_0x40d570(0x886)][_0x40d570(0x685)][_0x40d570(0x86d)](this,_0x2f3e9d);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa3f)]=Sprite_Actor[_0xf2f935(0x2dc)]['setBattler'],Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x94f)]=function(_0x453034){const _0x49530e=_0xf2f935;VisuMZ['BattleCore'][_0x49530e(0xa3f)][_0x49530e(0x86d)](this,_0x453034),this[_0x49530e(0x5d5)](_0x453034);},Sprite_Actor['prototype']['setBattlerBattleCore']=function(_0x4ef898){const _0x1d52aa=_0xf2f935;if(!_0x4ef898)return;if(!this['_mainSprite'])return;this['_mainSprite'][_0x1d52aa(0x281)]['x']=this[_0x1d52aa(0x7e5)]['svBattlerAnchorX'](),this['_mainSprite'][_0x1d52aa(0x281)]['y']=this[_0x1d52aa(0x7e5)][_0x1d52aa(0x7db)](),this['updateShadowVisibility']();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x4c6)]=Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xb36)],Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xb36)]=function(){const _0x226560=_0xf2f935;VisuMZ[_0x226560(0x886)][_0x226560(0x4c6)]['call'](this),this[_0x226560(0x7e5)]&&(this[_0x226560(0xac3)](),this[_0x226560(0xa29)]());},VisuMZ[_0xf2f935(0x886)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xa71)],Sprite_Actor[_0xf2f935(0x2dc)]['updateBitmap']=function(){const _0x502152=_0xf2f935;VisuMZ[_0x502152(0x886)][_0x502152(0x26b)][_0x502152(0x86d)](this);if(this[_0x502152(0xba9)]&&this[_0x502152(0xba9)][_0x502152(0x266)]&&this[_0x502152(0x45b)]){if(_0x502152(0x4fc)!==_0x502152(0x1e1))this[_0x502152(0xba9)][_0x502152(0x266)][_0x502152(0x9c9)]!==this[_0x502152(0x45b)][_0x502152(0x7bf)]()&&(this[_0x502152(0xba9)][_0x502152(0x266)][_0x502152(0x9c9)]=this[_0x502152(0x45b)][_0x502152(0x7bf)]());else{function _0x12dde9(){const _0x55f710=_0x502152;_0x5817f5[_0x55f710(0x5df)]['SmoothImage']=![];}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xb4f)]=Sprite_Actor['prototype']['updateShadow'],Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x49b)]=function(){const _0x30197f=_0xf2f935;VisuMZ[_0x30197f(0x886)][_0x30197f(0xb4f)][_0x30197f(0x86d)](this),this[_0x30197f(0x8ca)]();},Sprite_Actor[_0xf2f935(0x2dc)]['updateShadowBattleCore']=function(){const _0x221485=_0xf2f935;if(!this[_0x221485(0xba9)])return;if(!this[_0x221485(0x471)])return;this[_0x221485(0x4cc)](),this[_0x221485(0x1de)]();},Sprite_Actor[_0xf2f935(0x2dc)]['updateStateSprite']=function(){const _0x538774=_0xf2f935;this[_0x538774(0x306)][_0x538774(0x3f0)]['x']=0x1/(this['scale']['x']||0.001),this[_0x538774(0x306)]['scale']['y']=0x1/(this[_0x538774(0x3f0)]['y']||0.001);},Sprite_Actor['prototype'][_0xf2f935(0xa29)]=function(){const _0x44614b=_0xf2f935;if(!$gameSystem[_0x44614b(0x649)]()&&this[_0x44614b(0xb22)]===Sprite_Actor){const _0x378ee2=Scene_Battle['prototype'][_0x44614b(0x658)]();['default',_0x44614b(0x29a),_0x44614b(0x6cf),_0x44614b(0xacf)][_0x44614b(0x7fe)](_0x378ee2)&&(this[_0x44614b(0x9c2)]=0x0);}},Sprite_Actor['prototype'][_0xf2f935(0x9f7)]=function(){const _0x2bdff3=_0xf2f935,_0x529386=this[_0x2bdff3(0x7e5)];if(_0x529386){const _0x11d9c1=_0x529386[_0x2bdff3(0x6d1)]();if(_0x529386[_0x2bdff3(0x615)]()||_0x529386[_0x2bdff3(0x47e)]()){if(_0x2bdff3(0x784)==='vrTeH'){function _0x25e8dd(){const _0x26c344=_0x2bdff3;_0x4cb418[_0x26c344(0x2dc)][_0x26c344(0xb36)][_0x26c344(0x86d)](this),this[_0x26c344(0x5b3)](),this[_0x26c344(0x9fe)]();if(this[_0x26c344(0x658)]()===_0x26c344(0xacf))this[_0x26c344(0x40e)]();}}else this[_0x2bdff3(0x315)](_0x2bdff3(0x8f9));}else{if(_0x11d9c1===0x3)this['startMotion'](_0x2bdff3(0x7a2));else{if(_0x11d9c1===0x2){if(_0x2bdff3(0x962)===_0x2bdff3(0x962))this['startMotion']('sleep');else{function _0x76a843(){const _0x50d633=_0x2bdff3;_0x94ffd[_0x50d633(0x886)]['ParseItemNotetags'][_0x50d633(0x86d)](this,_0x1779ef);}}}else{if(this[_0x2bdff3(0x823)])this[_0x2bdff3(0x315)](_0x2bdff3(0x4d4));else{if(_0x529386[_0x2bdff3(0x383)]()){if(_0x2bdff3(0x7c3)==='qmleU'){function _0x41157e(){const _0x5e9026=_0x2bdff3;_0x4a8158-=this[_0x5e9026(0x214)],_0x4a2fe2-=this['_jumpHeight'];}}else this[_0x2bdff3(0x315)]('wait');}else{if(_0x529386['isChanting']())this[_0x2bdff3(0x315)]('chant');else{if(_0x529386[_0x2bdff3(0x322)]()||_0x529386[_0x2bdff3(0x89e)]()){if(_0x2bdff3(0x968)==='IkOIy'){function _0x579f68(){const _0x1bc62c=_0x2bdff3;return _0x33bc58[_0x1bc62c(0x4c4)]();}}else this['startMotion'](_0x2bdff3(0x7c0));}else{if(_0x11d9c1===0x1){if(_0x2bdff3(0x5da)!==_0x2bdff3(0x5da)){function _0x34ed83(){const _0x1a0a31=_0x2bdff3;if(!_0x35aa88[_0x1a0a31(0x731)]())return;const _0x2edef4=_0x48e058['getLastPluginCommandInterpreter']();if(!_0x2edef4)return;_0x2edef4[_0x1a0a31(0x8a6)]('battleSpin');}}else this[_0x2bdff3(0x315)](_0x2bdff3(0x829));}else{if(_0x529386[_0x2bdff3(0x6a6)]())this['startMotion'](_0x2bdff3(0x36d));else{if(_0x529386['isUndecided']())this['startMotion'](_0x2bdff3(0x8f9));else{if(_0x529386[_0x2bdff3(0x50c)]()){if(_0x2bdff3(0x606)===_0x2bdff3(0x606))this[_0x2bdff3(0x315)]('wait');else{function _0x55922b(){const _0x323968=_0x2bdff3,_0x4e1f87=this['itemLineRect'](_0x26e244),_0xd841c5=this[_0x323968(0xa0b)](_0x37b75b)[_0x323968(0x41b)];return _0xd841c5<=_0x4e1f87[_0x323968(0x41b)]?_0x323968(0x436):_0x323968(0xbc4);}}}else{if('GdMKh'===_0x2bdff3(0x22d)){function _0x51e9b5(){const _0x545990=_0x2bdff3;_0x3f95a3=_0x2d7773||'',_0x582900=_0x3c8369||'';_0x38c6e7===''&&_0x1f9792===''&&(_0x415a95=this[_0x545990(0x754)][_0x545990(0x34a)](),_0x4fdfad=this[_0x545990(0x9aa)]['battleback2Name']());const _0xabe1a8=_0x4f2854['loadBattleback1'](_0x12712a),_0x2d3155=_0x1e322c['loadBattleback2'](_0xfb7052);_0xabe1a8[_0x545990(0x250)](this['updateBattlebackBitmap1'][_0x545990(0x6cb)](this,this['_back1Sprite'],this[_0x545990(0x9aa)],_0xabe1a8,_0x2d3155));}}else this[_0x2bdff3(0x315)]('walk');}}}}}}}}}}}}},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x4db)]=function(){const _0x352565=_0xf2f935,_0x3169dd=0xa,_0xd31462=0x12c*_0x3169dd,_0x4bb269=0x1e*_0x3169dd;this[_0x352565(0x4fa)](_0xd31462,0x0,_0x4bb269);},Sprite_Actor['prototype'][_0xf2f935(0xabd)]=function(){const _0xd1d36a=_0xf2f935;Sprite_Battler[_0xd1d36a(0x2dc)][_0xd1d36a(0xabd)][_0xd1d36a(0x86d)](this);},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x211)]=function(){const _0x2af070=_0xf2f935;return Sprite_Battler[_0x2af070(0xb4d)];},Sprite_Weapon[_0xf2f935(0x2dc)][_0xf2f935(0x5a9)]=function(){const _0x16d9c9=_0xf2f935;return Sprite_Battler[_0x16d9c9(0xb4d)];},Sprite_Actor['prototype'][_0xf2f935(0xb31)]=function(){},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xaf4)]=function(){},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x653)]=function(){const _0x1ade62=_0xf2f935;if(this[_0x1ade62(0x6f4)]&&++this['_motionCount']>=this['motionSpeed']()){if(this[_0x1ade62(0x6f4)][_0x1ade62(0x2d2)])this[_0x1ade62(0x2f1)]=(this[_0x1ade62(0x2f1)]+0x1)%0x4;else this[_0x1ade62(0x2f1)]<0x2?this[_0x1ade62(0x2f1)]++:this[_0x1ade62(0x9f7)]();this['_motionCount']=0x0;}},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x940)]=function(_0x4fa811){const _0x4dc579=_0xf2f935;if(_0x4fa811===_0x4dc579(0x80b))this[_0x4dc579(0x35b)]=!![];if(this[_0x4dc579(0x45b)]&&this[_0x4dc579(0x45b)][_0x4dc579(0xb18)]()){this[_0x4dc579(0x6f4)]=Sprite_Actor['MOTIONS'][_0x4dc579(0x7a2)];return;}const _0x3722a3=Sprite_Actor['MOTIONS'][_0x4fa811];this['_motion']=_0x3722a3,this[_0x4dc579(0x284)]=0x0,this[_0x4dc579(0x2f1)]=0x0;},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x22a)]=function(_0x45734c){const _0x482199=_0xf2f935;this[_0x482199(0xa87)](),this[_0x482199(0x472)][_0x482199(0x696)](_0x45734c),this[_0x482199(0x7e5)][_0x482199(0x7bb)]();},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0xa87)]=function(){const _0x24bf3b=_0xf2f935;let _0xd8ef33=-0x10,_0x243525=this['height']*0.5;const _0x5e94c5=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x537ab3=this[_0x24bf3b(0x45b)]['traitObjects']()[_0x24bf3b(0x2ab)](_0x4bbf2f=>_0x4bbf2f&&_0x4bbf2f[_0x24bf3b(0xbc2)]['match'](_0x5e94c5)?Number(RegExp['$1']):0x0),_0x44df6d=this['_battler'][_0x24bf3b(0x6f7)]()[_0x24bf3b(0x2ab)](_0x552bca=>_0x552bca&&_0x552bca['note']['match'](_0x5e94c5)?Number(RegExp['$2']):0x0);_0xd8ef33=_0x537ab3[_0x24bf3b(0xbdb)]((_0x2ec7e5,_0x49ea83)=>_0x2ec7e5+_0x49ea83,_0xd8ef33),_0x243525=_0x44df6d[_0x24bf3b(0xbdb)]((_0x334d5d,_0x560ada)=>_0x334d5d+_0x560ada,_0x243525),this[_0x24bf3b(0x472)]['x']=_0xd8ef33,this[_0x24bf3b(0x472)]['y']=_0x243525,this[_0x24bf3b(0x472)][_0x24bf3b(0xb36)]();},Sprite_Weapon['prototype'][_0xf2f935(0x696)]=function(_0x5afed9){const _0x1bca73=_0xf2f935;this['_weaponImageId']=_0x5afed9,this[_0x1bca73(0x329)]=-0x1,this[_0x1bca73(0x2f1)]=0x0,this[_0x1bca73(0x2ac)](),this['updateFrame']();},Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x8ef)]=function(){},Sprite_Actor[_0xf2f935(0x2dc)]['stepForward']=function(){const _0x1ecc18=_0xf2f935,_0x13f719=VisuMZ['BattleCore']['Settings'][_0x1ecc18(0xb3e)],_0x3196b9=_0x13f719[_0x1ecc18(0x7ce)],_0x559c97=_0x13f719[_0x1ecc18(0x595)],_0x4f3f17=_0x13f719[_0x1ecc18(0x42d)];this['startMove'](-_0x3196b9,-_0x559c97,_0x4f3f17);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x247)]=Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x3be)],Sprite_Actor[_0xf2f935(0x2dc)][_0xf2f935(0x3be)]=function(){const _0x37b093=_0xf2f935;this[_0x37b093(0x965)](),VisuMZ[_0x37b093(0x886)]['Sprite_Actor_updateFrame']['call'](this);},Sprite_Actor[_0xf2f935(0x2dc)]['applyFreezeMotionFrames']=function(){const _0x89ccad=_0xf2f935;if(this[_0x89ccad(0x45b)]&&this[_0x89ccad(0x45b)]['_freezeMotionData']){const _0x5048ce=this['_battler'][_0x89ccad(0x9b3)];this[_0x89ccad(0x6f4)]=Sprite_Actor[_0x89ccad(0x368)][_0x5048ce['motionType']],this[_0x89ccad(0x2f1)]=_0x5048ce[_0x89ccad(0x82e)];const _0x40fa4c=this[_0x89ccad(0x472)];_0x40fa4c['freezeFrame'](_0x5048ce['weaponImageId'],_0x5048ce[_0x89ccad(0x82e)]),this[_0x89ccad(0xa87)]();}},Sprite_Weapon['prototype'][_0xf2f935(0x634)]=function(_0x4cd75d,_0x2a9c43){const _0x5a7a71=_0xf2f935;this[_0x5a7a71(0x5a3)]=_0x4cd75d,this['_animationCount']=-Infinity,this[_0x5a7a71(0x2f1)]=_0x2a9c43,this[_0x5a7a71(0x2ac)](),this[_0x5a7a71(0x3be)]();},Sprite_Enemy['prototype'][_0xf2f935(0x2a3)]=function(){const _0x564477=_0xf2f935;Sprite_Battler[_0x564477(0x2dc)]['initMembers'][_0x564477(0x86d)](this),this['_enemy']=null,this[_0x564477(0xbd7)]=![],this[_0x564477(0x796)]='',this[_0x564477(0x2a8)]=0x0,this[_0x564477(0xb3a)]=null,this[_0x564477(0x740)]=0x0,this[_0x564477(0x280)]=0x0,this[_0x564477(0x2e8)](),this['createStateIconSprite']();},VisuMZ['BattleCore'][_0xf2f935(0x575)]=Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xb36)],Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xb36)]=function(){const _0x394b3e=_0xf2f935;VisuMZ['BattleCore'][_0x394b3e(0x575)][_0x394b3e(0x86d)](this),this[_0x394b3e(0x4cc)]();},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x2e8)]=function(){const _0x50b391=_0xf2f935;this[_0x50b391(0xba9)]=new Sprite(),this[_0x50b391(0xba9)][_0x50b391(0x281)]['x']=0.5,this[_0x50b391(0xba9)]['anchor']['y']=0x1,this['addChild'](this[_0x50b391(0xba9)]),this[_0x50b391(0x21c)]();},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x2b2)]=function(){const _0x442a69=_0xf2f935;return this[_0x442a69(0x8ae)]||this[_0x442a69(0xba9)]||this;},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x2ac)]=function(_0x217e22){const _0x2e6a5c=_0xf2f935;this[_0x2e6a5c(0x266)]=new Bitmap(0x1,0x1);if($gameSystem['isSideView']()){if(_0x2e6a5c(0xbb9)!==_0x2e6a5c(0xbb9)){function _0x45ce55(){const _0x3d9fbc=_0x2e6a5c;if(!_0x117bdf['isSideView']()&&this[_0x3d9fbc(0xb22)]===_0x5bcfb6){const _0x5c8fc2=_0x38900d[_0x3d9fbc(0x2dc)][_0x3d9fbc(0x658)]();['default',_0x3d9fbc(0x29a),_0x3d9fbc(0x6cf),_0x3d9fbc(0xacf)]['includes'](_0x5c8fc2)&&(this[_0x3d9fbc(0x9c2)]=0x0);}}}else this[_0x2e6a5c(0xba9)][_0x2e6a5c(0x266)]=ImageManager[_0x2e6a5c(0x9da)](_0x217e22);}else{if(_0x2e6a5c(0x34c)===_0x2e6a5c(0x415)){function _0xf374d5(){const _0x249e3b=_0x2e6a5c;return this[_0x249e3b(0x5b0)]()[_0x249e3b(0xbc2)][_0x249e3b(0x78e)](/<DAMAGE CAP:[ ](\d+)>/i)?_0x5ac06a(_0x20439c['$1']):this[_0x249e3b(0x271)]()[_0x249e3b(0x94c)]();}}else this[_0x2e6a5c(0xba9)][_0x2e6a5c(0x266)]=ImageManager[_0x2e6a5c(0x9cf)](_0x217e22);}this[_0x2e6a5c(0xba9)]['bitmap'][_0x2e6a5c(0x250)](this[_0x2e6a5c(0x3bb)][_0x2e6a5c(0x6cb)](this));},Sprite_Enemy['prototype'][_0xf2f935(0x3bb)]=function(){const _0x2f884b=_0xf2f935,_0x29415a=this[_0x2f884b(0xba9)][_0x2f884b(0x266)];_0x29415a&&(this[_0x2f884b(0x266)]=new Bitmap(_0x29415a[_0x2f884b(0x41b)],_0x29415a[_0x2f884b(0x902)]));},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x4ec)]=Sprite_Enemy['prototype']['setHue'],Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x864)]=function(_0x2f01fe){const _0x9bee29=_0xf2f935;this[_0x9bee29(0xba9)]&&this[_0x9bee29(0xba9)][_0x9bee29(0x864)](_0x2f01fe);},VisuMZ[_0xf2f935(0x886)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x2de)],Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x2de)]=function(){const _0x4bd395=_0xf2f935;if(this['allowCollapse']())VisuMZ[_0x4bd395(0x886)]['Sprite_Enemy_initVisibility'][_0x4bd395(0x86d)](this);else{this[_0x4bd395(0xbd7)]=!this['_enemy'][_0x4bd395(0x49e)]();if(!this[_0x4bd395(0xbd7)]){if(_0x4bd395(0xa23)!==_0x4bd395(0x8fa))this[_0x4bd395(0x9c2)]=0x0;else{function _0x1584a5(){this['_waitMode']='';}}}}},VisuMZ['BattleCore'][_0xf2f935(0x993)]=Sprite_Enemy['prototype']['updateCollapse'],Sprite_Enemy[_0xf2f935(0x2dc)]['updateCollapse']=function(){const _0x114e88=_0xf2f935;if(this['allowCollapse']())VisuMZ[_0x114e88(0x886)][_0x114e88(0x993)][_0x114e88(0x86d)](this);},Sprite_Enemy['prototype'][_0xf2f935(0x3be)]=function(){const _0x5e26eb=_0xf2f935;Sprite_Battler[_0x5e26eb(0x2dc)][_0x5e26eb(0x3be)][_0x5e26eb(0x86d)](this);const _0xa859e=this[_0x5e26eb(0x2b2)]()||this;if(!_0xa859e)return;!_0xa859e['bitmap']&&(_0xa859e[_0x5e26eb(0x266)]=new Bitmap(this['width'],this[_0x5e26eb(0x902)]));if(this[_0x5e26eb(0xb3a)]===_0x5e26eb(0x605)){if(_0x5e26eb(0x355)===_0x5e26eb(0x24c)){function _0x999637(){const _0xceb887=_0x5e26eb,_0x1b8baa=this[_0xceb887(0x8c2)](),_0x43eb38=_0xc84871[_0xceb887(0x886)][_0xceb887(0x650)][_0xceb887(0x550)][_0xceb887(0x81a)],_0x21668b=_0x1b8baa===_0xceb887(0x442)?_0x1dc4fe['item']:_0xceb887(0x467)[_0xceb887(0x460)](_0x43eb38,_0x2e5d7d[_0xceb887(0x5b0)]),_0x466f88=this[_0xceb887(0x388)]();this[_0xceb887(0x357)](_0x21668b,_0xceb887(0x5b0),_0x466f88);}}else this[_0x5e26eb(0xba9)][_0x5e26eb(0x4b6)](0x0,0x0,this[_0x5e26eb(0xba9)]['width'],this[_0x5e26eb(0x740)]);}else{if(_0x5e26eb(0xb05)!==_0x5e26eb(0xb05)){function _0x12ad38(){const _0x18d367=_0x5e26eb;this[_0x18d367(0x914)][_0x18d367(0x3cc)]();}}else _0xa859e[_0x5e26eb(0x4b6)](0x0,0x0,_0xa859e[_0x5e26eb(0x266)]['width'],this[_0x5e26eb(0x266)][_0x5e26eb(0x902)]);}},VisuMZ[_0xf2f935(0x886)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy['prototype'][_0xf2f935(0x839)],Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x839)]=function(){const _0x3bae3e=_0xf2f935;if(this[_0x3bae3e(0x72b)]())VisuMZ[_0x3bae3e(0x886)][_0x3bae3e(0xb71)][_0x3bae3e(0x86d)](this);},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x2be)]=function(){return Sprite_Battler['prototype']['isMoving']['call'](this);},VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0xac3)],Sprite_Enemy['prototype'][_0xf2f935(0xac3)]=function(){const _0x4ad165=_0xf2f935;VisuMZ[_0x4ad165(0x886)][_0x4ad165(0x9b8)][_0x4ad165(0x86d)](this),this[_0x4ad165(0x485)]();},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x485)]=function(){const _0x106a60=_0xf2f935,_0x32e8ec=VisuMZ[_0x106a60(0x886)]['Settings']['Enemy'];if(_0x32e8ec[_0x106a60(0x2e6)]&&!_0x32e8ec[_0x106a60(0x2b6)]){this[_0x106a60(0x58d)][_0x106a60(0x9c2)]=0x0;return;}this[_0x106a60(0x58d)]['x']=0x0,this[_0x106a60(0x58d)]['x']+=this[_0x106a60(0x45b)][_0x106a60(0xb72)](),this[_0x106a60(0x58d)]['y']=-this[_0x106a60(0x266)][_0x106a60(0x902)]-this[_0x106a60(0x58d)][_0x106a60(0x902)],this[_0x106a60(0x58d)]['y']+=this['_battler'][_0x106a60(0xac4)](),this[_0x106a60(0x58d)]['scale']['x']=0x1/(this[_0x106a60(0x3f0)]['x']||0.001),this['_stateIconSprite']['scale']['y']=0x1/(this[_0x106a60(0x3f0)]['y']||0.001),this[_0x106a60(0x897)]()&&(this[_0x106a60(0x847)][_0x106a60(0x306)][_0x106a60(0x3f0)]['x']=-0x1/(this[_0x106a60(0x3f0)]['x']||0.001),this[_0x106a60(0x847)][_0x106a60(0x306)][_0x106a60(0x3f0)]['y']=0x1/(this['scale']['y']||0.001));},VisuMZ['BattleCore']['Sprite_Enemy_setBattler']=Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x94f)],Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x94f)]=function(_0x3f0fc4){const _0x34e40b=_0xf2f935;VisuMZ[_0x34e40b(0x886)][_0x34e40b(0x2fa)][_0x34e40b(0x86d)](this,_0x3f0fc4),this[_0x34e40b(0x41a)](_0x3f0fc4);},Sprite_Enemy[_0xf2f935(0x2dc)]['setSvBattlerSprite']=function(_0x52a2e4){const _0x7ad384=_0xf2f935;if(!this[_0x7ad384(0x847)]){if('cWJbH'===_0x7ad384(0x35d))this['_svBattlerSprite']=new Sprite_SvEnemy(_0x52a2e4),this[_0x7ad384(0x21c)]();else{function _0x38b1ec(){const _0x59687d=_0x7ad384;this['startMotion'](_0x59687d(0xb93));}}}this['_svBattlerSprite'][_0x7ad384(0x94f)](_0x52a2e4);},Sprite_Enemy[_0xf2f935(0x2dc)]['hasSvBattler']=function(){const _0x427805=_0xf2f935;return this[_0x427805(0x3fb)]&&this[_0x427805(0x3fb)][_0x427805(0x897)]();},VisuMZ[_0xf2f935(0x886)]['Sprite_Enemy_loadBitmap']=Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x2ac)],Sprite_Enemy['prototype'][_0xf2f935(0x2ac)]=function(_0x20de4f){const _0x5b9690=_0xf2f935;if(this[_0x5b9690(0x897)]()){const _0x1df89d=this[_0x5b9690(0x3fb)][_0x5b9690(0x979)]();this[_0x5b9690(0x266)]=new Bitmap(_0x1df89d[_0x5b9690(0x41b)],_0x1df89d[_0x5b9690(0x902)]);}else VisuMZ[_0x5b9690(0x886)][_0x5b9690(0x96e)][_0x5b9690(0x86d)](this,_0x20de4f);},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x72b)]=function(){const _0x2bf74a=_0xf2f935;if(this[_0x2bf74a(0x897)]()){if(_0x2bf74a(0x1ef)==='GLdfn'){function _0x3f87d4(){const _0x4b0b85=_0x2bf74a;if(this[_0x4b0b85(0x5a1)]['selectNextCommand']())return;this[_0x4b0b85(0x851)](),this[_0x4b0b85(0x2fe)](),!this[_0x4b0b85(0x370)]&&!this[_0x4b0b85(0x5a1)]&&_0x58a79d[_0x4b0b85(0xb95)]['updateBattleProcess']();}}else return this['_enemy'][_0x2bf74a(0x72b)]();}else return!![];},Sprite_Enemy['prototype'][_0xf2f935(0x9f7)]=function(){const _0x4e3b23=_0xf2f935;if(this[_0x4e3b23(0x897)]()){if('mOFPt'==='zCCTy'){function _0x8384f3(){const _0x237a11=_0x4e3b23;this[_0x237a11(0x9c2)]+=0x10;}}else this[_0x4e3b23(0x847)][_0x4e3b23(0x9f7)]();}},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x940)]=function(_0x484cc5){const _0x12186a=_0xf2f935;if(this['hasSvBattler']())this[_0x12186a(0x847)][_0x12186a(0x940)](_0x484cc5);},Sprite_Enemy[_0xf2f935(0x2dc)][_0xf2f935(0x22a)]=function(_0x4377e1){const _0x5e7c0a=_0xf2f935;if(this[_0x5e7c0a(0x897)]())this[_0x5e7c0a(0x847)][_0x5e7c0a(0x22a)](_0x4377e1);},Sprite_Enemy['prototype']['stepForward']=function(){const _0x1c6660=_0xf2f935,_0x241146=VisuMZ['BattleCore'][_0x1c6660(0x650)]['ActionSequence'],_0x4cc92c=_0x241146['StepDistanceX'],_0x9dc597=_0x241146[_0x1c6660(0x595)],_0x1ed8b1=_0x241146[_0x1c6660(0x42d)];this['startMove'](_0x4cc92c,_0x9dc597,_0x1ed8b1);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy['prototype']=Object[_0xf2f935(0x47f)](Sprite_Actor[_0xf2f935(0x2dc)]),Sprite_SvEnemy[_0xf2f935(0x2dc)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(_0x31ba80){const _0x18134d=_0xf2f935;Sprite_Actor[_0x18134d(0x2dc)][_0x18134d(0x30e)]['call'](this,_0x31ba80),this[_0x18134d(0x3f0)]['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x327)]=function(){},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0xbc8)]=function(){},Sprite_SvEnemy[_0xf2f935(0x2dc)]['setActorHome']=function(_0x2248b0){},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x49b)]=function(){},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x1de)]=function(){},Sprite_SvEnemy['prototype'][_0xf2f935(0xac3)]=function(){const _0x485fce=_0xf2f935;this[_0x485fce(0x306)][_0x485fce(0x56c)]=![];},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0xa71)]=function(){const _0x37a443=_0xf2f935;Sprite_Battler[_0x37a443(0x2dc)][_0x37a443(0xa71)][_0x37a443(0x86d)](this);const _0x248364=this[_0x37a443(0x7e5)][_0x37a443(0x620)]();this['_battlerName']!==_0x248364&&(this[_0x37a443(0x796)]=_0x248364,this[_0x37a443(0xba9)]['bitmap']=ImageManager[_0x37a443(0x4f0)](_0x248364));if(this[_0x37a443(0xba9)]&&this['_mainSprite'][_0x37a443(0x266)]&&this['_battler']){if(this[_0x37a443(0xba9)][_0x37a443(0x266)][_0x37a443(0x9c9)]!==this[_0x37a443(0x45b)][_0x37a443(0x7bf)]()){if(_0x37a443(0x639)!==_0x37a443(0xb6b))this[_0x37a443(0xba9)][_0x37a443(0x266)][_0x37a443(0x9c9)]=this['_battler'][_0x37a443(0x7bf)]();else{function _0x1b8490(){const _0x3bee33=_0x37a443,_0x249f97=_0x7e0f7a[_0x3bee33(0x886)][_0x3bee33(0x650)][_0x3bee33(0x4a4)];if(_0x249f97[_0x3bee33(0xbaa)])return;_0x54353f[_0x3bee33(0x2dc)][_0x3bee33(0x598)][_0x3bee33(0x86d)](this,_0x4868e5);}}}}},Sprite_SvEnemy['prototype']['retreat']=function(){},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x4fa)]=function(_0x2ef645,_0x3f7f23,_0x4b9ba0){const _0x579cbc=_0xf2f935;if(this['parent'])this[_0x579cbc(0xb03)][_0x579cbc(0x4fa)](_0x2ef645,_0x3f7f23,_0x4b9ba0);},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x9f7)]=function(){const _0x271e86=_0xf2f935,_0x484f9c=this['_actor'];if(_0x484f9c){const _0x263a93=_0x484f9c['stateMotionIndex']();if(_0x484f9c[_0x271e86(0x615)]()||_0x484f9c[_0x271e86(0x47e)]())this[_0x271e86(0x315)](_0x271e86(0x8f9));else{if(_0x263a93===0x3)this[_0x271e86(0x315)](_0x271e86(0x7a2));else{if(_0x263a93===0x2)this[_0x271e86(0x315)](_0x271e86(0x4cd));else{if(_0x484f9c['isChanting']())this[_0x271e86(0x315)](_0x271e86(0xb47));else{if(_0x484f9c[_0x271e86(0x322)]()||_0x484f9c[_0x271e86(0x89e)]())this[_0x271e86(0x315)]('guard');else{if(_0x263a93===0x1)this[_0x271e86(0x315)]('abnormal');else{if(_0x484f9c[_0x271e86(0x6a6)]()){if(_0x271e86(0x68a)!=='mfPaY')this[_0x271e86(0x315)]('dying');else{function _0x1ddbe1(){const _0x2f8488=_0x271e86;this['_colorType']=_0x15403b['hpDamage']>=0x0?0x0:0x1,this[_0x2f8488(0x345)](_0x265f05[_0x2f8488(0xa1f)]);}}}else{if(_0x484f9c[_0x271e86(0x82f)]()){if(_0x271e86(0xb78)!==_0x271e86(0xb78)){function _0x185f7f(){const _0x2e22d2=_0x271e86;return this[_0x2e22d2(0x83b)]();}}else this[_0x271e86(0x315)](_0x271e86(0x8f9));}else this[_0x271e86(0x315)](_0x484f9c['svBattlerData']()[_0x271e86(0xb84)]||_0x271e86(0x8f9));}}}}}}}}},Sprite_SvEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x263)]=function(){const _0x3b734c=_0xf2f935;return this['parent']?this[_0x3b734c(0xb03)][_0x3b734c(0x45a)]===0x0&&this['parent'][_0x3b734c(0x8af)]===0x0:!![];},Sprite_SvEnemy['prototype']['updateFlip']=function(){},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x1f7)]=Sprite_Animation['prototype']['targetSpritePosition'],Sprite_Animation[_0xf2f935(0x2dc)][_0xf2f935(0x7d8)]=function(_0x50e793){const _0x495188=_0xf2f935;if(_0x50e793[_0x495188(0x8ae)]){if(_0x495188(0xa44)==='WCmSg'){function _0x564b7a(){const _0x596e39=_0x495188;if(_0x19af1a===_0x3f7ef8[_0x596e39(0x3fa)]())return![];}}else return this[_0x495188(0xa8b)](_0x50e793);}else{if('jTlxc'===_0x495188(0x77a)){function _0x42d472(){const _0xb388aa=_0x495188;this[_0xb388aa(0x8c4)](_0x549cce[_0xb388aa(0x92d)]);}}else return VisuMZ['BattleCore']['Sprite_Animation_targetSpritePosition'][_0x495188(0x86d)](this,_0x50e793);}},Sprite_Animation[_0xf2f935(0x2dc)][_0xf2f935(0xa8b)]=function(_0x5b7490){const _0x4aa2d3=_0xf2f935;let _0x638b8f=_0x5b7490['x'],_0x344e2f=_0x5b7490['y'],_0x44501f=_0x5b7490[_0x4aa2d3(0x902)],_0x92c97c=_0x5b7490[_0x4aa2d3(0x8ae)][_0x4aa2d3(0x3f0)]['y'];_0x5b7490['x']=_0x5b7490[_0x4aa2d3(0x58e)]+_0x5b7490[_0x4aa2d3(0x9d1)](),_0x5b7490['y']=_0x5b7490[_0x4aa2d3(0x4de)]+_0x5b7490[_0x4aa2d3(0x5fd)](),_0x5b7490[_0x4aa2d3(0x902)]*=_0x92c97c;let _0x399747=VisuMZ['BattleCore'][_0x4aa2d3(0x1f7)][_0x4aa2d3(0x86d)](this,_0x5b7490);return _0x5b7490['x']=_0x638b8f,_0x5b7490['y']=_0x344e2f,_0x5b7490[_0x4aa2d3(0x902)]=_0x44501f,_0x399747;},Sprite_Damage['prototype'][_0xf2f935(0x9e5)]=function(_0x47942f){const _0x6b3922=_0xf2f935,_0x5b2a95=_0x47942f[_0x6b3922(0x3e7)]()||_0x47942f[_0x6b3922(0x893)]();if(_0x5b2a95[_0x6b3922(0x375)]||_0x5b2a95[_0x6b3922(0x443)])this[_0x6b3922(0x870)]=0x0,this['createMiss']();else{if(_0x5b2a95[_0x6b3922(0x276)])this['_colorType']=_0x5b2a95[_0x6b3922(0xa1f)]>=0x0?0x0:0x1,this[_0x6b3922(0x345)](_0x5b2a95['hpDamage']);else _0x47942f[_0x6b3922(0x33d)]()&&_0x5b2a95[_0x6b3922(0x28a)]!==0x0&&(this[_0x6b3922(0x870)]=_0x5b2a95['mpDamage']>=0x0?0x2:0x3,this[_0x6b3922(0x345)](_0x5b2a95['mpDamage']));}if(_0x5b2a95['critical']){if('dqObQ'===_0x6b3922(0x68b))this['setupCriticalEffect']();else{function _0x530d06(){const _0xd1b2b3=_0x6b3922;_0x298d11[_0xd1b2b3(0x886)][_0xd1b2b3(0x314)][_0xd1b2b3(0x86d)](this),this[_0xd1b2b3(0x66d)]();}}}},Sprite_Damage[_0xf2f935(0x2dc)][_0xf2f935(0x696)]=function(_0x5c1247){},Sprite_Damage[_0xf2f935(0x2dc)]['createDigits']=function(_0x4c5c76){const _0x1f8c5e=_0xf2f935;let _0x21dcda=this[_0x1f8c5e(0x2a0)](_0x4c5c76);const _0x208784=this[_0x1f8c5e(0x95b)](),_0x1c6610=Math[_0x1f8c5e(0x7e8)](_0x208784*0.75);for(let _0x16fdb1=0x0;_0x16fdb1<_0x21dcda[_0x1f8c5e(0x342)];_0x16fdb1++){const _0x5872ab=this[_0x1f8c5e(0x6a3)](_0x1c6610,_0x208784);_0x5872ab['bitmap'][_0x1f8c5e(0xb39)](_0x21dcda[_0x16fdb1],0x0,0x0,_0x1c6610,_0x208784,_0x1f8c5e(0x535)),_0x5872ab['x']=(_0x16fdb1-(_0x21dcda['length']-0x1)/0x2)*_0x1c6610,_0x5872ab['dy']=-_0x16fdb1;}},Sprite_Damage[_0xf2f935(0x2dc)][_0xf2f935(0x2a0)]=function(_0x5b8765){const _0x391e08=_0xf2f935;let _0x14c09c=Math['abs'](_0x5b8765)[_0x391e08(0x285)]();this[_0x391e08(0x2c0)]()&&(_0x14c09c=VisuMZ['GroupDigits'](_0x14c09c));const _0x81e5db=VisuMZ[_0x391e08(0x886)][_0x391e08(0x650)][_0x391e08(0xb17)];let _0x54203d='',_0x3c26bd='';switch(this['_colorType']){case 0x0:_0x54203d=_0x81e5db[_0x391e08(0x9c8)]||'-%1',_0x3c26bd=TextManager['hp'];if(_0x5b8765===0x0)_0x54203d='%1';break;case 0x1:_0x54203d=_0x81e5db[_0x391e08(0x752)]||_0x391e08(0xa24),_0x3c26bd=TextManager['hp'];break;case 0x2:_0x54203d=_0x81e5db[_0x391e08(0x208)]||_0x391e08(0x976),_0x3c26bd=TextManager['mp'];break;case 0x3:_0x54203d=_0x81e5db[_0x391e08(0x93a)]||_0x391e08(0x79e),_0x3c26bd=TextManager['mp'];break;}return _0x54203d[_0x391e08(0x460)](_0x14c09c,_0x3c26bd)[_0x391e08(0x669)]();},Sprite_Damage[_0xf2f935(0x2dc)][_0xf2f935(0x2c0)]=function(){const _0x172cad=_0xf2f935;if(Imported[_0x172cad(0x758)]){if('KQGcv'==='KQGcv')return VisuMZ[_0x172cad(0x1e6)][_0x172cad(0x650)][_0x172cad(0x5ca)]['DigitGroupingDamageSprites'];else{function _0x2b2e70(){const _0x50a1f9=_0x172cad;this['startMotion'](_0x50a1f9(0x7c0));}}}else{if(_0x172cad(0x8a8)!==_0x172cad(0x7a4))return![];else{function _0xca1d56(){const _0x3cd2b3=_0x172cad;if(_0x1537cb>_0x2f76c9['_baseX'])_0xc14d73=![];if(_0xf41341<_0x1655fc[_0x3cd2b3(0x58e)])_0x16722c=!![];}}}},Sprite_Damage['prototype'][_0xf2f935(0x2e4)]=function(){const _0x4d8189=_0xf2f935,_0x540e36=VisuMZ['BattleCore'][_0x4d8189(0x650)][_0x4d8189(0xb17)];this[_0x4d8189(0x734)]=_0x540e36[_0x4d8189(0x42b)][_0x4d8189(0x37f)](0x0),this[_0x4d8189(0x5e9)]=_0x540e36[_0x4d8189(0x633)];},Sprite_Damage[_0xf2f935(0x2dc)][_0xf2f935(0x353)]=function(_0x4dfa90,_0x29d69d){const _0x65ba87=_0xf2f935;this['_flashColor']=_0x29d69d[_0x65ba87(0x7d1)]||[0x0,0x0,0x0,0x0],this[_0x65ba87(0x734)]=JsonEx[_0x65ba87(0x4ad)](this[_0x65ba87(0x734)]),this[_0x65ba87(0x5e9)]=_0x29d69d['flashDuration']||0x0;const _0x31e41c=this[_0x65ba87(0x95b)](),_0x1322b5=Math['floor'](_0x31e41c*0x1e),_0x932e87=this[_0x65ba87(0x6a3)](_0x1322b5,_0x31e41c);_0x932e87[_0x65ba87(0x266)]['textColor']=ColorManager[_0x65ba87(0x7b3)](_0x29d69d[_0x65ba87(0x568)]),_0x932e87['bitmap'][_0x65ba87(0xb39)](_0x4dfa90,0x0,0x0,_0x1322b5,_0x31e41c,_0x65ba87(0x535)),_0x932e87['dy']=0x0;},Sprite_Damage['prototype'][_0xf2f935(0x5c7)]=function(_0x355860,_0x16b53f,_0x450979){const _0x55b410=_0xf2f935,_0x556004=Math[_0x55b410(0x205)](this[_0x55b410(0x95b)](),ImageManager[_0x55b410(0x570)]),_0x11dd13=Math[_0x55b410(0x7e8)](_0x556004*0x1e),_0x155672=this['createChildSprite'](_0x11dd13,_0x556004),_0x23d73e=ImageManager[_0x55b410(0xba2)]/0x2,_0x25e74f=_0x155672[_0x55b410(0x266)][_0x55b410(0x95f)](_0x16b53f+'\x20');_0x155672['bitmap'][_0x55b410(0x568)]=ColorManager[_0x55b410(0x7b3)](_0x450979[_0x55b410(0x568)]),_0x155672[_0x55b410(0x266)][_0x55b410(0xb39)](_0x16b53f,_0x23d73e,0x0,_0x11dd13-_0x23d73e,_0x556004,_0x55b410(0x535));const _0x127abc=Math[_0x55b410(0x78a)]((_0x556004-ImageManager[_0x55b410(0x570)])/0x2),_0x5ec5a1=_0x11dd13/0x2-ImageManager[_0x55b410(0xba2)]-_0x25e74f/0x2+_0x23d73e/0x2,_0x2267fd=ImageManager[_0x55b410(0x7ef)]('IconSet'),_0x3211e=ImageManager['iconWidth'],_0x43375f=ImageManager[_0x55b410(0x570)],_0xca3872=_0x355860%0x10*_0x3211e,_0x434c2e=Math['floor'](_0x355860/0x10)*_0x43375f;_0x155672['bitmap']['blt'](_0x2267fd,_0xca3872,_0x434c2e,_0x3211e,_0x43375f,_0x5ec5a1,_0x127abc),this[_0x55b410(0x734)]=_0x450979[_0x55b410(0x7d1)]||[0x0,0x0,0x0,0x0],this[_0x55b410(0x734)]=JsonEx['makeDeepCopy'](this['_flashColor']),this[_0x55b410(0x5e9)]=_0x450979[_0x55b410(0x43f)]||0x0,_0x155672['dy']=0x0;},VisuMZ[_0xf2f935(0x886)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0xf2f935(0x2dc)][_0xf2f935(0x3be)],Sprite_StateIcon[_0xf2f935(0x2dc)]['updateFrame']=function(){const _0x34d978=_0xf2f935;VisuMZ[_0x34d978(0x886)][_0x34d978(0x79b)][_0x34d978(0x86d)](this),this['opacity']=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x286)]=Sprite_Weapon[_0xf2f935(0x2dc)]['loadBitmap'],Sprite_Weapon[_0xf2f935(0x2dc)]['loadBitmap']=function(){const _0x16cf3f=_0xf2f935;VisuMZ[_0x16cf3f(0x886)][_0x16cf3f(0x286)][_0x16cf3f(0x86d)](this);if(this[_0x16cf3f(0x266)]){if('Mufvk'===_0x16cf3f(0x7a6))this[_0x16cf3f(0x266)][_0x16cf3f(0x9c9)]=VisuMZ[_0x16cf3f(0x886)][_0x16cf3f(0x650)][_0x16cf3f(0x5df)]['SmoothImage'];else{function _0x360f53(){const _0x14d8ed=_0x16cf3f;this['bitmap'][_0x14d8ed(0xb40)]();const _0x191b9d=this['currentValue']();!_0x45a364(_0x191b9d)&&this['drawGauge']();}}}};function Sprite_HpGauge(){const _0x4ff89a=_0xf2f935;this[_0x4ff89a(0x30e)](...arguments);}Sprite_HpGauge['prototype']=Object[_0xf2f935(0x47f)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0xf2f935(0x2dc)][_0xf2f935(0xb22)]=Sprite_HpGauge,Sprite_HpGauge[_0xf2f935(0x2dc)]['initialize']=function(){const _0x374da3=_0xf2f935;Sprite_Gauge['prototype']['initialize'][_0x374da3(0x86d)](this);},Sprite_HpGauge[_0xf2f935(0x2dc)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0xf2f935(0x2dc)][_0xf2f935(0x70f)]=function(){const _0x1f6643=_0xf2f935;this[_0x1f6643(0x266)]['clear']();const _0x10881b=this[_0x1f6643(0x86c)]();!isNaN(_0x10881b)&&this[_0x1f6643(0x79f)]();};function Sprite_EnemyName(){const _0x197493=_0xf2f935;this[_0x197493(0x30e)](...arguments);}Sprite_EnemyName[_0xf2f935(0x2dc)]=Object[_0xf2f935(0x47f)](Sprite_Name[_0xf2f935(0x2dc)]),Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0xb22)]=Sprite_EnemyName,Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(){const _0x149ef0=_0xf2f935;Sprite_Name['prototype']['initialize'][_0x149ef0(0x86d)](this),this[_0x149ef0(0x5cb)]();},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x2a3)]=function(){const _0x5e6f86=_0xf2f935;Sprite_Name['prototype'][_0x5e6f86(0x2a3)][_0x5e6f86(0x86d)](this),this['opacity']=0x0,this['_linkedSprite']=null,this[_0x5e6f86(0x281)]['x']=0.5,this[_0x5e6f86(0x281)]['y']=0x0;},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x5cb)]=function(){const _0x30c717=_0xf2f935;VisuMZ[_0x30c717(0x886)][_0x30c717(0x650)][_0x30c717(0x9e1)]['NameAttachStateIcon']&&(this[_0x30c717(0x58d)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite']));},Sprite_EnemyName['prototype'][_0xf2f935(0x2cd)]=function(){const _0x2b0bfe=_0xf2f935;return Graphics[_0x2b0bfe(0x760)];},Sprite_EnemyName[_0xf2f935(0x2dc)]['bitmapHeight']=function(){const _0x257083=_0xf2f935;return this[_0x257083(0x828)]=this[_0x257083(0x828)]||Window_Base[_0x257083(0x2dc)][_0x257083(0xbd6)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0xf2f935(0x2dc)]['fontSize']=function(){const _0x333cdf=_0xf2f935;return VisuMZ[_0x333cdf(0x886)][_0x333cdf(0x650)]['Enemy'][_0x333cdf(0x1d5)]||$gameSystem[_0x333cdf(0x7f9)]();},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x482)]=function(_0x1197a4){const _0x1149fc=_0xf2f935;this[_0x1149fc(0x7f1)]=_0x1197a4;},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0xb36)]=function(){const _0x548826=_0xf2f935;Sprite_Name[_0x548826(0x2dc)][_0x548826(0xb36)][_0x548826(0x86d)](this),this[_0x548826(0x819)](),this[_0x548826(0x885)](),this['updateAttachedSprites'](),this[_0x548826(0xbcc)]();},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x70f)]=function(){const _0x21d360=_0xf2f935;this[_0x21d360(0x973)]=undefined;const _0x24da3e=this[_0x21d360(0x222)](),_0x36a4a0=this['bitmapWidth'](),_0x4d8fde=Window_Base[_0x21d360(0x2dc)][_0x21d360(0xbd6)]();this['setupFont'](),this[_0x21d360(0x266)]['clear'](),this[_0x21d360(0x266)][_0x21d360(0xb39)](_0x24da3e,0x0,0x0,_0x36a4a0,_0x4d8fde,'center');},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x819)]=function(){const _0x215f26=_0xf2f935;if(!this[_0x215f26(0x7f1)])return;if(this[_0x215f26(0x45b)]!==this[_0x215f26(0x7f1)][_0x215f26(0x45b)]){if(_0x215f26(0x3f8)===_0x215f26(0x635)){function _0xb08c32(){this['_activeWeaponSlot']=_0x7ba830;}}else this['setup'](this[_0x215f26(0x7f1)][_0x215f26(0x45b)]);}},Sprite_EnemyName['prototype']['updatePosition']=function(){const _0x543cc9=_0xf2f935;if(!this[_0x543cc9(0x7f1)])return;this[_0x543cc9(0x828)]=this[_0x543cc9(0x828)]||Window_Base['prototype'][_0x543cc9(0xbd6)](),this['x']=this[_0x543cc9(0x7f1)][_0x543cc9(0x58e)],this['y']=this['_linkedSprite'][_0x543cc9(0x4de)]-this['_lineHeight']*0.5;const _0x2d0342=VisuMZ[_0x543cc9(0x886)][_0x543cc9(0x650)]['Enemy'];this['x']+=_0x2d0342[_0x543cc9(0x4ed)]||0x0,this['y']+=_0x2d0342[_0x543cc9(0x59b)]||0x0;},Sprite_EnemyName['prototype'][_0xf2f935(0xbac)]=function(){const _0x336211=_0xf2f935;this[_0x336211(0x1ea)]();},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x1ea)]=function(){const _0x30a79b=_0xf2f935;if(!this[_0x30a79b(0x58d)])return;if(this['_battler']!==this[_0x30a79b(0x58d)][_0x30a79b(0x45b)]){if(_0x30a79b(0x844)!==_0x30a79b(0x61b))this[_0x30a79b(0x58d)][_0x30a79b(0x696)](this[_0x30a79b(0x45b)]);else{function _0x50a7f9(){const _0x426e7a=_0x30a79b;if(this['constructor']===_0x2b9a78&&!_0x930a02[_0x426e7a(0x897)]())return;}}}const _0x284f26=this[_0x30a79b(0x7ea)]();this[_0x30a79b(0x828)]=this[_0x30a79b(0x828)]||Window_Base[_0x30a79b(0x2dc)][_0x30a79b(0xbd6)](),this[_0x30a79b(0x58d)]['x']=Math[_0x30a79b(0x78a)]((_0x284f26+ImageManager[_0x30a79b(0xba2)])/0x2)+0x8,this['_stateIconSprite']['y']=this['_lineHeight']/0x2;const _0x545f8e=VisuMZ['BattleCore']['Settings'][_0x30a79b(0x9e1)];this[_0x30a79b(0x58d)]['x']+=_0x545f8e[_0x30a79b(0x889)]||0x0,this[_0x30a79b(0x58d)]['y']+=_0x545f8e[_0x30a79b(0x5d8)]||0x0;},Sprite_EnemyName['prototype']['updateOpacity']=function(){const _0x2ece35=_0xf2f935,_0x3e9142=this[_0x2ece35(0x38b)]();if(_0x3e9142&&this['opacity']<0xff)this[_0x2ece35(0x9c2)]+=0x10;else{if(!_0x3e9142&&this[_0x2ece35(0x9c2)]>0x0){if(_0x2ece35(0x4b0)!==_0x2ece35(0x4b0)){function _0x5dfbc9(){return this['iterateBattler'](_0x227f05[0x0],_0x2d6b8f[0x1],_0x1472a3=>{const _0x1c443e=_0x33da;!_0x1472a3[_0x1c443e(0x228)]()&&(_0x1472a3[_0x1c443e(0x788)](_0x87e96e[0x2],_0x5cc546[0x3]),_0xae75ee['forceAction'](_0x1472a3));}),!![];}}else this[_0x2ece35(0x9c2)]-=0x10;}}},Sprite_EnemyName['prototype'][_0xf2f935(0x38b)]=function(){const _0x315fa1=_0xf2f935;if(this[_0x315fa1(0x931)]())return![];else{if(!this[_0x315fa1(0x45b)])return![];else{if(this[_0x315fa1(0x45b)][_0x315fa1(0xb18)]()){if(_0x315fa1(0x3f3)!==_0x315fa1(0x3f3)){function _0x37790b(){const _0x574f0d=_0x315fa1;_0x156c77=_0x49218f*this['_multipliers'][_0x574f0d(0x8b9)],_0x450b11+=this[_0x574f0d(0x8c3)]['damageFlat']*(_0x2e52fd>=0x0?0x1:-0x1),_0x15f86a=this[_0x574f0d(0x43c)]('PreDamage%1JS',_0x16fda3,_0x22ea17,![]),_0x338cc5=this['applyDamageCaps'](_0x6ab2f0),_0x2b189f=_0x412b5b['round'](_0x64bd3b),this[_0x574f0d(0x72a)]=_0x75396,this[_0x574f0d(0x901)]=this[_0x574f0d(0x901)]||0x0,this['_totalValue']+=_0x3e1408,_0x465462['BattleCore'][_0x574f0d(0x636)][_0x574f0d(0x86d)](this,_0x6acc8b,_0x221846),this[_0x574f0d(0x43c)](_0x574f0d(0x67e),_0x52d48f,_0x31f46b,!![]);}}else return![];}else{if(!this[_0x315fa1(0x45b)][_0x315fa1(0x3c7)]())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x315fa1(0x424)]()){if(_0x315fa1(0x8a7)!==_0x315fa1(0x8a7)){function _0xbb3c2d(){const _0x5bcb76=_0x315fa1;return this[_0x5bcb76(0x979)]()[_0x5bcb76(0x9c0)];}}else return!![];}else{if(this[_0x315fa1(0x352)]())return!![];else{if(this[_0x315fa1(0x9c2)]>0x0){if('syXsQ'===_0x315fa1(0xa99)){function _0x371f24(){this['startMotion']('chant');}}else return![];}}}}}}}}},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x931)]=function(){const _0x386f80=_0xf2f935;return VisuMZ[_0x386f80(0x886)][_0x386f80(0x650)][_0x386f80(0x9e1)][_0x386f80(0x336)];},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x21f)]=function(){return![];},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x424)]=function(){const _0x2151c2=_0xf2f935;return VisuMZ[_0x2151c2(0x886)][_0x2151c2(0x650)][_0x2151c2(0x9e1)][_0x2151c2(0x321)];},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x352)]=function(){const _0x53bd9d=_0xf2f935;if(VisuMZ['BattleCore'][_0x53bd9d(0x650)][_0x53bd9d(0x9e1)][_0x53bd9d(0x8d3)])return this[_0x53bd9d(0x45b)]['isSelected']();else{if('cDWzN'==='QFfyO'){function _0x4193af(){const _0x383a5c=_0x53bd9d;if(this[_0x383a5c(0x49e)]())return![];if(this[_0x383a5c(0x33d)]()&&this[_0x383a5c(0x3c7)]())return!![];if(this[_0x383a5c(0x1fb)]()&&this[_0x383a5c(0x897)]()){if(this[_0x383a5c(0xb18)]()&&this[_0x383a5c(0x72b)]())return![];}else{if(this['isDead']())return![];}return!![];}}else return SceneManager[_0x53bd9d(0xb95)][_0x53bd9d(0x54f)]&&SceneManager[_0x53bd9d(0xb95)][_0x53bd9d(0x54f)][_0x53bd9d(0x613)]&&SceneManager['_scene']['_enemyWindow'][_0x53bd9d(0x953)]['includes'](this['_battler']);}},Sprite_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x7ea)]=function(){const _0x3ca045=_0xf2f935;if(!this[_0x3ca045(0x45b)])return 0x0;if(this[_0x3ca045(0x973)])return this[_0x3ca045(0x973)];const _0x49f766=this['name']();return this['setupFont'](),this['_cacheTextWidth']=this['bitmap'][_0x3ca045(0x95f)](_0x49f766)||0x1,this[_0x3ca045(0x973)];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x328)]=Sprite_Battleback[_0xf2f935(0x2dc)][_0xf2f935(0x4f9)],Sprite_Battleback[_0xf2f935(0x2dc)][_0xf2f935(0x4f9)]=function(){const _0xe580a6=_0xf2f935,_0x535af7=VisuMZ[_0xe580a6(0x886)][_0xe580a6(0x650)][_0xe580a6(0x845)];if(!_0x535af7){if(_0xe580a6(0x742)===_0xe580a6(0x3c9)){function _0x2dfd71(){const _0x51d867=_0xe580a6;if(_0x31b4f2===_0x49792d[_0x51d867(0x3fa)]())return;if(_0x56f861===_0x5a0578[_0x51d867(0x370)])return;if(_0x4f1a49[_0x51d867(0x310)]())_0x4862ea['battler']()['stepBack']();}}else return VisuMZ[_0xe580a6(0x886)][_0xe580a6(0x328)][_0xe580a6(0x86d)](this);}const _0x48937c=String(_0x535af7[_0xe580a6(0x799)])||'MZ';switch(_0x48937c){case'MZ':VisuMZ[_0xe580a6(0x886)][_0xe580a6(0x328)][_0xe580a6(0x86d)](this);break;case _0xe580a6(0x857):this[_0xe580a6(0x744)]();break;case _0xe580a6(0x3af):this['adjustPosition_ScaleToFit']();break;case _0xe580a6(0x9a3):this[_0xe580a6(0x372)]();break;case'ScaleUp':this[_0xe580a6(0x490)]();break;}},Sprite_Battleback[_0xf2f935(0x2dc)][_0xf2f935(0x744)]=function(){const _0x56d75e=_0xf2f935;this[_0x56d75e(0x41b)]=Graphics[_0x56d75e(0x41b)],this['height']=Graphics[_0x56d75e(0x902)];const _0x61a277=0x1;this[_0x56d75e(0x3f0)]['x']=_0x61a277,this[_0x56d75e(0x3f0)]['y']=_0x61a277,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0xf2f935(0x2dc)]['adjustPosition_ScaleToFit']=function(){const _0x34d8d6=_0xf2f935;this[_0x34d8d6(0x41b)]=Graphics[_0x34d8d6(0x41b)],this[_0x34d8d6(0x902)]=Graphics[_0x34d8d6(0x902)];const _0x456361=this[_0x34d8d6(0x41b)]/this[_0x34d8d6(0x266)][_0x34d8d6(0x41b)],_0x431d39=this[_0x34d8d6(0x902)]/this[_0x34d8d6(0x266)]['height'],_0x3c391d=Math[_0x34d8d6(0x205)](_0x456361,_0x431d39);this[_0x34d8d6(0x3f0)]['x']=_0x3c391d,this['scale']['y']=_0x3c391d,this['x']=(Graphics[_0x34d8d6(0x41b)]-this[_0x34d8d6(0x41b)])/0x2,this['y']=Graphics[_0x34d8d6(0x902)]-this[_0x34d8d6(0x902)];},Sprite_Battleback[_0xf2f935(0x2dc)]['adjustPosition_ScaleDown']=function(){const _0x2380cf=_0xf2f935;this[_0x2380cf(0x41b)]=Graphics['width'],this['height']=Graphics[_0x2380cf(0x902)];const _0x4509f5=Math['min'](0x1,this[_0x2380cf(0x41b)]/this[_0x2380cf(0x266)][_0x2380cf(0x41b)]),_0x4da53e=Math[_0x2380cf(0x8ec)](0x1,this[_0x2380cf(0x902)]/this[_0x2380cf(0x266)][_0x2380cf(0x902)]),_0x28a5c1=Math[_0x2380cf(0x205)](_0x4509f5,_0x4da53e);this[_0x2380cf(0x3f0)]['x']=_0x28a5c1,this[_0x2380cf(0x3f0)]['y']=_0x28a5c1,this['x']=(Graphics[_0x2380cf(0x41b)]-this[_0x2380cf(0x41b)])/0x2,this['y']=Graphics[_0x2380cf(0x902)]-this[_0x2380cf(0x902)];},Sprite_Battleback['prototype'][_0xf2f935(0x490)]=function(){const _0x245487=_0xf2f935;this[_0x245487(0x41b)]=Graphics[_0x245487(0x41b)],this['height']=Graphics[_0x245487(0x902)];const _0x29536a=Math[_0x245487(0x205)](0x1,this[_0x245487(0x41b)]/this[_0x245487(0x266)][_0x245487(0x41b)]),_0xaa21dd=Math[_0x245487(0x205)](0x1,this[_0x245487(0x902)]/this[_0x245487(0x266)][_0x245487(0x902)]),_0x11d2cf=Math['max'](_0x29536a,_0xaa21dd);this[_0x245487(0x3f0)]['x']=_0x11d2cf,this['scale']['y']=_0x11d2cf,this['x']=(Graphics[_0x245487(0x41b)]-this[_0x245487(0x41b)])/0x2,this['y']=Graphics['height']-this['height'];},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x61f)]=function(){const _0x52bcc9=_0xf2f935;if(!$gameSystem[_0x52bcc9(0x649)]())return![];return![];},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x348)]=function(){return 0x0;},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x245)]=function(){return 0x0;},VisuMZ['BattleCore'][_0xf2f935(0x9c1)]=Spriteset_Battle[_0xf2f935(0x2dc)]['createLowerLayer'],Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x8cc)]=function(){const _0x52c53b=_0xf2f935;VisuMZ[_0x52c53b(0x886)][_0x52c53b(0x9c1)][_0x52c53b(0x86d)](this),this[_0x52c53b(0x317)](),this['createUIContainer'](),this[_0x52c53b(0x2ae)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x659)]=Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xb36)],Spriteset_Battle[_0xf2f935(0x2dc)]['update']=function(){const _0x13548e=_0xf2f935;VisuMZ[_0x13548e(0x886)][_0x13548e(0x659)][_0x13548e(0x86d)](this),this[_0x13548e(0x200)]();},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x317)]=function(){const _0x9de3b9=_0xf2f935;this['_weather']=new Weather(),this[_0x9de3b9(0x4fd)][_0x9de3b9(0x8de)](this['_weather']);},Spriteset_Battle[_0xf2f935(0x2dc)]['updateWeather']=function(){const _0x418857=_0xf2f935;this[_0x418857(0x5ea)][_0x418857(0x74f)]=$gameScreen[_0x418857(0x5e4)](),this[_0x418857(0x5ea)][_0x418857(0x31a)]=$gameScreen['weatherPower']();},Game_Interpreter['prototype'][_0xf2f935(0x363)]=function(_0x457913){const _0x23034b=_0xf2f935;$gameScreen[_0x23034b(0x421)](_0x457913[0x0],_0x457913[0x1],_0x457913[0x2]);if(_0x457913[0x3])this['wait'](_0x457913[0x2]);return!![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x394)]=Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0x998)],Game_Interpreter[_0xf2f935(0x2dc)][_0xf2f935(0x998)]=function(_0x3bfde9){const _0x2d093d=_0xf2f935;if(SceneManager['isSceneBattle']()){if('bVEBY'!==_0x2d093d(0x351))return SceneManager[_0x2d093d(0xb95)][_0x2d093d(0x2c7)]['changeBattlebacks'](_0x3bfde9[0x0],_0x3bfde9[0x1]),!![];else{function _0x5c2089(){const _0x150620=_0x2d093d;this[_0x150620(0x30e)](...arguments);}}}else return VisuMZ[_0x2d093d(0x886)][_0x2d093d(0x394)][_0x2d093d(0x86d)](this,_0x3bfde9);},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xbcb)]=function(_0x12078a,_0x376396){const _0x1ff7a6=_0xf2f935;_0x12078a[_0x1ff7a6(0x266)]=_0x376396;},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x59e)]=function(_0x40b46f,_0x374c08){const _0xa4a811=_0xf2f935;_0x40b46f=_0x40b46f||'',_0x374c08=_0x374c08||'';if(_0x40b46f===''&&_0x374c08===''){if(_0xa4a811(0x1f5)===_0xa4a811(0x4dc)){function _0x42b604(){const _0x2bc05e=_0xa4a811;if(!_0x4a0446[_0x2bc05e(0x731)]())return;const _0x5ee56f=_0x78f15d[_0x2bc05e(0x7da)]();if(!_0x5ee56f)return;_0x5ee56f[_0x2bc05e(0x8a6)](_0x2bc05e(0xa4a));}}else _0x40b46f=this['_back1Sprite'][_0xa4a811(0x34a)](),_0x374c08=this[_0xa4a811(0x9aa)][_0xa4a811(0x48b)]();}const _0x17c951=ImageManager[_0xa4a811(0x439)](_0x40b46f),_0x13f98b=ImageManager[_0xa4a811(0x59d)](_0x374c08);_0x17c951[_0xa4a811(0x250)](this['updateBattlebackBitmap1'][_0xa4a811(0x6cb)](this,this[_0xa4a811(0x754)],this['_back2Sprite'],_0x17c951,_0x13f98b));},Spriteset_Battle[_0xf2f935(0x2dc)]['updateBattlebackBitmap1']=function(_0x221697,_0x4d4954,_0x1c1ca8,_0x4d786b){const _0x392e7c=_0xf2f935;_0x4d786b[_0x392e7c(0x250)](this[_0x392e7c(0x318)]['bind'](this,_0x221697,_0x4d4954,_0x1c1ca8,_0x4d786b));},Spriteset_Battle['prototype']['updateBattlebackBitmap2']=function(_0xf3c9d7,_0x406b16,_0xa59edf,_0x59f4aa){const _0x57e09e=_0xf2f935;_0xf3c9d7[_0x57e09e(0x266)]=_0xa59edf,_0x406b16[_0x57e09e(0x266)]=_0x59f4aa,_0xf3c9d7[_0x57e09e(0x4f9)](),_0x406b16[_0x57e09e(0x4f9)]();},VisuMZ['BattleCore']['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x797)],Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x797)]=function(){const _0x2ab318=_0xf2f935;VisuMZ[_0x2ab318(0x886)][_0x2ab318(0x3a9)][_0x2ab318(0x86d)](this),this[_0x2ab318(0x20b)]();},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x20b)]=function(){const _0x5119c0=_0xf2f935;this[_0x5119c0(0xb5a)](),this['createAnimationContainer'](),this['createDamageContainer'](),this[_0x5119c0(0x8e8)]();},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xb5a)]=function(){const _0x3ba1d0=_0xf2f935;this[_0x3ba1d0(0x6fb)]=new Sprite(),this[_0x3ba1d0(0x4fd)][_0x3ba1d0(0x8de)](this[_0x3ba1d0(0x6fb)]);},Spriteset_Battle['prototype'][_0xf2f935(0x3ca)]=function(){const _0x243b3c=_0xf2f935;this['_animationContainer']=new Sprite(),this[_0x243b3c(0x4fd)][_0x243b3c(0x8de)](this['_animationContainer']);},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x853)]=function(){const _0x1ae411=_0xf2f935;this[_0x1ae411(0x62c)]=new Sprite(),this[_0x1ae411(0x62c)]['x']=this['_battleField']['x'],this[_0x1ae411(0x62c)]['y']=this[_0x1ae411(0x4fd)]['y'],this['addChild'](this[_0x1ae411(0x62c)]);},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x8e8)]=function(){const _0x281fb1=_0xf2f935;if(!this[_0x281fb1(0x61f)]())return;this[_0x281fb1(0x6fb)]['scale']['x']=-0x1,this[_0x281fb1(0x6fb)]['x']=this[_0x281fb1(0x4fd)][_0x281fb1(0x41b)],this[_0x281fb1(0x68d)]['scale']['x']=-0x1,this[_0x281fb1(0x68d)]['x']=this[_0x281fb1(0x4fd)]['width'],this['_damageContainer'][_0x281fb1(0x3f0)]['x']=-0x1,this[_0x281fb1(0x62c)]['x']=this['_battleField']['x']+this[_0x281fb1(0x4fd)][_0x281fb1(0x41b)];},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x8a2)]=function(){const _0x2f70c1=_0xf2f935;if(Imported['VisuMZ_0_CoreEngine']&&VisuMZ[_0x2f70c1(0x1e6)][_0x2f70c1(0x650)]['UI']['RepositionEnemies']){if(_0x2f70c1(0x4b5)!==_0x2f70c1(0x27b))this[_0x2f70c1(0x3dc)]();else{function _0x361852(){const _0x3198c4=_0x2f70c1;_0x4b589e[_0x3198c4(0x2dc)][_0x3198c4(0x6a7)][_0x3198c4(0x86d)](this,_0x3a5aa3);}}}const _0x3e10de=$gameTroop[_0x2f70c1(0x7d5)](),_0x5979c9=[];for(const _0xd868d8 of _0x3e10de){_0x5979c9['push'](new Sprite_Enemy(_0xd868d8));}_0x5979c9[_0x2f70c1(0xbdd)](this[_0x2f70c1(0x3e6)]['bind'](this));for(const _0x34696c of _0x5979c9){if(_0x2f70c1(0xb34)==='reKdD'){function _0x36d7e0(){const _0x19e977=_0x2f70c1,_0x50206a=_0x264116[_0x19e977(0x98f)]();_0x50206a[_0x19e977(0xa35)](this[_0x19e977(0x67f)]['currentExt']()),this[_0x19e977(0x5f6)]();}}else this[_0x2f70c1(0x6fb)][_0x2f70c1(0x8de)](_0x34696c);}this[_0x2f70c1(0x8fc)]=_0x5979c9;},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x2bc)]=function(){const _0x31c956=_0xf2f935;this['_actorSprites']=[];for(let _0x48007e=0x0;_0x48007e<$gameParty[_0x31c956(0xa80)]();_0x48007e++){const _0x150769=$gameParty[_0x31c956(0x85c)]()[_0x48007e],_0x59585f=new Sprite_Actor();_0x59585f[_0x31c956(0x72d)](_0x150769),_0x59585f[_0x31c956(0x94f)](_0x150769),_0x59585f['update'](),this[_0x31c956(0x6e2)]['push'](_0x59585f),this[_0x31c956(0x6fb)][_0x31c956(0x8de)](_0x59585f);}},Spriteset_Battle['prototype'][_0xf2f935(0x667)]=function(_0x123974,_0x4291ab,_0x5108b7,_0x92b063){const _0x765d6=_0xf2f935,_0x44946c=this[_0x765d6(0x723)](_0x4291ab),_0x120250=new(_0x44946c?Sprite_AnimationMV:Sprite_Animation)(),_0x26c0b9=this[_0x765d6(0x6c4)](_0x123974);this[_0x765d6(0x7d6)](_0x123974[0x0])&&(_0x5108b7=!_0x5108b7),_0x120250['targetObjects']=_0x123974,_0x120250[_0x765d6(0x696)](_0x26c0b9,_0x4291ab,_0x5108b7,_0x92b063),this[_0x765d6(0x313)](_0x120250);},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x313)]=function(_0x59d36e){const _0x27730e=_0xf2f935;this[_0x27730e(0x9e6)](_0x59d36e)?this[_0x27730e(0x234)]()[_0x27730e(0x8de)](_0x59d36e):this[_0x27730e(0x68d)][_0x27730e(0x8de)](_0x59d36e),this[_0x27730e(0x4c8)][_0x27730e(0x580)](_0x59d36e);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x49831b){const _0x2213a8=_0xf2f935;if(!_0x49831b)return![];if(!_0x49831b[_0x2213a8(0x76c)])return![];if(_0x49831b[_0x2213a8(0x76c)][_0x2213a8(0x83e)]!==0x0)return![];if(!_0x49831b[_0x2213a8(0x6b7)][0x0])return![];if(!_0x49831b['targetObjects'][0x0][_0x2213a8(0x8bc)]())return![];if($gameSystem[_0x2213a8(0x649)]())return![];if(!this[_0x2213a8(0x234)]())return![];return Window_BattleStatus[_0x2213a8(0x2dc)][_0x2213a8(0x658)]()===_0x2213a8(0x6cf);},Spriteset_Battle[_0xf2f935(0x2dc)]['battleStatusWindowAnimationContainer']=function(){const _0x428dc2=_0xf2f935;if(!SceneManager[_0x428dc2(0xb95)])return;if(!SceneManager[_0x428dc2(0xb95)][_0x428dc2(0xa6e)])return;if(!SceneManager[_0x428dc2(0xb95)][_0x428dc2(0xa6e)][_0x428dc2(0x778)])return;return SceneManager[_0x428dc2(0xb95)]['_statusWindow'][_0x428dc2(0x778)];},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x477)]=function(_0x487c17){const _0x1e4ea6=_0xf2f935;this[_0x1e4ea6(0x3f9)](_0x487c17);for(const _0x44629d of _0x487c17[_0x1e4ea6(0x6b7)]){_0x44629d[_0x1e4ea6(0x435)]&&_0x44629d[_0x1e4ea6(0x435)]();}_0x487c17[_0x1e4ea6(0xba6)]();},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x3f9)]=function(_0x1a3ffe){const _0x582c96=_0xf2f935;this[_0x582c96(0x4c8)][_0x582c96(0xbb8)](_0x1a3ffe);if(this[_0x582c96(0x9e6)](_0x1a3ffe)){if(_0x582c96(0x34e)!==_0x582c96(0x7c8))this[_0x582c96(0x234)]()[_0x582c96(0xa7b)](_0x1a3ffe);else{function _0xf048c7(){const _0x2d55e2=_0x582c96;let _0x1c8de0=_0x4fab05[_0x2d55e2(0x99b)](_0x1978ec[_0x2d55e2(0x794)]);_0x115f42[_0x2d55e2(0xa1f)]<0x0&&(_0x1c8de0+=_0x14f237[_0x2d55e2(0x824)](_0x424e50[_0x2d55e2(0xa1f)])),_0xa5ab85[_0x2d55e2(0xa01)](_0x30c5cd['VariableHeal'],_0x1c8de0);}}}else{if(_0x582c96(0x9b0)===_0x582c96(0x9b0))this[_0x582c96(0x68d)][_0x582c96(0xa7b)](_0x1a3ffe);else{function _0x1ab2a7(){const _0x3db99b=_0x582c96;return this[_0x3db99b(0x568)](_0x44764f(_0xfc4336));}}}},VisuMZ[_0xf2f935(0x886)]['Spriteset_Battle_updateActors']=Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xaf9)],Spriteset_Battle[_0xf2f935(0x2dc)]['updateActors']=function(){const _0x35992d=_0xf2f935;VisuMZ[_0x35992d(0x886)]['Spriteset_Battle_updateActors']['call'](this),this[_0x35992d(0x4f4)]();},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x4f4)]=function(){const _0x49cc3e=_0xf2f935;this[_0x49cc3e(0x6fb)][_0x49cc3e(0x3d3)][_0x49cc3e(0xbdd)](this['compareBattlerSprites'][_0x49cc3e(0x6cb)](this)),this[_0x49cc3e(0x404)]();},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x7dd)]=function(_0x317ca4,_0x119444){const _0x12e1cd=_0xf2f935;if(VisuMZ[_0x12e1cd(0x886)][_0x12e1cd(0x650)][_0x12e1cd(0x5df)][_0x12e1cd(0x5d1)]){if(_0x12e1cd(0x925)!==_0x12e1cd(0x94a)){if(_0x317ca4[_0x12e1cd(0x45b)]&&_0x119444['_battler']){if(_0x317ca4[_0x12e1cd(0x45b)][_0x12e1cd(0x8bc)]()&&_0x119444[_0x12e1cd(0x45b)][_0x12e1cd(0x1fb)]())return 0x1;else{if(_0x119444[_0x12e1cd(0x45b)][_0x12e1cd(0x8bc)]()&&_0x317ca4[_0x12e1cd(0x45b)][_0x12e1cd(0x1fb)]())return-0x1;}}}else{function _0x5b2d28(){const _0x38428f=_0x12e1cd;_0x2f5dee['BattleCore'][_0x38428f(0x8f8)]['call'](this),!this[_0x38428f(0x45b)]&&this[_0x38428f(0x2c6)]&&(this[_0x38428f(0x2c6)][_0x38428f(0x56c)]=![]);}}}if(_0x317ca4[_0x12e1cd(0x4de)]!==_0x119444['_baseY'])return _0x317ca4[_0x12e1cd(0x4de)]-_0x119444[_0x12e1cd(0x4de)];else{if(_0x12e1cd(0x3a2)!==_0x12e1cd(0x3a2)){function _0x31fb3a(){const _0x2272d7=_0x12e1cd;this[_0x2272d7(0x769)]='xp';}}else return _0x119444['spriteId']-_0x317ca4[_0x12e1cd(0xac2)];}},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x404)]=function(){const _0x5a87b1=_0xf2f935;if(!VisuMZ[_0x5a87b1(0x886)][_0x5a87b1(0x650)]['Actor'][_0x5a87b1(0x8ac)])return;const _0x1fb0f4=BattleManager[_0x5a87b1(0x370)];if(_0x1fb0f4){if(_0x1fb0f4['isActor']()&&!$gameSystem[_0x5a87b1(0x649)]())return;const _0x25ffa6=_0x1fb0f4[_0x5a87b1(0x310)]();if(_0x25ffa6&&_0x1fb0f4[_0x5a87b1(0x8bc)]())this[_0x5a87b1(0x6fb)][_0x5a87b1(0x8de)](_0x25ffa6);}},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x23f)]=function(){const _0x36e6fd=_0xf2f935;for(const _0x139f02 of $gameParty[_0x36e6fd(0x4ae)]()){if(_0x36e6fd(0x5e1)!=='WMTzv'){if(!_0x139f02)continue;if(!_0x139f02[_0x36e6fd(0x310)]())continue;_0x139f02['battler']()[_0x36e6fd(0x823)]=!![],_0x139f02['battler']()[_0x36e6fd(0x4db)]();}else{function _0x33bb7d(){const _0x378f18=_0x36e6fd;this[_0x378f18(0x33b)]();}}}},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x2aa)]=function(){const _0x1b0baf=_0xf2f935;this['_uiContainer']=new Sprite(),this[_0x1b0baf(0x4fd)][_0x1b0baf(0x8de)](this['_uiContainer']);},Spriteset_Battle[_0xf2f935(0x2dc)]['createEnemyNames']=function(){const _0x42e722=_0xf2f935;if(VisuMZ['BattleCore'][_0x42e722(0x650)][_0x42e722(0x9e1)][_0x42e722(0x2b6)])return;this['_enemyNameContainer']=new Sprite(),this[_0x42e722(0x1db)]['addChild'](this[_0x42e722(0x2d3)]);for(const _0x2c4ae0 of this[_0x42e722(0x8fc)]){const _0x110bd8=new Sprite_EnemyName();this[_0x42e722(0x2d3)]['addChild'](_0x110bd8),_0x110bd8[_0x42e722(0x482)](_0x2c4ae0);}},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0xab9)]=function(){return![];},Spriteset_Battle['prototype'][_0xf2f935(0x25e)]=function(){const _0x227b0d=_0xf2f935;return this[_0x227b0d(0x4a9)]()[_0x227b0d(0xa60)](_0xb80ec3=>_0xb80ec3[_0x227b0d(0x36a)]());},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x2f6)]=function(){const _0x44b54a=_0xf2f935;return this[_0x44b54a(0x4a9)]()[_0x44b54a(0xa60)](_0x5472fb=>_0x5472fb[_0x44b54a(0x8c6)]());},Spriteset_Battle[_0xf2f935(0x2dc)][_0xf2f935(0x6a1)]=function(){const _0x4e089b=_0xf2f935;return this[_0x4e089b(0x4a9)]()[_0x4e089b(0xa60)](_0x5d7408=>_0x5d7408[_0x4e089b(0xaa2)]());},Spriteset_Battle['prototype'][_0xf2f935(0x51c)]=function(){const _0x2b5299=_0xf2f935;return this['battlerSprites']()[_0x2b5299(0xa60)](_0xc6e047=>_0xc6e047[_0x2b5299(0x629)]());},Spriteset_Battle[_0xf2f935(0x2dc)]['isAnyoneSpinning']=function(){const _0x44c065=_0xf2f935;return this[_0x44c065(0x4a9)]()[_0x44c065(0xa60)](_0xdabd17=>_0xdabd17[_0x44c065(0x879)]());},Spriteset_Battle[_0xf2f935(0x2dc)]['isAnyoneChangingOpacity']=function(){const _0x5d920a=_0xf2f935;return this[_0x5d920a(0x4a9)]()[_0x5d920a(0xa60)](_0x1ae77c=>_0x1ae77c[_0x5d920a(0x7b1)]());},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x6ac)]=Window_ItemList[_0xf2f935(0x2dc)][_0xf2f935(0x9ef)],Window_ItemList[_0xf2f935(0x2dc)][_0xf2f935(0x9ef)]=function(){const _0x323ea6=_0xf2f935;if(SceneManager[_0x323ea6(0x731)]()){if(SceneManager[_0x323ea6(0xb95)][_0x323ea6(0x658)]()===_0x323ea6(0xacf)){if(_0x323ea6(0xacd)!==_0x323ea6(0xacd)){function _0x2103bb(){const _0x5de7c9=_0x323ea6;let _0x29c4bf=0x0;this['_baseLineStack'][_0x5de7c9(0x342)]>0x0&&(_0x29c4bf=this[_0x5de7c9(0x5dc)][this['_baseLineStack'][_0x5de7c9(0x342)]-0x1]),this[_0x5de7c9(0x863)][_0x5de7c9(0x342)]>_0x29c4bf?this['wait']():this['callNextMethod']();}}else return VisuMZ[_0x323ea6(0x886)][_0x323ea6(0x650)]['BattleLayout'][_0x323ea6(0x1e3)];}else return VisuMZ[_0x323ea6(0x886)]['Settings'][_0x323ea6(0x4a4)][_0x323ea6(0x1f0)];}else{if('HDSdI'!==_0x323ea6(0x4f7)){function _0x4e954f(){const _0x527062=_0x323ea6;_0x1a78f8[_0x527062(0x266)]=_0x4d91aa[_0x527062(0xb43)];}}else return VisuMZ[_0x323ea6(0x886)][_0x323ea6(0x6ac)][_0x323ea6(0x86d)](this);}},VisuMZ[_0xf2f935(0x886)]['Window_SkillList_maxCols']=Window_SkillList['prototype'][_0xf2f935(0x9ef)],Window_SkillList[_0xf2f935(0x2dc)][_0xf2f935(0x9ef)]=function(){const _0x21d22e=_0xf2f935;if(SceneManager[_0x21d22e(0x731)]()){if(SceneManager[_0x21d22e(0xb95)][_0x21d22e(0x658)]()==='border'){if('QScFV'===_0x21d22e(0x6fe)){function _0xfc267e(){const _0x1c48d5=_0x21d22e;return this[_0x1c48d5(0x5e2)];}}else return VisuMZ['BattleCore'][_0x21d22e(0x650)]['BattleLayout'][_0x21d22e(0x1e3)];}else{if(_0x21d22e(0xb1b)!=='sTXCm'){function _0x5b7eaa(){const _0x4d091c=_0x21d22e;this[_0x4d091c(0x333)]={},this[_0x4d091c(0x859)]={};if(!_0x4319b5)return;const _0x575181=_0x4ecaa8[_0x4d091c(0xbc2)];if(!_0x575181)return;const _0x59e6ce=_0x575181['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x59e6ce)for(const _0x171cf0 of _0x59e6ce){_0x171cf0[_0x4d091c(0x78e)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x398de9=_0x1259a6(_0x5c084a['$1']),_0x4dd904=_0x18d8d7(_0x40e32c['$2']),_0x586fb0=_0x4dd904===0x1?this[_0x4d091c(0x333)]:this[_0x4d091c(0x859)],_0x2198ea=_0x394912(_0x2462ab['$3']);_0x586fb0[_0x398de9]=_0x2198ea;}}}else return VisuMZ[_0x21d22e(0x886)][_0x21d22e(0x650)][_0x21d22e(0x4a4)][_0x21d22e(0x1f0)];}}else return VisuMZ['BattleCore']['Window_SkillList_maxCols'][_0x21d22e(0x86d)](this);},VisuMZ[_0xf2f935(0x886)]['Window_Options_addGeneralOptions']=Window_Options[_0xf2f935(0x2dc)]['addGeneralOptions'],Window_Options[_0xf2f935(0x2dc)][_0xf2f935(0x67a)]=function(){const _0x105254=_0xf2f935;VisuMZ[_0x105254(0x886)]['Window_Options_addGeneralOptions'][_0x105254(0x86d)](this),this['addAutoBattleCommands'](),this['addShowHpGaugeCommand']();},Window_Options['prototype'][_0xf2f935(0x2f3)]=function(){const _0x4c200e=_0xf2f935;VisuMZ[_0x4c200e(0x886)][_0x4c200e(0x650)][_0x4c200e(0x814)][_0x4c200e(0x452)]&&(this[_0x4c200e(0x910)](),this[_0x4c200e(0xa8e)]());},Window_Options[_0xf2f935(0x2dc)][_0xf2f935(0x720)]=function(){const _0x2beeef=_0xf2f935;if(!VisuMZ[_0x2beeef(0x886)][_0x2beeef(0x650)][_0x2beeef(0x6b5)]['AddHpGaugeOption'])return;const _0x4c3446=TextManager[_0x2beeef(0x8d2)],_0x5cf263='visualHpGauge';this[_0x2beeef(0x357)](_0x4c3446,_0x5cf263);},Window_Options['prototype'][_0xf2f935(0x910)]=function(){const _0x3a76e8=_0xf2f935,_0x13dd00=TextManager[_0x3a76e8(0x29c)],_0x46ef4a=_0x3a76e8(0xadb);this[_0x3a76e8(0x357)](_0x13dd00,_0x46ef4a);},Window_Options['prototype'][_0xf2f935(0xa8e)]=function(){const _0x38f859=_0xf2f935,_0x159545=TextManager[_0x38f859(0x5b5)],_0x27f47d=_0x38f859(0x491);this[_0x38f859(0x357)](_0x159545,_0x27f47d);},VisuMZ[_0xf2f935(0x886)]['Window_Options_statusText']=Window_Options[_0xf2f935(0x2dc)][_0xf2f935(0x677)],Window_Options[_0xf2f935(0x2dc)][_0xf2f935(0x677)]=function(_0x73574b){const _0xc153bb=_0xf2f935,_0x55cdae=this[_0xc153bb(0x935)](_0x73574b);return _0x55cdae==='autoBattleUseSkills'?this[_0xc153bb(0x713)]():VisuMZ[_0xc153bb(0x886)][_0xc153bb(0x9d2)][_0xc153bb(0x86d)](this,_0x73574b);},Window_Options[_0xf2f935(0x2dc)][_0xf2f935(0x713)]=function(){const _0x12cd00=_0xf2f935,_0x374d89=VisuMZ[_0x12cd00(0x886)][_0x12cd00(0x650)][_0x12cd00(0x814)],_0x192377=this[_0x12cd00(0x9fc)]('autoBattleUseSkills');return _0x192377?_0x374d89['StyleON']:_0x374d89['StyleOFF'];},Window_ShopStatus['prototype'][_0xf2f935(0x2ed)]=function(){const _0x10331c=_0xf2f935,_0xfb333e=DataManager[_0x10331c(0x9bb)](this['_item']),_0x59ce2f=VisuMZ[_0x10331c(0x56e)][_0xfb333e];if(!_0x59ce2f)return this[_0x10331c(0x1ed)]();const _0x58b909='DamageType%1'[_0x10331c(0x460)](this[_0x10331c(0x577)][_0x10331c(0xb5e)]['type']),_0x1613f5=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x10331c(0xb5e)][_0x10331c(0x74f)]];return _0x59ce2f[_0x58b909][_0x10331c(0x460)](_0x1613f5);},Window_ShopStatus[_0xf2f935(0x2dc)]['getItemDamageAmountTextBattleCore']=function(){const _0x4ff200=_0xf2f935,_0xaa2c47=DataManager[_0x4ff200(0x9bb)](this[_0x4ff200(0x577)]),_0x271fe6=VisuMZ['DamageStyles'][_0xaa2c47];if(!_0x271fe6)return this[_0x4ff200(0x56d)]();return _0x271fe6['DamageDisplay'][_0x4ff200(0x86d)](this);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x72f)]=Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x30e)],Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(_0x1cc983){const _0x567bad=_0xf2f935;VisuMZ[_0x567bad(0x886)][_0x567bad(0x72f)][_0x567bad(0x86d)](this,_0x1cc983),this['createCommandNameWindow'](_0x1cc983);},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0xafb)]=function(_0x294054){const _0x2fee41=_0xf2f935,_0x5fa494=new Rectangle(0x0,0x0,_0x294054[_0x2fee41(0x41b)],_0x294054['height']);this[_0x2fee41(0x3f5)]=new Window_Base(_0x5fa494),this[_0x2fee41(0x3f5)][_0x2fee41(0x9c2)]=0x0,this[_0x2fee41(0x8de)](this[_0x2fee41(0x3f5)]),this[_0x2fee41(0x899)]();},Window_PartyCommand['prototype']['callUpdateHelp']=function(){const _0x5b1c22=_0xf2f935;Window_Command[_0x5b1c22(0x2dc)]['callUpdateHelp'][_0x5b1c22(0x86d)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0xf2f935(0x899)]=function(){const _0x3c6d3e=_0xf2f935,_0x64538=this[_0x3c6d3e(0x3f5)];_0x64538[_0x3c6d3e(0xa62)][_0x3c6d3e(0xb40)]();const _0x240e72=this[_0x3c6d3e(0x61e)](this[_0x3c6d3e(0x900)]());if(_0x240e72===_0x3c6d3e(0xbc4)&&this[_0x3c6d3e(0x20f)]()>0x0){if(_0x3c6d3e(0x44e)==='QTqZz'){const _0x1b3472=this[_0x3c6d3e(0x688)](this[_0x3c6d3e(0x900)]());let _0x308718=this['commandName'](this[_0x3c6d3e(0x900)]());_0x308718=_0x308718[_0x3c6d3e(0x87e)](/\\I\[(\d+)\]/gi,''),_0x64538[_0x3c6d3e(0x2f2)](),this[_0x3c6d3e(0x3d9)](_0x308718,_0x1b3472),this[_0x3c6d3e(0x36c)](_0x308718,_0x1b3472),this[_0x3c6d3e(0x966)](_0x308718,_0x1b3472);}else{function _0xaa8894(){const _0x41575a=_0x3c6d3e;this[_0x41575a(0x308)](_0x113843);}}}},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x3d9)]=function(_0x37be69,_0x747ce6){},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x36c)]=function(_0x38516d,_0xe13c65){const _0x8f8b89=_0xf2f935,_0x272c95=this[_0x8f8b89(0x3f5)];_0x272c95[_0x8f8b89(0xb39)](_0x38516d,0x0,_0xe13c65['y'],_0x272c95[_0x8f8b89(0x9d0)],_0x8f8b89(0x535));},Window_PartyCommand['prototype'][_0xf2f935(0x966)]=function(_0x11214d,_0x3da7c7){const _0x60513f=_0xf2f935,_0x245f60=this[_0x60513f(0x3f5)],_0x3f15b2=$gameSystem[_0x60513f(0x2cc)](),_0x38097d=_0x3da7c7['x']+Math[_0x60513f(0x7e8)](_0x3da7c7['width']/0x2)+_0x3f15b2;_0x245f60['x']=_0x245f60[_0x60513f(0x41b)]/-0x2+_0x38097d,_0x245f60['y']=Math[_0x60513f(0x7e8)](_0x3da7c7[_0x60513f(0x902)]/0x2);},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0xa20)]=function(){const _0x2af247=_0xf2f935;this[_0x2af247(0x9f1)](),this[_0x2af247(0x831)](),this[_0x2af247(0x790)](),this[_0x2af247(0x44f)](),this[_0x2af247(0x83f)]();},Window_PartyCommand['prototype']['addFightCommand']=function(){const _0x2545b5=_0xf2f935,_0xd6519f=this['commandStyle'](),_0x204277=VisuMZ[_0x2545b5(0x886)][_0x2545b5(0x650)][_0x2545b5(0x2af)][_0x2545b5(0x22f)],_0x241fc6=_0xd6519f===_0x2545b5(0x442)?TextManager[_0x2545b5(0x76e)]:_0x2545b5(0x467)[_0x2545b5(0x460)](_0x204277,TextManager['fight']),_0x29f9f5=this[_0x2545b5(0xa4d)]();this[_0x2545b5(0x357)](_0x241fc6,_0x2545b5(0x76e),_0x29f9f5);},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0xa4d)]=function(){return!![];},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x831)]=function(){const _0x5312a5=_0xf2f935;if(!this[_0x5312a5(0x6f2)]())return;const _0x1fad8b=this[_0x5312a5(0x8c2)](),_0x1bd554=VisuMZ[_0x5312a5(0x886)][_0x5312a5(0x650)][_0x5312a5(0x2af)][_0x5312a5(0x53d)],_0x16c797=_0x1fad8b===_0x5312a5(0x442)?TextManager[_0x5312a5(0xb1c)]:_0x5312a5(0x467)[_0x5312a5(0x460)](_0x1bd554,TextManager['autoBattle']),_0x427393=this['isAutoBattleCommandEnabled']();this[_0x5312a5(0x357)](_0x16c797,_0x5312a5(0xb1c),_0x427393);},Window_PartyCommand[_0xf2f935(0x2dc)]['isAutoBattleCommandAdded']=function(){const _0x4d461b=_0xf2f935;return VisuMZ[_0x4d461b(0x886)][_0x4d461b(0x650)]['PartyCmd'][_0x4d461b(0x344)];},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0xaed)]=function(){return!![];},Window_PartyCommand['prototype'][_0xf2f935(0x790)]=function(){},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x44f)]=function(){const _0x3825d8=_0xf2f935;if(!this[_0x3825d8(0x4bc)]())return;const _0x58a561=this[_0x3825d8(0x8c2)](),_0x4b50d9=VisuMZ['BattleCore']['Settings'][_0x3825d8(0x2af)]['CmdIconOptions'],_0x347642=_0x58a561===_0x3825d8(0x442)?TextManager['options']:_0x3825d8(0x467)[_0x3825d8(0x460)](_0x4b50d9,TextManager[_0x3825d8(0x429)]),_0x5ca761=this[_0x3825d8(0x66c)]();this[_0x3825d8(0x357)](_0x347642,_0x3825d8(0x429),_0x5ca761);},Window_PartyCommand['prototype'][_0xf2f935(0x4bc)]=function(){const _0x2d4341=_0xf2f935;return VisuMZ[_0x2d4341(0x886)][_0x2d4341(0x650)]['PartyCmd'][_0x2d4341(0xa98)];},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x66c)]=function(){return!![];},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x83f)]=function(){const _0x58e063=_0xf2f935,_0x4f0819=this['commandStyle'](),_0x5dc37a=VisuMZ[_0x58e063(0x886)][_0x58e063(0x650)][_0x58e063(0x2af)][_0x58e063(0x543)],_0x49e532=_0x4f0819===_0x58e063(0x442)?TextManager[_0x58e063(0x4d4)]:_0x58e063(0x467)[_0x58e063(0x460)](_0x5dc37a,TextManager['escape']),_0x2e1c5d=this[_0x58e063(0x87b)]();this[_0x58e063(0x357)](_0x49e532,'escape',_0x2e1c5d);},Window_PartyCommand['prototype']['isEscapeCommandEnabled']=function(){const _0x305e28=_0xf2f935;return BattleManager[_0x305e28(0x4d7)]();},Window_PartyCommand[_0xf2f935(0x2dc)]['itemTextAlign']=function(){const _0x3c2ddc=_0xf2f935;return VisuMZ[_0x3c2ddc(0x886)][_0x3c2ddc(0x650)][_0x3c2ddc(0x2af)][_0x3c2ddc(0x81d)];},Window_PartyCommand[_0xf2f935(0x2dc)]['drawItem']=function(_0x3cab57){const _0x2cc317=_0xf2f935,_0x3bbef2=this[_0x2cc317(0x61e)](_0x3cab57);if(_0x3bbef2===_0x2cc317(0x436))this['drawItemStyleIconText'](_0x3cab57);else _0x3bbef2===_0x2cc317(0xbc4)?this[_0x2cc317(0x2eb)](_0x3cab57):Window_Command[_0x2cc317(0x2dc)][_0x2cc317(0x6a7)][_0x2cc317(0x86d)](this,_0x3cab57);},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x8c2)]=function(){const _0x3151f1=_0xf2f935;return VisuMZ[_0x3151f1(0x886)][_0x3151f1(0x650)][_0x3151f1(0x2af)]['CmdStyle'];},Window_PartyCommand['prototype'][_0xf2f935(0x61e)]=function(_0x278cd6){const _0x531ee0=_0xf2f935;if(_0x278cd6<0x0)return _0x531ee0(0x442);const _0x35e157=this[_0x531ee0(0x8c2)]();if(_0x35e157!==_0x531ee0(0x38c)){if(_0x531ee0(0xaf1)==='hlIno'){function _0x4cb0dc(){const _0x391aca=_0x531ee0;this[_0x391aca(0xb06)]=new _0x1beed7();const _0x459896=_0x57c70b[_0x391aca(0xb95)],_0x4d429e=_0x459896[_0x391aca(0x3d3)][_0x391aca(0x665)](_0x459896[_0x391aca(0x451)]);_0x459896[_0x391aca(0xb9f)](this[_0x391aca(0xb06)],_0x4d429e),this[_0x391aca(0xb06)][_0x391aca(0x281)]['x']=0.5,this[_0x391aca(0xb06)][_0x391aca(0x281)]['y']=0x1;const _0x24c0fe=_0x42f626[_0x391aca(0x886)][_0x391aca(0x650)][_0x391aca(0x4a4)][_0x391aca(0x459)];this[_0x391aca(0xb06)][_0x391aca(0x3f0)]['x']=_0x24c0fe,this['_borderPortraitSprite'][_0x391aca(0x3f0)]['y']=_0x24c0fe,this[_0x391aca(0xb06)]['y']=this['y']+this[_0x391aca(0x902)],this['_borderPortraitDuration']=0x0;}}else return _0x35e157;}else{if(this[_0x531ee0(0x20f)]()>0x0){const _0x32af22=this[_0x531ee0(0xbb6)](_0x278cd6);if(_0x32af22[_0x531ee0(0x78e)](/\\I\[(\d+)\]/i)){if('KotPH'===_0x531ee0(0xb4c)){const _0x2e2ddf=this[_0x531ee0(0x688)](_0x278cd6),_0x20062b=this['textSizeEx'](_0x32af22)[_0x531ee0(0x41b)];return _0x20062b<=_0x2e2ddf[_0x531ee0(0x41b)]?'iconText':_0x531ee0(0xbc4);}else{function _0x160ddf(){const _0x11abd2=_0x531ee0;return _0x3499da[_0x11abd2(0x8c5)]()[_0x11abd2(0x4ae)]()[_0x11abd2(0xba4)](_0x22c1df=>_0x22c1df!==_0x444977);}}}}}return'text';},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x3b7)]=function(_0x497593){const _0x5c92db=_0xf2f935,_0x2c0bf2=this['itemLineRect'](_0x497593),_0x17ef7a=this['commandName'](_0x497593),_0x1c5499=this[_0x5c92db(0xa0b)](_0x17ef7a)[_0x5c92db(0x41b)];this[_0x5c92db(0x54e)](this[_0x5c92db(0x399)](_0x497593));const _0x2d6f02=this[_0x5c92db(0x952)]();if(_0x2d6f02===_0x5c92db(0x30a))this[_0x5c92db(0xb7c)](_0x17ef7a,_0x2c0bf2['x']+_0x2c0bf2[_0x5c92db(0x41b)]-_0x1c5499,_0x2c0bf2['y'],_0x1c5499);else{if(_0x2d6f02==='center'){if(_0x5c92db(0x445)!==_0x5c92db(0x445)){function _0x96aaf8(){const _0x524c05=_0x5c92db,_0x5a6d6b=this['_dimmerSprite'][_0x524c05(0x266)],_0x3fc5bf=this[_0x524c05(0x41b)]-0x8,_0x2a4d5b=this['height'],_0x10691c=this[_0x524c05(0xa7a)],_0x50c978=_0x3c13e2[_0x524c05(0x54a)](),_0x4e1274=_0x5c25f5[_0x524c05(0x5cf)]();this[_0x524c05(0x816)]['x']=0x4,_0x5a6d6b['resize'](_0x3fc5bf,_0x2a4d5b),_0x5a6d6b[_0x524c05(0x975)](0x0,0x0,_0x3fc5bf,_0x10691c,_0x4e1274,_0x50c978,!![]),_0x5a6d6b[_0x524c05(0x1f2)](0x0,_0x10691c,_0x3fc5bf,_0x2a4d5b-_0x10691c*0x2,_0x50c978),_0x5a6d6b[_0x524c05(0x975)](0x0,_0x2a4d5b-_0x10691c,_0x3fc5bf,_0x10691c,_0x50c978,_0x4e1274,!![]),this[_0x524c05(0x816)][_0x524c05(0x4b6)](0x0,0x0,_0x3fc5bf,_0x2a4d5b);}}else{const _0x451bb1=_0x2c0bf2['x']+Math[_0x5c92db(0x7e8)]((_0x2c0bf2['width']-_0x1c5499)/0x2);this[_0x5c92db(0xb7c)](_0x17ef7a,_0x451bb1,_0x2c0bf2['y'],_0x1c5499);}}else this[_0x5c92db(0xb7c)](_0x17ef7a,_0x2c0bf2['x'],_0x2c0bf2['y'],_0x1c5499);}},Window_PartyCommand[_0xf2f935(0x2dc)]['drawItemStyleIcon']=function(_0x5ec6d4){const _0x15b1aa=_0xf2f935;this[_0x15b1aa(0xbb6)](_0x5ec6d4)['match'](/\\I\[(\d+)\]/i);const _0x2e32db=Number(RegExp['$1'])||0x0,_0x31e08f=this[_0x15b1aa(0x688)](_0x5ec6d4),_0x51fc46=_0x31e08f['x']+Math[_0x15b1aa(0x7e8)]((_0x31e08f[_0x15b1aa(0x41b)]-ImageManager['iconWidth'])/0x2),_0x6100da=_0x31e08f['y']+(_0x31e08f[_0x15b1aa(0x902)]-ImageManager['iconHeight'])/0x2;this[_0x15b1aa(0xb5f)](_0x2e32db,_0x51fc46,_0x6100da);},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x5f0)]=function(){},Window_PartyCommand[_0xf2f935(0x2dc)][_0xf2f935(0x29d)]=function(){const _0x1b0266=_0xf2f935;Window_Command[_0x1b0266(0x2dc)][_0x1b0266(0x29d)][_0x1b0266(0x86d)](this);const _0x24a2c7=this[_0x1b0266(0x658)]();_0x24a2c7==='border'&&this[_0x1b0266(0x84c)]();},Window_PartyCommand[_0xf2f935(0x2dc)]['battleLayoutStyle']=function(){const _0x4c083d=_0xf2f935;if(this[_0x4c083d(0x5e2)])return this[_0x4c083d(0x5e2)];return this['_battleLayoutStyle']=SceneManager[_0x4c083d(0xb95)][_0x4c083d(0x658)](),this[_0x4c083d(0x5e2)];},Window_PartyCommand[_0xf2f935(0x2dc)]['updateHelp']=function(){const _0x2b1691=_0xf2f935,_0x5dc1b1=VisuMZ[_0x2b1691(0x886)]['Settings'][_0x2b1691(0x2af)],_0x5864dc=this[_0x2b1691(0x8df)]();switch(_0x5864dc){case _0x2b1691(0x76e):this[_0x2b1691(0x309)][_0x2b1691(0x330)](_0x5dc1b1[_0x2b1691(0x53a)]);break;case'autoBattle':this['_helpWindow'][_0x2b1691(0x330)](_0x5dc1b1[_0x2b1691(0x347)]);break;case _0x2b1691(0x429):this[_0x2b1691(0x309)][_0x2b1691(0x330)](_0x5dc1b1['HelpOptions']);break;case _0x2b1691(0x4d4):this[_0x2b1691(0x309)][_0x2b1691(0x330)](_0x5dc1b1[_0x2b1691(0x78c)]);break;default:this[_0x2b1691(0x309)][_0x2b1691(0x330)]('');break;}},VisuMZ[_0xf2f935(0x886)]['Window_ActorCommand_initialize']=Window_ActorCommand[_0xf2f935(0x2dc)]['initialize'],Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(_0x1fee54){const _0x130629=_0xf2f935;VisuMZ[_0x130629(0x886)][_0x130629(0x215)][_0x130629(0x86d)](this,_0x1fee54),this['createCommandNameWindow'](_0x1fee54);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0xafb)]=function(_0x199585){const _0x115feb=_0xf2f935,_0x3ec5f6=new Rectangle(0x0,0x0,_0x199585[_0x115feb(0x41b)],_0x199585[_0x115feb(0x902)]);this[_0x115feb(0x3f5)]=new Window_Base(_0x3ec5f6),this['_commandNameWindow'][_0x115feb(0x9c2)]=0x0,this['addChild'](this[_0x115feb(0x3f5)]),this[_0x115feb(0x899)]();},Window_ActorCommand[_0xf2f935(0x2dc)]['callUpdateHelp']=function(){const _0x155f97=_0xf2f935;Window_Command[_0x155f97(0x2dc)]['callUpdateHelp'][_0x155f97(0x86d)](this);if(this[_0x155f97(0x3f5)])this[_0x155f97(0x899)]();},Window_ActorCommand['prototype'][_0xf2f935(0x899)]=function(){const _0x47fc10=_0xf2f935,_0x3d8674=this[_0x47fc10(0x3f5)];_0x3d8674['contents'][_0x47fc10(0xb40)]();const _0x5c47eb=this[_0x47fc10(0x61e)](this[_0x47fc10(0x900)]());if(_0x5c47eb===_0x47fc10(0xbc4)&&this[_0x47fc10(0x20f)]()>0x0){if('weWAH'==='weWAH'){const _0x2d84b1=this[_0x47fc10(0x688)](this[_0x47fc10(0x900)]());let _0x3dbf75=this[_0x47fc10(0xbb6)](this['index']());_0x3dbf75=_0x3dbf75[_0x47fc10(0x87e)](/\\I\[(\d+)\]/gi,''),_0x3d8674[_0x47fc10(0x2f2)](),this[_0x47fc10(0x3d9)](_0x3dbf75,_0x2d84b1),this[_0x47fc10(0x36c)](_0x3dbf75,_0x2d84b1),this[_0x47fc10(0x966)](_0x3dbf75,_0x2d84b1);}else{function _0x2500cd(){const _0x531b61=_0x47fc10;this[_0x531b61(0x580)](_0x531b61(0xb55),_0x4287a0);}}}},Window_ActorCommand[_0xf2f935(0x2dc)]['commandNameWindowDrawBackground']=function(_0x7cc25b,_0x5e2813){},Window_ActorCommand['prototype'][_0xf2f935(0x36c)]=function(_0x3978e1,_0x29a981){const _0x2a8616=_0xf2f935,_0x36ea99=this[_0x2a8616(0x3f5)];_0x36ea99[_0x2a8616(0xb39)](_0x3978e1,0x0,_0x29a981['y'],_0x36ea99[_0x2a8616(0x9d0)],_0x2a8616(0x535));},Window_ActorCommand['prototype'][_0xf2f935(0x966)]=function(_0x1dfdb5,_0x3b9cbb){const _0x209b2f=_0xf2f935,_0x497327=this['_commandNameWindow'],_0x56fa69=$gameSystem[_0x209b2f(0x2cc)](),_0x294ae7=_0x3b9cbb['x']+Math['floor'](_0x3b9cbb['width']/0x2)+_0x56fa69;_0x497327['x']=_0x497327[_0x209b2f(0x41b)]/-0x2+_0x294ae7,_0x497327['y']=Math['floor'](_0x3b9cbb[_0x209b2f(0x902)]/0x2);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0xa20)]=function(){const _0x99c95a=_0xf2f935;if(!this[_0x99c95a(0x7e5)])return;const _0x11b917=this[_0x99c95a(0x7e5)][_0x99c95a(0x1ff)]();for(const _0x4d7023 of _0x11b917){if(_0x99c95a(0x304)!==_0x99c95a(0x4ef))this[_0x99c95a(0x66b)](_0x4d7023[_0x99c95a(0xa2e)]()[_0x99c95a(0x669)]());else{function _0x4882d7(){const _0x189abe=_0x99c95a;return _0x189abe(0xbc4);}}}},Window_ActorCommand[_0xf2f935(0x2dc)]['makeBattleCommand']=function(_0x4c12a3){const _0x3a0b90=_0xf2f935;if(_0x4c12a3===_0x3a0b90(0xb8f)){if(_0x3a0b90(0xb91)!=='zIsAN')this[_0x3a0b90(0x809)]();else{function _0x1eb9c7(){const _0x863414=_0x3a0b90;return _0x2f74d1[_0x863414(0x886)]['Game_Action_isForOpponent'][_0x863414(0x86d)](this);}}}[_0x3a0b90(0x2ba),_0x3a0b90(0x418)][_0x3a0b90(0x7fe)](_0x4c12a3)&&this[_0x3a0b90(0x671)]();_0x4c12a3===_0x3a0b90(0x33a)&&this[_0x3a0b90(0x84b)]();_0x4c12a3==='ITEM'&&this[_0x3a0b90(0x9dc)]();if(_0x4c12a3===_0x3a0b90(0xb85)){if(_0x3a0b90(0x5f2)!=='whebu')this['addEscapeCommand']();else{function _0x357ea4(){const _0x3d4274=_0x3a0b90;this['_animationContainer'][_0x3d4274(0x8de)](_0x1114fb);}}}if(_0x4c12a3==='AUTO\x20BATTLE'){if(_0x3a0b90(0x300)!==_0x3a0b90(0x300)){function _0x5986da(){const _0x3811da=_0x3a0b90,_0x1baf8f=this[_0x3811da(0x658)]();['xp',_0x3811da(0x6cf),_0x3811da(0xacf)][_0x3811da(0x7fe)](_0x1baf8f)&&this[_0x3811da(0x67f)]['close'](),(_0x1baf8f===_0x3811da(0xacf)||this['isSkillItemWindowsMiddle']())&&(this[_0x3811da(0x3ef)][_0x3811da(0x98d)](),this[_0x3811da(0x914)][_0x3811da(0x98d)]());}}else this[_0x3a0b90(0x831)]();}if(_0x4c12a3[_0x3a0b90(0x78e)](/STYPE: (\d+)/i)){const _0x50db2d=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x50db2d);}else{if(_0x4c12a3[_0x3a0b90(0x78e)](/STYPE: (.*)/i)){const _0xf95af9=DataManager[_0x3a0b90(0x324)](RegExp['$1']);this['addSkillTypeCommand'](_0xf95af9);}}_0x4c12a3===_0x3a0b90(0x33c)&&this[_0x3a0b90(0x2bd)]();if(_0x4c12a3[_0x3a0b90(0x78e)](/SKILL: (\d+)/i)){if(_0x3a0b90(0xadf)==='QVrzr'){const _0x2f5b04=Number(RegExp['$1']);this[_0x3a0b90(0x8da)]($dataSkills[_0x2f5b04]);}else{function _0x86a70c(){const _0x2c2c89=_0x3a0b90,_0x33e78f=_0x391cef[_0x2c2c89(0x886)]['Settings'][_0x2c2c89(0xb3e)],_0x1243d1=_0x33e78f[_0x2c2c89(0x7ce)],_0x566cff=_0x33e78f['StepDistanceY'],_0x2a2b76=_0x33e78f['StepDuration'];this['startMove'](_0x1243d1,_0x566cff,_0x2a2b76);}}}else{if(_0x4c12a3['match'](/SKILL: (.*)/i)){const _0x1ea262=DataManager[_0x3a0b90(0x662)](RegExp['$1']);this[_0x3a0b90(0x8da)]($dataSkills[_0x1ea262]);}}_0x4c12a3===_0x3a0b90(0x674)&&Imported[_0x3a0b90(0xbc5)]&&this[_0x3a0b90(0x289)](),[_0x3a0b90(0x5c3),_0x3a0b90(0x87f)][_0x3a0b90(0x7fe)](_0x4c12a3)&&Imported[_0x3a0b90(0x768)]&&this[_0x3a0b90(0x8b5)](),_0x4c12a3==='WEAPON\x20SWAP'&&Imported[_0x3a0b90(0x406)]&&this[_0x3a0b90(0x39b)](!![]);},Window_ActorCommand['prototype'][_0xf2f935(0x809)]=function(){const _0x2f76d3=_0xf2f935,_0x49fc09=$dataSkills[this[_0x2f76d3(0x7e5)]['attackSkillId']()];if(!_0x49fc09)return;if(!this[_0x2f76d3(0x9fd)](_0x49fc09))return;const _0x21d1be=this['commandStyle'](),_0x1dd99b=DataManager[_0x2f76d3(0x9ac)](_0x49fc09),_0x27201c=DataManager[_0x2f76d3(0xb13)](_0x49fc09),_0x20980d=_0x21d1be===_0x2f76d3(0x442)?_0x1dd99b:_0x2f76d3(0x467)[_0x2f76d3(0x460)](_0x27201c,_0x1dd99b);this[_0x2f76d3(0x357)](_0x20980d,'attack',this['_actor']['canAttack']());},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x84b)]=function(){const _0x44186a=_0xf2f935,_0x48ce85=$dataSkills[this[_0x44186a(0x7e5)][_0x44186a(0x818)]()];if(!_0x48ce85)return;if(!this[_0x44186a(0x9fd)](_0x48ce85))return;const _0x247035=this[_0x44186a(0x8c2)](),_0x2d19ca=DataManager['battleCommandName'](_0x48ce85),_0x1960d=DataManager[_0x44186a(0xb13)](_0x48ce85),_0x308b83=_0x247035==='text'?_0x2d19ca:_0x44186a(0x467)['format'](_0x1960d,_0x2d19ca);this[_0x44186a(0x357)](_0x308b83,_0x44186a(0x7c0),this[_0x44186a(0x7e5)]['canGuard']());},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x9dc)]=function(){const _0x4d305e=_0xf2f935,_0x22b19b=this[_0x4d305e(0x8c2)](),_0x521dbb=VisuMZ[_0x4d305e(0x886)][_0x4d305e(0x650)]['ActorCmd'][_0x4d305e(0x81a)],_0x26f7a7=_0x22b19b===_0x4d305e(0x442)?TextManager[_0x4d305e(0x5b0)]:_0x4d305e(0x467)[_0x4d305e(0x460)](_0x521dbb,TextManager[_0x4d305e(0x5b0)]),_0x3deb5b=this[_0x4d305e(0x388)]();this[_0x4d305e(0x357)](_0x26f7a7,_0x4d305e(0x5b0),_0x3deb5b);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x388)]=function(){const _0x265fd1=_0xf2f935;return this[_0x265fd1(0x7e5)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0xf2f935(0x2dc)]['addSkillCommands']=function(){const _0x51da5a=_0xf2f935,_0x2f0094=this['_actor']['skillTypes']();for(const _0x4eb02c of _0x2f0094){this[_0x51da5a(0x257)](_0x4eb02c);}},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x257)]=function(_0x2fc385){const _0xc175a8=_0xf2f935;let _0x451b82=$dataSystem[_0xc175a8(0x30f)][_0x2fc385];if(!_0x451b82)return;let _0x2c3137=_0x451b82;const _0x595591=this['commandStyle']();if(_0x595591===_0xc175a8(0x442))_0x2c3137=_0x2c3137['replace'](/\x1I\[(\d+)\]/gi,''),_0x2c3137=_0x2c3137[_0xc175a8(0x87e)](/\\I\[(\d+)\]/gi,'');else{if(!_0x451b82[_0xc175a8(0x78e)](/\\I\[(\d+)\]/i)){if(_0xc175a8(0xbd1)===_0xc175a8(0xbd1)){const _0x4fd5bc=Imported[_0xc175a8(0x61d)]?VisuMZ[_0xc175a8(0x464)][_0xc175a8(0x650)][_0xc175a8(0x37b)]:VisuMZ[_0xc175a8(0x886)][_0xc175a8(0x650)][_0xc175a8(0x550)],_0x2dff2a=$dataSystem['magicSkills']['includes'](_0x2fc385),_0x4b1c98=_0x2dff2a?_0x4fd5bc[_0xc175a8(0x747)]:_0x4fd5bc[_0xc175a8(0x65d)];_0x2c3137=_0xc175a8(0x467)['format'](_0x4b1c98,_0x451b82);}else{function _0x5f2603(){const _0x25c6ac=_0xc175a8;return this[_0x25c6ac(0x828)]=this[_0x25c6ac(0x828)]||_0x4cf5c7['prototype'][_0x25c6ac(0xbd6)]()||0x24,this[_0x25c6ac(0x828)]*0x4;}}}}this['addCommand'](_0x2c3137,_0xc175a8(0xb76),!![],_0x2fc385);},Window_ActorCommand['prototype'][_0xf2f935(0x2bd)]=function(){const _0x1ebd38=_0xf2f935,_0x2349d5=this[_0x1ebd38(0x7e5)]['skillTypes'](),_0x381214=this[_0x1ebd38(0x7e5)][_0x1ebd38(0x730)]();for(const _0x35a46a of _0x381214){if(!_0x35a46a)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this['noSimilarSTypes'](_0x35a46a))continue;if(this['isHiddenSkill'](_0x35a46a))continue;}else{if(!_0x2349d5[_0x1ebd38(0x7fe)](_0x35a46a['stypeId']))continue;}this[_0x1ebd38(0x8da)](_0x35a46a);}},Window_ActorCommand[_0xf2f935(0x2dc)]['noSimilarSTypes']=function(_0x3ec98d){const _0x45ff14=_0xf2f935,_0x3aad13=this[_0x45ff14(0x7e5)]['skillTypes'](),_0x11a998=_0x3aad13[_0x45ff14(0xba4)](_0x5b89d0=>DataManager['getSkillTypes'](_0x3ec98d)[_0x45ff14(0x7fe)](_0x5b89d0));return _0x11a998[_0x45ff14(0x342)]<=0x0;},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x536)]=function(_0x5a2588){const _0x3a5fe0=_0xf2f935;if(!Window_SkillList[_0x3a5fe0(0x2dc)][_0x3a5fe0(0x438)][_0x3a5fe0(0x86d)](this,_0x5a2588))return!![];if(!Window_SkillList[_0x3a5fe0(0x2dc)][_0x3a5fe0(0x995)][_0x3a5fe0(0x86d)](this,_0x5a2588))return!![];if(!Window_SkillList[_0x3a5fe0(0x2dc)][_0x3a5fe0(0xae3)][_0x3a5fe0(0x86d)](this,_0x5a2588))return!![];return![];},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x8da)]=function(_0x5ac0e3){const _0xc0809e=_0xf2f935;if(!_0x5ac0e3)return;if(!this['canAddSkillCommand'](_0x5ac0e3))return;const _0x580d93=this[_0xc0809e(0x8c2)](),_0x450e16=DataManager[_0xc0809e(0x9ac)](_0x5ac0e3),_0x470b89=DataManager['battleCommandIcon'](_0x5ac0e3),_0x291f86=_0x580d93==='text'?_0x450e16:_0xc0809e(0x467)[_0xc0809e(0x460)](_0x470b89,_0x450e16),_0x58af6f=this[_0xc0809e(0x7e5)][_0xc0809e(0x64c)](_0x5ac0e3);this[_0xc0809e(0x357)](_0x291f86,'singleSkill',_0x58af6f,_0x5ac0e3['id']);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x9fd)]=function(_0x543f16){const _0x4b0a88=_0xf2f935,_0x3c97cb=_0x543f16['note'];if(_0x3c97cb[_0x4b0a88(0x78e)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x4b0a88(0x7e5)][_0x4b0a88(0x463)](_0x543f16['id']))return![];}if(_0x3c97cb[_0x4b0a88(0x78e)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor']['hasSkill'](_0x543f16['id']))return![];}const _0x440dca=VisuMZ[_0x4b0a88(0x886)][_0x4b0a88(0x3c0)](_0x543f16,_0x4b0a88(0x4ba));if(VisuMZ[_0x4b0a88(0x886)]['JS'][_0x440dca]){if(_0x4b0a88(0x6b8)!==_0x4b0a88(0x604)){if(!VisuMZ[_0x4b0a88(0x886)]['JS'][_0x440dca][_0x4b0a88(0x86d)](this,this[_0x4b0a88(0x7e5)],_0x543f16))return![];}else{function _0x2f974d(){const _0x132918=_0x4b0a88;this['_mainSprite'][_0x132918(0x266)]=_0x52a539[_0x132918(0x9cf)](_0x51aa9e);}}}return VisuMZ['BattleCore'][_0x4b0a88(0x855)](_0x543f16);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x855)]=function(_0x580004){const _0x4f21cc=_0xf2f935,_0x5bb457=_0x580004['note'];if(_0x5bb457[_0x4f21cc(0x78e)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x4f21cc(0x565)!==_0x4f21cc(0x7bd)){const _0x317b5e=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3ac6d9 of _0x317b5e){if(!$gameSwitches[_0x4f21cc(0x99b)](_0x3ac6d9))return![];}return!![];}else{function _0x19fc2a(){const _0x4e78f7=_0x4f21cc,_0x8a59e8=_0x5ddb1b['floor'](_0x3aed0f[_0x4e78f7(0x41b)]/0x3),_0x594e5d=this[_0x4e78f7(0x46a)]()?(_0x3307ed['width']+_0x5398dc[_0x4e78f7(0x760)])/0x2-_0x8a59e8:(_0x4e6b34['width']-_0x1c5ce4[_0x4e78f7(0x760)])/-0x2,_0x145d53=this[_0x4e78f7(0x3c3)](),_0x12f56f=_0x145d53['y']+_0x145d53['height'],_0xbc69db=this[_0x4e78f7(0x64b)](),_0x1bd726=_0xbc69db['y']-_0x12f56f;return new _0xaff095(_0x594e5d,_0x12f56f,_0x8a59e8,_0x1bd726);}}}if(_0x5bb457[_0x4f21cc(0x78e)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x590451=JSON['parse']('['+RegExp['$1'][_0x4f21cc(0x78e)](/\d+/g)+']');for(const _0x2677e0 of _0x590451){if(_0x4f21cc(0x50b)===_0x4f21cc(0xb60)){function _0x17b6ee(){const _0x44970a=_0x4f21cc;this[_0x44970a(0x471)]['setFrame'](0x0,0x0,0x0,0x0);}}else{if(!$gameSwitches['value'](_0x2677e0))return![];}}return!![];}if(_0x5bb457[_0x4f21cc(0x78e)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4d4660=JSON['parse']('['+RegExp['$1'][_0x4f21cc(0x78e)](/\d+/g)+']');for(const _0x2688fd of _0x4d4660){if($gameSwitches[_0x4f21cc(0x99b)](_0x2688fd))return!![];}return![];}if(_0x5bb457[_0x4f21cc(0x78e)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4888f7=JSON['parse']('['+RegExp['$1'][_0x4f21cc(0x78e)](/\d+/g)+']');for(const _0x57c7fe of _0x4888f7){if(!$gameSwitches['value'](_0x57c7fe))return!![];}return![];}if(_0x5bb457[_0x4f21cc(0x78e)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x344aed=JSON[_0x4f21cc(0x502)]('['+RegExp['$1'][_0x4f21cc(0x78e)](/\d+/g)+']');for(const _0x5a3c31 of _0x344aed){if(!$gameSwitches[_0x4f21cc(0x99b)](_0x5a3c31))return!![];}return![];}if(_0x5bb457[_0x4f21cc(0x78e)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x201c24=JSON[_0x4f21cc(0x502)]('['+RegExp['$1'][_0x4f21cc(0x78e)](/\d+/g)+']');for(const _0x3c0e47 of _0x201c24){if(_0x4f21cc(0x71f)===_0x4f21cc(0x71f)){if($gameSwitches[_0x4f21cc(0x99b)](_0x3c0e47))return![];}else{function _0x5dda16(){const _0xdcc551=_0x4f21cc;return _0x1cafe0[_0xdcc551(0x886)][_0xdcc551(0x650)]['AutoBattle'][_0xdcc551(0x660)];}}}return!![];}return!![];},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x83f)]=function(){const _0x149a17=_0xf2f935,_0x4f65c8=this['commandStyle'](),_0x5188f1=VisuMZ[_0x149a17(0x886)][_0x149a17(0x650)][_0x149a17(0x2af)][_0x149a17(0x543)],_0x15769e=_0x4f65c8===_0x149a17(0x442)?TextManager[_0x149a17(0x4d4)]:_0x149a17(0x467)[_0x149a17(0x460)](_0x5188f1,TextManager[_0x149a17(0x4d4)]),_0x532f7e=this[_0x149a17(0x87b)]();this['addCommand'](_0x15769e,_0x149a17(0x4d4),_0x532f7e);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x87b)]=function(){return BattleManager['canEscape']();},Window_ActorCommand['prototype']['addAutoBattleCommand']=function(){const _0x1c1649=_0xf2f935,_0x3fb74b=this[_0x1c1649(0x8c2)](),_0x31d622=VisuMZ[_0x1c1649(0x886)][_0x1c1649(0x650)][_0x1c1649(0x2af)][_0x1c1649(0x53d)],_0x4e4ae8=_0x3fb74b===_0x1c1649(0x442)?TextManager[_0x1c1649(0xb1c)]:_0x1c1649(0x467)[_0x1c1649(0x460)](_0x31d622,TextManager[_0x1c1649(0xb1c)]),_0x11a865=this[_0x1c1649(0xaed)]();this['addCommand'](_0x4e4ae8,_0x1c1649(0xb1c),_0x11a865);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0xaed)]=function(){return!![];},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x952)]=function(){const _0x3dd584=_0xf2f935;return VisuMZ[_0x3dd584(0x886)][_0x3dd584(0x650)]['ActorCmd'][_0x3dd584(0x81d)];},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x6a7)]=function(_0x2b718a){const _0x16bffa=_0xf2f935,_0x2893d6=this[_0x16bffa(0x61e)](_0x2b718a);if(_0x2893d6===_0x16bffa(0x436))this[_0x16bffa(0x3b7)](_0x2b718a);else{if(_0x2893d6===_0x16bffa(0xbc4))this[_0x16bffa(0x2eb)](_0x2b718a);else{if('tbPQt'==='YOeFd'){function _0xbad04a(){const _0x1f0c61=_0x16bffa;this[_0x1f0c61(0x847)]['_stateSprite'][_0x1f0c61(0x3f0)]['x']=-0x1/(this[_0x1f0c61(0x3f0)]['x']||0.001),this[_0x1f0c61(0x847)][_0x1f0c61(0x306)][_0x1f0c61(0x3f0)]['y']=0x1/(this['scale']['y']||0.001);}}else Window_Command[_0x16bffa(0x2dc)][_0x16bffa(0x6a7)][_0x16bffa(0x86d)](this,_0x2b718a);}}this[_0x16bffa(0xaa1)](_0x2b718a);},Window_ActorCommand[_0xf2f935(0x2dc)]['commandStyle']=function(){const _0x58ca18=_0xf2f935;return VisuMZ[_0x58ca18(0x886)]['Settings']['ActorCmd'][_0x58ca18(0xac5)];},Window_ActorCommand['prototype'][_0xf2f935(0x61e)]=function(_0xb24a1c){const _0x3cafcc=_0xf2f935;if(_0xb24a1c<0x0)return'text';const _0x2fdb69=this[_0x3cafcc(0x8c2)]();if(_0x2fdb69!=='auto'){if(_0x3cafcc(0x5c5)===_0x3cafcc(0x5c5))return _0x2fdb69;else{function _0x48fffd(){const _0x406256=_0x3cafcc;if(!_0x53b9b1[_0x406256(0x731)]())return;const _0x2e9ba6=_0x34d4d7['getLastPluginCommandInterpreter']();if(!_0x2e9ba6)return;_0x2e9ba6[_0x406256(0x8a6)](_0x406256(0x256));}}}else{if(this[_0x3cafcc(0x20f)]()>0x0){if(_0x3cafcc(0x389)!==_0x3cafcc(0x7cf)){const _0x563697=this[_0x3cafcc(0xbb6)](_0xb24a1c);if(_0x563697['match'](/\\I\[(\d+)\]/i)){if(_0x3cafcc(0xb52)!=='EsfHV'){function _0x44614e(){const _0x141303=_0x3cafcc;this[_0x141303(0x3ad)](),this[_0x141303(0x827)](),this[_0x141303(0x9ba)](),this[_0x141303(0x50e)](),_0x3758d8[_0x141303(0x886)][_0x141303(0x434)][_0x141303(0x86d)](this),this[_0x141303(0x97f)](),this[_0x141303(0xabc)](),this[_0x141303(0x90e)]();}}else{const _0x5d016a=this[_0x3cafcc(0x688)](_0xb24a1c),_0x10a828=this['textSizeEx'](_0x563697)[_0x3cafcc(0x41b)];return _0x10a828<=_0x5d016a['width']?_0x3cafcc(0x436):_0x3cafcc(0xbc4);}}}else{function _0xf42de7(){const _0x226f4b=_0x3cafcc;if(_0x2206f9['ParseAllNotetags'])return;this[_0x226f4b(0xa30)](),this[_0x226f4b(0x4e2)](),this[_0x226f4b(0x457)]();}}}}return'text';},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x3b7)]=function(_0x1d1be6){const _0xab557a=_0xf2f935,_0x3a4f53=this['itemLineRect'](_0x1d1be6),_0xd5f37c=this[_0xab557a(0xbb6)](_0x1d1be6),_0x1cfa4b=this[_0xab557a(0xa0b)](_0xd5f37c)[_0xab557a(0x41b)];this[_0xab557a(0x54e)](this[_0xab557a(0x399)](_0x1d1be6));const _0x410d8d=this[_0xab557a(0x952)]();if(_0x410d8d===_0xab557a(0x30a))this[_0xab557a(0xb7c)](_0xd5f37c,_0x3a4f53['x']+_0x3a4f53[_0xab557a(0x41b)]-_0x1cfa4b,_0x3a4f53['y'],_0x1cfa4b);else{if(_0x410d8d===_0xab557a(0x535)){const _0x2cf4df=_0x3a4f53['x']+Math[_0xab557a(0x7e8)]((_0x3a4f53[_0xab557a(0x41b)]-_0x1cfa4b)/0x2);this[_0xab557a(0xb7c)](_0xd5f37c,_0x2cf4df,_0x3a4f53['y'],_0x1cfa4b);}else{if('BCaUM'!=='HeHwb')this[_0xab557a(0xb7c)](_0xd5f37c,_0x3a4f53['x'],_0x3a4f53['y'],_0x1cfa4b);else{function _0x151698(){const _0x3a46cc=_0xab557a;return _0x3be0d3=_0x2a66e8[_0x3a46cc(0x886)]['Settings']['Damage'][_0x3a46cc(0x84d)][_0x3a46cc(0x86d)](this,_0x1b050a),_0x4320ea=this[_0x3a46cc(0x8c3)][_0x3a46cc(0xab4)]*_0x2b4953+this[_0x3a46cc(0x8c3)][_0x3a46cc(0x3bc)],_0x212573;}}}}},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x2eb)]=function(_0x430ac2){const _0x1578ac=_0xf2f935;this[_0x1578ac(0xbb6)](_0x430ac2)[_0x1578ac(0x78e)](/\\I\[(\d+)\]/i);const _0x493199=Number(RegExp['$1'])||0x0,_0xfeaeef=this[_0x1578ac(0x688)](_0x430ac2),_0x4e4a9d=_0xfeaeef['x']+Math[_0x1578ac(0x7e8)]((_0xfeaeef[_0x1578ac(0x41b)]-ImageManager[_0x1578ac(0xba2)])/0x2),_0x3056fd=_0xfeaeef['y']+(_0xfeaeef[_0x1578ac(0x902)]-ImageManager['iconHeight'])/0x2;this[_0x1578ac(0xb5f)](_0x493199,_0x4e4a9d,_0x3056fd);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0xaa1)]=function(_0x456997){const _0x280fe0=_0xf2f935;if(!(VisuMZ[_0x280fe0(0x886)][_0x280fe0(0x650)]['ActorCmd'][_0x280fe0(0x2fc)]??!![]))return;const _0x8910cb=this[_0x280fe0(0x935)](_0x456997);if(![_0x280fe0(0x989),_0x280fe0(0x7c0),_0x280fe0(0x420)][_0x280fe0(0x7fe)](_0x8910cb))return;const _0x2c3ef0=this['itemLineRect'](_0x456997);let _0x2041c3=null;if(_0x8910cb===_0x280fe0(0x989)){if(_0x280fe0(0x525)===_0x280fe0(0x525))_0x2041c3=$dataSkills[this[_0x280fe0(0x7e5)][_0x280fe0(0xb82)]()];else{function _0xa68fcb(){const _0x26bf94=_0x280fe0;return _0x26bf94(0x436);}}}else _0x8910cb===_0x280fe0(0x7c0)?_0x2041c3=$dataSkills[this['_actor'][_0x280fe0(0x818)]()]:_0x2041c3=$dataSkills[this[_0x280fe0(0xa2f)][_0x456997][_0x280fe0(0x229)]];this['drawSkillCost'](this[_0x280fe0(0x7e5)],_0x2041c3,_0x2c3ef0['x'],_0x2c3ef0['y'],_0x2c3ef0[_0x280fe0(0x41b)]);},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x77e)]=function(_0x13b9d0,_0xd39fa,_0x2fedec,_0x6e1e22,_0x5a51cb){const _0x352872=_0xf2f935;if(!_0xd39fa)return;if(Imported[_0x352872(0x61d)])Window_Command[_0x352872(0x2dc)][_0x352872(0x77e)][_0x352872(0x86d)](this,_0x13b9d0,_0xd39fa,_0x2fedec,_0x6e1e22,_0x5a51cb);else{if(_0x352872(0x538)!==_0x352872(0xab0))Window_SkillList['prototype'][_0x352872(0x77e)][_0x352872(0x86d)](this,_0xd39fa,_0x2fedec,_0x6e1e22,_0x5a51cb);else{function _0x2a9c5e(){const _0xaee183=_0x352872;let _0x48da1e='';if(_0xc5b8a7[_0xaee183(0x7fe)](_0x1c40d8))_0x48da1e=_0xaee183(0x366)[_0xaee183(0x460)](_0x32b9f2['id'],_0x4017e1);if(_0x1906f1['includes'](_0x533327))_0x48da1e=_0xaee183(0x268)[_0xaee183(0x460)](_0x5ce32a['id'],_0x3777de);if(_0x3f0da3['includes'](_0x1e01dc))_0x48da1e=_0xaee183(0xb0f)['format'](_0xe4ec78['id'],_0x1fad84);if(_0x312a04[_0xaee183(0x7fe)](_0x33bc63))_0x48da1e='Item-%1-%2'[_0xaee183(0x460)](_0x4312c0['id'],_0x2811a2);if(_0x287894['includes'](_0x5e51ab))_0x48da1e=_0xaee183(0x78d)[_0xaee183(0x460)](_0x45da70['id'],_0x742424);if(_0x2541ea['includes'](_0x5ea347))_0x48da1e=_0xaee183(0x792)[_0xaee183(0x460)](_0x1deea0['id'],_0x382f93);if(_0x4e75f8[_0xaee183(0x7fe)](_0x2549cc))_0x48da1e='Enemy-%1-%2'[_0xaee183(0x460)](_0x3d19e2['id'],_0x1e4fbb);if(_0x333679['includes'](_0x1d1533))_0x48da1e='State-%1-%2'['format'](_0x964db5['id'],_0x3ed858);return _0x48da1e;}}}},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x5f0)]=function(){},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x29d)]=function(){const _0xa985ef=_0xf2f935;Window_Command['prototype'][_0xa985ef(0x29d)][_0xa985ef(0x86d)](this);const _0x41e9f7=this[_0xa985ef(0x658)]();_0x41e9f7===_0xa985ef(0xacf)&&this[_0xa985ef(0x84c)]();},Window_ActorCommand[_0xf2f935(0x2dc)]['battleLayoutStyle']=function(){const _0x1e0cd5=_0xf2f935;if(this[_0x1e0cd5(0x5e2)])return this[_0x1e0cd5(0x5e2)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x1e0cd5(0x658)](),this['_battleLayoutStyle'];},VisuMZ[_0xf2f935(0x886)]['Window_ActorCommand_setup']=Window_ActorCommand['prototype'][_0xf2f935(0x696)],Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x696)]=function(_0x1c1e13){const _0x37973d=_0xf2f935,_0x338fb2=this[_0x37973d(0x658)]();if(_0x1c1e13&&['xp',_0x37973d(0x6cf)][_0x37973d(0x7fe)](_0x338fb2))this[_0x37973d(0x308)](_0x1c1e13);else{if(_0x1c1e13&&[_0x37973d(0xacf)][_0x37973d(0x7fe)](_0x338fb2)){if('MIdjD'===_0x37973d(0xbd2)){function _0x2b2e9d(){_0x3a5693=(_0x1b1057+_0x34c04f)/0x2;}}else this[_0x37973d(0x611)](_0x1c1e13),this[_0x37973d(0x84c)]();}}VisuMZ[_0x37973d(0x886)]['Window_ActorCommand_setup'][_0x37973d(0x86d)](this,_0x1c1e13),_0x1c1e13&&$gameTroop['aliveMembers']()['length']>0x0&&_0x1c1e13[_0x37973d(0x310)]()&&_0x1c1e13[_0x37973d(0x310)]()[_0x37973d(0xaa3)]();},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x308)]=function(_0x2fecc6){const _0x247599=_0xf2f935,_0x264e6d=Math[_0x247599(0x78a)](Graphics[_0x247599(0x760)]/0x3),_0x3f3cbd=Math[_0x247599(0x78a)](Graphics[_0x247599(0x760)]/$gameParty[_0x247599(0x85c)]()[_0x247599(0x342)]),_0x11eed1=Math[_0x247599(0x8ec)](_0x264e6d,_0x3f3cbd),_0x8131d4=this[_0x247599(0xb30)](VisuMZ[_0x247599(0x886)][_0x247599(0x650)][_0x247599(0x4a4)]['XPActorCommandLines']),_0x3b2767=_0x3f3cbd*_0x2fecc6[_0x247599(0x900)]()+(_0x3f3cbd-_0x11eed1)/0x2,_0x371e30=SceneManager[_0x247599(0xb95)][_0x247599(0xa6e)]['y']-_0x8131d4;this['move'](_0x3b2767,_0x371e30,_0x11eed1,_0x8131d4),this[_0x247599(0x6e7)](),this[_0x247599(0x884)](0x1);},Window_ActorCommand[_0xf2f935(0x2dc)]['resizeWindowBorderStyle']=function(_0x3f0ae6){const _0x34dbe6=_0xf2f935,_0x1788bb=SceneManager[_0x34dbe6(0xb95)][_0x34dbe6(0x62d)]();this[_0x34dbe6(0x825)](_0x1788bb['x'],_0x1788bb['y'],_0x1788bb[_0x34dbe6(0x41b)],_0x1788bb[_0x34dbe6(0x902)]),this['createContents'](),this[_0x34dbe6(0x884)](0x0);},Window_ActorCommand[_0xf2f935(0x2dc)]['refreshDimmerBitmap']=function(){const _0x52feac=_0xf2f935;if(this[_0x52feac(0x816)]){const _0x5446b6=this[_0x52feac(0x816)][_0x52feac(0x266)],_0x3949d5=this[_0x52feac(0x41b)]-0x8,_0x3dde76=this[_0x52feac(0x902)],_0x3b8bdf=this[_0x52feac(0xa7a)],_0xe1f9ba=ColorManager['dimColor1'](),_0xca3ce1=ColorManager['dimColor2']();this[_0x52feac(0x816)]['x']=0x4,_0x5446b6[_0x52feac(0x4b9)](_0x3949d5,_0x3dde76),_0x5446b6['gradientFillRect'](0x0,0x0,_0x3949d5,_0x3b8bdf,_0xca3ce1,_0xe1f9ba,!![]),_0x5446b6['fillRect'](0x0,_0x3b8bdf,_0x3949d5,_0x3dde76-_0x3b8bdf*0x2,_0xe1f9ba),_0x5446b6[_0x52feac(0x975)](0x0,_0x3dde76-_0x3b8bdf,_0x3949d5,_0x3b8bdf,_0xe1f9ba,_0xca3ce1,!![]),this[_0x52feac(0x816)][_0x52feac(0x4b6)](0x0,0x0,_0x3949d5,_0x3dde76);}},Window_ActorCommand[_0xf2f935(0x2dc)][_0xf2f935(0x771)]=function(){const _0x24c526=_0xf2f935;if(!this['_actor'])return;const _0x111b8=VisuMZ['BattleCore']['Settings'][_0x24c526(0x550)],_0x24cc5d=this[_0x24c526(0x8df)]();switch(_0x24cc5d){case'attack':this[_0x24c526(0x414)]($dataSkills[this[_0x24c526(0x7e5)][_0x24c526(0xb82)]()]);break;case _0x24c526(0x7c0):this['setHelpWindowItem']($dataSkills[this['_actor'][_0x24c526(0x818)]()]);break;case _0x24c526(0xb76):const _0x568f42=_0x111b8[_0x24c526(0x3b1)],_0xb9a900=_0x568f42['format']($dataSystem[_0x24c526(0x30f)][this['currentExt']()]);this[_0x24c526(0x309)][_0x24c526(0x330)](_0xb9a900);break;case'singleSkill':this[_0x24c526(0x414)]($dataSkills[this['currentExt']()]);break;case _0x24c526(0x5b0):this[_0x24c526(0x309)][_0x24c526(0x330)](_0x111b8['HelpItem']);break;case _0x24c526(0x4d4):this['_helpWindow'][_0x24c526(0x330)](_0x111b8[_0x24c526(0x78c)]);break;case'autoBattle':this[_0x24c526(0x309)][_0x24c526(0x330)](_0x111b8[_0x24c526(0x347)]);break;default:this[_0x24c526(0x309)][_0x24c526(0x330)]('');break;}},VisuMZ[_0xf2f935(0x886)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x30e)],Window_BattleStatus['prototype']['initialize']=function(_0x4377cc){const _0x2c8bb0=_0xf2f935;VisuMZ[_0x2c8bb0(0x886)][_0x2c8bb0(0xacb)][_0x2c8bb0(0x86d)](this,_0x4377cc),this[_0x2c8bb0(0x638)](),this[_0x2c8bb0(0x4e3)]();},Window_BattleStatus[_0xf2f935(0x2dc)]['battleLayoutStyle']=function(){const _0xdcd3cc=_0xf2f935;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0xdcd3cc(0x5e2)]=SceneManager[_0xdcd3cc(0xb95)][_0xdcd3cc(0x658)](),this[_0xdcd3cc(0x5e2)];},Window_BattleStatus['prototype'][_0xf2f935(0x638)]=function(){const _0xdd8d1e=_0xf2f935;this[_0xdd8d1e(0x224)]=this['isFrameVisible']();const _0x49778c=VisuMZ['BattleCore']['Settings']['BattleLayout'];_0x49778c[_0xdd8d1e(0x7b6)]&&(this[_0xdd8d1e(0x9c2)]=0x0);},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x623)]=function(){const _0x336ff5=_0xf2f935,_0x4091d5=VisuMZ[_0x336ff5(0x886)][_0x336ff5(0x650)][_0x336ff5(0x4a4)];if(_0x4091d5[_0x336ff5(0x951)])return!![];const _0x42a1bc=this[_0x336ff5(0x658)]();switch(_0x42a1bc){case _0x336ff5(0x29a):case'border':return!![];break;case _0x336ff5(0x6ab):case'xp':case _0x336ff5(0x6cf):default:return![];break;}},Window_BattleStatus[_0xf2f935(0x2dc)]['extraHeight']=function(){const _0x1c485d=_0xf2f935;if(this[_0x1c485d(0x623)]()){if(_0x1c485d(0x3c8)!==_0x1c485d(0xbbf))return 0x0;else{function _0x7c2fd4(){const _0x5abf7d=_0x1c485d,_0x53d8a8=_0x30a9c2[this[_0x5abf7d(0x7e5)][_0x5abf7d(0xb82)]()];if(!_0x53d8a8)return;if(!this[_0x5abf7d(0x9fd)](_0x53d8a8))return;const _0x1f005f=this[_0x5abf7d(0x8c2)](),_0x32e2e4=_0x67125f[_0x5abf7d(0x9ac)](_0x53d8a8),_0x17a6c8=_0x57ea3a[_0x5abf7d(0xb13)](_0x53d8a8),_0x9dcee1=_0x1f005f===_0x5abf7d(0x442)?_0x32e2e4:'\x5cI[%1]%2'['format'](_0x17a6c8,_0x32e2e4);this['addCommand'](_0x9dcee1,'attack',this[_0x5abf7d(0x7e5)][_0x5abf7d(0x30b)]());}}}else return 0xa;},Window_BattleStatus['prototype'][_0xf2f935(0x9ef)]=function(){const _0x3cd481=_0xf2f935,_0x2754bd=this[_0x3cd481(0x658)]();switch(_0x2754bd){case _0x3cd481(0x29a):return 0x1;break;case'xp':case _0x3cd481(0x6cf):return $gameParty[_0x3cd481(0x85c)]()['length'];break;case'default':default:return $gameParty[_0x3cd481(0xa80)]();break;}},Window_BattleStatus[_0xf2f935(0x2dc)]['itemHeight']=function(){const _0x545786=_0xf2f935,_0xf2e3e8=this[_0x545786(0x658)]();switch(_0xf2e3e8){case'list':return Window_StatusBase[_0x545786(0x2dc)][_0x545786(0x552)][_0x545786(0x86d)](this);break;case _0x545786(0x6ab):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0xf2f935(0x99c)]=function(){const _0x8c9804=_0xf2f935,_0x3f79ba=this[_0x8c9804(0x658)]();switch(_0x3f79ba){case'list':return Window_StatusBase[_0x8c9804(0x2dc)][_0x8c9804(0x99c)][_0x8c9804(0x86d)](this);break;case'default':case'xp':case _0x8c9804(0x6cf):default:return 0x0;break;}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x948)]=function(){const _0x3bc018=_0xf2f935;if(this[_0x3bc018(0x623)]())Window_StatusBase[_0x3bc018(0x2dc)][_0x3bc018(0x948)][_0x3bc018(0x86d)](this);else{if('pozlc'!==_0x3bc018(0x43e)){function _0x311450(){const _0x358e66=_0x3bc018;_0x94e31e[_0x358e66(0x886)][_0x358e66(0x3aa)]['call'](this),this['applyGlobalCommonEventNotetags'](),this[_0x358e66(0x5d0)]();}}else this['padding']=0x8;}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x3dd)]=function(){const _0x52a502=_0xf2f935,_0x3e9253=VisuMZ[_0x52a502(0x886)][_0x52a502(0x650)][_0x52a502(0x4a4)];if(_0x3e9253[_0x52a502(0x951)])this[_0x52a502(0x359)]=ImageManager[_0x52a502(0x7ef)](_0x3e9253[_0x52a502(0x951)]);else{if('hdADh'===_0x52a502(0x473)){function _0x1702fe(){const _0x40c3ed=_0x52a502;this[_0x40c3ed(0x36b)](_0x433ea8,_0x398cd2,_0x48a51b);}}else Window_StatusBase[_0x52a502(0x2dc)][_0x52a502(0x3dd)][_0x52a502(0x86d)](this);}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x598)]=function(_0x390d76){const _0x5a43eb=_0xf2f935,_0x239c07=VisuMZ[_0x5a43eb(0x886)][_0x5a43eb(0x650)][_0x5a43eb(0x4a4)];if(_0x239c07[_0x5a43eb(0xbaa)])return;Window_StatusBase[_0x5a43eb(0x2dc)][_0x5a43eb(0x598)][_0x5a43eb(0x86d)](this,_0x390d76);},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x4b7)]=function(){const _0x333b3=_0xf2f935;this[_0x333b3(0xb4a)]=!![];},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0xb36)]=function(){const _0x592d8c=_0xf2f935;Window_StatusBase[_0x592d8c(0x2dc)][_0x592d8c(0xb36)][_0x592d8c(0x86d)](this),this[_0x592d8c(0x5b3)](),this['updateEffectContainers']();if(this[_0x592d8c(0x658)]()==='border')this[_0x592d8c(0x40e)]();},Window_BattleStatus[_0xf2f935(0x2dc)]['updateRefresh']=function(){const _0x41adb8=_0xf2f935;if($gameTemp[_0x41adb8(0x641)]())this[_0x41adb8(0x1d9)](),this['_requestRefresh']=![],$gameTemp[_0x41adb8(0x4a0)]();else{if(this[_0x41adb8(0xb4a)]){if(_0x41adb8(0x916)==='dIhrs'){function _0x1b27c8(){const _0x484adb=_0x41adb8;_0x3554d7[_0x484adb(0x580)](this[_0x484adb(0x684)]()[_0x484adb(0x997)]());}}else this[_0x41adb8(0xb4a)]=![],this[_0x41adb8(0x57c)](),this[_0x41adb8(0x89a)]();}}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x3cc)]=function(){const _0x124ddd=_0xf2f935;Window_StatusBase['prototype'][_0x124ddd(0x3cc)]['call'](this);if(!$gameSystem['isSideView']())this[_0x124ddd(0x57c)]();},Window_BattleStatus['prototype'][_0xf2f935(0x5f0)]=function(){const _0x7c83b2=_0xf2f935;if(this[_0x7c83b2(0xb22)]===Window_BattleStatus)return;Window_StatusBase['prototype'][_0x7c83b2(0x5f0)][_0x7c83b2(0x86d)](this);},Window_BattleStatus['prototype'][_0xf2f935(0xa11)]=function(_0x449ddc){const _0x46a26d=_0xf2f935,_0x4630e9=this['battleLayoutStyle']();switch(_0x4630e9){case'xp':case _0x46a26d(0x6cf):break;case'default':case _0x46a26d(0x29a):case'border':default:return Window_StatusBase[_0x46a26d(0x2dc)][_0x46a26d(0xa11)][_0x46a26d(0x86d)](this,_0x449ddc);break;}},VisuMZ[_0xf2f935(0x886)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus['prototype']['drawItemImage'],Window_BattleStatus[_0xf2f935(0x2dc)]['drawItemImage']=function(_0x4122f7){const _0x33489b=_0xf2f935,_0x1fb6b1=this[_0x33489b(0x658)]();switch(_0x1fb6b1){case _0x33489b(0x29a):this['drawItemImageListStyle'](_0x4122f7);break;case'xp':this['drawItemImageXPStyle'](_0x4122f7);break;case _0x33489b(0x6cf):this['drawItemImagePortraitStyle'](_0x4122f7);break;case _0x33489b(0x6ab):case _0x33489b(0xacf):default:VisuMZ[_0x33489b(0x886)][_0x33489b(0x51e)][_0x33489b(0x86d)](this,_0x4122f7);break;}},Window_BattleStatus[_0xf2f935(0x2dc)]['drawItemStatus']=function(_0x41e942){const _0x3c9f36=_0xf2f935,_0x30bcf2=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this['centerFrontViewSprite'](_0x41e942);switch(_0x30bcf2){case'list':this[_0x3c9f36(0x8ed)](_0x41e942);break;case'xp':case _0x3c9f36(0x6cf):case'default':case'border':default:this[_0x3c9f36(0x8a4)](_0x41e942);break;}},Window_BattleStatus['prototype']['refreshCursor']=function(){const _0x126154=_0xf2f935,_0x143827=this['battleLayoutStyle']();if(['xp'][_0x126154(0x7fe)](_0x143827)&&!$gameSystem[_0x126154(0x649)]()){if('unLqB'==='unLqB'){this[_0x126154(0xb69)](0x0,0x0,0x0,0x0);return;}else{function _0x43f2be(){const _0x16f27c=_0x126154;return _0x1c6926[_0x16f27c(0x886)]['Settings'][_0x16f27c(0xb17)]['OverallFormulaJS'][_0x16f27c(0x86d)](this,_0x13953a,_0x20c5f1);}}}Window_StatusBase['prototype'][_0x126154(0x522)][_0x126154(0x86d)](this);},Window_BattleStatus[_0xf2f935(0x2dc)]['centerFrontViewSprite']=function(_0x1bbc29){const _0xa05ec3=_0xf2f935,_0x29a25a=this[_0xa05ec3(0x3fa)](_0x1bbc29)[_0xa05ec3(0x310)]();if(!_0x29a25a)return;const _0xd8c841=this[_0xa05ec3(0x658)](),_0x4253fe=this['itemRect'](_0x1bbc29);let _0x4de747=Math[_0xa05ec3(0x78a)](_0x4253fe['x']+_0x4253fe['width']/0x2)+this[_0xa05ec3(0xa7a)];[_0xa05ec3(0x29a)][_0xa05ec3(0x7fe)](_0xd8c841)&&(_0x4de747=_0x4253fe['width']/$gameParty[_0xa05ec3(0x85c)]()[_0xa05ec3(0x342)],_0x4de747*=_0x1bbc29,_0x4de747+=_0x4253fe[_0xa05ec3(0x41b)]/$gameParty[_0xa05ec3(0x85c)]()[_0xa05ec3(0x342)]/0x2);let _0x4fb324=Math[_0xa05ec3(0x78a)](this[_0xa05ec3(0x883)](_0x1bbc29,_0x29a25a,_0x4253fe));_0x29a25a[_0xa05ec3(0x386)](_0x4de747,_0x4fb324),this[_0xa05ec3(0xb9f)](_0x29a25a,0x1),_0x29a25a[_0xa05ec3(0x3cc)]();},Window_BattleStatus['prototype'][_0xf2f935(0x883)]=function(_0x3b16f6,_0x108725,_0x42f50c){const _0x1b7fa5=_0xf2f935,_0x38d43f=VisuMZ[_0x1b7fa5(0x886)][_0x1b7fa5(0x650)]['BattleLayout'],_0x31b362=this[_0x1b7fa5(0x658)]();if(_0x31b362==='xp'){if(_0x1b7fa5(0x589)===_0x1b7fa5(0x589)){const _0x52f5d1=_0x38d43f['XPSpriteYLocation'];switch(_0x52f5d1[_0x1b7fa5(0x9cb)]()[_0x1b7fa5(0x669)]()){case _0x1b7fa5(0x1e2):return _0x42f50c[_0x1b7fa5(0x902)]-_0x108725[_0x1b7fa5(0x471)]['height']/0x4;break;case _0x1b7fa5(0x535):const _0x3d9b33=_0x38d43f['XPActorDefaultHeight'];return(_0x42f50c['height']+(_0x108725['height']||_0x3d9b33))/0x2;break;case _0x1b7fa5(0x689):return 0x0;case _0x1b7fa5(0x222):default:return this[_0x1b7fa5(0x57d)](_0x42f50c);break;}}else{function _0x308e31(){const _0x3721fc=_0x1b7fa5;this[_0x3721fc(0x315)](_0x3721fc(0xb93));}}}else{if(_0x31b362==='portrait'){}}return _0x108725[_0x1b7fa5(0x902)];},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x94e)]=function(_0x387be4){const _0x3502b9=_0xf2f935;if(!VisuMZ[_0x3502b9(0x886)][_0x3502b9(0x650)][_0x3502b9(0x4a4)][_0x3502b9(0x407)])return;const _0x11051e=this['actor'](_0x387be4),_0x35166b=this[_0x3502b9(0x8b2)](_0x387be4);_0x35166b[_0x3502b9(0x41b)]=ImageManager[_0x3502b9(0xba1)],_0x35166b[_0x3502b9(0x902)]-=0x2,this['drawActorFace'](_0x11051e,_0x35166b['x']+0x1,_0x35166b['y']+0x1,_0x35166b[_0x3502b9(0x41b)],_0x35166b[_0x3502b9(0x902)]);},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x8ed)]=function(_0x4e4529){const _0xcc19f5=_0xf2f935,_0x2411d8=VisuMZ[_0xcc19f5(0x886)][_0xcc19f5(0x650)][_0xcc19f5(0x4a4)],_0x2b101f=$dataSystem[_0xcc19f5(0x77d)]?0x4:0x3,_0x112c8d=_0x2b101f*0x80+(_0x2b101f-0x1)*0x8+0x4,_0x1ad368=this['actor'](_0x4e4529),_0x5e7b4a=this[_0xcc19f5(0x8b2)](_0x4e4529);let _0x4ec778=_0x5e7b4a['x']+this[_0xcc19f5(0xa7a)];if(_0x2411d8[_0xcc19f5(0x407)]){if(_0xcc19f5(0x28b)!==_0xcc19f5(0x28b)){function _0xc187f5(){const _0x4bafeb=_0xcc19f5;_0x55a82f[_0x4bafeb(0x886)][_0x4bafeb(0x618)][_0x4bafeb(0x86d)](this);}}else _0x4ec778=_0x5e7b4a['x']+ImageManager[_0xcc19f5(0xba1)]+0x8;}else _0x4ec778+=ImageManager[_0xcc19f5(0xba2)];const _0x5bd2ef=Math['round'](Math[_0xcc19f5(0x8ec)](_0x5e7b4a['x']+_0x5e7b4a[_0xcc19f5(0x41b)]-_0x112c8d,_0x4ec778)),_0x488db4=Math[_0xcc19f5(0x78a)](_0x5e7b4a['y']+(_0x5e7b4a[_0xcc19f5(0x902)]-Sprite_Name[_0xcc19f5(0x2dc)]['bitmapHeight']())/0x2),_0x4ad07b=Math['round'](_0x5bd2ef-ImageManager[_0xcc19f5(0xba2)]/0x2-0x4),_0x3cf8c3=Math[_0xcc19f5(0x78a)](_0x5e7b4a['y']+(_0x5e7b4a['height']-ImageManager['iconHeight'])/0x2+ImageManager[_0xcc19f5(0x570)]/0x2);let _0x4264c4=_0x5bd2ef+0x88;const _0x4f32c9=_0x488db4;this['placeTimeGauge'](_0x1ad368,_0x5bd2ef-0x4+(_0x2411d8[_0xcc19f5(0x97a)]||0x0),_0x488db4+(_0x2411d8[_0xcc19f5(0xbd9)]||0x0)),this['placeActorName'](_0x1ad368,_0x5bd2ef+(_0x2411d8[_0xcc19f5(0x4ed)]||0x0),_0x488db4+(_0x2411d8[_0xcc19f5(0x59b)]||0x0)),this[_0xcc19f5(0x68e)](_0x1ad368,_0x4ad07b+(_0x2411d8['StateIconOffsetX']||0x0),_0x3cf8c3+(_0x2411d8['StateIconOffsetY']||0x0)),this[_0xcc19f5(0x492)](_0x1ad368,'hp',_0x4264c4+0x88*0x0+(_0x2411d8[_0xcc19f5(0x49c)]||0x0),_0x4f32c9+(_0x2411d8['HpGaugeOffsetY']||0x0)),this[_0xcc19f5(0x492)](_0x1ad368,'mp',_0x4264c4+0x88*0x1+(_0x2411d8[_0xcc19f5(0x3ce)]||0x0),_0x4f32c9+(_0x2411d8[_0xcc19f5(0x74c)]||0x0));if($dataSystem['optDisplayTp']){if(_0xcc19f5(0x94d)===_0xcc19f5(0x94d))this[_0xcc19f5(0x492)](_0x1ad368,'tp',_0x4264c4+0x88*0x2+(_0x2411d8[_0xcc19f5(0x339)]||0x0),_0x4f32c9+(_0x2411d8[_0xcc19f5(0x8a5)]||0x0));else{function _0x51558e(){_0xa7709d=_0x4a31e8>=_0x194b77?_0x572032:_0x497eb5;}}}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x6c9)]=function(_0x1c3761){const _0x1087e5=_0xf2f935;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1087e5(0x886)][_0x1087e5(0x51e)][_0x1087e5(0x86d)](this,_0x1c3761);},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x8a4)]=function(_0x2605dd){const _0x424c1c=_0xf2f935,_0x1eb378=VisuMZ[_0x424c1c(0x886)][_0x424c1c(0x650)][_0x424c1c(0x4a4)],_0x3505b8=this['actor'](_0x2605dd),_0x514304=this[_0x424c1c(0x8b2)](_0x2605dd),_0x2127c4=Math[_0x424c1c(0x78a)](_0x514304['x']+(_0x514304[_0x424c1c(0x41b)]-0x80)/0x2),_0x323b39=this[_0x424c1c(0x57d)](_0x514304);let _0x449aa9=_0x2127c4-ImageManager[_0x424c1c(0xba2)]/0x2-0x4,_0x30b5fe=_0x323b39+ImageManager['iconHeight']/0x2;_0x449aa9-ImageManager[_0x424c1c(0xba2)]/0x2<_0x514304['x']&&(_0x449aa9=_0x2127c4+ImageManager[_0x424c1c(0xba2)]/0x2-0x4,_0x30b5fe=_0x323b39-ImageManager[_0x424c1c(0x570)]/0x2);const _0x5a6715=_0x2127c4,_0x25a845=this['basicGaugesY'](_0x514304);this['placeTimeGauge'](_0x3505b8,_0x2127c4+(_0x1eb378[_0x424c1c(0x97a)]||0x0),_0x323b39+(_0x1eb378[_0x424c1c(0xbd9)]||0x0)),this[_0x424c1c(0x521)](_0x3505b8,_0x2127c4+(_0x1eb378[_0x424c1c(0x4ed)]||0x0),_0x323b39+(_0x1eb378['NameOffsetY']||0x0)),this['placeStateIcon'](_0x3505b8,_0x449aa9+(_0x1eb378[_0x424c1c(0xaa9)]||0x0),_0x30b5fe+(_0x1eb378[_0x424c1c(0x8d1)]||0x0)),this[_0x424c1c(0x492)](_0x3505b8,'hp',_0x5a6715+(_0x1eb378[_0x424c1c(0x49c)]||0x0),_0x25a845+(_0x1eb378['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x3505b8,'mp',_0x5a6715+(_0x1eb378['MpGaugeOffsetX']||0x0),_0x25a845+this[_0x424c1c(0xa10)]()+(_0x1eb378[_0x424c1c(0x74c)]||0x0));if($dataSystem['optDisplayTp']){if('woWJa'!==_0x424c1c(0x5ee)){function _0x3350a3(){const _0x2a647a=_0x424c1c;this[_0x2a647a(0x8c4)](_0x1cc146[_0x2a647a(0x92d)]);}}else this[_0x424c1c(0x492)](_0x3505b8,'tp',_0x5a6715+(_0x1eb378[_0x424c1c(0x339)]||0x0),_0x25a845+this['gaugeLineHeight']()*0x2+(_0x1eb378[_0x424c1c(0x8a5)]||0x0));}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x719)]=function(_0x2e881e){const _0x256ffb=_0xf2f935;if(!VisuMZ[_0x256ffb(0x886)][_0x256ffb(0x650)][_0x256ffb(0x4a4)][_0x256ffb(0x43a)])return![];if(_0x2e881e[_0x256ffb(0x678)]())return!![];return Imported[_0x256ffb(0x632)]&&_0x2e881e[_0x256ffb(0x335)]();},Game_Actor['prototype']['getBattlePortraitOffsetX']=function(){const _0x1a4b65=_0xf2f935;if(this[_0x1a4b65(0x3fa)]()[_0x1a4b65(0xbc2)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if('rZsui'==='PTwlo'){function _0x59ad97(){const _0x101050=_0x1a4b65;this[_0x101050(0xbd7)]=!this['_enemy'][_0x101050(0x49e)](),!this[_0x101050(0xbd7)]&&(this[_0x101050(0x9c2)]=0x0);}}else return Number(RegExp['$1']);}else{if(this['actor']()[_0x1a4b65(0xbc2)][_0x1a4b65(0x78e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0xf2f935(0x2dc)]['getBattlePortraitOffsetY']=function(){const _0x3c371e=_0xf2f935;if(this[_0x3c371e(0x3fa)]()['note'][_0x3c371e(0x78e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3c371e(0x3fa)]()[_0x3c371e(0xbc2)][_0x3c371e(0x78e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x3c371e(0x945)!==_0x3c371e(0x5f4))return Number(RegExp['$2']);else{function _0x487101(){const _0x1f96f9=_0x3c371e;_0x302de2[_0x1f96f9(0x2dc)][_0x1f96f9(0x948)]['call'](this);}}}}return 0x0;},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x9a2)]=function(_0x578b72){const _0x1399e9=_0xf2f935,_0x277a5d=this[_0x1399e9(0x3fa)](_0x578b72);if(this[_0x1399e9(0x719)](_0x277a5d)){const _0x43b08f=_0x1399e9(0x28e)[_0x1399e9(0x460)](_0x277a5d['actorId']()),_0x42aaa7=this[_0x1399e9(0x946)](_0x43b08f,Sprite),_0x114f64=_0x277a5d['getBattlePortraitFilename']();if(_0x114f64!=='')_0x42aaa7[_0x1399e9(0x266)]=ImageManager[_0x1399e9(0x701)](_0x114f64);else{if(_0x1399e9(0x4ea)!==_0x1399e9(0x9a8))_0x42aaa7[_0x1399e9(0x266)]=ImageManager['_emptyBitmap'];else{function _0x1423f4(){const _0x5a876d=_0x1399e9;if(!this[_0x5a876d(0x45b)])return![];return _0x3c7633['BattleCore'][_0x5a876d(0x78f)][_0x5a876d(0x86d)](this);}}}const _0x1ad6e9=this[_0x1399e9(0x8b2)](_0x578b72);_0x42aaa7[_0x1399e9(0x281)]['x']=0.5,_0x42aaa7[_0x1399e9(0x281)]['y']=0x1;let _0x2e05da=Math[_0x1399e9(0x78a)](_0x1ad6e9['x']+_0x1ad6e9[_0x1399e9(0x41b)]/0x2)+this['padding'];_0x2e05da+=_0x277a5d[_0x1399e9(0x7ab)]();let _0xc679a0=Math['round'](this[_0x1399e9(0x902)]);_0xc679a0+=_0x277a5d['getBattlePortraitOffsetY'](),_0x42aaa7[_0x1399e9(0x825)](_0x2e05da,_0xc679a0);const _0x404576=VisuMZ[_0x1399e9(0x886)]['Settings'][_0x1399e9(0x4a4)][_0x1399e9(0xabf)];_0x42aaa7[_0x1399e9(0x3f0)]['x']=_0x404576,_0x42aaa7[_0x1399e9(0x3f0)]['y']=_0x404576,_0x42aaa7[_0x1399e9(0x3cc)]();}else{const _0x309cd3=this[_0x1399e9(0x943)](_0x578b72);this['drawActorFace'](_0x277a5d,_0x309cd3['x'],_0x309cd3['y'],_0x309cd3[_0x1399e9(0x41b)],_0x309cd3[_0x1399e9(0x902)]);}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x946)]=function(_0x5e4971,_0x54bfb7){const _0x4740b5=_0xf2f935,_0x11606d=this[_0x4740b5(0x5c9)];if(_0x11606d[_0x5e4971]){if(_0x4740b5(0x98e)!=='NfTpg'){function _0x5b4b96(){const _0x4e400c=_0x4740b5;return _0xee9619['BattleCore'][_0x4e400c(0x650)][_0x4e400c(0x550)][_0x4e400c(0x869)];}}else return _0x11606d[_0x5e4971];}else{const _0x6307b4=new _0x54bfb7();return _0x11606d[_0x5e4971]=_0x6307b4,this[_0x4740b5(0xbd8)](_0x6307b4),this[_0x4740b5(0xbd8)](this[_0x4740b5(0xa5d)]),_0x6307b4;}},Window_BattleStatus['prototype']['_createClientArea']=function(){const _0x4ebd52=_0xf2f935;this[_0x4ebd52(0x537)](),this[_0x4ebd52(0x6e1)](),Window_StatusBase['prototype']['_createClientArea'][_0x4ebd52(0x86d)](this),this[_0x4ebd52(0xa04)]();},Window_BattleStatus['prototype'][_0xf2f935(0x537)]=function(){const _0xa6a07e=_0xf2f935;this[_0xa6a07e(0xa5d)]=new Sprite(),this['_cursorArea'][_0xa6a07e(0x5c1)]=[new PIXI[(_0xa6a07e(0x5c1))][(_0xa6a07e(0xa5a))]()],this[_0xa6a07e(0xa5d)]['filterArea']=new Rectangle(),this['_cursorArea']['move'](this[_0xa6a07e(0x9b4)],this[_0xa6a07e(0x9b4)]),this[_0xa6a07e(0x8de)](this[_0xa6a07e(0xa5d)]);},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x6e1)]=function(){const _0x3bec26=_0xf2f935;this[_0x3bec26(0x778)]=new Sprite(),this[_0x3bec26(0x8de)](this[_0x3bec26(0x778)]);},Window_BattleStatus['prototype']['_createDamageContainer']=function(){const _0x21edb9=_0xf2f935;this[_0x21edb9(0x62c)]=new Sprite(),this[_0x21edb9(0x8de)](this['_damageContainer']);},Window_BattleStatus['prototype'][_0xf2f935(0x46f)]=function(){const _0x25fbc9=_0xf2f935;this[_0x25fbc9(0x57b)]=new Sprite();for(let _0xa3a8f0=0x0;_0xa3a8f0<0x9;_0xa3a8f0++){this[_0x25fbc9(0x57b)]['addChild'](new Sprite());}this['_cursorArea']['addChild'](this[_0x25fbc9(0x57b)]);},Window_BattleStatus[_0xf2f935(0x2dc)]['_updateClientArea']=function(){const _0x5861af=_0xf2f935;Window_StatusBase['prototype']['_updateClientArea']['call'](this),this[_0x5861af(0x854)]();},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x854)]=function(){const _0x4c52ca=_0xf2f935,_0x3d7d3f=this['_padding'];this[_0x4c52ca(0xa5d)][_0x4c52ca(0x825)](_0x3d7d3f,_0x3d7d3f),this['_cursorArea']['x']=_0x3d7d3f-this[_0x4c52ca(0x32c)]['x'],this[_0x4c52ca(0xa5d)]['y']=_0x3d7d3f-this[_0x4c52ca(0x32c)]['y'],this['innerWidth']>0x0&&this[_0x4c52ca(0x937)]>0x0?this[_0x4c52ca(0xa5d)][_0x4c52ca(0x56c)]=this[_0x4c52ca(0x65f)]():this['_cursorArea']['visible']=![];},Window_BattleStatus['prototype'][_0xf2f935(0x8e4)]=function(){const _0x5cc2ac=_0xf2f935;Window_StatusBase[_0x5cc2ac(0x2dc)][_0x5cc2ac(0x8e4)][_0x5cc2ac(0x86d)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x762)]=function(){const _0x82d4a9=_0xf2f935,_0x3909b1=this[_0x82d4a9(0xa5d)]['worldTransform'][_0x82d4a9(0x2a9)](new Point(0x0,0x0)),_0x42f9e8=this[_0x82d4a9(0xa5d)][_0x82d4a9(0x63d)];_0x42f9e8['x']=_0x3909b1['x']+this[_0x82d4a9(0x32c)]['x'],_0x42f9e8['y']=_0x3909b1['y']+this[_0x82d4a9(0x32c)]['y'],_0x42f9e8[_0x82d4a9(0x41b)]=this[_0x82d4a9(0x9d0)],_0x42f9e8[_0x82d4a9(0x902)]=this[_0x82d4a9(0x937)];},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0xa3c)]=function(_0x565a3d){const _0x4c45ab=_0xf2f935;if(this[_0x4c45ab(0x658)]()!==_0x4c45ab(0x6cf))return;this[_0x4c45ab(0x9a2)](_0x565a3d[_0x4c45ab(0x900)]());},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0xa6a)]=function(_0x3eb913,_0x326c8d){const _0x3be74e=_0xf2f935;if(!this['_damageContainer'])return;if(!_0x3eb913)return;if(!_0x326c8d)return;const _0x1ca9c4=this[_0x3be74e(0x8b2)](_0x326c8d[_0x3be74e(0x900)]());_0x1ca9c4['x']+=_0x1ca9c4[_0x3be74e(0x41b)]/0x2+this[_0x3be74e(0xa7a)],_0x3eb913['x']=_0x1ca9c4['x'],_0x3eb913['y']=_0x1ca9c4['y'],this[_0x3be74e(0x62c)][_0x3be74e(0x8de)](_0x3eb913);},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x73c)]=function(_0x268fde){const _0x5c591a=_0xf2f935;if(!this[_0x5c591a(0x62c)])return;if(!_0x268fde)return;this[_0x5c591a(0x62c)][_0x5c591a(0xa7b)](_0x268fde);},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x40e)]=function(){const _0x46f48f=_0xf2f935;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x46f48f(0xb06)])this['createBorderStylePortraitSprite']();this[_0x46f48f(0x712)](),this[_0x46f48f(0x942)]();},Window_BattleStatus['prototype'][_0xf2f935(0x7d9)]=function(){const _0x16b7f6=_0xf2f935;if(this[_0x16b7f6(0xb22)]!==Window_BattleStatus)return![];if(!SceneManager[_0x16b7f6(0x731)]())return![];return VisuMZ[_0x16b7f6(0x886)][_0x16b7f6(0x650)][_0x16b7f6(0x4a4)][_0x16b7f6(0xac7)];},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x85a)]=function(){const _0x1ec6b7=_0xf2f935;this[_0x1ec6b7(0xb06)]=new Sprite();const _0x328bd6=SceneManager['_scene'],_0x14f25d=_0x328bd6[_0x1ec6b7(0x3d3)][_0x1ec6b7(0x665)](_0x328bd6['_windowLayer']);_0x328bd6[_0x1ec6b7(0xb9f)](this[_0x1ec6b7(0xb06)],_0x14f25d),this['_borderPortraitSprite'][_0x1ec6b7(0x281)]['x']=0.5,this[_0x1ec6b7(0xb06)][_0x1ec6b7(0x281)]['y']=0x1;const _0x3be7a2=VisuMZ[_0x1ec6b7(0x886)][_0x1ec6b7(0x650)][_0x1ec6b7(0x4a4)][_0x1ec6b7(0x459)];this[_0x1ec6b7(0xb06)][_0x1ec6b7(0x3f0)]['x']=_0x3be7a2,this[_0x1ec6b7(0xb06)][_0x1ec6b7(0x3f0)]['y']=_0x3be7a2,this[_0x1ec6b7(0xb06)]['y']=this['y']+this['height'],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0xf2f935(0x2dc)]['prepareBorderActor']=function(){const _0x47854d=_0xf2f935;this[_0x47854d(0xb06)][_0x47854d(0x56c)]=BattleManager[_0x47854d(0x615)]();const _0x56152f=BattleManager[_0x47854d(0x3fa)]();if(_0x56152f===this[_0x47854d(0xb06)]['actor'])return;this[_0x47854d(0xb06)]['actor']=_0x56152f||this['_borderPortraitSprite'][_0x47854d(0x3fa)];if(!_0x56152f)return;else{if(_0x56152f[_0x47854d(0x923)]()===''){if(_0x47854d(0x682)!==_0x47854d(0x507)){this[_0x47854d(0xb06)]['bitmap']=ImageManager['_emptyBitmap'];return;}else{function _0x21ef24(){this['setWaitMode']('opacity');}}}else{const _0x4e574b=ImageManager[_0x47854d(0x701)](_0x56152f[_0x47854d(0x923)]());_0x4e574b[_0x47854d(0x250)](this[_0x47854d(0x4e7)][_0x47854d(0x6cb)](this,_0x4e574b));}}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x4e7)]=function(_0x2fc0a5){const _0x21bd60=_0xf2f935;this[_0x21bd60(0x65a)]=0x14,this[_0x21bd60(0xb06)][_0x21bd60(0x266)]=_0x2fc0a5;if(SceneManager['_scene']['isRightInputMode']()){if('pnrtJ'!==_0x21bd60(0xa7c)){function _0x465e05(){const _0x385d6d=_0x21bd60,_0x1d2362=this['_forcedBattlers'][_0x385d6d(0x487)](),_0x30abc7=_0x1d2362[0x0];return _0x30abc7[_0x385d6d(0x9af)]=_0x30abc7[_0x385d6d(0x9af)]||[],_0x30abc7['_actions'][0x0]=_0x1d2362[0x1],_0x30abc7;}}else this[_0x21bd60(0xb06)]['x']=0x0,this[_0x21bd60(0x48e)]=Math['ceil'](_0x2fc0a5[_0x21bd60(0x41b)]/0x2);}else this['_borderPortraitSprite']['x']=this[_0x21bd60(0x41b)],this[_0x21bd60(0x48e)]=this[_0x21bd60(0x41b)]*0x3/0x4;this[_0x21bd60(0xb06)]['opacity']=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x21bd60(0x902)];const _0xf26c78=BattleManager[_0x21bd60(0x3fa)]();_0xf26c78&&(this['_borderPortraitTargetX']+=_0xf26c78[_0x21bd60(0x7ab)](),this['_borderPortraitSprite']['y']+=_0xf26c78[_0x21bd60(0xa55)]());},Window_BattleStatus['prototype'][_0xf2f935(0x942)]=function(){const _0x3cdb2b=_0xf2f935;if(this[_0x3cdb2b(0x65a)]>0x0){const _0x1723c0=this[_0x3cdb2b(0x65a)],_0x2b483a=this[_0x3cdb2b(0xb06)];_0x2b483a['x']=(_0x2b483a['x']*(_0x1723c0-0x1)+this[_0x3cdb2b(0x48e)])/_0x1723c0,_0x2b483a[_0x3cdb2b(0x9c2)]=(_0x2b483a[_0x3cdb2b(0x9c2)]*(_0x1723c0-0x1)+0xff)/_0x1723c0,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0xf2f935(0x2dc)][_0xf2f935(0x9fe)]=function(){const _0x4c32d4=_0xf2f935;return;this[_0x4c32d4(0x778)]&&(this['_effectsContainer']['x']=this['x'],this[_0x4c32d4(0x778)]['y']=this['y']),this[_0x4c32d4(0x62c)]&&(this[_0x4c32d4(0x62c)]['x']=this['x'],this[_0x4c32d4(0x62c)]['y']=this['y']);},Window_BattleStatus['prototype'][_0xf2f935(0x4e3)]=function(){const _0x1bbfc4=_0xf2f935,_0x57ee87=VisuMZ['BattleCore'][_0x1bbfc4(0x650)][_0x1bbfc4(0x4a4)];if(_0x57ee87[_0x1bbfc4(0x6fd)]){const _0x34db7c=new Sprite();_0x34db7c[_0x1bbfc4(0x266)]=ImageManager[_0x1bbfc4(0x7ef)](_0x57ee87[_0x1bbfc4(0x6fd)]),_0x34db7c['x']=_0x57ee87[_0x1bbfc4(0x1f4)]||0x0,_0x34db7c['y']=_0x57ee87['StatusWindowAttachmentBackOffsetY']||0x0,this['addChildToBack'](_0x34db7c),this[_0x1bbfc4(0x67d)]=_0x34db7c;}if(_0x57ee87[_0x1bbfc4(0x6c7)]){const _0x36a8ad=new Sprite();_0x36a8ad[_0x1bbfc4(0x266)]=ImageManager[_0x1bbfc4(0x7ef)](_0x57ee87[_0x1bbfc4(0x6c7)]),_0x36a8ad['x']=_0x57ee87[_0x1bbfc4(0x781)]||0x0,_0x36a8ad['y']=_0x57ee87['StatusWindowAttachmentFrontOffsetY']||0x0,this['addChild'](_0x36a8ad),this[_0x1bbfc4(0x759)]=_0x36a8ad;}},Window_BattleStatus['prototype'][_0xf2f935(0x89a)]=function(){const _0x33db4c=_0xf2f935;if(this['_frontAttachmentSprite']){if(_0x33db4c(0x287)===_0x33db4c(0x287))this[_0x33db4c(0x8de)](this['_frontAttachmentSprite']);else{function _0x33cd06(){const _0x3c5705=_0x33db4c,_0xf2ee7d=_0x1b233f[_0x3db611];if(_0xf2ee7d){if(_0xf2ee7d['note'][_0x3c5705(0x78e)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x3584c2=_0x279b73(_0x1e6efe['$1'])[_0x3c5705(0x774)](/[\r\n]+/)['remove'](''),_0x2d532a=this[_0x3c5705(0x648)](_0x3584c2);_0x310bde=this[_0x3c5705(0x80a)](_0x2d532a)||_0x5b0d08,_0x5b7b11=_0x5b91fb[_0x3c5705(0x254)](_0x106a82);}}return _0x43a140;}}}},Window_BattleActor[_0xf2f935(0x2dc)]['isOkEnabled']=function(){const _0x406956=_0xf2f935;return Window_BattleStatus[_0x406956(0x2dc)][_0x406956(0x628)][_0x406956(0x86d)](this)&&this[_0x406956(0x887)]();},Window_BattleActor[_0xf2f935(0x2dc)][_0xf2f935(0x887)]=function(){const _0x1dbc37=_0xf2f935,_0x2d649a=BattleManager[_0x1dbc37(0x98f)](),_0x2fb2a8=this[_0x1dbc37(0x3fa)](this[_0x1dbc37(0x900)]());if(!_0x2d649a)return!![];if(!_0x2d649a[_0x1dbc37(0x5b0)]())return!![];const _0x3facb3=_0x2d649a['item']()[_0x1dbc37(0xbc2)];if(_0x3facb3[_0x1dbc37(0x78e)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x2fb2a8===BattleManager[_0x1dbc37(0x3fa)]())return![];}return!![];},VisuMZ['BattleCore']['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x30e)],Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(_0x5afce2){const _0x4d019a=_0xf2f935;this[_0x4d019a(0x5dd)]=null,VisuMZ[_0x4d019a(0x886)][_0x4d019a(0xba7)][_0x4d019a(0x86d)](this,_0x5afce2);},Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x9ef)]=function(){const _0x55efa8=_0xf2f935;return this[_0x55efa8(0x20f)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x444)]=Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x3cc)],Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x3cc)]=function(){const _0x4701eb=_0xf2f935;VisuMZ[_0x4701eb(0x886)][_0x4701eb(0x444)][_0x4701eb(0x86d)](this),this['y']=Graphics[_0x4701eb(0x902)]*0xa;},Window_BattleEnemy[_0xf2f935(0x2dc)]['validTargets']=function(){const _0x31c7fd=_0xf2f935;return $gameTroop[_0x31c7fd(0x4ae)]()[_0x31c7fd(0x37f)](0x0);},Window_BattleEnemy['prototype'][_0xf2f935(0x57c)]=function(){const _0xbea568=_0xf2f935;this[_0xbea568(0x953)]=this[_0xbea568(0x1dd)](),this['sortEnemies'](),Window_Selectable[_0xbea568(0x2dc)][_0xbea568(0x57c)]['call'](this);},Window_BattleEnemy['prototype']['sortEnemies']=function(){const _0x5c91f3=_0xf2f935;this[_0x5c91f3(0x953)][_0x5c91f3(0xbdd)]((_0x9a4aef,_0x2ae585)=>{const _0x51b391=_0x5c91f3;return _0x9a4aef[_0x51b391(0x310)]()[_0x51b391(0x58e)]===_0x2ae585[_0x51b391(0x310)]()[_0x51b391(0x58e)]?_0x9a4aef[_0x51b391(0x310)]()[_0x51b391(0x4de)]-_0x2ae585[_0x51b391(0x310)]()[_0x51b391(0x4de)]:_0x9a4aef[_0x51b391(0x310)]()[_0x51b391(0x58e)]-_0x2ae585[_0x51b391(0x310)]()['_baseX'];}),SceneManager[_0x5c91f3(0x842)]()&&this[_0x5c91f3(0x953)][_0x5c91f3(0xa43)]();},Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x274)]=function(){const _0x58f3c1=_0xf2f935,_0x65ce36=VisuMZ[_0x58f3c1(0x886)][_0x58f3c1(0x650)][_0x58f3c1(0x9e1)];if(_0x65ce36[_0x58f3c1(0x6c8)]){if(_0x58f3c1(0xa9f)!=='bJdFb'){function _0x401394(){const _0x5ce656=_0x58f3c1;if(this[_0x5ce656(0x897)]()){if(this[_0x5ce656(0x988)]()>=0x1)return!![];return this[_0x5ce656(0x979)]()['collapse'];}else return!![];}}else this[_0x58f3c1(0x7b4)]();}else this[_0x58f3c1(0x33b)]();},Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x7b4)]=function(){const _0x4f9eb2=_0xf2f935;if(this['_lastEnemy']&&this['_enemies'][_0x4f9eb2(0x7fe)](this['_lastEnemy'])){const _0x1b40f0=this[_0x4f9eb2(0x953)][_0x4f9eb2(0x665)](this[_0x4f9eb2(0x5dd)]);this[_0x4f9eb2(0xa96)](_0x1b40f0);}else this[_0x4f9eb2(0x33b)]();},Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x33b)]=function(){const _0x5123a5=_0xf2f935,_0x36b4dc=VisuMZ['BattleCore'][_0x5123a5(0x650)][_0x5123a5(0x9e1)];let _0x423ede=![];if($gameSystem[_0x5123a5(0x649)]())_0x423ede=_0x36b4dc[_0x5123a5(0x8ee)];else{if(_0x5123a5(0x288)!==_0x5123a5(0x95c))_0x423ede=_0x36b4dc['FrontViewSelect'];else{function _0x4c1e70(){const _0x47677b=_0x5123a5;_0x5546a1=_0x2ad062[_0x47677b(0x22b)];}}}this[_0x5123a5(0xa96)](_0x423ede?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0xf2f935(0x2dc)][_0xf2f935(0x90f)]=function(){const _0x19160c=_0xf2f935;Window_Selectable[_0x19160c(0x2dc)]['callOkHandler'][_0x19160c(0x86d)](this),this[_0x19160c(0x5dd)]=this[_0x19160c(0x767)]();},Window_BattleItem[_0xf2f935(0x2dc)][_0xf2f935(0x7fe)]=function(_0x254484){const _0x5559b6=_0xf2f935;if(!_0x254484)return![];return _0x254484[_0x5559b6(0x566)]===0x0||_0x254484['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x223118=_0xf2f935;this[_0x223118(0x30e)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0xf2f935(0x47f)](Window_Base['prototype']),Window_AutoBattleCancel['prototype']['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0xf2f935(0x2dc)]['initialize']=function(_0x3eaea0){const _0x42538e=_0xf2f935;Window_Base[_0x42538e(0x2dc)]['initialize']['call'](this,_0x3eaea0),this[_0x42538e(0x884)](this[_0x42538e(0x312)]()),this[_0x42538e(0x57c)]();},Window_AutoBattleCancel[_0xf2f935(0x2dc)][_0xf2f935(0x312)]=function(){const _0x2bc438=_0xf2f935;return VisuMZ[_0x2bc438(0x886)][_0x2bc438(0x650)]['AutoBattle'][_0x2bc438(0xb49)];},Window_AutoBattleCancel[_0xf2f935(0x2dc)]['refresh']=function(){const _0x1b6843=_0xf2f935;this[_0x1b6843(0xa62)][_0x1b6843(0xb40)]();const _0x3bf621=VisuMZ[_0x1b6843(0x886)][_0x1b6843(0x650)][_0x1b6843(0x814)][_0x1b6843(0xb41)],_0x113928=_0x3bf621[_0x1b6843(0x460)](this['okButtonText'](),this[_0x1b6843(0x5ba)]()),_0x1a3c53=this['textSizeEx'](_0x113928)[_0x1b6843(0x41b)],_0x3eb307=Math['floor']((this['innerWidth']-_0x1a3c53)/0x2);this['drawTextEx'](_0x113928,_0x3eb307,0x0,_0x1a3c53);},Window_AutoBattleCancel[_0xf2f935(0x2dc)][_0xf2f935(0x7d0)]=function(){const _0x2c4146=_0xf2f935;return Imported[_0x2c4146(0x758)]?TextManager[_0x2c4146(0x594)]('ok'):VisuMZ[_0x2c4146(0x886)][_0x2c4146(0x650)][_0x2c4146(0x814)][_0x2c4146(0x660)];},Window_AutoBattleCancel['prototype'][_0xf2f935(0x5ba)]=function(){const _0x3346e8=_0xf2f935;if(Imported[_0x3346e8(0x758)]){if('XMNqH'!=='rMBsg')return TextManager[_0x3346e8(0x594)](_0x3346e8(0x338));else{function _0x6028(){const _0x5213e0=_0x3346e8,_0x310068=_0x4abba9[_0x5213e0(0x886)]['Settings']['ActionSequence'],_0x1afbd0=_0x310068['StepDistanceX'],_0x270cd8=_0x310068[_0x5213e0(0x595)],_0x592826=_0x310068[_0x5213e0(0x42d)];this[_0x5213e0(0x4fa)](-_0x1afbd0,-_0x270cd8,_0x592826);}}}else return VisuMZ[_0x3346e8(0x886)][_0x3346e8(0x650)]['AutoBattle']['AutoBattleCancel'];},Window_AutoBattleCancel[_0xf2f935(0x2dc)][_0xf2f935(0xb36)]=function(){const _0x1f1339=_0xf2f935;Window_Base[_0x1f1339(0x2dc)]['update']['call'](this),this[_0x1f1339(0x6aa)](),this[_0x1f1339(0x81c)]();},Window_AutoBattleCancel[_0xf2f935(0x2dc)]['updateVisibility']=function(){const _0x93164c=_0xf2f935;this[_0x93164c(0x56c)]=BattleManager[_0x93164c(0xac9)];},Window_AutoBattleCancel[_0xf2f935(0x2dc)][_0xf2f935(0x81c)]=function(){const _0x3f32ad=_0xf2f935;if(!BattleManager[_0x3f32ad(0xac9)])return;(Input[_0x3f32ad(0xb7d)]('ok')||Input[_0x3f32ad(0xb7d)](_0x3f32ad(0x338))||TouchInput[_0x3f32ad(0x625)]()||TouchInput['isCancelled']())&&(SoundManager['playCancel'](),BattleManager[_0x3f32ad(0xac9)]=![],Input[_0x3f32ad(0xb40)](),TouchInput[_0x3f32ad(0xb40)]());};function _0x33da(_0x44c3b1,_0x5e83fa){_0x44c3b1=_0x44c3b1-0x1d5;let _0x22457a=_0x2245[_0x44c3b1];return _0x22457a;}function Window_EnemyName(){const _0x2971f1=_0xf2f935;this[_0x2971f1(0x30e)](...arguments);}Window_EnemyName[_0xf2f935(0x2dc)]=Object[_0xf2f935(0x47f)](Window_StatusBase[_0xf2f935(0x2dc)]),Window_EnemyName[_0xf2f935(0x2dc)]['constructor']=Window_EnemyName,Window_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x30e)]=function(_0x318184){const _0x4973e5=_0xf2f935;this[_0x4973e5(0x3ff)]=_0x318184,this[_0x4973e5(0x69f)]='';const _0x1b1632=new Rectangle(0x0,0x0,Graphics[_0x4973e5(0x760)],this[_0x4973e5(0xbd6)]()*0x4);Window_StatusBase[_0x4973e5(0x2dc)][_0x4973e5(0x30e)][_0x4973e5(0x86d)](this,_0x1b1632),this['setBackgroundType'](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x948)]=function(){const _0x3aa516=_0xf2f935;this[_0x3aa516(0xa7a)]=0x0;},Window_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x767)]=function(){const _0x35f85b=_0xf2f935;return $gameTroop[_0x35f85b(0x7d5)]()[this[_0x35f85b(0x3ff)]];},Window_EnemyName[_0xf2f935(0x2dc)]['update']=function(){const _0x2ada71=_0xf2f935;Window_StatusBase[_0x2ada71(0x2dc)][_0x2ada71(0xb36)]['call'](this);if(this['enemy']()&&this[_0x2ada71(0x767)]()['name']()!==this[_0x2ada71(0x69f)]){if(_0x2ada71(0x23c)!==_0x2ada71(0x9c6))this[_0x2ada71(0x69f)]=this[_0x2ada71(0x767)]()[_0x2ada71(0x222)](),this['refresh']();else{function _0x2bef5e(){const _0x245d96=_0x2ada71;_0xe419d6[_0x245d96(0x2dc)][_0x245d96(0x8e4)]['call'](this),this[_0x245d96(0x762)]();}}}this[_0x2ada71(0xbcc)](),this[_0x2ada71(0x885)]();},Window_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0xbcc)]=function(){const _0x2e6e0d=_0xf2f935;if(!this[_0x2e6e0d(0x767)]()){if(_0x2e6e0d(0x1e5)==='jNdgh'){if(this[_0x2e6e0d(0x51b)]>0x0)this[_0x2e6e0d(0x51b)]-=0x10;}else{function _0x32c9c1(){const _0x21904d=_0x2e6e0d,_0xed5ce6=_0x40f486[_0x21904d(0x886)][_0x21904d(0x650)]['BattleLog'];_0xed5ce6[_0x21904d(0x6e8)]&&this[_0x21904d(0x580)](_0x21904d(0x209),_0x21904d(0x32e)[_0x21904d(0x460)](_0x1a20b8[_0x21904d(0x71e)](_0x81a55b)));if(_0xddbd2[_0x21904d(0x392)](_0x298cb7)){if(_0xed5ce6[_0x21904d(0x401)])this[_0x21904d(0x761)](_0x34b039[_0x21904d(0x523)],_0x57b967,_0x4aca23);if(_0xed5ce6[_0x21904d(0x48f)])this['displayItemMessage'](_0x1963ef[_0x21904d(0x3b4)],_0x273308,_0x31ab3c);}else{if(_0xed5ce6[_0x21904d(0x88f)])this['displayItemMessage'](_0x56f6e2[_0x21904d(0xa40)],_0x2c373d,_0x49c37d);}}}}else{if(this[_0x2e6e0d(0x767)]()[_0x2e6e0d(0xb18)]()){if(this['contentsOpacity']>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x2e6e0d(0xb95)]['_enemyWindow']&&SceneManager[_0x2e6e0d(0xb95)][_0x2e6e0d(0x54f)]['active']&&SceneManager[_0x2e6e0d(0xb95)][_0x2e6e0d(0x54f)][_0x2e6e0d(0x953)][_0x2e6e0d(0x7fe)](this[_0x2e6e0d(0x767)]())){if(_0x2e6e0d(0xb32)===_0x2e6e0d(0x86b)){function _0xfe4c42(){const _0x139942=_0x2e6e0d,_0x149bd8=_0x240031['item']();this[_0x139942(0x580)](_0x139942(0x1df),_0x4395a0,_0x3eb4bd,![]),this[_0x139942(0x580)]('waitForNewLine'),this[_0x139942(0x580)](_0x139942(0xb0a)),this[_0x139942(0x580)](_0x139942(0xb40)),this['push']('performActionEnd',_0x40a985),this[_0x139942(0x580)](_0x139942(0x60c));}}else{if(this[_0x2e6e0d(0x51b)]<0xff)this['contentsOpacity']+=0x10;}}else this[_0x2e6e0d(0x51b)]>0x0&&(this[_0x2e6e0d(0x51b)]-=0x10);}}},Window_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x885)]=function(){const _0x218b89=_0xf2f935;if(!this[_0x218b89(0x767)]())return;if(SceneManager[_0x218b89(0x842)]()){if(_0x218b89(0x4f3)!=='fyfYe'){function _0x4ea974(){const _0x3468b8=_0x218b89;this['_damageContainer']=new _0x17253e(),this[_0x3468b8(0x8de)](this[_0x3468b8(0x62c)]);}}else this['x']=Graphics['boxWidth']-this[_0x218b89(0x767)]()['battler']()[_0x218b89(0x58e)];}else this['x']=this['enemy']()[_0x218b89(0x310)]()[_0x218b89(0x58e)];this['x']-=Math[_0x218b89(0x78a)](this[_0x218b89(0x41b)]/0x2),this['y']=this[_0x218b89(0x767)]()[_0x218b89(0x310)]()[_0x218b89(0x4de)]-Math['round'](this[_0x218b89(0xbd6)]()*1.5);const _0x254e23=VisuMZ['BattleCore']['Settings']['Enemy'];this['x']+=_0x254e23[_0x218b89(0x4ed)]||0x0,this['y']+=_0x254e23[_0x218b89(0x59b)]||0x0;},Window_EnemyName['prototype'][_0xf2f935(0x2f2)]=function(){const _0x4e657d=_0xf2f935;Window_Base[_0x4e657d(0x2dc)][_0x4e657d(0x2f2)]['call'](this),this['contents'][_0x4e657d(0x95b)]=VisuMZ[_0x4e657d(0x886)][_0x4e657d(0x650)][_0x4e657d(0x9e1)][_0x4e657d(0x1d5)];},Window_EnemyName[_0xf2f935(0x2dc)][_0xf2f935(0x57c)]=function(){const _0x86cc9d=_0xf2f935;Window_StatusBase[_0x86cc9d(0x2dc)]['refresh'][_0x86cc9d(0x86d)](this),this[_0x86cc9d(0xa62)][_0x86cc9d(0xb40)]();if(!this[_0x86cc9d(0x767)]())return;this['drawEnemyName']();},Window_EnemyName[_0xf2f935(0x2dc)]['drawEnemyName']=function(){const _0x33b95a=_0xf2f935;this[_0x33b95a(0x69f)]=this[_0x33b95a(0x767)]()[_0x33b95a(0x222)]();const _0x1ad1ee=this[_0x33b95a(0xa0b)](this[_0x33b95a(0x69f)])['width'],_0x5e7be4=Math[_0x33b95a(0x78a)]((this[_0x33b95a(0x9d0)]-_0x1ad1ee)/0x2);this['drawTextEx'](this[_0x33b95a(0x69f)],_0x5e7be4,0x0,_0x1ad1ee+0x8);},Window_BattleLog['prototype'][_0xf2f935(0x70c)]=function(){const _0x5adbc3=_0xf2f935;return VisuMZ[_0x5adbc3(0x886)]['Settings'][_0x5adbc3(0x903)]['MaxLines'];},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x3c1)]=function(){const _0x1e765b=_0xf2f935;return VisuMZ[_0x1e765b(0x886)][_0x1e765b(0x650)]['BattleLog'][_0x1e765b(0x290)];},Window_BattleLog[_0xf2f935(0x2dc)]['backColor']=function(){const _0x53d88f=_0xf2f935;return VisuMZ[_0x53d88f(0x886)][_0x53d88f(0x650)][_0x53d88f(0x903)][_0x53d88f(0x98a)];},Window_BattleLog['prototype'][_0xf2f935(0x709)]=function(){return![];},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x218)]=function(_0x4aad5f,_0x4809ec){const _0x3740db=_0xf2f935;this[_0x3740db(0x65e)]('actionSplicePoint'),BattleManager[_0x3740db(0xb51)](_0x4aad5f,_0x4809ec),this[_0x3740db(0x2b0)]();},Window_BattleLog['prototype'][_0xf2f935(0xb75)]=function(){const _0x262728=_0xf2f935;this[_0x262728(0x2b0)]();},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x580)]=function(_0x48ba62){const _0x479e4e=_0xf2f935,_0x41a961=Array[_0x479e4e(0x2dc)][_0x479e4e(0x37f)][_0x479e4e(0x86d)](arguments,0x1),_0x422cfd={'name':_0x48ba62,'params':_0x41a961},_0x2c7cb1=this[_0x479e4e(0x474)][_0x479e4e(0x2ab)](_0x5930bc=>_0x5930bc[_0x479e4e(0x222)])[_0x479e4e(0x665)]('actionSplicePoint');if(_0x2c7cb1>=0x0){if(_0x479e4e(0x3c5)===_0x479e4e(0x8e0)){function _0x4a36a0(){const _0x2cd309=_0x479e4e;_0x5c5b65[_0x2cd309(0x886)][_0x2cd309(0x959)][_0x2cd309(0x86d)](this),this['initBattleCore']();}}else this[_0x479e4e(0x474)]['splice'](_0x2c7cb1,0x0,_0x422cfd);}else{if('Brirz'===_0x479e4e(0x23a)){function _0x26dfda(){const _0x5708cb=_0x479e4e;let _0x2e4c3d=0x1;return _0x2e4c3d*=this['_flipScaleX'],_0x2e4c3d*=this[_0x5708cb(0x980)],_0x2e4c3d;}}else this[_0x479e4e(0x474)][_0x479e4e(0x580)](_0x422cfd);}},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x65e)]=function(_0x37153f){const _0x3c9c29=_0xf2f935,_0x41796c=Array[_0x3c9c29(0x2dc)]['slice'][_0x3c9c29(0x86d)](arguments,0x1);this['_methods'][_0x3c9c29(0x65e)]({'name':_0x37153f,'params':_0x41796c});},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x206)]=function(){const _0x15093d=_0xf2f935;if(!$gameTemp[_0x15093d(0x3ee)]())return;console[_0x15093d(0xa92)](this[_0x15093d(0x474)][_0x15093d(0x2ab)](_0x53628f=>_0x53628f[_0x15093d(0x222)])['join']('\x0a'));},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x8b7)]=Window_BattleLog['prototype'][_0xf2f935(0x57c)],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x57c)]=function(){const _0x105762=_0xf2f935;this[_0x105762(0xb4a)]=!![];},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x539)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb36)],Window_BattleLog['prototype'][_0xf2f935(0xb36)]=function(){const _0x3e5777=_0xf2f935;VisuMZ[_0x3e5777(0x886)][_0x3e5777(0x539)][_0x3e5777(0x86d)](this);if(this['_requestRefresh'])this[_0x3e5777(0x9c3)]();},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x9c3)]=function(){const _0x59d5c9=_0xf2f935;this['_requestRefresh']=![],VisuMZ['BattleCore'][_0x59d5c9(0x8b7)]['call'](this);},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x71c)]=function(_0xd5db3c){const _0x4cc5cc=_0xf2f935;let _0x4431b4=VisuMZ[_0x4cc5cc(0x886)]['Settings']['BattleLog'][_0x4cc5cc(0x668)][_0x4cc5cc(0x9cb)]()[_0x4cc5cc(0x669)](),_0x4251a7=this[_0x4cc5cc(0x863)][_0xd5db3c];if(_0x4251a7[_0x4cc5cc(0x78e)](/<LEFT>/i))_0x4431b4=_0x4cc5cc(0x77f);else{if(_0x4251a7[_0x4cc5cc(0x78e)](/<CENTER>/i))_0x4431b4=_0x4cc5cc(0x535);else _0x4251a7[_0x4cc5cc(0x78e)](/<RIGHT>/i)&&(_0x4431b4='right');}_0x4251a7=_0x4251a7[_0x4cc5cc(0x87e)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x4251a7=_0x4251a7[_0x4cc5cc(0x87e)](/\\I\[0\]/gi,'');const _0x5424c9=this['lineRect'](_0xd5db3c);this[_0x4cc5cc(0xa62)][_0x4cc5cc(0x5e0)](_0x5424c9['x'],_0x5424c9['y'],_0x5424c9[_0x4cc5cc(0x41b)],_0x5424c9[_0x4cc5cc(0x902)]);const _0x6f0f54=this[_0x4cc5cc(0xa0b)](_0x4251a7)[_0x4cc5cc(0x41b)];let _0x5a5f19=_0x5424c9['x'];if(_0x4431b4===_0x4cc5cc(0x535))_0x5a5f19+=(_0x5424c9[_0x4cc5cc(0x41b)]-_0x6f0f54)/0x2;else{if(_0x4431b4===_0x4cc5cc(0x30a)){if('SFRgI'===_0x4cc5cc(0x518))_0x5a5f19+=_0x5424c9[_0x4cc5cc(0x41b)]-_0x6f0f54;else{function _0x3e27c8(){const _0x4a13a7=_0x4cc5cc;_0x1b6657[_0x4a13a7(0x886)][_0x4a13a7(0x5f5)]['call'](this,_0x735dc2);}}}}this['drawTextEx'](_0x4251a7,_0x5a5f19,_0x5424c9['y'],_0x6f0f54+0x8);},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x209)]=function(_0x3c5cd7){const _0x180641=_0xf2f935;this[_0x180641(0x863)][_0x180641(0x580)](_0x3c5cd7),this['refresh'](),this[_0x180641(0x2b0)]();},Window_BattleLog[_0xf2f935(0x2dc)]['updateWaitMode']=function(){const _0x673dd8=_0xf2f935;let _0x2ff2a9=![];switch(this[_0x673dd8(0x48a)]){case _0x673dd8(0x5d4):_0x2ff2a9=this[_0x673dd8(0x2c7)][_0x673dd8(0x29e)]();break;case'movement':_0x2ff2a9=this['_spriteset'][_0x673dd8(0x921)]();break;case _0x673dd8(0x7af):_0x2ff2a9=this[_0x673dd8(0x2c7)][_0x673dd8(0x7fc)]();break;case _0x673dd8(0xa79):_0x2ff2a9=this[_0x673dd8(0x2c7)][_0x673dd8(0x25e)]();break;case _0x673dd8(0x45c):_0x2ff2a9=this[_0x673dd8(0x2c7)][_0x673dd8(0x2f6)]();break;case'opacity':_0x2ff2a9=this[_0x673dd8(0x2c7)][_0x673dd8(0x299)]();break;}if(!_0x2ff2a9){if(_0x673dd8(0x5fe)!==_0x673dd8(0x25c))this[_0x673dd8(0x48a)]='';else{function _0x44c826(){const _0x1f5e77=_0x673dd8;_0x32654b[_0x1f5e77(0x8c4)](0x0);}}}return _0x2ff2a9;},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb0d)]=function(){const _0x2c81e8=_0xf2f935;this['setWaitMode'](_0x2c81e8(0x7af));},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x410)]=function(){const _0x98521c=_0xf2f935;this[_0x98521c(0x8a6)](_0x98521c(0xa79));},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x92f)]=function(){const _0x173d91=_0xf2f935;this[_0x173d91(0x8a6)](_0x173d91(0x45c));},Window_BattleLog['prototype'][_0xf2f935(0x1ee)]=function(){const _0x32c5bc=_0xf2f935;this[_0x32c5bc(0x8a6)](_0x32c5bc(0x9c2));},Window_BattleLog['prototype']['startTurn']=function(){const _0x40cf22=_0xf2f935,_0x5b1593=VisuMZ[_0x40cf22(0x886)][_0x40cf22(0x650)][_0x40cf22(0x903)];if(!_0x5b1593['StartTurnShow'])return;this[_0x40cf22(0x580)](_0x40cf22(0x209),_0x5b1593['StartTurnMsg']['format']($gameTroop[_0x40cf22(0xb29)]())),this['push']('waitCount',_0x5b1593[_0x40cf22(0x514)]),this[_0x40cf22(0x580)](_0x40cf22(0xb40));},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x3f4)]=function(_0x193442,_0x1d9614,_0x475abb){const _0x38d842=_0xf2f935;if(this[_0x38d842(0x56b)](_0x1d9614)){if(_0x38d842(0xa83)!==_0x38d842(0xa83)){function _0x3ede26(){const _0x25305f=_0x38d842;_0x43e659['damage'][_0x25305f(0x569)]=!![];}}else BattleManager[_0x38d842(0x272)]();}else{if('EbDGe'!==_0x38d842(0x97d))this[_0x38d842(0x76d)](_0x193442,_0x1d9614,_0x475abb);else{function _0x412832(){const _0x2f9cca=_0x38d842;this[_0x2f9cca(0x526)](_0x2266c6,_0x234f47,_0x1371d8);}}}},Window_BattleLog['prototype'][_0xf2f935(0x56b)]=function(_0x153336){const _0x3c2776=_0xf2f935;if(!SceneManager[_0x3c2776(0x731)]())return![];if(!_0x153336)return![];if(!_0x153336[_0x3c2776(0x5b0)]())return![];if(_0x153336[_0x3c2776(0x5b0)]()['note'][_0x3c2776(0x78e)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x3c2776(0xae9)==='jkVrB'){function _0x13541f(){return!![];}}else return!![];}if(DataManager[_0x3c2776(0xbd0)](_0x153336[_0x3c2776(0x5b0)]()))return!![];return![];},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x76d)]=function(_0x10c003,_0x1e11af,_0x4ea387){const _0x913e8c=_0xf2f935,_0x34cd92=_0x1e11af[_0x913e8c(0x5b0)]();this[_0x913e8c(0x71a)](_0x10c003,_0x1e11af,_0x4ea387),this[_0x913e8c(0xb53)](_0x10c003,_0x1e11af,_0x4ea387),this[_0x913e8c(0x4c1)](_0x10c003,_0x1e11af,_0x4ea387);},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x1e9)]=function(_0x46291,_0x3afa7f){const _0x34d4e4=_0xf2f935,_0x1c9065=VisuMZ[_0x34d4e4(0x886)][_0x34d4e4(0x650)][_0x34d4e4(0x903)];if(_0x1c9065[_0x34d4e4(0x6e8)]){if(_0x34d4e4(0x3f1)!==_0x34d4e4(0x544))this[_0x34d4e4(0x580)](_0x34d4e4(0x209),_0x34d4e4(0x32e)[_0x34d4e4(0x460)](DataManager['battleDisplayText'](_0x3afa7f)));else{function _0x441ba6(){const _0x4fc504=_0x34d4e4;if(!_0x4dc441[_0x4fc504(0x731)]())return;const _0x1d2ff0=_0x1e64ff[_0x4fc504(0x3a3)];_0x1d2ff0['popBaseLine']();}}}if(DataManager['isSkill'](_0x3afa7f)){if(_0x1c9065[_0x34d4e4(0x401)])this[_0x34d4e4(0x761)](_0x3afa7f['message1'],_0x46291,_0x3afa7f);if(_0x1c9065[_0x34d4e4(0x48f)])this[_0x34d4e4(0x761)](_0x3afa7f[_0x34d4e4(0x3b4)],_0x46291,_0x3afa7f);}else{if(_0x1c9065[_0x34d4e4(0x88f)])this[_0x34d4e4(0x761)](TextManager[_0x34d4e4(0xa40)],_0x46291,_0x3afa7f);}},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x71a)]=function(_0x37765f,_0x4bad80,_0x21d9ac){const _0x2555db=_0xf2f935,_0x190dee=_0x4bad80[_0x2555db(0x5b0)]();this[_0x2555db(0x1e9)](_0x37765f,_0x190dee),this[_0x2555db(0x580)](_0x2555db(0x1df),_0x37765f,_0x21d9ac,!![]),this[_0x2555db(0x580)](_0x2555db(0xa8c),_0x37765f,_0x4bad80),this[_0x2555db(0x580)](_0x2555db(0x60c)),this[_0x2555db(0x580)](_0x2555db(0x6e0),_0x37765f,_0x4bad80),this['push'](_0x2555db(0xb0d));},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb53)]=function(_0x17bb1b,_0x5bee2c,_0x2670d7){const _0x4ac01a=_0xf2f935;if(this[_0x4ac01a(0x3b3)](_0x5bee2c))this[_0x4ac01a(0x9f3)](_0x17bb1b,_0x5bee2c,_0x2670d7);else{if(this[_0x4ac01a(0x92c)](_0x5bee2c))this[_0x4ac01a(0x99f)](_0x17bb1b,_0x5bee2c,_0x2670d7);else _0x5bee2c['isForRandom']()?this[_0x4ac01a(0x526)](_0x17bb1b,_0x5bee2c,_0x2670d7):this[_0x4ac01a(0x36b)](_0x17bb1b,_0x5bee2c,_0x2670d7);}},Window_BattleLog[_0xf2f935(0x2dc)]['isMeleeSingleTargetAction']=function(_0x2520ae){const _0x2a83f6=_0xf2f935;if(!_0x2520ae[_0x2a83f6(0x3eb)]())return![];if(!_0x2520ae['isForOne']())return![];if(!_0x2520ae[_0x2a83f6(0x6a0)]())return![];return VisuMZ[_0x2a83f6(0x886)]['Settings'][_0x2a83f6(0xb3e)][_0x2a83f6(0xaec)];},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x9f3)]=function(_0x267403,_0x431c75,_0x13565c){const _0x47ecfb=_0xf2f935,_0x253932=_0x267403[_0x47ecfb(0x9e9)]()['type']<0x2,_0x1a39a7=0x14,_0x2e76fd=0x30;_0x253932&&(this['push']('performJump',[_0x267403],_0x2e76fd,_0x1a39a7),this['push'](_0x47ecfb(0x954),_0x267403,_0x13565c,_0x47ecfb(0xa1c),_0x1a39a7,!![],_0x47ecfb(0xb54),!![]),this[_0x47ecfb(0x580)]('requestMotion',[_0x267403],_0x47ecfb(0x8f9)),this[_0x47ecfb(0x580)](_0x47ecfb(0x60c)));let _0x3cdb84=_0x431c75['isAttack']()?this['getDualWieldTimes'](_0x267403):0x1;for(let _0x2d5535=0x0;_0x2d5535<_0x3cdb84;_0x2d5535++){_0x431c75['isAttack']()&&_0x267403[_0x47ecfb(0x8bc)]()&&this[_0x47ecfb(0x580)](_0x47ecfb(0x73f),_0x267403,_0x2d5535);if(_0x431c75[_0x47ecfb(0x5b0)]()[_0x47ecfb(0x582)]<0x0){if(_0x47ecfb(0x232)===_0x47ecfb(0x42c)){function _0x5f4050(){this['_customDamageFormula']=_0x4590e6;}}else this[_0x47ecfb(0x526)](_0x267403,_0x431c75,_0x13565c);}else{if(_0x47ecfb(0x676)===_0x47ecfb(0x37d)){function _0x1ff2d7(){const _0x185082=_0x47ecfb;_0x37419a['BattleCore'][_0x185082(0x69b)]['call'](this,_0x2f0ab9),this[_0x185082(0x2b0)]();}}else this['wholeActionSet'](_0x267403,_0x431c75,_0x13565c);}}_0x431c75[_0x47ecfb(0x933)]()&&_0x267403['isActor']()&&this['push']('clearActiveWeaponSet',_0x267403);this['push'](_0x47ecfb(0x1df),_0x267403,_0x13565c,![]);if(_0x253932){const _0x1ccb1e=_0x267403[_0x47ecfb(0x310)]();this['push'](_0x47ecfb(0x95e),[_0x267403],_0x2e76fd,_0x1a39a7),this[_0x47ecfb(0x580)]('performMoveToPoint',_0x267403,_0x1ccb1e[_0x47ecfb(0xa09)],_0x1ccb1e['_homeY'],_0x1a39a7,![],_0x47ecfb(0xb54)),this['push'](_0x47ecfb(0x700),[_0x267403],_0x47ecfb(0x7ac)),this[_0x47ecfb(0x580)](_0x47ecfb(0x60c)),this[_0x47ecfb(0x580)](_0x47ecfb(0x700),[_0x267403],'walk');}},Window_BattleLog['prototype'][_0xf2f935(0x92c)]=function(_0x43b2c0){const _0x4153c8=_0xf2f935;if(!_0x43b2c0[_0x4153c8(0x3eb)]())return![];if(!_0x43b2c0[_0x4153c8(0x9ec)]())return![];if(!_0x43b2c0['isForOpponent']())return![];return VisuMZ[_0x4153c8(0x886)][_0x4153c8(0x650)]['ActionSequence'][_0x4153c8(0x2c8)];},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x99f)]=function(_0xaac58d,_0x760ae,_0x33eff4){const _0x75ec9e=_0xf2f935,_0x9267e1=_0xaac58d['getAttackMotion']()[_0x75ec9e(0x74f)]<0x2,_0x3184ff=0x14,_0x2d7b66=0x30;_0x9267e1&&(this[_0x75ec9e(0x580)](_0x75ec9e(0x95e),[_0xaac58d],_0x2d7b66,_0x3184ff),this[_0x75ec9e(0x580)](_0x75ec9e(0x954),_0xaac58d,_0x33eff4,_0x75ec9e(0x60e),_0x3184ff,!![],_0x75ec9e(0xb54),!![]),this['push'](_0x75ec9e(0x700),[_0xaac58d],'walk'),this[_0x75ec9e(0x580)]('waitForMovement'));let _0x5b4467=_0x760ae[_0x75ec9e(0x933)]()?this[_0x75ec9e(0x74a)](_0xaac58d):0x1;for(let _0x190ce4=0x0;_0x190ce4<_0x5b4467;_0x190ce4++){_0x760ae[_0x75ec9e(0x933)]()&&_0xaac58d['isActor']()&&this[_0x75ec9e(0x580)](_0x75ec9e(0x73f),_0xaac58d,_0x190ce4),this[_0x75ec9e(0x36b)](_0xaac58d,_0x760ae,_0x33eff4);}if(_0x760ae[_0x75ec9e(0x933)]()&&_0xaac58d[_0x75ec9e(0x8bc)]()){if(_0x75ec9e(0x711)==='pUtRk')this[_0x75ec9e(0x580)](_0x75ec9e(0x63c),_0xaac58d);else{function _0x4a0c86(){const _0x2dff29=_0x75ec9e;_0x5c1e8f[_0x2dff29(0x310)]()[_0x2dff29(0xaa3)]();}}}this[_0x75ec9e(0x580)]('applyImmortal',_0xaac58d,_0x33eff4,![]);if(_0x9267e1){if('OecbZ'==='ryjpH'){function _0xf72255(){_0x4da98f['_commonEventQueue']=[];}}else{const _0x5cfa80=_0xaac58d[_0x75ec9e(0x310)]();this[_0x75ec9e(0x580)](_0x75ec9e(0x95e),[_0xaac58d],_0x2d7b66,_0x3184ff),this[_0x75ec9e(0x580)](_0x75ec9e(0x2a7),_0xaac58d,_0x5cfa80[_0x75ec9e(0xa09)],_0x5cfa80['_homeY'],_0x3184ff,![],_0x75ec9e(0xb54)),this['push'](_0x75ec9e(0x700),[_0xaac58d],_0x75ec9e(0x7ac)),this[_0x75ec9e(0x580)](_0x75ec9e(0x60c)),this[_0x75ec9e(0x580)](_0x75ec9e(0x700),[_0xaac58d],_0x75ec9e(0x8f9));}}},Window_BattleLog['prototype'][_0xf2f935(0x526)]=function(_0x754e00,_0x829e32,_0x3d7ecc){const _0x4b94c8=_0xf2f935,_0x10c04f=_0x829e32[_0x4b94c8(0x5b0)]();for(const _0x27f60c of _0x3d7ecc){if(!_0x27f60c)continue;this[_0x4b94c8(0x580)](_0x4b94c8(0x82a),_0x754e00,_0x829e32),this[_0x4b94c8(0x580)]('waitCount',Sprite_Battler[_0x4b94c8(0xb4d)]),this[_0x4b94c8(0x580)](_0x4b94c8(0x504),_0x754e00,[_0x27f60c],_0x10c04f[_0x4b94c8(0x582)]),this['push'](_0x4b94c8(0x683),0x18),this['push']('actionEffect',_0x754e00,_0x27f60c);}},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x36b)]=function(_0x110379,_0x2330c5,_0x3e2ad0){const _0x4b5e2c=_0xf2f935,_0x3cf3d7=_0x2330c5[_0x4b5e2c(0x5b0)]();this[_0x4b5e2c(0x580)]('performAction',_0x110379,_0x2330c5),this[_0x4b5e2c(0x580)]('waitCount',Sprite_Battler[_0x4b5e2c(0xb4d)]),this[_0x4b5e2c(0x580)](_0x4b5e2c(0x504),_0x110379,_0x3e2ad0['clone'](),_0x3cf3d7['animationId']),this['push'](_0x4b5e2c(0xb0d));for(const _0x458737 of _0x3e2ad0){if(!_0x458737)continue;this[_0x4b5e2c(0x580)](_0x4b5e2c(0x218),_0x110379,_0x458737);}},Window_BattleLog['prototype']['finishActionSet']=function(_0x29a302,_0x4ffde6,_0x43ade8){const _0x7789de=_0xf2f935,_0x3131ce=_0x4ffde6[_0x7789de(0x5b0)]();this[_0x7789de(0x580)](_0x7789de(0x1df),_0x29a302,_0x43ade8,![]),this[_0x7789de(0x580)](_0x7789de(0x584)),this[_0x7789de(0x580)](_0x7789de(0xb0a)),this[_0x7789de(0x580)](_0x7789de(0xb40)),this[_0x7789de(0x580)]('performActionEnd',_0x29a302),this[_0x7789de(0x580)]('waitForMovement');},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x735)]=function(_0x1a1cbd){},VisuMZ['BattleCore'][_0xf2f935(0x627)]=Window_BattleLog[_0xf2f935(0x2dc)]['displayCurrentState'],Window_BattleLog['prototype'][_0xf2f935(0xb74)]=function(_0x3bf255){const _0x26e97c=_0xf2f935;if(!VisuMZ['BattleCore'][_0x26e97c(0x650)]['BattleLog'][_0x26e97c(0x4a6)])return;VisuMZ[_0x26e97c(0x886)][_0x26e97c(0x627)][_0x26e97c(0x86d)](this,_0x3bf255);},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x981)]=function(_0x6ba6a3){const _0x4d50d8=_0xf2f935;this[_0x4d50d8(0x580)](_0x4d50d8(0x3e0),_0x6ba6a3);if(VisuMZ['BattleCore']['Settings'][_0x4d50d8(0xb3e)]['CounterPlayback']){if(_0x4d50d8(0x8c7)!==_0x4d50d8(0x8c7)){function _0x3c1193(){const _0x123e5a=_0x4d50d8;return _0x44312c[_0x123e5a(0x731)]()?(_0x24b963[_0x123e5a(0xb95)][_0x123e5a(0x2c7)][_0x123e5a(0x59e)](_0x469d55[0x0],_0x36de1[0x1]),!![]):_0x32d9e7[_0x123e5a(0x886)][_0x123e5a(0x394)][_0x123e5a(0x86d)](this,_0x1c0a0f);}}else this[_0x4d50d8(0x580)](_0x4d50d8(0x504),_0x6ba6a3,[BattleManager[_0x4d50d8(0x370)]],-0x1);}if(!VisuMZ[_0x4d50d8(0x886)][_0x4d50d8(0x650)]['BattleLog'][_0x4d50d8(0x7e1)])return;this[_0x4d50d8(0x580)](_0x4d50d8(0x209),TextManager[_0x4d50d8(0x241)][_0x4d50d8(0x460)](_0x6ba6a3['name']()));},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xafa)]=function(_0x2c37b1){const _0x293b6e=_0xf2f935;this[_0x293b6e(0x580)]('performReflection',_0x2c37b1);if(!VisuMZ['BattleCore'][_0x293b6e(0x650)]['BattleLog']['ShowReflect'])return;this[_0x293b6e(0x580)]('addText',TextManager[_0x293b6e(0x6af)][_0x293b6e(0x460)](_0x2c37b1[_0x293b6e(0x222)]()));},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x6a2)]=function(_0x4d599f,_0x7308f4){const _0x4a3207=_0xf2f935;if(VisuMZ[_0x4a3207(0x886)][_0x4a3207(0x650)][_0x4a3207(0xb3e)][_0x4a3207(0x52c)]){const _0x5503a8=_0x7308f4[_0x4a3207(0x5b0)]();this['push'](_0x4a3207(0x504),_0x4d599f,[_0x4d599f],_0x5503a8[_0x4a3207(0x582)]);}},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xad3)]=function(_0x4c5f32,_0x339b40){const _0x362de4=_0xf2f935;this[_0x362de4(0x580)](_0x362de4(0x890),_0x4c5f32,_0x339b40);if(!VisuMZ[_0x362de4(0x886)][_0x362de4(0x650)][_0x362de4(0x903)][_0x362de4(0x6f0)])return;const _0x1f37d4=_0x4c5f32[_0x362de4(0x222)](),_0x104985=TextManager['substitute']['format'](_0x1f37d4,_0x339b40[_0x362de4(0x222)]());this[_0x362de4(0x580)](_0x362de4(0x209),_0x104985);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x9e3)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x9e4)],Window_BattleLog['prototype']['displayFailure']=function(_0x38280c){const _0x32fac7=_0xf2f935;if(!VisuMZ[_0x32fac7(0x886)][_0x32fac7(0x650)][_0x32fac7(0x903)][_0x32fac7(0xa9c)])return;VisuMZ[_0x32fac7(0x886)][_0x32fac7(0x9e3)][_0x32fac7(0x86d)](this,_0x38280c);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x7f2)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x5ec)],Window_BattleLog['prototype'][_0xf2f935(0x5ec)]=function(_0x318bd0){const _0x5462ae=_0xf2f935;if(!VisuMZ['BattleCore'][_0x5462ae(0x650)][_0x5462ae(0x903)][_0x5462ae(0x7ae)])return;VisuMZ[_0x5462ae(0x886)][_0x5462ae(0x7f2)][_0x5462ae(0x86d)](this,_0x318bd0);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x524)]=Window_BattleLog[_0xf2f935(0x2dc)]['displayMiss'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x817)]=function(_0x45657f){const _0x5adcd8=_0xf2f935;if(!VisuMZ[_0x5adcd8(0x886)]['Settings'][_0x5adcd8(0x903)][_0x5adcd8(0x913)]){if(_0x5adcd8(0x226)===_0x5adcd8(0x45e)){function _0x291663(){const _0x137d95=_0x5adcd8;_0x40120b=_0x3bdd0f[_0x137d95(0x5e7)];}}else this[_0x5adcd8(0x580)](_0x5adcd8(0xb55),_0x45657f);}else VisuMZ[_0x5adcd8(0x886)][_0x5adcd8(0x524)][_0x5adcd8(0x86d)](this,_0x45657f);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x374)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb68)],Window_BattleLog['prototype'][_0xf2f935(0xb68)]=function(_0x3d80dd){const _0x5aacba=_0xf2f935;if(!VisuMZ['BattleCore'][_0x5aacba(0x650)][_0x5aacba(0x903)]['ShowMissEvasion'])_0x3d80dd['result']()[_0x5aacba(0x830)]?this[_0x5aacba(0x580)](_0x5aacba(0x8bf),_0x3d80dd):this['push']('performMagicEvasion',_0x3d80dd);else{if(_0x5aacba(0x2db)!==_0x5aacba(0x2ef))VisuMZ[_0x5aacba(0x886)][_0x5aacba(0x374)][_0x5aacba(0x86d)](this,_0x3d80dd);else{function _0x2fb150(){const _0x56f093=_0x5aacba,_0x2b305a=_0x3d34c5[_0x56f093(0x665)](_0x4899f8[_0x56f093(0xa2e)]()[_0x56f093(0x669)]());_0x2b305a>=0x0&&_0x2b305a<=0x7&&_0x112f6a[_0x56f093(0x7cb)](_0x2b305a)&&_0x3b7c7a[_0x56f093(0x282)](_0x2b305a);}}}},Window_BattleLog['prototype'][_0xf2f935(0x6ba)]=function(_0x2670fd){const _0x50ff05=_0xf2f935;if(_0x2670fd[_0x50ff05(0x893)]()['hpAffected']){_0x2670fd['result']()[_0x50ff05(0xa1f)]>0x0&&!_0x2670fd[_0x50ff05(0x893)]()['drain']&&this[_0x50ff05(0x580)](_0x50ff05(0x8f6),_0x2670fd);if(_0x2670fd[_0x50ff05(0x893)]()[_0x50ff05(0xa1f)]<0x0){if(_0x50ff05(0x495)===_0x50ff05(0x934)){function _0x3bd9c0(){const _0x28c2cb=_0x50ff05;this[_0x28c2cb(0x700)](_0x28c2cb(0x5cc));}}else this['push'](_0x50ff05(0x75f),_0x2670fd);}if(VisuMZ[_0x50ff05(0x886)]['Settings'][_0x50ff05(0x903)][_0x50ff05(0x609)]){if(_0x50ff05(0xb9a)==='TVbwH'){function _0x160a36(){const _0x86be9b=_0x50ff05;_0x2825b2[_0x86be9b(0xa01)](_0x577157[_0x86be9b(0x794)],0x0);}}else this[_0x50ff05(0x580)](_0x50ff05(0x209),this['makeHpDamageText'](_0x2670fd));}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x437)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb97)],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb97)]=function(_0x342f77){const _0xf6494d=_0xf2f935;if(!VisuMZ[_0xf6494d(0x886)][_0xf6494d(0x650)][_0xf6494d(0x903)]['ShowMpDmg'])return;VisuMZ[_0xf6494d(0x886)][_0xf6494d(0x437)][_0xf6494d(0x86d)](this,_0x342f77);},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0xa84)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xae8)],Window_BattleLog['prototype'][_0xf2f935(0xae8)]=function(_0x172b89){const _0x29f7cf=_0xf2f935;if(!VisuMZ[_0x29f7cf(0x886)][_0x29f7cf(0x650)][_0x29f7cf(0x903)][_0x29f7cf(0x64e)])return;VisuMZ[_0x29f7cf(0x886)][_0x29f7cf(0xa84)][_0x29f7cf(0x86d)](this,_0x172b89);},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xaa6)]=function(_0x39758d){const _0x5cebd3=_0xf2f935,_0x1ae07a=_0x39758d[_0x5cebd3(0x893)](),_0x44cdd3=_0x1ae07a[_0x5cebd3(0x2c9)]();for(const _0x4854cd of _0x44cdd3){const _0x16a951=_0x39758d[_0x5cebd3(0x8bc)]()?_0x4854cd[_0x5cebd3(0x523)]:_0x4854cd['message2'];if(_0x16a951&&VisuMZ[_0x5cebd3(0x886)][_0x5cebd3(0x650)][_0x5cebd3(0x903)][_0x5cebd3(0x95d)]){if(_0x5cebd3(0x843)!==_0x5cebd3(0x843)){function _0x2202af(){const _0x13e890=_0x5cebd3;this['_growX']=this[_0x13e890(0x31f)],this[_0x13e890(0x813)]=this['_targetGrowY'];}}else this[_0x5cebd3(0x580)](_0x5cebd3(0xa9b)),this[_0x5cebd3(0x580)](_0x5cebd3(0x6bf)),this[_0x5cebd3(0x580)](_0x5cebd3(0x209),_0x16a951[_0x5cebd3(0x460)](_0x39758d[_0x5cebd3(0x222)]())),this['push'](_0x5cebd3(0xb93));}if(_0x4854cd['id']===_0x39758d[_0x5cebd3(0x498)]()){if('vZDUS'===_0x5cebd3(0x35a))this['push'](_0x5cebd3(0x9ca),_0x39758d);else{function _0x42fb51(){const _0x3b3c15=_0x5cebd3;if(!_0x114ee5)return![];return _0x5009eb[_0x3b3c15(0x566)]===0x0||_0x54721e[_0x3b3c15(0x566)]===0x1;}}}}},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xaa8)]=function(_0x3e7339){const _0x42bf67=_0xf2f935;if(!VisuMZ[_0x42bf67(0x886)][_0x42bf67(0x650)][_0x42bf67(0x903)][_0x42bf67(0xaf8)])return;const _0x62a19c=_0x3e7339[_0x42bf67(0x893)](),_0x2d6ca9=_0x62a19c[_0x42bf67(0x7f3)]();for(const _0x43dc6c of _0x2d6ca9){if(_0x42bf67(0x297)===_0x42bf67(0x297))_0x43dc6c['message4']&&(this[_0x42bf67(0x580)](_0x42bf67(0xa9b)),this['push']('pushBaseLine'),this[_0x42bf67(0x580)](_0x42bf67(0x209),_0x43dc6c['message4'][_0x42bf67(0x460)](_0x3e7339[_0x42bf67(0x222)]())),this[_0x42bf67(0x580)](_0x42bf67(0xb93)));else{function _0x5f5b65(){const _0x17eef2=_0x42bf67;_0x132222=_0x144fe5[_0x17eef2(0x254)](_0x1aa45b),_0x55bd5a[_0x17eef2(0x886)]['Game_Enemy_setup'][_0x17eef2(0x86d)](this,_0x586a9d,_0x4cb853,_0x2c37dd),_0x29846c[_0x17eef2(0xb90)]&&this[_0x17eef2(0x40f)](),this[_0x17eef2(0xa4c)](),this[_0x17eef2(0xa02)](),_0x3369a7[_0x17eef2(0xb90)]&&this[_0x17eef2(0x3d0)]();}}}},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x3df)]=function(_0x47449a){const _0x8a244c=_0xf2f935,_0x260b23=VisuMZ[_0x8a244c(0x886)]['Settings'][_0x8a244c(0x903)],_0x190d99=_0x47449a[_0x8a244c(0x893)]();if(_0x260b23[_0x8a244c(0x66a)])this[_0x8a244c(0x871)](_0x47449a,_0x190d99[_0x8a244c(0x664)],TextManager['buffAdd']);if(_0x260b23[_0x8a244c(0xa94)])this['displayBuffs'](_0x47449a,_0x190d99['addedDebuffs'],TextManager['debuffAdd']);if(_0x260b23[_0x8a244c(0x4fe)])this[_0x8a244c(0x871)](_0x47449a,_0x190d99[_0x8a244c(0x3cb)],TextManager[_0x8a244c(0xa0c)]);},Window_BattleLog[_0xf2f935(0x2dc)]['displayBuffs']=function(_0xb528d,_0x2afe87,_0x5df705){const _0x1aec6=_0xf2f935;for(const _0x30536f of _0x2afe87){const _0x392a5f=_0x5df705[_0x1aec6(0x460)](_0xb528d[_0x1aec6(0x222)](),TextManager['param'](_0x30536f));this[_0x1aec6(0x580)](_0x1aec6(0xa9b)),this['push']('pushBaseLine'),this[_0x1aec6(0x580)](_0x1aec6(0x209),_0x392a5f),this[_0x1aec6(0x580)](_0x1aec6(0xb93));}},VisuMZ[_0xf2f935(0x886)]['Window_BattleLog_clear']=Window_BattleLog[_0xf2f935(0x2dc)]['clear'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb40)]=function(){const _0xfc04bb=_0xf2f935;VisuMZ[_0xfc04bb(0x886)]['Window_BattleLog_clear'][_0xfc04bb(0x86d)](this),this[_0xfc04bb(0x2b0)]();},VisuMZ['BattleCore'][_0xf2f935(0x2ea)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x6bf)],Window_BattleLog['prototype'][_0xf2f935(0x6bf)]=function(){const _0x270567=_0xf2f935;VisuMZ['BattleCore'][_0x270567(0x2ea)]['call'](this),this[_0x270567(0x2b0)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x4c0)]=Window_BattleLog['prototype'][_0xf2f935(0xa9b)],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xa9b)]=function(){const _0x375fee=_0xf2f935;VisuMZ['BattleCore'][_0x375fee(0x4c0)]['call'](this),this[_0x375fee(0x57c)](),this['callNextMethod']();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x235)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x53e)],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x53e)]=function(_0xd71d84){const _0x106039=_0xf2f935;VisuMZ[_0x106039(0x886)]['Window_BattleLog_popupDamage'][_0x106039(0x86d)](this,_0xd71d84),this['callNextMethod']();},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x584)]=function(){const _0x1be2e0=_0xf2f935;let _0x2d3985=0x0;this[_0x1be2e0(0x5dc)][_0x1be2e0(0x342)]>0x0&&(_0x2d3985=this[_0x1be2e0(0x5dc)][this[_0x1be2e0(0x5dc)][_0x1be2e0(0x342)]-0x1]);if(this[_0x1be2e0(0x863)][_0x1be2e0(0x342)]>_0x2d3985)this[_0x1be2e0(0xb93)]();else{if('hYPgS'!==_0x1be2e0(0x64f))this['callNextMethod']();else{function _0x8e010f(){const _0x247483=_0x1be2e0;_0x4c2494['prototype'][_0x247483(0x77e)][_0x247483(0x86d)](this,_0x45c751,_0x372b17,_0x2f680e,_0x44075f);}}}},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x6bd)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xa8c)],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xa8c)]=function(_0x48e71f,_0x5e803e){const _0x4910a8=_0xf2f935;VisuMZ[_0x4910a8(0x886)][_0x4910a8(0x6bd)][_0x4910a8(0x86d)](this,_0x48e71f,_0x5e803e),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performAction']=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x82a)],Window_BattleLog['prototype']['performAction']=function(_0x2fff69,_0x4ea30d){const _0x3e3256=_0xf2f935;VisuMZ['BattleCore'][_0x3e3256(0x500)]['call'](this,_0x2fff69,_0x4ea30d),this[_0x3e3256(0x2b0)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x4d0)]=Window_BattleLog['prototype']['performActionEnd'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x6e9)]=function(_0x416a58){const _0x1a88b8=_0xf2f935;VisuMZ[_0x1a88b8(0x886)]['Window_BattleLog_performActionEnd']['call'](this,_0x416a58);for(const _0x44d65f of BattleManager['allBattleMembers']()){if(!_0x44d65f)continue;if(_0x44d65f[_0x1a88b8(0xb18)]())continue;_0x44d65f['performActionEndMembers']();}this[_0x1a88b8(0x2b0)]();},VisuMZ[_0xf2f935(0x886)]['Window_BattleLog_performDamage']=Window_BattleLog[_0xf2f935(0x2dc)]['performDamage'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x8f6)]=function(_0x43db4b){const _0x368511=_0xf2f935;VisuMZ['BattleCore']['Window_BattleLog_performDamage'][_0x368511(0x86d)](this,_0x43db4b),this[_0x368511(0x2b0)]();},VisuMZ[_0xf2f935(0x886)]['Window_BattleLog_performMiss']=Window_BattleLog[_0xf2f935(0x2dc)]['performMiss'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xb55)]=function(_0x5298b0){const _0x5d1d26=_0xf2f935;VisuMZ['BattleCore'][_0x5d1d26(0x5ac)][_0x5d1d26(0x86d)](this,_0x5298b0),this[_0x5d1d26(0x2b0)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x92a)]=Window_BattleLog['prototype'][_0xf2f935(0x75f)],Window_BattleLog['prototype'][_0xf2f935(0x75f)]=function(_0x396160){const _0x4e4765=_0xf2f935;VisuMZ['BattleCore'][_0x4e4765(0x92a)][_0x4e4765(0x86d)](this,_0x396160),this[_0x4e4765(0x2b0)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x612)]=Window_BattleLog['prototype'][_0xf2f935(0x8bf)],Window_BattleLog['prototype'][_0xf2f935(0x8bf)]=function(_0x3b48db){const _0x2b1b89=_0xf2f935;VisuMZ['BattleCore'][_0x2b1b89(0x612)][_0x2b1b89(0x86d)](this,_0x3b48db),this[_0x2b1b89(0x2b0)]();},VisuMZ['BattleCore'][_0xf2f935(0x733)]=Window_BattleLog[_0xf2f935(0x2dc)]['performMagicEvasion'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0xae2)]=function(_0x4eff39){const _0x489885=_0xf2f935;VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion'][_0x489885(0x86d)](this,_0x4eff39),this[_0x489885(0x2b0)]();},VisuMZ[_0xf2f935(0x886)]['Window_BattleLog_performCounter']=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x3e0)],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x3e0)]=function(_0x5d6c0d){const _0x5aaa77=_0xf2f935;VisuMZ[_0x5aaa77(0x886)][_0x5aaa77(0x637)][_0x5aaa77(0x86d)](this,_0x5d6c0d),this[_0x5aaa77(0x2b0)]();},VisuMZ[_0xf2f935(0x886)][_0xf2f935(0x69b)]=Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x4a8)],Window_BattleLog['prototype']['performReflection']=function(_0x3d2bd7){const _0x597cf5=_0xf2f935;VisuMZ['BattleCore']['Window_BattleLog_performReflection'][_0x597cf5(0x86d)](this,_0x3d2bd7),this['callNextMethod']();},VisuMZ[_0xf2f935(0x886)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0xf2f935(0x2dc)]['performSubstitute'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x890)]=function(_0x1102df,_0x967699){const _0x190242=_0xf2f935;VisuMZ['BattleCore']['Window_BattleLog_performSubstitute'][_0x190242(0x86d)](this,_0x1102df,_0x967699),this[_0x190242(0x2b0)]();},VisuMZ[_0xf2f935(0x886)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0xf2f935(0x2dc)]['performCollapse'],Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x9ca)]=function(_0x4d4398){const _0x355070=_0xf2f935;VisuMZ[_0x355070(0x886)][_0x355070(0x227)][_0x355070(0x86d)](this,_0x4d4398),this[_0x355070(0x2b0)]();},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x6e0)]=function(_0x44198b,_0x3cd29c){_0x44198b['performCastAnimation'](_0x3cd29c),this['callNextMethod']();},Window_BattleLog[_0xf2f935(0x2dc)]['showEnemyAttackAnimation']=function(_0x427602,_0x430bbc){const _0x46073b=_0xf2f935,_0x4eb73b=_0x427602[_0x46073b(0x83b)]();if(_0x4eb73b<=0x0){if(_0x46073b(0xb1e)===_0x46073b(0x7eb)){function _0x34297c(){const _0x4bb37c=_0x46073b,_0x55ee36=_0x3bb311[_0x4bb37c(0x9bb)](this[_0x4bb37c(0x5b0)]()),_0x42d0dd=_0x4ec81d[_0x4bb37c(0x56e)][_0x55ee36];try{return _0x42d0dd[_0x4bb37c(0x5ad)][_0x4bb37c(0x86d)](this,_0x4e47ca);}catch(_0x346e22){if(_0x59c28e[_0x4bb37c(0x3ee)]())_0x556080[_0x4bb37c(0xa92)](_0x346e22);return _0xce8475[_0x4bb37c(0x886)]['Game_Action_evalDamageFormula'][_0x4bb37c(0x86d)](this);}}}else SoundManager[_0x46073b(0xa13)]();}else{if(_0x46073b(0xa77)==='kggvv')this[_0x46073b(0x984)](_0x430bbc,_0x4eb73b);else{function _0x32b304(){const _0x3a3aed=_0x46073b;_0x351798[_0x3a3aed(0x3fa)]()['makeAutoBattleActions'](),_0x27c390[_0x3a3aed(0x851)](),_0x4b5eba[_0x3a3aed(0x699)](),this[_0x3a3aed(0x26e)]();}}}},Window_BattleLog['prototype'][_0xf2f935(0x1df)]=function(_0x24b7a1,_0x14c8cb,_0x22df78){const _0x2b56b9=_0xf2f935,_0x5901b6=[_0x24b7a1][_0x2b56b9(0x6d5)](_0x14c8cb);for(const _0x35867b of _0x5901b6){if(!_0x35867b)continue;_0x35867b['setImmortal'](_0x22df78);}this[_0x2b56b9(0x2b0)]();},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x683)]=function(_0x3ecbb2){this['_waitCount']=_0x3ecbb2;},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x700)]=function(_0x2368b4,_0x5ca9e6){const _0x424126=_0xf2f935;for(const _0x3292b1 of _0x2368b4){if(!_0x3292b1)continue;_0x3292b1[_0x424126(0x700)](_0x5ca9e6);}this[_0x424126(0x2b0)]();},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x2a7)]=function(_0x3efe3e,_0x5f7462,_0x2a7ff6,_0x404516,_0xaaa0a2,_0x4331c1){const _0x319e3a=_0xf2f935;_0x3efe3e[_0x319e3a(0x9ce)](_0x5f7462,_0x2a7ff6,_0x404516,_0xaaa0a2,_0x4331c1,-0x1),this[_0x319e3a(0x2b0)]();},Window_BattleLog[_0xf2f935(0x2dc)][_0xf2f935(0x954)]=function(_0x23275c,_0x510636,_0x42fe3f,_0x519dbd,_0x1af45e,_0x4abb2f,_0x10df1f){const _0xae5554=_0xf2f935,_0x1a45b9=Math['min'](..._0x510636['map'](_0x4f085b=>_0x4f085b['battler']()['_baseX']-_0x4f085b[_0xae5554(0x310)]()[_0xae5554(0x29b)]()/0x2)),_0x4e7ec7=Math[_0xae5554(0x205)](..._0x510636[_0xae5554(0x2ab)](_0x177ff7=>_0x177ff7[_0xae5554(0x310)]()[_0xae5554(0x58e)]+_0x177ff7['battler']()[_0xae5554(0x29b)]()/0x2)),_0x251429=Math[_0xae5554(0x8ec)](..._0x510636['map'](_0x2200ee=>_0x2200ee[_0xae5554(0x310)]()[_0xae5554(0x4de)]-_0x2200ee[_0xae5554(0x310)]()['mainSpriteHeight']())),_0x3d4f8a=Math[_0xae5554(0x205)](..._0x510636[_0xae5554(0x2ab)](_0x14d696=>_0x14d696[_0xae5554(0x310)]()['_baseY'])),_0x11dadd=_0x510636[_0xae5554(0xba4)](_0x3f7685=>_0x3f7685['isActor']())[_0xae5554(0x342)],_0x43330d=_0x510636[_0xae5554(0xba4)](_0x5adbca=>_0x5adbca['isEnemy']())[_0xae5554(0x342)];let _0x317da7=0x0,_0x4c00d7=0x0;if(_0x42fe3f[_0xae5554(0x78e)](/front/i)){if('AqDSJ'===_0xae5554(0x8b6)){function _0x5e6e39(){const _0x117a96=_0xae5554;this[_0x117a96(0xa6e)][_0x117a96(0x3cc)](),this[_0x117a96(0x54f)][_0x117a96(0x5f0)](),this[_0x117a96(0x67f)]['activate']();}}else _0x317da7=_0x11dadd>=_0x43330d?_0x1a45b9:_0x4e7ec7;}else{if(_0x42fe3f[_0xae5554(0x78e)](/middle/i))_0x317da7=(_0x1a45b9+_0x4e7ec7)/0x2,_0x10df1f=-0x1;else _0x42fe3f[_0xae5554(0x78e)](/back/i)&&(_0x317da7=_0x11dadd>=_0x43330d?_0x4e7ec7:_0x1a45b9);}if(_0x42fe3f[_0xae5554(0x78e)](/head/i)){if(_0xae5554(0x8f2)===_0xae5554(0x8f2))_0x4c00d7=_0x251429;else{function _0x1113ec(){const _0x48936b=_0xae5554;_0x1661f5['BattleCore'][_0x48936b(0x5a8)][_0x48936b(0x86d)](this),this[_0x48936b(0x76a)]();if(this[_0x48936b(0xb22)]===_0x37eaf4)this['createShadowSprite']();this[_0x48936b(0x9a7)]();}}}else{if(_0x42fe3f[_0xae5554(0x78e)](/center/i)){if(_0xae5554(0x8db)===_0xae5554(0xafc)){function _0x1c829f(){const _0x550fdb=_0xae5554,_0xf5e295=!!this[_0x550fdb(0x9b3)];this[_0x550fdb(0x9b3)]=_0x4c0e02,_0xf5e295&&(this['requestMotionRefresh'](),this[_0x550fdb(0x385)]());}}else _0x4c00d7=(_0x251429+_0x3d4f8a)/0x2;}else _0x42fe3f[_0xae5554(0x78e)](/base/i)&&(_0x4c00d7=_0x3d4f8a);}_0x23275c[_0xae5554(0x9ce)](_0x317da7,_0x4c00d7,_0x519dbd,_0x1af45e,_0x4abb2f,_0x10df1f),this['callNextMethod']();},Window_BattleLog[_0xf2f935(0x2dc)]['performJump']=function(_0x1993b2,_0x1d92ec,_0x52690e){for(const _0x1138a4 of _0x1993b2){if(!_0x1138a4)continue;_0x1138a4['jumpBattler'](_0x1d92ec,_0x52690e);}this['callNextMethod']();};