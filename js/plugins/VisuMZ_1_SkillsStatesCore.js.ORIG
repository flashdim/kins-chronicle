//=============================================================================
// VisuStella MZ - Skills & States Core
// VisuMZ_1_SkillsStatesCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_SkillsStatesCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.SkillsStatesCore = VisuMZ.SkillsStatesCore || {};
VisuMZ.SkillsStatesCore.version = 1.19;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.19] [SkillsStatesCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Skills_and_States_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Skills & States Core plugin extends and builds upon the functionality of
 * RPG Maker MZ's inherent skill, state, and buff functionalities and allows
 * game devs to customize its various aspects.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Assigning multiple Skill Types to Skills.
 * * Making custom Skill Cost Types (such as HP, Gold, and Items).
 * * Allowing Skill Costs to become percentile-based or dynamic either directly
 *   through the Skills themselves or through trait-like notetags.
 * * Replacing gauges for different classes to display different types of
 *   Skill Cost Type resources.
 * * Hiding/Showing and enabling/disabling skills based on switches, learned
 *   skills, and code.
 * * Setting rulings for states, including if they're cleared upon death, how
 *   reapplying the state affects their turn count, and more.
 * * Allowing states to be categorized and affected by categories, too.
 * * Displaying turn counts on states drawn in the window or on sprites.
 * * Manipulation of state, buff, and debuff turns through skill and item
 *   effect notetags.
 * * Create custom damage over time state calculations through notetags.
 * * Allow database objects to apply passive states to its user.
 * * Passive states can have conditions before they become active as well.
 * * Updated Skill Menu Scene layout to fit more modern appearances.
 * * Added bonus if Items & Equips Core is installed to utilize the Shop Status
 *   Window to display skill data inside the Skill Menu.
 * * Control over various aspects of the Skill Menu Scene.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin adds some new hard-coded features to RPG Maker MZ's functions.
 * The following is a list of them.
 *
 * ---
 *
 * Buff & Debuff Level Management
 *
 * - In RPG Maker MZ, buffs and debuffs when applied to one another will shift
 * the buff modifier level up or down. This plugin will add an extra change to
 * the mechanic by making it so that once the buff modifier level reaches a
 * neutral point, the buff or debuff is removed altogether and resets the buff
 * and debuff turn counter for better accuracy.
 *
 * ---
 *
 * Skill Costs
 *
 * - In RPG Maker MZ, skill costs used to be hard-coded. Now, all Skill Cost
 * Types are now moved to the Plugin Parameters, including MP and TP. This
 * means that from payment to checking for them, it's all done through the
 * options available.
 *
 * - By default in RPG Maker MZ, displayed skill costs would only display only
 * one type: TP if available, then MP. If a skill costs both TP and MP, then
 * only TP was displayed. This plugin changes that aspect by displaying all the
 * cost types available in order of the Plugin Parameter Skill Cost Types.
 *
 * - By default in RPG Maker MZ, displayed skill costs were only color-coded.
 * This plugin changes that aspect by displaying the Skill Cost Type's name
 * alongside the cost. This is to help color-blind players distinguish what
 * costs a skill has.
 *
 * ---
 *
 * Sprite Gauges
 *
 * - Sprite Gauges in RPG Maker MZ by default are hard-coded and only work for
 * HP, MP, TP, and Time (used for ATB). This plugin makes it possible for them
 * to be customized through the use of Plugin Parameters under the Skill Cost
 * Types and their related-JavaScript entries.
 *
 * ---
 * 
 * State Displays
 * 
 * - To put values onto states and display them separately from the state turns
 * you can use the following script calls.
 * 
 *   battler.getStateDisplay(stateId)
 *   - This returns whatever value is stored for the specified battler under
 *     that specific state value.
 *   - If there is no value to be returned it will return an empty string.
 * 
 *   battler.setStateDisplay(stateId, value)
 *   - This sets the display for the battler's specific state to whatever you
 *     declared as the value.
 *   - The value is best used as a number or a string.
 * 
 *   battler.clearStateDisplay(stateId)
 *   - This clears the display for the battler's specific state.
 *   - In short, this sets the stored display value to an empty string.
 * 
 * ---
 *
 * Window Functions Moved
 *
 * - Some functions found in RPG Maker MZ's default code for Window_StatusBase
 * and Window_SkillList are now moved to Window_Base to make the functions
 * available throughout all windows for usage.
 *
 * ---
 *
 * ============================================================================
 * Passive State Clarification
 * ============================================================================
 * 
 * This section will explain various misconceptions regarding passive states.
 * No, passive states do not work the same way as states code-wise. Yes, they
 * use the same effects as states mechanically, but there are differences.
 * 
 * ---
 * 
 * For those using the code "a.isStateAffected(10)" to check if a target is
 * affected by a state or not, this does NOT check passive states. This only
 * checks for states that were directly applied to the target.
 * 
 * This is NOT a bug.
 * 
 * Instead, use "a.states().includes($dataStates[10])" to check for them. This
 * code will search for both directly applied states and passive states alike.
 *
 * ---
 * 
 * As passive states are NOT considered directly applied to, they do NOT match
 * a Conditional Branch's state check as well. The Conditional Branch effect
 * checks for an affected state.
 * 
 * ---
 * 
 * Because passive states are NOT directly applied to a battler, the functions
 * of "addNewState", "addState", "eraseState", "removeState" do NOT apply to
 * passive states either. This means that any of the related JS notetags tied
 * to those functions will not occur either.
 * 
 * ---
 * 
 * Why are passive states not considered affected by? Let's look at it
 * differently. There are two ways to grant skills to actors. They can acquire
 * skills by levels/items/events or they can equip gear that temporarily grants
 * the skill in question.
 * 
 * Learning the skill is direct. Temporarily granting the skill is indirect.
 * These two factors have mechanical importance and require differentiation.
 * 
 * Regular states and passive states are the same way. Regular states are
 * directly applied, therefore, need to be distinguished in order for things
 * like state turns and steps, removal conditionals, and similar to matter at
 * all. Passive states are indirect and are therefore, unaffected by state
 * turns, steps, and removal conditions. These mechanical differences are
 * important for how RPG Maker works.
 * 
 * ---
 * 
 * Once again, it is NOT a bug that when using "a.isStateAffected(10)" to
 * check if a target has a passive state will return false.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 *
 * === General Skill Notetags ===
 *
 * The following are general notetags that are skill-related.
 *
 * ---
 *
 * <Skill Type: x>
 * <Skill Types: x,x,x>
 *
 * <Skill Type: name>
 * <Skill Types: name, name, name>
 *
 * - Used for: Skill Notetags
 * - Marks the skill to have multiple Skill Types, meaning they would appear
 *   under different skill types without needing to create duplicate skills.
 * - Replace 'x' with a number value representing the Skill Type's ID.
 * - If using 'name' notetag variant, replace 'name' with the Skill Type(s)
 *   name desired to be added.
 *
 * ---
 * 
 * <List Name: name>
 * 
 * - Used for: Skill Notetags
 * - Makes the name of the skill appear different when show in the skill list.
 * - Using \V[x] as a part of the name will display that variable.
 * 
 * ---
 *
 * === Skill Cost Notetags ===
 *
 * The following are notetags that can be used to adjust skill costs. Some of
 * these notetags are added through the Plugin Parameter: Skill Cost Types and
 * can be altered there. This also means that some of these notetags can have
 * their functionality altered and/or removed.
 *
 * ---
 *
 * <type Cost: x>
 * <type Cost: x%>
 *
 * - Used for: Skill Notetags
 * - These notetags are used to designate costs of custom or already existing
 *   types that cannot be made by the Database Editor.
 * - Replace 'type' with a resource type. Existing ones found in the Plugin
 *   Parameters are 'HP', 'MP', 'TP', 'Gold', and 'Potion'. More can be added.
 * - Replace 'x' with a number value to determine the exact type cost value.
 *   This lets you bypass the Database Editor's limit of 9,999 MP and 100 TP.
 * - The 'x%' version is replaced with a percentile value to determine a cost
 *   equal to a % of the type's maximum quantity limit.
 * - Functionality for these notetags can be altered in the Plugin Parameters.
 *
 * Examples:
 *   <HP Cost: 500>
 *   <MP Cost: 25%>
 *   <Gold Cost: 3000>
 *   <Potion Cost: 5>
 *
 * ---
 *
 * <type Cost Max: x>
 * <type Cost Min: x>
 *
 * - Used for: Skill Notetags
 * - These notetags are used to ensure conditional and % costs don't become too
 *   large or too small.
 * - Replace 'type' with a resource type. Existing ones found in the Plugin
 *   Parameters are 'HP', 'MP', 'TP', 'Gold', and 'Potion'. More can be added.
 * - Replace 'x' with a number value to determine the maximum or minimum values
 *   that the cost can be.
 * - Functionality for these notetags can be altered in the Plugin Parameters.
 *
 * Examples:
 *   <HP Cost Max: 1500>
 *   <MP Cost Min: 5>
 *   <Gold Cost Max: 10000>
 *   <Potion Cost Min: 3>
 *
 * ---
 *
 * <type Cost: +x>
 * <type Cost: -x>
 *
 * <type Cost: x%>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Replace 'type' with a resource type. Existing ones found in the Plugin
 *   Parameters are 'HP', 'MP', 'TP', 'Gold', and 'Potion'. More can be added.
 * - For % notetag variant: Replace 'x' with a number value to determine the
 *   rate to adjust the Skill Cost Type by as a flat value. This is applied
 *   before <type Cost: +x> and <type Cost: -x> notetags.
 * - For + and - notetag variants: Replace 'x' with a number value to determine
 *   how much to adjust the Skill Cost Type by as a flat value. This is applied
 *   after <type Cost: x%> notetags.
 * - Functionality for these notetags can be altered in the Plugin Parameters.
 *
 * Examples:
 *   <HP Cost: +20>
 *   <MP Cost: -10>
 *   <Gold Cost: 50%>
 *   <Potion Cost: 200%>
 *
 * ---
 *
 * <Custom Cost Text>
 *  text
 * </Custom Cost Text>
 *
 * - Used for: Skill Notetags
 * - Allows you to insert custom text into the skill's cost area towards the
 *   end of the costs.
 * - Replace 'text' with the text you wish to display.
 * - Text codes may be used.
 *
 * ---
 *
 * === JavaScript Notetags: Skill Costs ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine any dynamic Skill Cost Types used for particular skills.
 *
 * ---
 *
 * <JS type Cost>
 *  code
 *  code
 *  cost = code;
 * </JS type Cost>
 *
 * - Used for: Skill Notetags
 * - Replace 'type' with a resource type. Existing ones found in the Plugin
 *   Parameters are 'HP', 'MP', 'TP', 'Gold', and 'Potion'. More can be added.
 * - Replace 'code' to determine the type 'cost' of the skill.
 * - Insert the final type cost into the 'cost' variable.
 * - The 'user' variable refers to the user about to perform the skill.
 * - The 'skill' variable refers to the skill being used.
 * - Functionality for the notetag can be altered in the Plugin Parameters.
 *
 * ---
 *
 * === Gauge Replacement Notetags ===
 *
 * Certain classes can have their gauges swapped out for other Skill Cost
 * Types. This is especially helpful for the classes that don't utilize those
 * Skill Cost Types. You can mix and match them however you want.
 *
 * ---
 *
 * <Replace HP Gauge: type>
 * <Replace MP Gauge: type>
 * <Replace TP Gauge: type>
 *
 * - Used for: Class Notetags
 * - Replaces the HP (1st), MP (2nd), or TP (3rd) gauge with a different Skill
 *   Cost Type.
 * - Replace 'type' with a resource type. Existing ones found in the Plugin
 *   Parameters are 'HP', 'MP', 'TP', 'Gold', and 'Potion'. More can be added.
 * - Replace 'type' with 'none' to not display any gauges there.
 * - The <Replace TP Gauge: type> will require 'Display TP in Window' setting
 *   to be on in the Database > System 1 tab.
 * - Functionality for the notetags can be altered by changes made to the
 *   Skill & States Core Plugin Parameters.
 *
 * ---
 *
 * === Skill Accessibility Notetags ===
 *
 * Sometimes, you don't want all skills to be visible whether it be to hide
 * menu-only skills during battle, until certain switches are turned ON/OFF, or
 * until certain skills have been learned.
 *
 * ---
 *
 * <Hide in Battle>
 * <Hide outside Battle>
 *
 * - Used for: Skill Notetags
 * - Makes the specific skill visible or hidden depending on whether or not the
 *   player is currently in battle.
 *
 * ---
 *
 * <Show Switch: x>
 *
 * <Show All Switches: x,x,x>
 * <Show Any Switches: x,x,x>
 *
 * - Used for: Skill Notetags
 * - Determines the visibility of the skill based on switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, skill will be hidden until all switches
 *   are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, skill will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 *
 * ---
 *
 * <Hide Switch: x>
 *
 * <Hide All Switches: x,x,x>
 * <Hide Any Switches: x,x,x>
 *
 * - Used for: Skill Notetags
 * - Determines the visibility of the skill based on switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, skill will be shown until all switches
 *   are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, skill will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 *
 * ---
 *
 * <Show if learned Skill: x>
 *
 * <Show if learned All Skills: x,x,x>
 * <Show if learned Any Skills: x,x,x>
 *
 * <Show if learned Skill: name>
 *
 * <Show if learned All Skills: name, name, name>
 * <Show if learned Any Skills: name, name, name>
 *
 * - Used for: Skill Notetags
 * - Determines the visibility of the skill based on skills learned.
 * - This does not apply to skills added by traits on actors, classes, any
 *   equipment, or states. These are not considered learned skills. They are
 *   considered temporary skills.
 * - Replace 'x' with the skill ID to determine the skill's visibility.
 * - If 'name' notetag viarant is used, replace 'name' with the skill's name to
 *   be checked for the notetag.
 * - If 'All' notetag variant is used, skill will be hidden until all skills
 *   are learned. Then, it would be shown.
 * - If 'Any' notetag variant is used, skill will be shown if any of the skills
 *   are learned. Otherwise, it would be hidden.
 *
 * ---
 *
 * <Hide if learned Skill: x>
 *
 * <Hide if learned All Skills: x,x,x>
 * <Hide if learned Any Skills: x,x,x>
 *
 * <Hide if learned Skill: name>
 *
 * <Hide if learned All Skills: name, name, name>
 * <Hide if learned Any Skills: name, name, name>
 *
 * - Used for: Skill Notetags
 * - Determines the visibility of the skill based on skills learned.
 * - This does not apply to skills added by traits on actors, classes, any
 *   equipment, or states. These are not considered learned skills. They are
 *   considered temporary skills.
 * - Replace 'x' with the skill ID to determine the skill's visibility.
 * - If 'name' notetag viarant is used, replace 'name' with the skill's name to
 *   be checked for the notetag.
 * - If 'All' notetag variant is used, skill will be shown until all skills
 *   are learned. Then, it would be hidden.
 * - If 'Any' notetag variant is used, skill will be hidden if any of the
 *   skills are learned. Otherwise, it would be shown.
 *
 * ---
 *
 * <Show if has Skill: x>
 *
 * <Show if have All Skills: x,x,x>
 * <Show if have Any Skills: x,x,x>
 *
 * <Show if has Skill: name>
 *
 * <Show if have All Skills: name, name, name>
 * <Show if have Any Skills: name, name, name>
 *
 * - Used for: Skill Notetags
 * - Determines the visibility of the skill based on skills available.
 * - This applies to both skills that have been learned and/or temporarily
 *   added through traits on actors, classes, equipment, or states.
 * - Replace 'x' with the skill ID to determine the skill's visibility.
 * - If 'name' notetag viarant is used, replace 'name' with the skill's name to
 *   be checked for the notetag.
 * - If 'All' notetag variant is used, skill will be hidden until all skills
 *   are learned. Then, it would be shown.
 * - If 'Any' notetag variant is used, skill will be shown if any of the skills
 *   are learned. Otherwise, it would be hidden.
 *
 * ---
 *
 * <Hide if has Skill: x>
 *
 * <Hide if have All Skills: x,x,x>
 * <Hide if have Any Skills: x,x,x>
 *
 * <Hide if has Skill: name>
 *
 * <Hide if have All Skills: name, name, name>
 * <Hide if have Any Skills: name, name, name>
 *
 * - Used for: Skill Notetags
 * - Determines the visibility of the skill based on skills available.
 * - This applies to both skills that have been learned and/or temporarily
 *   added through traits on actors, classes, equipment, or states.
 * - Replace 'x' with the skill ID to determine the skill's visibility.
 * - If 'name' notetag viarant is used, replace 'name' with the skill's name to
 *   be checked for the notetag.
 * - If 'All' notetag variant is used, skill will be shown until all skills
 *   are learned. Then, it would be hidden.
 * - If 'Any' notetag variant is used, skill will be hidden if any of the
 *   skills are learned. Otherwise, it would be shown.
 *
 * ---
 *
 * <Enable Switch: x>
 *
 * <Enable All Switches: x,x,x>
 * <Enable Any Switches: x,x,x>
 *
 * - Used for: Skill Notetags
 * - Determines the enabled status of the skill based on switches.
 * - Replace 'x' with the switch ID to determine the skill's enabled status.
 * - If 'All' notetag variant is used, skill will be disabled until all
 *   switches are ON. Then, it would be enabled.
 * - If 'Any' notetag variant is used, skill will be enabled if any of the
 *   switches are ON. Otherwise, it would be disabled.
 *
 * ---
 *
 * <Disable Switch: x>
 *
 * <Disable All Switches: x,x,x>
 * <Disable Any Switches: x,x,x>
 *
 * - Used for: Skill Notetags
 * - Determines the enabled status of the skill based on switches.
 * - Replace 'x' with the switch ID to determine the skill's enabled status.
 * - If 'All' notetag variant is used, skill will be enabled until all switches
 *   are ON. Then, it would be disabled.
 * - If 'Any' notetag variant is used, skill will be disabled if any of the
 *   switches are ON. Otherwise, it would be enabled.
 *
 * ---
 *
 * === JavaScript Notetags: Skill Accessibility ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if a skill can be accessible visibly or through usage.
 *
 * ---
 *
 * <JS Skill Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Skill Visible>
 *
 * - Used for: Skill Notetags
 * - Determines the visibility of the skill based on JavaScript code.
 * - Replace 'code' to determine the type visibility of the skill.
 * - The 'visible' variable returns a boolean (true/false) to determine if the
 *   skill will be visible or not.
 * - The 'user' variable refers to the user with the skill.
 * - The 'skill' variable refers to the skill being checked.
 * - All other visibility conditions must be met for this code to count.
 *
 * ---
 *
 * <JS Skill Enable>
 *  code
 *  code
 *  enabled = code;
 * </JS Skill Enable>
 *
 * - Used for: Skill Notetags
 * - Determines the enabled status of the skill based on JavaScript code.
 * - Replace 'code' to determine the type enabled status of the skill.
 * - The 'enabled' variable returns a boolean (true/false) to determine if the
 *   skill will be enabled or not.
 * - The 'user' variable refers to the user with the skill.
 * - The 'skill' variable refers to the skill being checked.
 * - All other skill conditions must be met in order for this to code to count.
 *
 * ---
 *
 * === General State-Related Notetags ===
 *
 * The following notetags are centered around states, such as how their turn
 * counts are displayed, items and skills that affect state turns, if the state
 * can avoid removal by death state, etc.
 *
 * ---
 *
 * <No Death Clear>
 *
 * - Used for: State Notetags
 * - Prevents this state from being cleared upon death.
 * - This allows this state to be added to an already dead battler, too.
 *
 * ---
 *
 * <No Recover All Clear>
 *
 * - Used for: State Notetags
 * - Prevents this state from being cleared upon using the Recover All command.
 *
 * ---
 *
 * <Group Defeat>
 *
 * - Used for: State Notetags
 * - If an entire party is affected by states with the <Group Defeat> notetag,
 *   they are considered defeated.
 * - Usage for this includes party-wide petrification, frozen, etc.
 *
 * ---
 *
 * <Reapply Rules: Ignore>
 * <Reapply Rules: Reset>
 * <Reapply Rules: Greater>
 * <Reapply Rules: Add>
 *
 * - Used for: State Notetags
 * - Choose what kind of rules this state follows if the state is being applied
 *   to a target that already has the state. This affects turns specifically.
 * - 'Ignore' will bypass any turn changes.
 * - 'Reset' will recalculate the state's turns.
 * - 'Greater' will choose to either keep the current turn count if it's higher
 *   than the reset amount or reset it if the current turn count is lower.
 * - 'Add' will add the state's turn count to the applied amount.
 * - If this notetag isn't used, it will use the rules set in the States >
 *   Plugin Parameters.
 *
 * ---
 *
 * <Positive State>
 * <Negative State>
 *
 * - Used for: State Notetags
 * - Marks the state as a positive state or negative state, also altering the
 *   state's turn count color to match the Plugin Parameter settings.
 * - This also puts the state into either the 'Positive' category or
 *   'Negative' category.
 *
 * ---
 *
 * <Category: name>
 * <Category: name, name, name>
 *
 * - Used for: State Notetags
 * - Arranges states into certain/multiple categories.
 * - Replace 'name' with a category name to mark this state as.
 * - Insert multiples of this to mark the state with  multiple categories.
 *
 * ---
 *
 * <Categories>
 *  name
 *  name
 * </Categories>
 *
 * - Used for: State Notetags
 * - Arranges states into certain/multiple categories.
 * - Replace each 'name' with a category name to mark this state as.
 *
 * ---
 *
 * <State x Category Remove: y>
 * 
 * <State x Category Remove: All>
 *
 * - Used for: Skill, Item Notetags
 * - Allows the skill/item to remove 'y' states from specific category 'x'.
 * - Replace 'x' with a category name to remove from.
 * - Replace 'y' with the number of times to remove from that category.
 * - Use the 'All' variant to remove all of the states of that category.
 * - Insert multiples of this to remove different types of categories.
 *
 * ---
 *
 * <Hide State Turns>
 *
 * - Used for: State Notetags
 * - Hides the state turns from being shown at all.
 * - This will by pass any Plugin Parameter settings.
 *
 * ---
 *
 * <Turn Color: x>
 * <Turn Color: #rrggbb>
 *
 * - Used for: State Notetags
 * - Hides the state turns from being shown at all.
 * - Determines the color of the state's turn count.
 * - Replace 'x' with a number value depicting a window text color.
 * - Replace 'rrggbb' with a hex color code for a more custom color.
 *
 * ---
 *
 * <State id Turns: +x>
 * <State id Turns: -x>
 *
 * <Set State id Turns: x>
 *
 * <State name Turns: +x>
 * <State name Turns: -x>
 *
 * <Set State name Turns: x>
 *
 * - Used for: Skill, Item Notetags
 * - If the target is affected by state 'id' or state 'name', change the state
 *   turn duration for target.
 * - For 'id' variant, replace 'id' with the ID of the state to modify.
 * - For 'name' variant, replace 'name' with the name of the state to modify.
 * - Replace 'x' with the value you wish to increase, decrease, or set to.
 * - Insert multiples of this notetag to affect multiple states at once.
 *
 * ---
 *
 * <param Buff Turns: +x>
 * <param Buff Turns: -x>
 *
 * <Set param Buff Turns: x>
 *
 * - Used for: Skill, Item Notetags
 * - If the target is affected by a 'param' buff, change that buff's turn
 *   duration for target.
 * - Replace 'param' with 'MaxHP', 'MaxMP', 'ATK', 'DEF', 'MAT', 'MDF', 'AGI',
 *   or 'LUK' to determine which parameter buff to modify.
 * - Replace 'x' with the value you wish to increase, decrease, or set to.
 * - Insert multiples of this notetag to affect multiple parameters at once.
 *
 * ---
 *
 * <param Debuff Turns: +x>
 * <param Debuff Turns: -x>
 *
 * <Set param Debuff Turns: x>
 *
 * - Used for: Skill, Item Notetags
 * - If the target is affected by a 'param' debuff, change that debuff's turn
 *   duration for target.
 * - Replace 'param' with 'MaxHP', 'MaxMP', 'ATK', 'DEF', 'MAT', 'MDF', 'AGI',
 *   or 'LUK' to determine which parameter debuff to modify.
 * - Replace 'x' with the value you wish to increase, decrease, or set to.
 * - Insert multiples of this notetag to affect multiple parameters at once.
 *
 * ---
 *
 * === JavaScript Notetags: On Add/Erase/Expire ===
 *
 * Using JavaScript code, you can use create custom effects that occur when a
 * state has bee added, erased, or expired.
 * 
 * ---
 *
 * <JS On Add State>
 *  code
 *  code
 * </JS On Add State>
 *
 * - Used for: State Notetags
 * - When a state is added, run the code added by this notetag.
 * - The 'user' variable refers to the current active battler.
 * - The 'target' variable refers to the battler affected by this state.
 * - The 'origin' variable refers to the one who applied this state.
 * - The 'state' variable refers to the current state being affected.
 *
 * ---
 *
 * <JS On Erase State>
 *  code
 *  code
 * </JS On Erase State>
 *
 * - Used for: State Notetags
 * - When a state is erased, run the code added by this notetag.
 * - The 'user' variable refers to the current active battler.
 * - The 'target' variable refers to the battler affected by this state.
 * - The 'origin' variable refers to the one who applied this state.
 * - The 'state' variable refers to the current state being affected.
 *
 * ---
 *
 * <JS On Expire State>
 *  code
 *  code
 * </JS On Expire State>
 *
 * - Used for: State Notetags
 * - When a state has expired, run the code added by this notetag.
 * - The 'user' variable refers to the current active battler.
 * - The 'target' variable refers to the battler affected by this state.
 * - The 'origin' variable refers to the one who applied this state.
 * - The 'state' variable refers to the current state being affected.
 *
 * ---
 *
 * === JavaScript Notetags: Slip Damage/Healing ===
 *
 * Slip Damage, in RPG Maker vocabulary, refers to damage over time. The
 * following notetags allow you to perform custom slip damage/healing.
 *
 * ---
 *
 * <JS type Slip Damage>
 *  code
 *  code
 *  damage = code;
 * </JS type Slip Damage>
 *
 * - Used for: State Notetags
 * - Code used to determine how much slip damage is dealt to the affected unit
 *   during each regeneration phase.
 * - Replace 'type' with 'HP', 'MP', or 'TP'.
 * - Replace 'code' with the calculations on what to determine slip damage.
 * - The 'user' variable refers to the origin of the state.
 * - The 'target' variable refers to the affected unit receiving the damage.
 * - The 'state' variable refers to the current state being affected.
 * - The 'damage' variable is the finalized slip damage to be dealt.
 * - When these states are applied via action effects, the slip calculations
 *   are one time calculations made upon applying and the damage is cached to
 *   be used for future on regeneration calculations.
 * - For that reason, do not include game mechanics here such as adding states,
 *   buffs, debuffs, etc. as this notetag is meant for calculations only. Use
 *   the VisuStella Battle Core's <JS Pre-Regenerate> and <JS Post-Regenerate>
 *   notetags for game mechanics instead.
 * - Passive states and states with the <JS Slip Refresh> notetag are exempt
 *   from the one time calculation and recalculated each regeneration phase.
 *
 * ---
 *
 * <JS type Slip Heal>
 *  code
 *  code
 *  heal = code;
 * </JS type Slip Heal>
 *
 * - Used for: State Notetags
 * - Code used to determine how much slip healing is dealt to the affected unit
 *   during each regeneration phase.
 * - Replace 'type' with 'HP', 'MP', or 'TP'.
 * - Replace 'code' with the calculations on what to determine slip healing.
 * - The 'user' variable refers to the origin of the state.
 * - The 'target' variable refers to the affected unit receiving the healing.
 * - The 'state' variable refers to the current state being affected.
 * - The 'heal' variable is the finalized slip healing to be recovered.
 * - When these states are applied via action effects, the slip calculations
 *   are one time calculations made upon applying and the damage is cached to
 *   be used for future on regeneration calculations.
 * - For that reason, do not include game mechanics here such as adding states,
 *   buffs, debuffs, etc. as this notetag is meant for calculations only. Use
 *   the VisuStella Battle Core's <JS Pre-Regenerate> and <JS Post-Regenerate>
 *   notetags for game mechanics instead.
 * - Passive states and states with the <JS Slip Refresh> notetag are exempt
 *   from the one time calculation and recalculated each regeneration phase.
 *
 * ---
 * 
 * <JS Slip Refresh>
 * 
 * - Used for: State Notetags
 * - Refreshes the calculations made for the JS Slip Damage/Heal amounts at the
 *   start of each regeneration phase to allow for dynamic damage ranges.
 * 
 * ---
 *
 * === Passive State Notetags ===
 *
 * Passive States are states that are always applied to actors and enemies
 * provided that their conditions have been met. These can be granted through
 * database objects or through the Passive States Plugin Parameters.
 * 
 * ---
 * 
 * For those using the code "a.isStateAffected(10)" to check if a target is
 * affected by a state or not, this does NOT check passive states. This only
 * checks for states that were directly applied to the target.
 * 
 * This is NOT a bug.
 * 
 * Instead, use "a.states().includes($dataStates[10])" to check for them. This
 * code will search for both directly applied states and passive states alike.
 *
 * ---
 * 
 * As passive states are NOT considered directly applied to, they do NOT match
 * a Conditional Branch's state check as well. The Conditional Branch effect
 * checks for an affected state.
 * 
 * ---
 * 
 * Because passive states are NOT directly applied to a battler, the functions
 * of "addNewState", "addState", "eraseState", "removeState" do NOT apply to
 * passive states either. This means that any of the related JS notetags tied
 * to those functions will not occur either.
 * 
 * ---
 * 
 * Why are passive states not considered affected by? Let's look at it
 * differently. There are two ways to grant skills to actors. They can acquire
 * skills by levels/items/events or they can equip gear that temporarily grants
 * the skill in question.
 * 
 * Learning the skill is direct. Temporarily granting the skill is indirect.
 * These two factors have mechanical importance and require differentiation.
 * 
 * Regular states and passive states are the same way. Regular states are
 * directly applied, therefore, need to be distinguished in order for things
 * like state turns and steps, removal conditionals, and similar to matter at
 * all. Passive states are indirect and are therefore, unaffected by state
 * turns, steps, and removal conditions. These mechanical differences are
 * important for how RPG Maker works.
 * 
 * ---
 * 
 * Once again, it is NOT a bug that when using "a.isStateAffected(10)" to
 * check if a target has a passive state will return false.
 * 
 * ---
 *
 * <Passive State: x>
 * <Passive States: x,x,x>
 *
 * <Passive State: name>
 * <Passive States: name, name, name>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy Notetags
 * - Adds passive state(s) x to trait object, applying it to related actor or
 *   enemy unit(s).
 * - Replace 'x' with a number to determine which state to add as a passive.
 * - If using 'name' notetag variant, replace 'name' with the name of the
 *   state(s) to add as a passive.
 * - Note: If you plan on applying a passive state through a skill, it must be
 *   through a skill that has been learned by the target and not a skill that
 *   is given through a trait.
 *
 * ---
 *
 * <Passive Stackable>
 *
 * - Used for: State Notetags
 * - Makes it possible for this passive state to be added multiple times.
 * - Otherwise, only one instance of the passive state can be available.
 *
 * ---
 *
 * <Passive Condition Class: id>
 * <Passive Condition Classes: id, id, id>
 *
 * <Passive Condition Class: name>
 * <Passive Condition Classes: name, name, name>
 *
 * - Used for: State Notetags
 * - Determines the passive condition of the passive state based on the actor's
 *   current class. As long as the actor's current class matches one of the
 *   data entries, the passive condition is considered passed.
 * - For 'id' variant, replace 'id' with a number representing class's ID.
 * - For 'name' variant, replace 'name' with the class's name.
 *
 * ---
 *
 * <Passive Condition Multiclass: id>
 * <Passive Condition Multiclass: id, id, id>
 *
 * <Passive Condition Multiclass: name>
 * <Passive Condition Multiclass: name, name, name>
 *
 * - Used for: State Notetags
 * - Requires VisuMZ_2_ClassChangeSystem!
 * - Determines the passive condition of the passive state based on the actor's
 *   multiclasses. As long as the actor has any of the matching classes
 *   assigned as a multiclass, the passive condition is considered passed.
 * - For 'id' variant, replace 'id' with a number representing class's ID.
 * - For 'name' variant, replace 'name' with the class's name.
 *
 * ---
 *
 * <Passive Condition Switch ON: x>
 *
 * <Passive Condition All Switches ON: x,x,x>
 * <Passive Condition Any Switch ON: x,x,x>
 *
 * - Used for: State Notetags
 * - Determines the passive condition of the passive state based on switches.
 * - Replace 'x' with the switch ID to determine the state's passive condition.
 * - If 'All' notetag variant is used, conditions will not be met until all
 *   switches are ON. Then, it would be met.
 * - If 'Any' notetag variant is used, conditions will be met if any of the
 *   switches are ON. Otherwise, it would not be met.
 *
 * ---
 *
 * <Passive Condition Switch OFF: x>
 *
 * <Passive Condition All Switches OFF: x,x,x>
 * <Passive Condition Any Switch OFF: x,x,x>
 *
 * - Used for: State Notetags
 * - Determines the passive condition of the passive state based on switches.
 * - Replace 'x' with the switch ID to determine the state's passive condition.
 * - If 'All' notetag variant is used, conditions will not be met until all
 *   switches are OFF. Then, it would be met.
 * - If 'Any' notetag variant is used, conditions will be met if any of the
 *   switches are OFF. Otherwise, it would not be met.
 *
 * ---
 *
 * === JavaScript Notetags: Passive State ===
 *
 * The following is a notetag made for users with JavaScript knowledge to
 * determine if a passive state's condition can be met.
 *
 * ---
 *
 * <JS Passive Condition>
 *  code
 *  code
 *  condition = code;
 * </JS Passive Condition>
 *
 * - Used for: State Notetags
 * - Determines the passive condition of the state based on JavaScript code.
 * - Replace 'code' to determine if a passive state's condition has been met.
 * - The 'condition' variable returns a boolean (true/false) to determine if
 *   the passive state's condition is met or not.
 * - The 'user' variable refers to the user affected by the passive state.
 * - The 'state' variable refers to the passive state being checked.
 * - All other passive conditions must be met for this code to count.
 * 
 * **NOTE** Not everything can be used as a custom JS Passive Condition due to
 * limitations of the code. There are failsafe checks to prevent infinite loops
 * and some passive conditions will not register for this reason and the
 * conditional checks will behave as if the passive states have NOT been
 * applied for this reason. Such examples include the following:
 * 
 * - A passive state that requires another passive state
 * - A passive state that requires a trait effect from another state
 * - A passive state that requires a parameter value altered by another state
 * - A passive state that requires equipment to be worn but its equipment type
 *   access is provided by another state.
 * - Anything else that is similar in style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: General Skill Settings
 * ============================================================================
 *
 * These Plugin Parameters adjust various aspects of the game regarding skills
 * from the custom Skill Menu Layout to global custom effects made in code.
 *
 * ---
 *
 * General
 * 
 *   Use Updated Layout:
 *   - Use the Updated Skill Menu Layout provided by this plugin?
 *   - This will automatically enable the Status Window.
 *   - This will override the Core Engine windows settings.
 *
 *   Layout Style:
 *   - If using an updated layout, how do you want to style the menu scene?
 *     - Upper Help, Left Input
 *     - Upper Help, Right Input
 *     - Lower Help, Left Input
 *     - Lower Help, Right Input
 *
 * ---
 *
 * Skill Type Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Skill Type Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Skill Type Window.
 *
 * ---
 *
 * List Window
 * 
 *   Columns:
 *   - Number of maximum columns.
 *
 * ---
 *
 * Shop Status Window
 * 
 *   Show in Skill Menu?:
 *   - Show the Shop Status Window in the Skill Menu?
 *   - This is enabled if the Updated Layout is on.
 * 
 *   Adjust List Window?:
 *   - Automatically adjust the Skill List Window in the Skill Menu if using
 *     the Shop Status Window?
 * 
 *   Background Type:
 *   - Select background type for this window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this Shop Status Window in the
 *     Skill Menu.
 *
 * ---
 *
 * Skill Types
 * 
 *   Hidden Skill Types:
 *   - Insert the ID's of the Skill Types you want hidden from view ingame.
 * 
 *   Hidden During Battle:
 *   - Insert the ID's of the Skill Types you want hidden during battle only.
 * 
 *   Icon: Normal Type:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - To assign icons to skill types, simply insert \I[x] into the
 *     skill type's name in the Database > Types tab.
 * 
 *   Icon: Magic Type:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - To assign icons to skill types, simply insert \I[x] into the
 *     skill type's name in the Database > Types tab.
 *
 * ---
 *
 * Global JS Effects
 * 
 *   JS: Skill Conditions:
 *   - JavaScript code for a global-wide skill condition check.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Skill Cost Types
 * ============================================================================
 *
 * Skill Cost Types are the resources that are used for your skills. These can
 * range from the default MP and TP resources to the newly added HP, Gold, and
 * Potion resources.
 *
 * ---
 *
 * Settings
 * 
 *   Name:
 *   - A name for this Skill Cost Type.
 * 
 *   Icon:
 *   - Icon used for this Skill Cost Type.
 *   - Use 0 for no icon.
 * 
 *   Font Color:
 *   - Text Color used to display this cost.
 *   - For a hex color, use #rrggbb with VisuMZ_1_MessageCore
 * 
 *   Font Size:
 *   - Font size used to display this cost.
 *
 * ---
 *
 * Cost Processing
 * 
 *   JS: Cost Calculation:
 *   - Code on how to calculate this resource cost for the skill.
 * 
 *   JS: Can Pay Cost?:
 *   - Code on calculating whether or not the user is able to pay the cost.
 * 
 *   JS: Paying Cost:
 *   - Code for if met, this is the actual process of paying of the cost.
 *
 * ---
 *
 * Window Display
 * 
 *   JS: Show Cost?:
 *   - Code for determining if the cost is shown or not.
 * 
 *   JS: Cost Text:
 *   - Code to determine the text (with Text Code support) used for the
 *     displayed cost.
 *
 * ---
 *
 * Gauge Display
 * 
 *   JS: Maximum Value:
 *   - Code to determine the maximum value used for this Skill Cost resource
 *     for gauges.
 * 
 *   JS: Current Value:
 *   - Code to determine the current value used for this Skill Cost resource
 *     for gauges.
 * 
 *   JS: Draw Gauge:
 *   - Code to determine how to draw the Skill Cost resource for this 
 *     gauge type.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: General State Settings
 * ============================================================================
 *
 * These are general settings regarding RPG Maker MZ's state-related aspects
 * from how turns are reapplied to custom code that's ran whenever states are
 * added, erased, or expired.
 *
 * ---
 *
 * General
 * 
 *   Reapply Rules:
 *   - These are the rules when reapplying states.
 *   - Ignore: State doesn't get added.
 *   - Reset: Turns get reset.
 *   - Greater: Turns take greater value (current vs reset).
 *   - Add: Turns add upon existing turns.
 * 
 *   Maximum Turns:
 *   - Maximum number of turns to let states go up to.
 *   - This can be changed with the <Max Turns: x> notetag.
 *
 * ---
 *
 * Turn Display
 * 
 *   Show Turns?:
 *   - Display state turns on top of window icons and sprites?
 * 
 *   Turn Font Size:
 *   - Font size used for displaying turns.
 * 
 *   Offset X:
 *   - Offset the X position of the turn display.
 * 
 *   Offset Y:
 *   - Offset the Y position of the turn display.
 * 
 *   Turn Font Size:
 *   - Font size used for displaying turns.
 * 
 *   Turn Color: Neutral:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Turn Color: Positive:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Turn Color: Negative:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 *
 * ---
 *
 * Data Display
 * 
 *   Show Data?:
 *   - Display state data on top of window icons and sprites?
 * 
 *   Data Font Size:
 *   - Font size used for displaying state data.
 * 
 *   Offset X:
 *   - Offset the X position of the state data display.
 * 
 *   Offset Y:
 *   - Offset the Y position of the state data display.
 *
 * ---
 *
 * Global JS Effects
 * 
 *   JS: On Add State:
 *   - JavaScript code for a global-wide custom effect whenever a state
 *     is added.
 * 
 *   JS: On Erase State:
 *   - JavaScript code for a global-wide custom effect whenever a state
 *     is erased.
 * 
 *   JS: On Expire State:
 *   - JavaScript code for a global-wide custom effect whenever a state
 *     has expired.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: General Buff/Debuff Settings
 * ============================================================================
 *
 * Buffs and debuffs don't count as states by RPG Maker MZ's mechanics, but
 * they do function close enough for them to be added to this plugin for
 * adjusting. Change these settings to make buffs and debuffs work to your
 * game's needs.
 *
 * ---
 *
 * General
 * 
 *   Reapply Rules:
 *   - These are the rules when reapplying buffs/debuffs.
 *   - Ignore: Buff/Debuff doesn't get added.
 *   - Reset: Turns get reset.
 *   - Greater: Turns take greater value (current vs reset).
 *   - Add: Turns add upon existing turns.
 * 
 *   Maximum Turns:
 *   - Maximum number of turns to let buffs and debuffs go up to.
 *
 * ---
 *
 * Stacking
 * 
 *   Max Stacks: Buff:
 *   - Maximum number of stacks for buffs.
 * 
 *   Max Stacks: Debuff:
 *   - Maximum number of stacks for debuffs.
 * 
 *   JS: Buff/Debuff Rate:
 *   - Code to determine how much buffs and debuffs affect parameters.
 *
 * ---
 *
 * Turn Display
 * 
 *   Show Turns?:
 *   - Display buff and debuff turns on top of window icons and sprites?
 * 
 *   Turn Font Size:
 *   - Font size used for displaying turns.
 * 
 *   Offset X:
 *   - Offset the X position of the turn display.
 * 
 *   Offset Y:
 *   - Offset the Y position of the turn display.
 * 
 *   Turn Color: Buffs:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Turn Color: Debuffs:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 *
 * ---
 *
 * Rate Display
 * 
 *   Show Rate?:
 *   - Display buff and debuff rate on top of window icons and sprites?
 * 
 *   Rate Font Size:
 *   - Font size used for displaying rate.
 * 
 *   Offset X:
 *   - Offset the X position of the rate display.
 * 
 *   Offset Y:
 *   - Offset the Y position of the rate display.
 *
 * ---
 *
 * Global JS Effects
 * 
 *   JS: On Add Buff:
 *   - JavaScript code for a global-wide custom effect whenever a
 *     buff is added.
 * 
 *   JS: On Add Debuff:
 *   - JavaScript code for a global-wide custom effect whenever a
 *     debuff is added.
 * 
 *   JS: On Erase Buff:
 *   - JavaScript code for a global-wide custom effect whenever a
 *     buff is added.
 * 
 *   JS: On Erase Debuff:
 *   - JavaScript code for a global-wide custom effect whenever a
 *     debuff is added.
 * 
 *   JS: On Expire Buff:
 *   - JavaScript code for a global-wide custom effect whenever a
 *     buff is added.
 * 
 *   JS: On Expire Debuff:
 *   - JavaScript code for a global-wide custom effect whenever a
 *     debuff is added.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Passive State Settings
 * ============================================================================
 *
 * These Plugin Parameters adjust passive states that can affect all actors and
 * enemies as well as have global conditions.
 * 
 * ---
 * 
 * For those using the code "a.isStateAffected(10)" to check if a target is
 * affected by a state or not, this does NOT check passive states. This only
 * checks for states that were directly applied to the target.
 * 
 * This is NOT a bug.
 * 
 * Instead, use "a.states().includes($dataStates[10])" to check for them. This
 * code will search for both directly applied states and passive states alike.
 *
 * ---
 * 
 * As passive states are NOT considered directly applied to, they do NOT match
 * a Conditional Branch's state check as well. The Conditional Branch effect
 * checks for an affected state.
 * 
 * ---
 * 
 * Because passive states are NOT directly applied to a battler, the functions
 * of "addNewState", "addState", "eraseState", "removeState" do NOT apply to
 * passive states either. This means that any of the related JS notetags tied
 * to those functions will not occur either.
 * 
 * ---
 * 
 * Why are passive states not considered affected by? Let's look at it
 * differently. There are two ways to grant skills to actors. They can acquire
 * skills by levels/items/events or they can equip gear that temporarily grants
 * the skill in question.
 * 
 * Learning the skill is direct. Temporarily granting the skill is indirect.
 * These two factors have mechanical importance and require differentiation.
 * 
 * Regular states and passive states are the same way. Regular states are
 * directly applied, therefore, need to be distinguished in order for things
 * like state turns and steps, removal conditionals, and similar to matter at
 * all. Passive states are indirect and are therefore, unaffected by state
 * turns, steps, and removal conditions. These mechanical differences are
 * important for how RPG Maker works.
 * 
 * ---
 * 
 * Once again, it is NOT a bug that when using "a.isStateAffected(10)" to
 * check if a target has a passive state will return false.
 * 
 * ---
 *
 * List
 * 
 *   Global Passives:
 *   - A list of passive states to affect actors and enemies.
 * 
 *   Actor-Only Passives:
 *   - A list of passive states to affect actors only.
 * 
 *   Enemy Passives:
 *   - A list of passive states to affect enemies only.
 *
 * ---
 *
 * Global JS Effects
 * 
 *   JS: Condition Check:
 *   - JavaScript code for a global-wide passive condition check.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * - Yanfly
 * - Arisu
 * - Olivia
 * - Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.19: June 4, 2021
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.18: May 21, 2021
 * * Documentation Update
 * ** Added "Passive State Clarification" section.
 * *** As there is a lot of confusion regarding how passive states work and how
 *     people still miss the explanations found in the "Passive State Notetags"
 *     section AND the "Plugin Parameters: Passive State Settings", we are
 *     adding a third section to explain how they work.
 * *** All three sections will contain the full detailed explanation of how
 *     passive states work to clear common misconceptions about them.
 * 
 * Version 1.17: May 7, 2021
 * * Bug Fixes
 * ** State category removal is now usable outside of battle. Fix by Irina.
 * 
 * Version 1.16: April 30, 2021
 * * Bug Fixes!
 * ** When states with step removal have the <No Recover All Clear> or
 *    <No Death Clear> notetags, their step counter is no longer reset either.
 *    Fix made by Irina.
 * * New Features!
 * ** New notetag added by Arisu!
 * *** <List Name: name>
 * **** Makes the name of the skill appear different when show in the skill
 *      list. Using \V[x] as a part of the name will display that variable.
 * 
 * Version 1.15: March 19, 2021
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * 
 * Version 1.14: March 12, 2021
 * * Bug Fixes!
 * ** Max HP Buff/Debuff should now display its turn counter. Fix by Yanfly.
 * * Documentation Update!
 * ** For the <JS Passive Condition>, we've added documentation on the
 *    limitations of passive conditions since they have been reported as bug
 *    reports, when in reality, they are failsafes to prevent infinite loops.
 *    Such limitations include the following:
 * *** A passive state that requires another passive state
 * *** A passive state that requires a trait effect from another state
 * *** A passive state that requires a parameter value altered by another state
 * *** A passive state that requires equipment to be worn but its equipment
 *     type access is provided by another state.
 * *** Anything else that is similar in style.
 * 
 * Version 1.13: February 26, 2021
 * * Documentation Update!
 * ** For <JS type Slip Damage> and <JS type Slip Heal> notetags, added the
 *    following notes:
 * *** When these states are applied via action effects, the slip calculations
 *     are one time calculations made upon applying and the damage is cached to
 *     be used for future on regeneration calculations.
 * *** For that reason, do not include game mechanics here such as adding
 *     states, buffs, debuffs, etc. as this notetag is meant for calculations
 *     only. Use the VisuStella Battle Core's <JS Pre-Regenerate> and
 *     <JS Post-Regenerate> notetags for game mechanics instead.
 * *** Passive states and states with the <JS Slip Refresh> notetag are exempt
 *     from the one time calculation and recalculated each regeneration phase.
 * * Feature Update!
 * ** Changed slip refresh requirements to entail <JS Slip Refresh> notetag for
 *    extra clarity. Update made by Olivia.
 * 
 * Version 1.12: February 19, 2021
 * * Feature Update
 * ** Changed the way passive state infinite stacking as a blanket coverage.
 *    Update made by Olivia.
 * 
 * Version 1.11: February 12, 2021
 * * Bug Fixes!
 * ** Added a check to prevent passive states from infinitely stacking. Fix
 *    made by Olivia.
 * 
 * Version 1.10: January 15, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameters added
 * *** Plugin Parameters > Skill Settings > Background Type
 * 
 * Version 1.09: January 1, 2021
 * * Bug Fixes!
 * ** Custom JS TP slip damage and healing should now work properly.
 *    Fix made by Yanfly.
 * 
 * Version 1.08: December 25, 2020
 * * Bug Fixes!
 * ** <JS On Add State> should no longer trigger multiple times for the death
 *    state. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** <No Death Clear> can now allow the affected state to be added to an
 *    already dead battler. Update made by Yanfly.
 * 
 * Version 1.07: December 18, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Passive Condition Multiclass: id>
 * *** <Passive Condition Multiclass: id, id, id>
 * *** <Passive Condition Multiclass: name>
 * *** <Passive Condition Multiclass: name, name, name>
 * ** New Plugin Parameter added by Yanfly.
 * *** Plugin Parameters > States > General > Action End Update
 * **** States with "Action End" auto-removal will also update turns at the end
 *      of each action instead of all actions.
 * ***** Turn this off if you wish for state turn updates to function like they
 *       do by default for "Action End".
 * 
 * Version 1.06: December 4, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.05: November 15, 2020
 * * Bug Fixes!
 * ** The alignment of the Skill Type Window is now fixed and will reflect upon
 *    the default settings. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** <State x Category Remove: All> notetag added by Yanfly.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.04: September 27, 2020
 * * Documentation Update
 * ** "Use Updated Layout" plugin parameters now have the added clause:
 *    "This will override the Core Engine windows settings." to reduce
 *    confusion. Added by Irina.
 * 
 * Version 1.03: September 13, 2020
 * * Bug Fixes!
 * ** <JS type Slip Damage> custom notetags now work for passive states. Fix
 *    made by Olivia.
 * ** Setting the Command Window style to "Text Only" will no longer add in
 *    the icon text codes. Bug fixed by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** The JS Notetags for Add, Erase, and Expire states are now fixed. Fix made
 *    by Yanfly.
 * * Documentation Update!
 * ** <Show if learned Skill: x> and <Hide if learned Skill: x> notetags have
 *    the following added to their descriptions:
 * *** This does not apply to skills added by traits on actors, classes, any
 *     equipment, or states. These are not considered learned skills. They are
 *     considered temporary skills.
 * * New Features!
 * ** Notetags added by Yanfly:
 * *** <Show if has Skill: x>
 * *** <Show if have All Skills: x,x,x>
 * *** <Show if have Any Skills: x,x,x>
 * *** <Show if has Skill: name>
 * *** <Show if have All Skills: name, name, name>
 * *** <Show if have Any Skills: name, name, name>
 * *** <Hide if has Skill: x>
 * *** <Hide if have All Skills: x,x,x>
 * *** <Hide if have Any Skills: x,x,x>
 * *** <Hide if has Skill: name>
 * *** <Hide if have All Skills: name, name, name>
 * *** <Hide if have Any Skills: name, name, name>
 * *** These have been added to remove the confusion regarding learned skills
 *     as skills added through trait effects are not considered learned skills
 *     by RPG Maker MZ.
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Passive states from Elements & Status Menu Core are now functional.
 *    Fix made by Olivia.
 * * Compatibility Update
 * ** Extended functions to allow for better compatibility.
 * * Updated documentation
 * ** Explains that passive states are not directly applied and are therefore
 *    not affected by code such as "a.isStateAffected(10)".
 * ** Instead, use "a.states().includes($dataStates[10])"
 * ** "Use #rrggbb for a hex color." lines now replaced with
 *    "For a hex color, use #rrggbb with VisuMZ_1_MessageCore"
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param SkillsStatesCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Skills:struct
 * @text Skill Settings
 * @type struct<Skills>
 * @desc Adjust general skill settings here.
 * @default {"General":"","EnableLayout:eval":"true","LayoutStyle:str":"upper/left","SkillTypeWindow":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","ListWindow":"","ListWindowCols:num":"1","ShopStatusWindow":"","ShowShopStatus:eval":"true","SkillSceneAdjustSkillList:eval":"true","SkillMenuStatusRect:func":"\"const ww = this.shopStatusWidth();\\nconst wh = this._itemWindow.height;\\nconst wx = Graphics.boxWidth - this.shopStatusWidth();\\nconst wy = this._itemWindow.y;\\nreturn new Rectangle(wx, wy, ww, wh);\"","SkillTypes":"","HiddenSkillTypes:arraynum":"[]","BattleHiddenSkillTypes:arraynum":"[]","IconStypeNorm:num":"78","IconStypeMagic:num":"79","CustomJS":"","SkillConditionJS:func":"\"// Declare Variables\\nconst skill = arguments[0];\\nconst user = this;\\nconst target = this;\\nconst a = this;\\nconst b = this;\\nlet enabled = true;\\n\\n// Perform Checks\\n\\n\\n// Return boolean\\nreturn enabled;\""}
 *
 * @param Costs:arraystruct
 * @text Skill Cost Types
 * @parent Skills:struct
 * @type struct<Cost>[]
 * @desc A list of all the skill cost types added by this plugin
 * and the code that controls them in-game.
 * @default ["{\"Name:str\":\"HP\",\"Settings\":\"\",\"Icon:num\":\"0\",\"FontColor:str\":\"20\",\"FontSize:num\":\"22\",\"Cost\":\"\",\"CalcJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nlet cost = 0;\\\\n\\\\n// Calculations\\\\nconst note = skill.note;\\\\nif (note.match(/<HP COST:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost += Number(RegExp.$1);\\\\n}\\\\nif (note.match(/<HP COST:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.mhp / 100);\\\\n}\\\\nif (note.match(/<JS HP COST>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS HP COST>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    eval(code);\\\\n}\\\\n\\\\n// Apply Trait Cost Alterations\\\\nif (cost > 0) {\\\\n    const rateNote = /<HP COST:[ ](\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*)([%％])>/i;\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\n    const flatNote = /<HP COST:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\n    cost = Math.max(1, cost);\\\\n}\\\\n\\\\n// Set Cost Limits\\\\nif (note.match(/<HP COST MAX:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\n}\\\\nif (note.match(/<HP COST MIN:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\n}\\\\n\\\\n// Return cost value\\\\nreturn Math.round(Math.max(0, cost));\\\"\",\"CanPayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nif (cost <= 0) {\\\\n    return true;\\\\n} else {\\\\n    return user._hp > cost;\\\\n}\\\"\",\"PayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Process Payment\\\\nuser._hp -= cost;\\\"\",\"Windows\":\"\",\"ShowJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn cost > 0;\\\"\",\"TextJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\nconst settings = arguments[2];\\\\nconst fontSize = settings.FontSize;\\\\nconst color = settings.FontColor;\\\\nconst name = TextManager.hp;\\\\nconst icon = settings.Icon;\\\\nlet text = '';\\\\n\\\\n// Text: Change Font Size\\\\ntext += '\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\n\\\\n// Text: Add Color\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\n    text += '\\\\\\\\\\\\\\\\HexColor<%1>'.format(String(RegExp.$1));\\\\n} else {\\\\n    text += '\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\n}\\\\n\\\\n// Text: Add Cost\\\\ntext += '%1 %2'.format(cost, name);\\\\n\\\\n// Text: Add Icon\\\\nif (icon  > 0) {\\\\n    text += '\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\n}\\\\n\\\\n// Return text\\\\nreturn text;\\\"\",\"Gauges\":\"\",\"GaugeMaxJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn user.mhp;\\\"\",\"GaugeCurrentJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn user.hp;\\\"\",\"GaugeDrawJS:func\":\"\\\"// Declare Variables\\\\nconst sprite = this;\\\\nconst settings = sprite._costSettings;\\\\nconst bitmap = sprite.bitmap;\\\\nconst user = sprite._battler;\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\n\\\\n// Draw Gauge\\\\nconst color1 = ColorManager.hpGaugeColor1();\\\\nconst color2 = ColorManager.hpGaugeColor2();\\\\nconst gx = 0;\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\nconst gh = sprite.gaugeHeight();\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\n\\\\n// Draw Label\\\\nconst label = TextManager.hpA;\\\\nconst lx = 4;\\\\nconst ly = 0;\\\\nconst lw = sprite.bitmapWidth();\\\\nconst lh = sprite.bitmapHeight();\\\\nsprite.setupLabelFont();\\\\nbitmap.paintOpacity = 255;\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\"left\\\\\\\");\\\\n\\\\n// Draw Value\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\nconst vh = sprite.bitmapHeight();\\\\nsprite.setupValueFont();\\\\nbitmap.textColor = ColorManager.hpColor(user);\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\"right\\\\\\\");\\\"\"}","{\"Name:str\":\"MP\",\"Settings\":\"\",\"Icon:num\":\"0\",\"FontColor:str\":\"23\",\"FontSize:num\":\"22\",\"Cost\":\"\",\"CalcJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nlet cost = 0;\\\\n\\\\n// Calculations\\\\nconst note = skill.note;\\\\ncost = Math.floor(skill.mpCost * user.mcr);\\\\nif (note.match(/<MP COST:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.mmp / 100);\\\\n}\\\\nif (note.match(/<JS MP COST>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS MP COST>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    eval(code);\\\\n}\\\\n\\\\n// Apply Trait Cost Alterations\\\\nif (cost > 0) {\\\\n    const rateNote = /<MP COST:[ ](\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*)([%％])>/i;\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\n    const flatNote = /<MP COST:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\n    cost = Math.max(1, cost);\\\\n}\\\\n\\\\n// Set Cost Limits\\\\nif (note.match(/<MP COST MAX:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\n}\\\\nif (note.match(/<MP COST MIN:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\n}\\\\n\\\\n// Return cost value\\\\nreturn Math.round(Math.max(0, cost));\\\"\",\"CanPayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn user._mp >= cost;\\\"\",\"PayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Process Payment\\\\nuser._mp -= cost;\\\"\",\"Windows\":\"\",\"ShowJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn cost > 0;\\\"\",\"TextJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\nconst settings = arguments[2];\\\\nconst fontSize = settings.FontSize;\\\\nconst color = settings.FontColor;\\\\nconst name = TextManager.mp;\\\\nconst icon = settings.Icon;\\\\nlet text = '';\\\\n\\\\n// Text: Change Font Size\\\\ntext += '\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\n\\\\n// Text: Add Color\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\n    text += '\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\n} else {\\\\n    text += '\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\n}\\\\n\\\\n// Text: Add Cost\\\\ntext += '%1 %2'.format(cost, name);\\\\n\\\\n// Text: Add Icon\\\\nif (icon  > 0) {\\\\n    text += '\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\n}\\\\n\\\\n// Return text\\\\nreturn text;\\\"\",\"Gauges\":\"\",\"GaugeMaxJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn user.mmp;\\\"\",\"GaugeCurrentJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn user.mp;\\\"\",\"GaugeDrawJS:func\":\"\\\"// Declare Variables\\\\nconst sprite = this;\\\\nconst settings = sprite._costSettings;\\\\nconst bitmap = sprite.bitmap;\\\\nconst user = sprite._battler;\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\n\\\\n// Draw Gauge\\\\nconst color1 = ColorManager.mpGaugeColor1();\\\\nconst color2 = ColorManager.mpGaugeColor2();\\\\nconst gx = 0;\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\nconst gh = sprite.gaugeHeight();\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\n\\\\n// Draw Label\\\\nconst label = TextManager.mpA;\\\\nconst lx = 4;\\\\nconst ly = 0;\\\\nconst lw = sprite.bitmapWidth();\\\\nconst lh = sprite.bitmapHeight();\\\\nsprite.setupLabelFont();\\\\nbitmap.paintOpacity = 255;\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\"left\\\\\\\");\\\\n\\\\n// Draw Value\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\nconst vh = sprite.bitmapHeight();\\\\nsprite.setupValueFont();\\\\nbitmap.textColor = ColorManager.mpColor(user);\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\"right\\\\\\\");\\\"\"}","{\"Name:str\":\"TP\",\"Settings\":\"\",\"Icon:num\":\"0\",\"FontColor:str\":\"29\",\"FontSize:num\":\"22\",\"Cost\":\"\",\"CalcJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nlet cost = 0;\\\\n\\\\n// Calculations\\\\nconst note = skill.note;\\\\ncost = skill.tpCost;\\\\nif (note.match(/<TP COST:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.maxTp() / 100);\\\\n}\\\\nif (note.match(/<JS TP COST>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS TP COST>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    eval(code);\\\\n}\\\\n\\\\n// Apply Trait Cost Alterations\\\\nif (cost > 0) {\\\\n    const rateNote = /<TP COST:[ ](\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*)([%％])>/i;\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\n    const flatNote = /<TP COST:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\n    cost = Math.max(1, cost);\\\\n}\\\\n\\\\n// Set Cost Limits\\\\nif (note.match(/<TP COST MAX:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\n}\\\\nif (note.match(/<TP COST MIN:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\n}\\\\n\\\\n// Return cost value\\\\nreturn Math.round(Math.max(0, cost));\\\"\",\"CanPayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn user._tp >= cost;\\\"\",\"PayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Process Payment\\\\nuser._tp -= cost;\\\"\",\"Windows\":\"\",\"ShowJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn cost > 0;\\\"\",\"TextJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\nconst settings = arguments[2];\\\\nconst fontSize = settings.FontSize;\\\\nconst color = settings.FontColor;\\\\nconst name = TextManager.tp;\\\\nconst icon = settings.Icon;\\\\nlet text = '';\\\\n\\\\n// Text: Change Font Size\\\\ntext += '\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\n\\\\n// Text: Add Color\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\n    text += '\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\n} else {\\\\n    text += '\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\n}\\\\n\\\\n// Text: Add Cost\\\\ntext += '%1 %2'.format(cost, name);\\\\n\\\\n// Text: Add Icon\\\\nif (icon  > 0) {\\\\n    text += '\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\n}\\\\n\\\\n// Return text\\\\nreturn text;\\\"\",\"Gauges\":\"\",\"GaugeMaxJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn user.maxTp();\\\"\",\"GaugeCurrentJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn user.tp;\\\"\",\"GaugeDrawJS:func\":\"\\\"// Declare Variables\\\\nconst sprite = this;\\\\nconst settings = sprite._costSettings;\\\\nconst bitmap = sprite.bitmap;\\\\nconst user = sprite._battler;\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\n\\\\n// Draw Gauge\\\\nconst color1 = ColorManager.tpGaugeColor1();\\\\nconst color2 = ColorManager.tpGaugeColor2();\\\\nconst gx = 0;\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\nconst gh = sprite.gaugeHeight();\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\n\\\\n// Draw Label\\\\nconst label = TextManager.tpA;\\\\nconst lx = 4;\\\\nconst ly = 0;\\\\nconst lw = sprite.bitmapWidth();\\\\nconst lh = sprite.bitmapHeight();\\\\nsprite.setupLabelFont();\\\\nbitmap.paintOpacity = 255;\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\"left\\\\\\\");\\\\n\\\\n// Draw Value\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\nconst vh = sprite.bitmapHeight();\\\\nsprite.setupValueFont();\\\\nbitmap.textColor = ColorManager.tpColor(user);\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\"right\\\\\\\");\\\"\"}","{\"Name:str\":\"Gold\",\"Settings\":\"\",\"Icon:num\":\"0\",\"FontColor:str\":\"17\",\"FontSize:num\":\"22\",\"Cost\":\"\",\"CalcJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nlet cost = 0;\\\\n\\\\n// Calculations\\\\nconst note = skill.note;\\\\nif (note.match(/<GOLD COST:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost += Number(RegExp.$1);\\\\n}\\\\nif (note.match(/<GOLD COST:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    cost += Math.ceil(Number(RegExp.$1) * $gameParty.gold() / 100);\\\\n}\\\\nif (note.match(/<JS GOLD COST>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS GOLD COST>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    eval(code);\\\\n}\\\\n\\\\n// Apply Trait Cost Alterations\\\\nif (cost > 0) {\\\\n    const rateNote = /<GOLD COST:[ ](\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*)([%％])>/i;\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\n    const flatNote = /<GOLD COST:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\n    cost = Math.max(1, cost);\\\\n}\\\\n\\\\n// Set Cost Limits\\\\nif (note.match(/<GOLD COST MAX:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\n}\\\\nif (note.match(/<GOLD COST MIN:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\n}\\\\n\\\\n// Return cost value\\\\nreturn Math.round(Math.max(0, cost));\\\"\",\"CanPayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn $gameParty.gold() >= cost;\\\"\",\"PayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Process Payment\\\\n$gameParty.loseGold(cost);\\\"\",\"Windows\":\"\",\"ShowJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn cost > 0;\\\"\",\"TextJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\nconst settings = arguments[2];\\\\nconst fontSize = settings.FontSize;\\\\nconst color = settings.FontColor;\\\\nconst name = TextManager.currencyUnit;\\\\nconst icon = settings.Icon;\\\\nlet text = '';\\\\n\\\\n// Text: Change Font Size\\\\ntext += '\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\n\\\\n// Text: Add Color\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\n    text += '\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\n} else {\\\\n    text += '\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\n}\\\\n\\\\n// Text: Add Cost\\\\ntext += '%1 %2'.format(cost, name);\\\\n\\\\n// Text: Add Icon\\\\nif (icon  > 0) {\\\\n    text += '\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\n}\\\\n\\\\n// Return text\\\\nreturn text;\\\"\",\"Gauges\":\"\",\"GaugeMaxJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn $gameParty.maxGold();\\\"\",\"GaugeCurrentJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\n\\\\n// Return value\\\\nreturn $gameParty.gold();\\\"\",\"GaugeDrawJS:func\":\"\\\"// Declare Variables\\\\nconst sprite = this;\\\\nconst settings = sprite._costSettings;\\\\nconst bitmap = sprite.bitmap;\\\\nconst user = sprite._battler;\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\n\\\\n// Draw Label\\\\nconst label = TextManager.currencyUnit;\\\\nconst lx = 4;\\\\nconst ly = 0;\\\\nconst lw = sprite.bitmapWidth();\\\\nconst lh = sprite.bitmapHeight();\\\\nsprite.setupLabelFont();\\\\nbitmap.paintOpacity = 255;\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\"left\\\\\\\");\\\\n\\\\n// Draw Value\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\nconst vh = sprite.bitmapHeight();\\\\nsprite.setupValueFont();\\\\nbitmap.textColor = ColorManager.normalColor();\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\"right\\\\\\\");\\\"\"}","{\"Name:str\":\"Potion\",\"Settings\":\"\",\"Icon:num\":\"176\",\"FontColor:str\":\"0\",\"FontSize:num\":\"22\",\"Cost\":\"\",\"CalcJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nlet cost = 0;\\\\n\\\\n// Calculations\\\\nconst note = skill.note;\\\\nif (note.match(/<POTION COST:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost += Number(RegExp.$1);\\\\n}\\\\nif (note.match(/<JS POTION COST>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS POTION COST>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    eval(code);\\\\n}\\\\n\\\\n// Apply Trait Cost Alterations\\\\nif (cost > 0) {\\\\n    const rateNote = /<POTION COST:[ ](\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*)([%％])>/i;\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\n    const flatNote = /<POTION COST:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\n    cost = Math.max(1, cost);\\\\n}\\\\n\\\\n// Set Cost Limits\\\\nif (note.match(/<POTION COST MAX:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\n}\\\\nif (note.match(/<POTION COST MIN:[ ](\\\\\\\\d+)>/i)) {\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\n}\\\\n\\\\n// Return cost value\\\\nreturn Math.round(Math.max(0, cost));\\\"\",\"CanPayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\nconst item = $dataItems[7];\\\\n\\\\n// Return Boolean\\\\nif (user.isActor() && cost > 0) {\\\\n    return $gameParty.numItems(item) >= cost;\\\\n} else {\\\\n    return true;\\\\n}\\\"\",\"PayJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\nconst item = $dataItems[7];\\\\n\\\\n// Process Payment\\\\nif (user.isActor()) {\\\\n    $gameParty.loseItem(item, cost);\\\\n}\\\"\",\"Windows\":\"\",\"ShowJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\n\\\\n// Return Boolean\\\\nreturn cost > 0;\\\"\",\"TextJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst item = $dataItems[7];\\\\nconst skill = arguments[0];\\\\nconst cost = arguments[1];\\\\nconst settings = arguments[2];\\\\nconst fontSize = settings.FontSize;\\\\nconst color = settings.FontColor;\\\\nconst name = settings.Name;\\\\nconst icon = settings.Icon;\\\\nlet text = '';\\\\n\\\\n// Text: Change Font Size\\\\ntext += '\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\n\\\\n// Text: Add Color\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\n    text += '\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\n} else {\\\\n    text += '\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\n}\\\\n\\\\n// Text: Add Cost\\\\ntext += '×%1'.format(cost);\\\\n\\\\n// Text: Add Icon\\\\ntext += '\\\\\\\\\\\\\\\\I[%1]'.format(item.iconIndex);\\\\n\\\\n// Return text\\\\nreturn text;\\\"\",\"Gauges\":\"\",\"GaugeMaxJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst item = $dataItems[7];\\\\n\\\\n// Return value\\\\nreturn $gameParty.maxItems(item);\\\"\",\"GaugeCurrentJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst item = $dataItems[7];\\\\n\\\\n// Return value\\\\nreturn $gameParty.numItems(item);\\\"\",\"GaugeDrawJS:func\":\"\\\"// Declare Variables\\\\nconst sprite = this;\\\\nconst settings = sprite._costSettings;\\\\nconst bitmap = sprite.bitmap;\\\\nconst user = sprite._battler;\\\\nconst item = $dataItems[7];\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\n\\\\n// Draw Gauge\\\\nconst color1 = ColorManager.textColor(30);\\\\nconst color2 = ColorManager.textColor(31);\\\\nconst gx = 0;\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\nconst gh = sprite.gaugeHeight();\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\n\\\\n// Draw Icon\\\\nconst iconIndex = item.iconIndex;\\\\nconst iconBitmap = ImageManager.loadSystem(\\\\\\\"IconSet\\\\\\\");\\\\nconst pw = ImageManager.iconWidth;\\\\nconst ph = ImageManager.iconHeight;\\\\nconst sx = (iconIndex % 16) * pw;\\\\nconst sy = Math.floor(iconIndex / 16) * ph;\\\\nbitmap.blt(iconBitmap, sx, sy, pw, ph, 0, 0, 24, 24);\\\\n\\\\n// Draw Value\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\nconst vh = sprite.bitmapHeight();\\\\nsprite.setupValueFont();\\\\nbitmap.textColor = ColorManager.normalColor();\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\"right\\\\\\\");\\\"\"}"]
 *
 * @param BreakSkills
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param States:struct
 * @text State Settings
 * @type struct<States>
 * @desc Adjust general state settings here.
 * @default {"General":"","ReapplyRules:str":"greater","MaxTurns:num":"99","ActionEndUpdate:eval":"true","Turns":"","ShowTurns:eval":"true","TurnFontSize:num":"16","TurnOffsetX:num":"-4","TurnOffsetY:num":"-6","ColorNeutral:str":"0","ColorPositive:str":"24","ColorNegative:str":"27","Data":"","ShowData:eval":"true","DataFontSize:num":"12","DataOffsetX:num":"0","DataOffsetY:num":"8","CustomJS":"","onAddStateJS:func":"\"// Declare Variables\\nconst stateId = arguments[0];\\nconst origin = this.getStateOrigin(stateId);\\nconst state = $dataStates[stateId];\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\"","onEraseStateJS:func":"\"// Declare Variables\\nconst stateId = arguments[0];\\nconst origin = this.getStateOrigin(stateId);\\nconst state = $dataStates[stateId];\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\"","onExpireStateJS:func":"\"// Declare Variables\\nconst stateId = arguments[0];\\nconst origin = this.getStateOrigin(stateId);\\nconst state = $dataStates[stateId];\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\""}
 *
 * @param Buffs:struct
 * @text Buff/Debuff Settings
 * @parent States:struct
 * @type struct<Buffs>
 * @desc Adjust general buff/debuff settings here.
 * @default {"General":"","ReapplyRules:str":"greater","MaxTurns:num":"99","Stacking":"","StackBuffMax:num":"2","StackDebuffMax:num":"2","MultiplierJS:func":"\"// Declare Variables\\nconst user = this;\\nconst paramId = arguments[0];\\nconst buffLevel = arguments[1];\\nlet rate = 1;\\n\\n// Perform Calculations\\nrate += buffLevel * 0.25;\\n\\n// Return Rate\\nreturn Math.max(0, rate);\"","Turns":"","ShowTurns:eval":"true","TurnFontSize:num":"16","TurnOffsetX:num":"-4","TurnOffsetY:num":"-6","ColorBuff:str":"24","ColorDebuff:str":"27","Data":"","ShowData:eval":"false","DataFontSize:num":"12","DataOffsetX:num":"0","DataOffsetY:num":"8","CustomJS":"","onAddBuffJS:func":"\"// Declare Variables\\nconst paramId = arguments[0];\\nconst modifier = this._buffs[paramId];\\nconst origin = this.getCurrentStateActiveUser();\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\"","onAddDebuffJS:func":"\"// Declare Variables\\nconst paramId = arguments[0];\\nconst modifier = this._buffs[paramId];\\nconst origin = this.getCurrentStateActiveUser();\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\"","onEraseBuffJS:func":"\"// Declare Variables\\nconst paramId = arguments[0];\\nconst modifier = this._buffs[paramId];\\nconst origin = this.getCurrentStateActiveUser();\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\"","onEraseDebuffJS:func":"\"// Declare Variables\\nconst paramId = arguments[0];\\nconst modifier = this._buffs[paramId];\\nconst origin = this.getCurrentStateActiveUser();\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\"","onExpireBuffJS:func":"\"// Declare Variables\\nconst paramId = arguments[0];\\nconst modifier = this._buffs[paramId];\\nconst origin = this.getCurrentStateActiveUser();\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\"","onExpireDebuffJS:func":"\"// Declare Variables\\nconst paramId = arguments[0];\\nconst modifier = this._buffs[paramId];\\nconst origin = this.getCurrentStateActiveUser();\\nconst user = this.getCurrentStateActiveUser();\\nconst target = this;\\nconst a = origin;\\nconst b = this;\\n\\n// Perform Actions\\n\""}
 *
 * @param PassiveStates:struct
 * @text Passive States
 * @parent States:struct
 * @type struct<PassiveStates>
 * @desc Adjust passive state settings here.
 * @default {"List":"","Global:arraynum":"[]","Actor:arraynum":"[]","Enemy:arraynum":"[]","CustomJS":"","PassiveConditionJS:func":"\"// Declare Variables\\nconst state = arguments[0];\\nconst stateId = state.id;\\nconst user = this;\\nconst target = this;\\nconst a = this;\\nconst b = this;\\nlet condition = true;\\n\\n// Perform Checks\\n\\n\\n// Return boolean\\nreturn condition;\""}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * General Skill Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Skills:
 *
 * @param General
 *
 * @param EnableLayout:eval
 * @text Use Updated Layout
 * @parent General
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use the Updated Skill Menu Layout provided by this plugin?
 * This will override the Core Engine windows settings.
 * @default true
 *
 * @param LayoutStyle:str
 * @text Layout Style
 * @parent General
 * @type select
 * @option Upper Help, Left Input
 * @value upper/left
 * @option Upper Help, Right Input
 * @value upper/right
 * @option Lower Help, Left Input
 * @value lower/left
 * @option Lower Help, Right Input
 * @value lower/right
 * @desc If using an updated layout, how do you want to style
 * the menu scene layout?
 * @default upper/left
 *
 * @param SkillTypeWindow
 * @text Skill Type Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent SkillTypeWindow
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Skill Type Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent SkillTypeWindow
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Skill Type Window.
 * @default left
 *
 * @param ListWindow
 * @text List Window
 *
 * @param ListWindowCols:num
 * @text Columns
 * @parent ListWindow
 * @type number
 * @min 1
 * @desc Number of maximum columns.
 * @default 1
 *
 * @param ShopStatusWindow
 * @text Shop Status Window
 *
 * @param ShowShopStatus:eval
 * @text Show in Skill Menu?
 * @parent ShopStatusWindow
 * @type boolean
 * @on Show
 * @off Don't Show
 * @desc Show the Shop Status Window in the Skill Menu?
 * This is enabled if the Updated Layout is on.
 * @default true
 *
 * @param SkillSceneAdjustSkillList:eval
 * @text Adjust List Window?
 * @parent ShopStatusWindow
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the Skill List Window in the Skill Menu if using the Shop Status Window?
 * @default true
 *
 * @param SkillSceneStatusBgType:num
 * @text Background Type
 * @parent ShopStatusWindow
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param SkillMenuStatusRect:func
 * @text JS: X, Y, W, H
 * @parent ShopStatusWindow
 * @type note
 * @desc Code used to determine the dimensions for this Shop Status Window in the Skill Menu.
 * @default "const ww = this.shopStatusWidth();\nconst wh = this._itemWindow.height;\nconst wx = Graphics.boxWidth - this.shopStatusWidth();\nconst wy = this._itemWindow.y;\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param SkillTypes
 * @text Skill Types
 *
 * @param HiddenSkillTypes:arraynum
 * @text Hidden Skill Types
 * @parent SkillTypes
 * @type number[]
 * @min 1
 * @max 99
 * @desc Insert the ID's of the Skill Types you want hidden from view ingame.
 * @default []
 *
 * @param BattleHiddenSkillTypes:arraynum
 * @text Hidden During Battle
 * @parent SkillTypes
 * @type number[]
 * @min 1
 * @max 99
 * @desc Insert the ID's of the Skill Types you want hidden during battle only.
 * @default []
 *
 * @param IconStypeNorm:num
 * @text Icon: Normal Type
 * @parent SkillTypes
 * @desc Icon used for normal skill types that aren't assigned any icons.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Icon: Magic Type
 * @parent SkillTypes
 * @desc Icon used for magic skill types that aren't assigned any icons.
 * @default 79
 *
 * @param CustomJS
 * @text Global JS Effects
 *
 * @param SkillConditionJS:func
 * @text JS: Skill Conditions
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide skill condition check.
 * @default "// Declare Variables\nconst skill = arguments[0];\nconst user = this;\nconst target = this;\nconst a = this;\nconst b = this;\nlet enabled = true;\n\n// Perform Checks\n\n\n// Return boolean\nreturn enabled;"
 *
 */
/* ----------------------------------------------------------------------------
 * Skill Cost Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Cost:
 *
 * @param Name:str
 * @text Name
 * @desc A name for this Skill Cost Type.
 * @default Untitled
 *
 * @param Settings
 *
 * @param Icon:num
 * @text Icon
 * @parent Settings
 * @desc Icon used for this Skill Cost Type.
 * Use 0 for no icon.
 * @default 0
 *
 * @param FontColor:str
 * @text Font Color
 * @parent Settings
 * @desc Text Color used to display this cost.
 * For a hex color, use #rrggbb with VisuMZ_1_MessageCore
 * @default 0
 *
 * @param FontSize:num
 * @text Font Size
 * @parent Settings
 * @type number
 * @min 1
 * @desc Font size used to display this cost.
 * @default 22
 *
 * @param Cost
 * @text Cost Processing
 *
 * @param CalcJS:func
 * @text JS: Cost Calculation
 * @parent Cost
 * @type note
 * @desc Code on how to calculate this resource cost for the skill.
 * @default "// Declare Variables\nconst user = this;\nconst skill = arguments[0];\nlet cost = 0;\n\n// Return cost value\nreturn Math.round(Math.max(0, cost));"
 *
 * @param CanPayJS:func
 * @text JS: Can Pay Cost?
 * @parent Cost
 * @type note
 * @desc Code on calculating whether or not the user is able to pay the cost.
 * @default "// Declare Variables\nconst user = this;\nconst skill = arguments[0];\nconst cost = arguments[1];\n\n// Return Boolean\nreturn true;"
 *
 * @param PayJS:func
 * @text JS: Paying Cost
 * @parent Cost
 * @type note
 * @desc Code for if met, this is the actual process of paying of the cost.
 * @default "// Declare Variables\nconst user = this;\nconst skill = arguments[0];\nconst cost = arguments[1];\n\n// Process Payment\n"
 *
 * @param Windows
 * @text Window Display
 *
 * @param ShowJS:func
 * @text JS: Show Cost?
 * @parent  Windows
 * @type note
 * @desc Code for determining if the cost is shown or not.
 * @default "// Declare Variables\nconst user = this;\nconst skill = arguments[0];\nconst cost = arguments[1];\n\n// Return Boolean\nreturn cost > 0;"
 *
 * @param TextJS:func
 * @text JS: Cost Text
 * @parent  Windows
 * @type note
 * @desc Code to determine the text (with Text Code support) used for the displayed cost.
 * @default "// Declare Variables\nconst user = this;\nconst skill = arguments[0];\nconst cost = arguments[1];\nconst settings = arguments[2];\nconst fontSize = settings.FontSize;\nconst color = settings.FontColor;\nconst name = settings.Name;\nconst icon = settings.Icon;\nlet text = '';\n\n// Text: Change Font Size\ntext += '\\\\FS[%1]'.format(fontSize);\n\n// Text: Add Color\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\n    text += '\\\\HexColor<#%1>'.format(String(RegExp.$1));\n} else {\n    text += '\\\\C[%1]'.format(color);\n}\n\n// Text: Add Cost\ntext += '%1 %2'.format(cost, name);\n\n// Text: Add Icon\nif (icon  > 0) {\n    text += '\\\\I[%1]'.format(icon);\n}\n\n// Return text\nreturn text;"
 *
 * @param Gauges
 * @text Gauge Display
 *
 * @param GaugeMaxJS:func
 * @text JS: Maximum Value
 * @parent  Gauges
 * @type note
 * @desc Code to determine the maximum value used for this Skill Cost resource for gauges.
 * @default "// Declare Variables\nconst user = this;\n\n// Return value\nreturn 0;"
 *
 * @param GaugeCurrentJS:func
 * @text JS: Current Value
 * @parent  Gauges
 * @type note
 * @desc Code to determine the current value used for this Skill Cost resource for gauges.
 * @default "// Declare Variables\nconst user = this;\n\n// Return value\nreturn 0;"
 *
 * @param GaugeDrawJS:func
 * @text JS: Draw Gauge
 * @parent  Gauges
 * @type note
 * @desc Code to determine how to draw the Skill Cost resource for this gauge type.
 * @default "// Declare Variables\nconst sprite = this;\nconst settings = sprite._costSettings;\nconst bitmap = sprite.bitmap;\nconst user = sprite._battler;\nconst currentValue = sprite.currentDisplayedValue();\n\n// Draw Gauge\nconst color1 = ColorManager.textColor(30);\nconst color2 = ColorManager.textColor(31);\nconst gx = 0;\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\nconst gw = sprite.bitmapWidth() - gx;\nconst gh = sprite.gaugeHeight();\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\n\n// Draw Label\nconst label = settings.Name;\nconst lx = 4;\nconst ly = 0;\nconst lw = sprite.bitmapWidth();\nconst lh = sprite.bitmapHeight();\nsprite.setupLabelFont();\nbitmap.paintOpacity = 255;\nbitmap.drawText(label, lx, ly, lw, lh, \"left\");\n\n// Draw Value\nconst vw = sprite.bitmapWidth() - 2;\nconst vh = sprite.bitmapHeight();\nsprite.setupValueFont();\nbitmap.textColor = ColorManager.normalColor();\nbitmap.drawText(currentValue, 0, 0, vw, vh, \"right\");"
 *
 */
/* ----------------------------------------------------------------------------
 * General State Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~States:
 *
 * @param General
 *
 * @param ReapplyRules:str
 * @text Reapply Rules
 * @parent General
 * @type select
 * @option Ignore: State doesn't get added.
 * @value ignore
 * @option Reset: Turns get reset.
 * @value reset
 * @option Greater: Turns take greater value (current vs reset).
 * @value greater
 * @option Add: Turns add upon existing turns.
 * @value add
 * @desc These are the rules when reapplying states.
 * @default greater
 *
 * @param MaxTurns:num
 * @text Maximum Turns
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of turns to let states go up to.
 * This can be changed with the <Max Turns: x> notetag.
 * @default 9999
 *
 * @param ActionEndUpdate:eval
 * @text Action End Update
 * @parent General
 * @type boolean
 * @on Update Each Action
 * @off Don't Change
 * @desc States with "Action End" auto-removal will also update
 * turns at the end of each action instead of all actions.
 * @default true
 *
 * @param Turns
 * @text Turn Display
 *
 * @param ShowTurns:eval
 * @text Show Turns?
 * @parent Turns
 * @type boolean
 * @on Display
 * @off Hide
 * @desc Display state turns on top of window icons and sprites?
 * @default true
 *
 * @param TurnFontSize:num
 * @text Turn Font Size
 * @parent Turns
 * @type number
 * @min 1
 * @desc Font size used for displaying turns.
 * @default 16
 *
 * @param TurnOffsetX:num
 * @text Offset X
 * @parent Turns
 * @desc Offset the X position of the turn display.
 * @default -4
 *
 * @param TurnOffsetY:num
 * @text Offset Y
 * @parent Turns
 * @desc Offset the Y position of the turn display.
 * @default -6
 *
 * @param TurnFontSize:num
 * @text Turn Font Size
 * @parent Turns
 * @desc Font size used for displaying turns.
 * @default 16
 *
 * @param ColorNeutral:str
 * @text Turn Color: Neutral
 * @parent Turns
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 0
 *
 * @param ColorPositive:str
 * @text Turn Color: Positive
 * @parent Turns
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 24
 *
 * @param ColorNegative:str
 * @text Turn Color: Negative
 * @parent Turns
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 27
 *
 * @param Data
 * @text Data Display
 *
 * @param ShowData:eval
 * @text Show Data?
 * @parent Data
 * @type boolean
 * @on Display
 * @off Hide
 * @desc Display state data on top of window icons and sprites?
 * @default true
 *
 * @param DataFontSize:num
 * @text Data Font Size
 * @parent Data
 * @type number
 * @min 1
 * @desc Font size used for displaying state data.
 * @default 12
 *
 * @param DataOffsetX:num
 * @text Offset X
 * @parent Data
 * @desc Offset the X position of the state data display.
 * @default 0
 *
 * @param DataOffsetY:num
 * @text Offset Y
 * @parent Data
 * @desc Offset the Y position of the state data display.
 * @default 8
 *
 * @param CustomJS
 * @text Global JS Effects
 *
 * @param onAddStateJS:func
 * @text JS: On Add State
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * state is added.
 * @default "// Declare Variables\nconst stateId = arguments[0];\nconst origin = this.getStateOrigin(stateId);\nconst state = $dataStates[stateId];\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 * @param onEraseStateJS:func
 * @text JS: On Erase State
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * state is erased.
 * @default "// Declare Variables\nconst stateId = arguments[0];\nconst origin = this.getStateOrigin(stateId);\nconst state = $dataStates[stateId];\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 * @param onExpireStateJS:func
 * @text JS: On Expire State
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * state has expired.
 * @default "// Declare Variables\nconst stateId = arguments[0];\nconst origin = this.getStateOrigin(stateId);\nconst state = $dataStates[stateId];\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * General Buff/Debuff Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Buffs:
 *
 * @param General
 *
 * @param ReapplyRules:str
 * @text Reapply Rules
 * @parent General
 * @type select
 * @option Ignore: Buff/Debuff doesn't get added.
 * @value ignore
 * @option Reset: Turns get reset.
 * @value reset
 * @option Greater: Turns take greater value (current vs reset).
 * @value greater
 * @option Add: Turns add upon existing turns.
 * @value add
 * @desc These are the rules when reapplying buffs/debuffs.
 * @default greater
 *
 * @param MaxTurns:num
 * @text Maximum Turns
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of turns to let buffs and debuffs go up to.
 * @default 9999
 *
 * @param Stacking
 *
 * @param StackBuffMax:num
 * @text Max Stacks: Buff
 * @parent Stacking
 * @type number
 * @min 1
 * @desc Maximum number of stacks for buffs.
 * @default 2
 *
 * @param StackDebuffMax:num
 * @text Max Stacks: Debuff
 * @parent Stacking
 * @type number
 * @min 1
 * @desc Maximum number of stacks for debuffs.
 * @default 2
 *
 * @param MultiplierJS:func
 * @text JS: Buff/Debuff Rate
 * @parent Stacking
 * @type note
 * @desc Code to determine how much buffs and debuffs affect parameters.
 * @default "// Declare Variables\nconst user = this;\nconst paramId = arguments[0];\nconst buffLevel = arguments[1];\nlet rate = 1;\n\n// Perform Calculations\nrate += buffLevel * 0.25;\n\n// Return Rate\nreturn Math.max(0, rate);"
 *
 * @param Turns
 * @text Turns Display
 *
 * @param ShowTurns:eval
 * @text Show Turns?
 * @parent Turns
 * @type boolean
 * @on Display
 * @off Hide
 * @desc Display buff and debuff turns on top of window icons and sprites?
 * @default true
 *
 * @param TurnFontSize:num
 * @text Turn Font Size
 * @parent Turns
 * @type number
 * @min 1
 * @desc Font size used for displaying turns.
 * @default 16
 *
 * @param TurnOffsetX:num
 * @text Offset X
 * @parent Turns
 * @desc Offset the X position of the turn display.
 * @default -4
 *
 * @param TurnOffsetY:num
 * @text Offset Y
 * @parent Turns
 * @desc Offset the Y position of the turn display.
 * @default -6
 *
 * @param ColorBuff:str
 * @text Turn Color: Buffs
 * @parent Turns
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 24
 *
 * @param ColorDebuff:str
 * @text Turn Color: Debuffs
 * @parent Turns
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 27
 *
 * @param Data
 * @text Rate Display
 *
 * @param ShowData:eval
 * @text Show Rate?
 * @parent Data
 * @type boolean
 * @on Display
 * @off Hide
 * @desc Display buff and debuff rate on top of window icons and sprites?
 * @default false
 *
 * @param DataFontSize:num
 * @text Rate Font Size
 * @parent Data
 * @type number
 * @min 1
 * @desc Font size used for displaying rate.
 * @default 12
 *
 * @param DataOffsetX:num
 * @text Offset X
 * @parent Data
 * @desc Offset the X position of the rate display.
 * @default 0
 *
 * @param DataOffsetY:num
 * @text Offset Y
 * @parent Data
 * @desc Offset the Y position of the rate display.
 * @default 8
 *
 * @param CustomJS
 * @text Global JS Effects
 *
 * @param onAddBuffJS:func
 * @text JS: On Add Buff
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * buff is added.
 * @default "// Declare Variables\nconst paramId = arguments[0];\nconst modifier = this._buffs[paramId];\nconst origin = this.getCurrentStateActiveUser();\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 * @param onAddDebuffJS:func
 * @text JS: On Add Debuff
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * debuff is added.
 * @default "// Declare Variables\nconst paramId = arguments[0];\nconst modifier = this._buffs[paramId];\nconst origin = this.getCurrentStateActiveUser();\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 * @param onEraseBuffJS:func
 * @text JS: On Erase Buff
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * buff is erased.
 * @default "// Declare Variables\nconst paramId = arguments[0];\nconst modifier = this._buffs[paramId];\nconst origin = this.getCurrentStateActiveUser();\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 * @param onEraseDebuffJS:func
 * @text JS: On Erase Debuff
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * debuff is erased.
 * @default "// Declare Variables\nconst paramId = arguments[0];\nconst modifier = this._buffs[paramId];\nconst origin = this.getCurrentStateActiveUser();\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 * @param onExpireBuffJS:func
 * @text JS: On Expire Buff
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * buff has expired.
 * @default "// Declare Variables\nconst paramId = arguments[0];\nconst modifier = this._buffs[paramId];\nconst origin = this.getCurrentStateActiveUser();\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 * @param onExpireDebuffJS:func
 * @text JS: On Expire Debuff
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide custom effect whenever a
 * debuff has expired.
 * @default "// Declare Variables\nconst paramId = arguments[0];\nconst modifier = this._buffs[paramId];\nconst origin = this.getCurrentStateActiveUser();\nconst user = this.getCurrentStateActiveUser();\nconst target = this;\nconst a = origin;\nconst b = this;\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Passive State Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PassiveStates:
 *
 * @param List
 *
 * @param Global:arraynum
 * @text Global Passives
 * @parent List
 * @type state[]
 * @desc A list of passive states to affect actors and enemies.
 * @default []
 *
 * @param Actor:arraynum
 * @text Actor-Only Passives
 * @parent List
 * @type state[]
 * @desc A list of passive states to affect actors only.
 * @default []
 *
 * @param Enemy:arraynum
 * @text Enemy Passives
 * @parent List
 * @type state[]
 * @desc A list of passive states to affect enemies only.
 * @default []
 *
 * @param CustomJS
 * @text Global JS Effects
 *
 * @param PassiveConditionJS:func
 * @text JS: Condition Check
 * @parent CustomJS
 * @type note
 * @desc JavaScript code for a global-wide passive condition check.
 * @default "// Declare Variables\nconst state = arguments[0];\nconst stateId = state.id;\nconst user = this;\nconst target = this;\nconst a = this;\nconst b = this;\nlet condition = true;\n\n// Perform Checks\n\n\n// Return boolean\nreturn condition;"
 *
 */
//=============================================================================

const _0x47d5=['2uMcWNW','SygON','PassiveConditionJS','Skills','ColorNeutral','Game_BattlerBase_skillMpCost','WwLrw','<member-%1>','ARRAYNUM','SkillConditionJS','kviRa','Sprite_Gauge_gaugeRate','_currentActor','clearStates','stateMpSlipDamageJS','setBuffTurns','onExpireBuffGlobalJS','paramBuffRate','meetsPassiveStateConditions','NhjJG','NTMwB','Game_BattlerBase_resetStateCounts','applySkillsStatesCoreEffects','tAyQE','tsyiO','TurnOffsetY','Name','slipTp','cuQya','GMsVs','process_VisuMZ_SkillsStatesCore_Skill_Notetags','OAINh','AGI','onAddStateCustomJS','HEGgx','isUseSkillsStatesCoreUpdatedLayout','commandNameWindowCenter','process_VisuMZ_SkillsStatesCore_State_Notetags','max','convertTargetToStateOriginKey','MAT','mainFontSize','getStateRetainType','totalStateCategoryAffected','534974doNpLI','Game_BattlerBase_increaseBuff','equips','helpAreaTop','contents','hAmMs','drawActorBuffRates','statePassiveConditionJS','ParseSkillNotetags','Scene_Boot_onDatabaseLoaded','opacity','testSkillStatesCoreNotetags','GTbtZ','die','cgrce','stateHpSlipDamageJS','removeBuff','NzOuF','canUse','ActionEndUpdate','States','onExpireStateGlobalJS','Parse_Notetags_Skill_JS','ayXYm','_battler','tfFlm','overwriteBuffTurns','drawTextEx','#%1','helpAreaHeight','CoreEngine','Game_BattlerBase_eraseState','StackDebuffMax','commandStyle','EiIwA','wBPJK','ColorBuff','_stored_debuffColor','yxIGo','debuffColor','stateHpSlipHealJS','paramValueByName','OcuPg','_itemWindow','Parse_Notetags_State_Category','setStypeId','StackBuffMax','YhxoO','success','cATLh','maxCols','wvWaG','gaugeRate','_states','Vnala','rqBaO','fontSize','MXAqA','TextJS','checkShowHideSkillNotetags','getStateData','eSmpS','onAddStateGlobalJS','eraseBuff','actions','gGkvl','fxqQH','PayJS','UsUDt','onExpireDebuff','skillVisibleJS','currentMaxValueSkillsStatesCore','match','QkfVn','_stateDisplay','XbjeP','Buffs','LUGUq','isLearnedSkill','_stateSteps','GroupDigits','call','dvxuI','heal','SxmRP','stateId','test','bitmap','skillTpCost','TurnFontSize','qpZsI','isPlaytest','KuOww','onEraseStateJS','DisplayedParams','ISpis','applyDebuffTurnManipulationEffects','Atrkn','meetsPassiveStateConditionClasses','fkoTb','VisuMZ_1_ItemsEquipsCore','_stypeIDs','recoverAll','gainSilentTp','drawActorStateData','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20enabled\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20enabled;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','isPassiveStateStackable','map','MDF','skillTypeWindowRect','commandName','constructor','STR','<enemy-%1>','checkShowHideBattleNotetags','373lxiMwe','GaugeCurrentJS','onExpireStateJS','placeExactGauge','AiHWH','getSkillIdWithName','IconStypeMagic','states','GwRan','hasSkill','center','_result','dwGTE','voSiY','shopStatusWindowRectSkillsStatesCore','buffLength','itemWindowRect','WTdge','makeAdditionalSkillCostText','isAlive','toLowerCase','getCurrentStateOriginKey','isStateCategoryAffected','isStateExpired','stateTpSlipHealJS','right','setStateOrigin','makeCommandList','BattleHiddenSkillTypes','Eciut','ConvertParams','currentValue','nHHbw','refresh','applyStateTurnManipulationEffects','1qZRlBo','_buffTurns','maxItems','reset','pilBt','zNaDJ','boxWidth','UuhLF','learnSkill','statesByCategory','_stateTurns','TNGLW','onAddDebuff','Dzxgi','Sprite_StateIcon_updateFrame','resetFontSettings','updateTurnDisplaySprite','NljpV','passiveStates','YVhcJ','setStateDisplay','drawActorIconsAllTurnCounters','canClearState','Game_BattlerBase_overwriteBuffTurns','%1%','HiddenSkillTypes','shopStatusWindowRect','twRbF','meetsPassiveStateGlobalConditionJS','gaugeBackColor','drawItemStyleIconText','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20condition\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20condition;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','Window_StatusBase_placeGauge','2CACTEp','uiHelpPosition','onEraseDebuffJS','drawItem','Scene_Skill_skillTypeWindowRect','Game_BattlerBase_refresh','DataFontSize','666131TBxkgU','LvZox','createCommandNameWindow','Game_Actor_skillTypes','RNUcf','DataOffsetY','Game_Battler_addDebuff','updateHelp','maxSlipDamage','_checkingPassiveStates','meetsPassiveStateConditionSwitches','IconStypeNorm','drawActorStateTurns','umSEy','setStateTurns','alterSkillName','ColorPositive','GigBu','WFRfW','Window_SkillList_updateHelp','drawActorBuffTurns','recover\x20all','item','setStatusWindow','QBnif','488187qyKxwm','onEraseBuffJS','ZsTEl','SkillSceneStatusBgType','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20this._actor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20this._actor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20this._actor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20this._actor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','rvHzz','Game_BattlerBase_skillTpCost','currentMaxValue','push','stateColor','initMembersSkillsStatesCore','Game_BattlerBase_buffIconIndex','addState','setup','Window_SkillStatus_refresh','statusWindowRectSkillsStatesCore','keys','textSizeEx','regenerateAllSkillsStatesCore','PassiveStates','fillRect','_stateRetainType','zqMPN','changeOutlineColor','skills','ListWindowCols','checkSkillConditionsSwitchNotetags','innerWidth','clearStatesWithStateRetain','gOyJm','hasState','useDigitGrouping','hide','PlIIu','gainHp','applyItemUserEffect','skill','includes','kzVJP','Scene_Skill_itemWindowRect','canPaySkillCost','value','currentValueSkillsStatesCore','ParseClassIDs','addDebuff','slice','udXTq','isUseModernControls','fRZJe','drawSkillCost','onRemoveState','tpCost','isBuffOrDebuffAffected','buff','sBXAj','none','skillMpCost','eraseState','Game_Action_testApply','redraw','Window_StatusBase_drawActorIcons','stateExpireJS','Scene_Skill_statusWindowRect','format','icon','makeCurrentTroopUniqueID','callUpdateHelp','\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20origin\x20=\x20this.getStateOrigin(stateId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20$dataStates[stateId];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20this.getCurrentStateActiveUser();\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20origin;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20','stateTurns','onDatabaseLoaded','commandNameWindowDrawText','swuvd','addStateTurns','_colorCache','name','rNMLG','meetsSkillConditionsGlobalJS','gradientFillRect','GaugeDrawJS','isStateRestrict','UhPAJ','2267qmMUuS','isSkillCostShown','Game_Unit_isAllDead','ALL','buttonAssistText1','stateAddJS','QcPXw','updateCommandNameWindow','wMdXO','NUM','removeStatesAuto','checkShowHideJS','addPassiveStatesByPluginParameters','mainAreaHeight','Settings','damage','allIcons','Enemy','drawItemStyleIcon','onAddDebuffJS','onAddStateMakeCustomSlipValues','qOCmn','BjJEF','getStateDisplay','action','Zxmxw','EMPlH','Sprite_Gauge_initMembers','placeGauge','iconHeight','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','getCurrentTroopUniqueID','itemWindowRectSkillsStatesCore','checkShowHideSwitchNotetags','Game_Battler_regenerateAll','JINgC','convertPassiveStates','itemTextAlign','iconText','shopStatusWidth','auto','nVLyt','slipHp','Game_BattlerBase_die','UlWkg','clearStateRetainType','fsJzi','461738iQtlzo','meetsPassiveStateConditionJS','active','Game_Actor_forgetSkill','SkillsStatesCore','lineHeight','forgetSkill','BvZUL','SPQpF','KRAWT','createItemWindow','replace','skillCostSeparator','colSpacing','wkvjf','Window_SkillList_includes','_skillTypeWindow','toUpperCase','addDebuffTurns','sETLY','isBuffAffected','trim','wnpID','%1\x20%2\x20%3','setStateData','isStateResist','pmLIX','resetStateCounts','status','remove','fpulo','drawText','updatedLayoutStyle','getStateReapplyRulings','removeState','QeSvm','initMembers','description','MAXHP','_checkingVisuMzPassiveStateObjects','qakMf','Sprite_Gauge_redraw','Costs','checkShowHideNotetags','setDebuffTurns','AJepK','Game_Battler_addState','Sprite_Gauge_currentValue','ColorDebuff','groupDefeat','setItem','zYMpp','Scene_Skill_helpWindowRect','prototype','Window_SkillList_setActor','MaxTurns','normalColor','ohBMh','onAddState','setPassiveStateSlipDamageJS','setActor','lAyUW','JfzQf','isBuffPrevented','multiclasses','totalStateCategory','_classIDs','onAddBuffJS','Sprite_Gauge_currentMaxValue','VFzXU','changeTextColor','AnfzN','buttonAssistSwitch','adjustItemWidthByShopStatus','index','Parse_Notetags_Skill_Cost','priority','_categoryWindow','onAddStateJS','nAZuv','_skills','buffColor','helpWindowRect','drawExtendedSkillsStatesCoreStatus','height','addChild','clear','_scene','DataOffsetX','includesSkillsStatesCore','getColor','WWOzH','helpWindowRectSkillsStatesCore','kNSEU','removeStatesByCategoryAll','retrieveStateColor','Sprite_StateIcon_loadBitmap','magicSkills','cTikr','Sprite_Gauge_setup','NDTjg','skillTypeWindowRectSkillsStatesCore','text','rCQeF','parameters','mvuFF','avNaA','vIDoj','Param','_cache','Parse_Notetags_State_SlipEffectJS','UoBtr','jDzSJ','user','mpCost','_actor','NVzhz','createTurnDisplaySprite','juffz','dXkNL','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','TurnOffsetX','stateTpSlipDamageJS','clearStateDisplay','innerHeight','_lastStatesActionEndFrameCount','CalcJS','buffIconIndex','usableSkills','updateStateTurns','setStateRetainType','onAddBuffGlobalJS','Parse_Notetags_State_PassiveJS','Game_BattlerBase_decreaseBuff','ARRAYJSON','createShopStatusWindow','uiInputPosition','addWindow','round','Game_BattlerBase_states','KuGFj','parse','onAddBuff','SeHku','loadBitmap','yglRI','isRightInputMode','exit','passiveStateObjects','addBuff','note','drawActorIcons','Game_BattlerBase_eraseBuff','increaseBuff','changePaintOpacity','LvTeZ','itemAt','57774rDFANs','ShowData','applyBuffTurnManipulationEffects','addPassiveStates','yTDJB','stateMaximumTurns','uiMenuStyle','_turnDisplaySprite','ANY','isActor','mainCommandWidth','BdgjO','Game_BattlerBase_meetsSkillConditions','isSkillUsableForAutoBattle','makeSuccess','removeBuffsAuto','sXTwS','death','uMpsH','getStateOriginByKey','ahwSk','ARRAYFUNC','skillEnableJS','onExpireBuffJS','ShowJS','buffTurns','version','ShowTurns','getColorDataFromPluginParameters','stypeId','isStateAddable','<actor-%1>','BattleManager_endAction','onEraseBuffGlobalJS','_subject','frameCount','addBuffTurns','inBattle','SkillSceneAdjustSkillList','stateMpSlipHealJS','ARRAYEVAL','rgba(0,\x200,\x200,\x201)','anchor','xyziD','createSkillCostText','isDebuffAffected','updateStatesActionEnd','MSlFt','resetTextColor','outlineColor','autoRemovalTiming','regenerateAll','categories','_stored_buffColor','shift','width','fontFace','clearStateOrigin','YCVcO','pwEfD','gaugeLineHeight','onEraseBuff','members','checkSkillConditionsNotetags','mnmEV','Game_Battler_addBuff','QLHNb','VisuMZ_2_ClassChangeSystem','_statusWindow','gVlKI','state','stateEraseJS','EnableLayout','indexOf','add','length','onExpireBuff','testApply','commandStyleCheck','<troop-%1>','actor','currentClass','HlBJC','VisuMZ_1_MainMenuCore','LayoutStyle','Game_BattlerBase_initMembers','_stateMaxTurns','_buffs','onEraseStateCustomJS','mainAreaTop','setBackgroundType','Actor','onEraseStateGlobalJS','Game_BattlerBase_clearStates','getClassIdWithName','slipMp','applyStateCategoryRemovalEffects','_tempBattler','CjBOK','Game_BattlerBase_recoverAll','Global','SkillMenuStatusRect','1BrUzUQ','ParseAllNotetags','meetsSkillConditions','_tempActor','jqRqg','CanPayJS','_stateOrigin','_commandNameWindow','Window_SkillList_maxCols','BHUiL','greater','gaGpG','rXqAY','Fwjcq','gainMp','EpYZu','paySkillCost','iconIndex','getStypeIdWithName','concat','isMaxDebuffAffected','createAllSkillCostText','Parse_Notetags_State_ApplyRemoveLeaveJS','clamp','_shopStatusWindow','dkuHD','setupSkillsStatesCore','iconWidth','scrollTo','windowPadding','xBvoZ','split','VisuMZ_0_CoreEngine','skillTypes','addCommand','isStateAffected','MiZes','log','ParseStateNotetags','sort','_currentTroopUniqueID','ColorNegative','_stateIDs','BZioH','isGroupDefeatStateAffected','IjzjR','commandNameWindowDrawBackground','isAllDead','JSON','_costSettings','menuActor','filter','ceil','getStateOrigin','Window_SkillList_drawItem','untitled','SOWuM','_hidden','checkSkillTypeMatch','_stypeId','3396994zPRHru','convertGaugeTypeSkillsStatesCore','isBuffExpired','ShowShopStatus','Game_Action_applyItemUserEffect','Game_Battler_isStateAddable','fontBold','tnrBL','addPassiveStatesTraitSets','_skillIDs','drawExtendedParameter','Game_Actor_learnSkill','meetsSkillConditionsEnableJS','onEraseDebuffGlobalJS','Scene_Skill_createItemWindow','getCurrentStateActiveUser','ATK','McxBL','isMaxBuffAffected','mainFontFace','EcncR','fINRV','onRegenerateCustomStateDamageOverTime','aGGbF','vtgAL','getStateIdWithName','onEraseDebuff','RVFAY','onExpireState','DEF','enemy','ReWFr','vGilK','number','process_VisuMZ_SkillsStatesCore_Notetags','removeStatesByCategory','textColor','xJzGX','updateFrame','ReapplyRules','clearStateData','addPassiveStatesFromOtherPlugins','itemLineRect','POSITIVE','onAddDebuffGlobalJS','SYbGm','NEGATIVE','decreaseBuff','\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20%2\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20origin\x20=\x20this.getStateOrigin(stateId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20$dataStates[stateId];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20origin;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20origin;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20%2\x20=\x20Math.round(Math.max(0,\x20%2)\x20*\x20%3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.setStateData(stateId,\x20\x27%4\x27,\x20%2);\x0a\x20\x20\x20\x20','_phase','drawFullGauge','allowCreateShopStatusWindow','Caxom','isBottomHelpMode','statusWindowRect','LUK','_stateData','floor'];const _0x2431ab=_0x389c;(function(_0x96b8a6,_0x496c10){const _0x31f8c7=_0x389c;while(!![]){try{const _0x2d42b2=parseInt(_0x31f8c7(0x2c2))+parseInt(_0x31f8c7(0x1ba))*parseInt(_0x31f8c7(0x220))+-parseInt(_0x31f8c7(0x399))*-parseInt(_0x31f8c7(0x296))+-parseInt(_0x31f8c7(0x379))*-parseInt(_0x31f8c7(0x419))+parseInt(_0x31f8c7(0x380))*parseInt(_0x31f8c7(0x358))+-parseInt(_0x31f8c7(0x3ea))*-parseInt(_0x31f8c7(0x335))+-parseInt(_0x31f8c7(0x25c));if(_0x2d42b2===_0x496c10)break;else _0x96b8a6['push'](_0x96b8a6['shift']());}catch(_0x1cb405){_0x96b8a6['push'](_0x96b8a6['shift']());}}}(_0x47d5,0x9445e));function _0x389c(_0x478368,_0xa1da02){_0x478368=_0x478368-0x16d;let _0x47d5ad=_0x47d5[_0x478368];return _0x47d5ad;}var label=_0x2431ab(0x41d),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x2431ab(0x253)](function(_0x171a25){const _0x2d20c0=_0x2431ab;return _0x171a25[_0x2d20c0(0x435)]&&_0x171a25[_0x2d20c0(0x43e)][_0x2d20c0(0x3be)]('['+label+']');})[0x0];VisuMZ[label][_0x2431ab(0x3f8)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x2431ab(0x353)]=function(_0x9a6d66,_0x1025a1){const _0x78548=_0x2431ab;for(const _0x2a41c7 in _0x1025a1){if(_0x78548(0x31e)===_0x78548(0x31e)){if(_0x2a41c7[_0x78548(0x30a)](/(.*):(.*)/i)){if(_0x78548(0x191)===_0x78548(0x43c)){function _0x598b3e(){const _0x36be89=_0x78548;_0x44523d[_0x36be89(0x2a5)](_0x1435e2,_0x170a55),this['makeSuccess'](_0x3ae70b);}}else{const _0x4b7b78=String(RegExp['$1']),_0x2f8888=String(RegExp['$2'])[_0x78548(0x42a)]()[_0x78548(0x42e)]();let _0x16febe,_0x5676d1,_0x68fc;switch(_0x2f8888){case _0x78548(0x3f3):_0x16febe=_0x1025a1[_0x2a41c7]!==''?Number(_0x1025a1[_0x2a41c7]):0x0;break;case _0x78548(0x29e):_0x5676d1=_0x1025a1[_0x2a41c7]!==''?JSON['parse'](_0x1025a1[_0x2a41c7]):[],_0x16febe=_0x5676d1[_0x78548(0x32d)](_0xf0f2d7=>Number(_0xf0f2d7));break;case'EVAL':_0x16febe=_0x1025a1[_0x2a41c7]!==''?eval(_0x1025a1[_0x2a41c7]):null;break;case _0x78548(0x1e2):_0x5676d1=_0x1025a1[_0x2a41c7]!==''?JSON['parse'](_0x1025a1[_0x2a41c7]):[],_0x16febe=_0x5676d1[_0x78548(0x32d)](_0x3ca415=>eval(_0x3ca415));break;case _0x78548(0x250):_0x16febe=_0x1025a1[_0x2a41c7]!==''?JSON[_0x78548(0x1aa)](_0x1025a1[_0x2a41c7]):'';break;case _0x78548(0x1a3):_0x5676d1=_0x1025a1[_0x2a41c7]!==''?JSON[_0x78548(0x1aa)](_0x1025a1[_0x2a41c7]):[],_0x16febe=_0x5676d1[_0x78548(0x32d)](_0x1c6157=>JSON['parse'](_0x1c6157));break;case'FUNC':_0x16febe=_0x1025a1[_0x2a41c7]!==''?new Function(JSON[_0x78548(0x1aa)](_0x1025a1[_0x2a41c7])):new Function('return\x200');break;case _0x78548(0x1cf):_0x5676d1=_0x1025a1[_0x2a41c7]!==''?JSON[_0x78548(0x1aa)](_0x1025a1[_0x2a41c7]):[],_0x16febe=_0x5676d1['map'](_0x196260=>new Function(JSON[_0x78548(0x1aa)](_0x196260)));break;case _0x78548(0x332):_0x16febe=_0x1025a1[_0x2a41c7]!==''?String(_0x1025a1[_0x2a41c7]):'';break;case'ARRAYSTR':_0x5676d1=_0x1025a1[_0x2a41c7]!==''?JSON['parse'](_0x1025a1[_0x2a41c7]):[],_0x16febe=_0x5676d1[_0x78548(0x32d)](_0x3132ee=>String(_0x3132ee));break;case'STRUCT':_0x68fc=_0x1025a1[_0x2a41c7]!==''?JSON[_0x78548(0x1aa)](_0x1025a1[_0x2a41c7]):{},_0x9a6d66[_0x4b7b78]={},VisuMZ['ConvertParams'](_0x9a6d66[_0x4b7b78],_0x68fc);continue;case'ARRAYSTRUCT':_0x5676d1=_0x1025a1[_0x2a41c7]!==''?JSON[_0x78548(0x1aa)](_0x1025a1[_0x2a41c7]):[],_0x16febe=_0x5676d1['map'](_0x45271d=>VisuMZ['ConvertParams']({},JSON[_0x78548(0x1aa)](_0x45271d)));break;default:continue;}_0x9a6d66[_0x4b7b78]=_0x16febe;}}}else{function _0x368c59(){return _0x42350f;}}}return _0x9a6d66;},(_0x1ea3fb=>{const _0x376c10=_0x2431ab,_0x454c22=_0x1ea3fb[_0x376c10(0x3e3)];for(const _0xff93c7 of dependencies){if(_0x376c10(0x321)!==_0x376c10(0x187)){if(!Imported[_0xff93c7]){if(_0x376c10(0x1c5)===_0x376c10(0x42f)){function _0x466246(){const _0x420a83=_0x376c10;this[_0x420a83(0x43b)](_0x42fd48['id']),this[_0x420a83(0x278)](_0x15beee['id']),this[_0x420a83(0x2d7)](_0x2cbf50['id']);}}else{alert(_0x376c10(0x195)['format'](_0x454c22,_0xff93c7)),SceneManager[_0x376c10(0x1b0)]();break;}}}else{function _0x26039e(){const _0x29e1bc=_0x376c10;if(this[_0x29e1bc(0x25b)]===_0x3ceb0b)return;this[_0x29e1bc(0x25b)]=_0x2caf68,this[_0x29e1bc(0x356)](),this[_0x29e1bc(0x23c)](0x0,0x0),this[_0x29e1bc(0x1fe)]&&this[_0x29e1bc(0x1fe)][_0x29e1bc(0x331)]===_0x2f4fbf&&this[_0x29e1bc(0x1fe)][_0x29e1bc(0x44b)](this['itemAt'](0x0));}}}const _0x5969af=_0x1ea3fb[_0x376c10(0x43e)];if(_0x5969af[_0x376c10(0x30a)](/\[Version[ ](.*?)\]/i)){const _0x4b4744=Number(RegExp['$1']);_0x4b4744!==VisuMZ[label][_0x376c10(0x1d4)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x376c10(0x3d8)](_0x454c22,_0x4b4744)),SceneManager[_0x376c10(0x1b0)]());}if(_0x5969af[_0x376c10(0x30a)](/\[Tier[ ](\d+)\]/i)){if(_0x376c10(0x2f9)!==_0x376c10(0x2f9)){function _0x3f2697(){return!![];}}else{const _0x64d195=Number(RegExp['$1']);if(_0x64d195<tier){if('GigBu'===_0x376c10(0x391))alert(_0x376c10(0x408)[_0x376c10(0x3d8)](_0x454c22,_0x64d195,tier)),SceneManager[_0x376c10(0x1b0)]();else{function _0x591584(){const _0x7a40b5=_0x376c10;return _0xe5e234[_0x7a40b5(0x41d)][_0x7a40b5(0x3f8)][_0x7a40b5(0x299)][_0x7a40b5(0x29f)]['call'](this,_0x17d188);}}}else{if(_0x376c10(0x38d)===_0x376c10(0x456)){function _0x21c7a6(){this['_stateRetainType']='';}}else tier=Math[_0x376c10(0x2bc)](_0x64d195,tier);}}}VisuMZ[_0x376c10(0x353)](VisuMZ[label][_0x376c10(0x3f8)],_0x1ea3fb[_0x376c10(0x185)]);})(pluginData),VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x2cb)]=Scene_Boot['prototype'][_0x2431ab(0x3de)],Scene_Boot[_0x2431ab(0x44e)][_0x2431ab(0x3de)]=function(){const _0x5e7fac=_0x2431ab;VisuMZ['SkillsStatesCore'][_0x5e7fac(0x2cb)]['call'](this),this[_0x5e7fac(0x27e)]();},Scene_Boot['prototype']['process_VisuMZ_SkillsStatesCore_Notetags']=function(){const _0x5700c5=_0x2431ab;if(VisuMZ[_0x5700c5(0x221)])return;this[_0x5700c5(0x2b4)](),this['process_VisuMZ_SkillsStatesCore_State_Notetags']();},Scene_Boot[_0x2431ab(0x44e)][_0x2431ab(0x2b4)]=function(){const _0x14045f=_0x2431ab;for(const _0x508cf0 of $dataSkills){if(!_0x508cf0)continue;VisuMZ[_0x14045f(0x41d)][_0x14045f(0x464)](_0x508cf0),VisuMZ[_0x14045f(0x41d)][_0x14045f(0x2d8)](_0x508cf0);}},Scene_Boot['prototype'][_0x2431ab(0x2bb)]=function(){const _0x21b0fe=_0x2431ab;for(const _0x1a15cf of $dataStates){if(_0x21b0fe(0x2f3)===_0x21b0fe(0x363)){function _0x54df98(){const _0x7c7c22=_0x21b0fe;this[_0x7c7c22(0x226)]=this[_0x7c7c22(0x226)]||{};const _0x19cec8=_0x2ed4a5?this['convertTargetToStateOriginKey'](_0x17b575):this['getCurrentStateOriginKey']();this[_0x7c7c22(0x226)][_0x5f51b3]=_0x19cec8;}}else{if(!_0x1a15cf)continue;VisuMZ['SkillsStatesCore']['Parse_Notetags_State_Category'](_0x1a15cf),VisuMZ[_0x21b0fe(0x41d)][_0x21b0fe(0x1a1)](_0x1a15cf),VisuMZ['SkillsStatesCore'][_0x21b0fe(0x18b)](_0x1a15cf),VisuMZ[_0x21b0fe(0x41d)]['Parse_Notetags_State_ApplyRemoveLeaveJS'](_0x1a15cf);}}},VisuMZ['SkillsStatesCore'][_0x2431ab(0x2ca)]=VisuMZ[_0x2431ab(0x2ca)],VisuMZ[_0x2431ab(0x2ca)]=function(_0x294798){const _0x94d055=_0x2431ab;VisuMZ[_0x94d055(0x41d)]['ParseSkillNotetags'][_0x94d055(0x313)](this,_0x294798),VisuMZ[_0x94d055(0x41d)][_0x94d055(0x464)](_0x294798),VisuMZ[_0x94d055(0x41d)][_0x94d055(0x2d8)](_0x294798);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x246)]=VisuMZ[_0x2431ab(0x246)],VisuMZ['ParseStateNotetags']=function(_0x2d8c5b){const _0x86ba33=_0x2431ab;VisuMZ[_0x86ba33(0x41d)][_0x86ba33(0x246)][_0x86ba33(0x313)](this,_0x2d8c5b),VisuMZ[_0x86ba33(0x41d)][_0x86ba33(0x2ee)](_0x2d8c5b),VisuMZ[_0x86ba33(0x41d)][_0x86ba33(0x1a1)](_0x2d8c5b),VisuMZ['SkillsStatesCore'][_0x86ba33(0x18b)](_0x2d8c5b),VisuMZ[_0x86ba33(0x41d)][_0x86ba33(0x236)](_0x2d8c5b);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x464)]=function(_0x598567){const _0x190ff1=_0x2431ab,_0xb355a8=_0x598567[_0x190ff1(0x1b3)];if(_0xb355a8[_0x190ff1(0x30a)](/<MP COST:[ ](\d+)>/i)){if(_0x190ff1(0x2aa)===_0x190ff1(0x352)){function _0x87935f(){const _0x34d605=_0x190ff1;for(const _0x303f99 of this['states']()){this[_0x34d605(0x34c)](_0x303f99['id'])&&_0x303f99[_0x34d605(0x1ec)]===_0x435c65&&(this[_0x34d605(0x43b)](_0x303f99['id']),this['onExpireState'](_0x303f99['id']),this[_0x34d605(0x2d7)](_0x303f99['id']));}}}else _0x598567[_0x190ff1(0x18f)]=Number(RegExp['$1']);}_0xb355a8[_0x190ff1(0x30a)](/<TP COST:[ ](\d+)>/i)&&(_0x598567[_0x190ff1(0x3cc)]=Number(RegExp['$1']));},VisuMZ[_0x2431ab(0x41d)]['skillEnableJS']={},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x308)]={},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x2d8)]=function(_0x529e05){const _0x3e1f5a=_0x2431ab,_0x39ddd5=_0x529e05[_0x3e1f5a(0x1b3)];if(_0x39ddd5[_0x3e1f5a(0x30a)](/<JS SKILL ENABLE>\s*([\s\S]*)\s*<\/JS SKILL ENABLE>/i)){const _0x377e98=String(RegExp['$1']),_0x1bf0bd=_0x3e1f5a(0x32b)[_0x3e1f5a(0x3d8)](_0x377e98);VisuMZ[_0x3e1f5a(0x41d)][_0x3e1f5a(0x1d0)][_0x529e05['id']]=new Function('skill',_0x1bf0bd);}if(_0x39ddd5['match'](/<JS SKILL VISIBLE>\s*([\s\S]*)\s*<\/JS SKILL VISIBLE>/i)){if('pLdcm'!==_0x3e1f5a(0x1ac)){const _0x210ba9=String(RegExp['$1']),_0x5e422b=_0x3e1f5a(0x39d)[_0x3e1f5a(0x3d8)](_0x210ba9);VisuMZ['SkillsStatesCore'][_0x3e1f5a(0x308)][_0x529e05['id']]=new Function(_0x3e1f5a(0x3bd),_0x5e422b);}else{function _0x3082cd(){const _0x90c1af=_0x3e1f5a;for(const _0x1c02d9 of _0x3b5d48){_0x1c02d9[_0x90c1af(0x30a)](/<(.*)[ ]DEBUFF TURNS:[ ]([\+\-]\d+)>/i);const _0xebf396=_0x59b0de['indexOf'](_0xb20366(_0x326d43['$1'])[_0x90c1af(0x42a)]()),_0x2a6607=_0x129583(_0x185b69['$2']);_0xebf396>=0x0&&(_0x365bc7[_0x90c1af(0x42b)](_0xebf396,_0x2a6607),this[_0x90c1af(0x1c8)](_0x2f6dd9));}}}}},VisuMZ['SkillsStatesCore']['Parse_Notetags_State_Category']=function(_0x2f092d){const _0x9bb6d0=_0x2431ab;_0x2f092d[_0x9bb6d0(0x1ee)]=[_0x9bb6d0(0x3ed),_0x9bb6d0(0x1c2)];const _0x57353b=_0x2f092d[_0x9bb6d0(0x1b3)],_0x33875=_0x57353b[_0x9bb6d0(0x30a)](/<(?:CATEGORY|CATEGORIES):[ ](.*)>/gi);if(_0x33875)for(const _0x210f95 of _0x33875){if('Syfjj'!=='RraDZ'){_0x210f95[_0x9bb6d0(0x30a)](/<(?:CATEGORY|CATEGORIES):[ ](.*)>/gi);const _0x33c1e8=String(RegExp['$1'])[_0x9bb6d0(0x42a)]()[_0x9bb6d0(0x42e)]()['split'](',');for(const _0x7c7018 of _0x33c1e8){_0x2f092d[_0x9bb6d0(0x1ee)][_0x9bb6d0(0x3a1)](_0x7c7018['trim']());}}else{function _0x2558c3(){_0x3313a4=_0x5b901f(_0x2c2a62['$1']),_0x4e4454=_0x294633(_0x4134b1['$2']);}}}if(_0x57353b[_0x9bb6d0(0x30a)](/<(?:CATEGORY|CATEGORIES)>\s*([\s\S]*)\s*<\/(?:CATEGORY|CATEGORIES)>/i)){const _0x3616fc=RegExp['$1']['split'](/[\r\n]+/);for(const _0x55be77 of _0x3616fc){if('wMdXO'===_0x9bb6d0(0x3f2))_0x2f092d[_0x9bb6d0(0x1ee)]['push'](_0x55be77['toUpperCase']()[_0x9bb6d0(0x42e)]());else{function _0x4d4b3e(){const _0x441ae8=_0x9bb6d0;return!this['isStateResist'](_0x1d533f)&&!this[_0x441ae8(0x3e8)](_0x57de0f)&&!this[_0x441ae8(0x340)]['isStateRemoved'](_0xecbf85);}}}}_0x57353b[_0x9bb6d0(0x30a)](/<POSITIVE STATE>/i)&&_0x2f092d[_0x9bb6d0(0x1ee)][_0x9bb6d0(0x3a1)](_0x9bb6d0(0x287)),_0x57353b[_0x9bb6d0(0x30a)](/<NEGATIVE STATE>/i)&&_0x2f092d['categories'][_0x9bb6d0(0x3a1)](_0x9bb6d0(0x28a));},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x2c9)]={},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x1a1)]=function(_0x12a47e){const _0x12034b=_0x2431ab,_0x13c4f2=_0x12a47e[_0x12034b(0x1b3)];if(_0x13c4f2['match'](/<JS PASSIVE CONDITION>\s*([\s\S]*)\s*<\/JS PASSIVE CONDITION>/i)){const _0x41b4c5=String(RegExp['$1']),_0x102306=_0x12034b(0x377)[_0x12034b(0x3d8)](_0x41b4c5);VisuMZ[_0x12034b(0x41d)]['statePassiveConditionJS'][_0x12a47e['id']]=new Function(_0x12034b(0x200),_0x102306);}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x2d1)]={},VisuMZ['SkillsStatesCore'][_0x2431ab(0x2ea)]={},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x2a4)]={},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x1e1)]={},VisuMZ[_0x2431ab(0x41d)]['stateTpSlipDamageJS']={},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x34d)]={},VisuMZ[_0x2431ab(0x41d)]['Parse_Notetags_State_SlipEffectJS']=function(_0x143b93){const _0x57611a=_0x2431ab,_0x1b0440=_0x143b93['note'],_0x304201=_0x57611a(0x28c);if(_0x1b0440[_0x57611a(0x30a)](/<JS HP SLIP DAMAGE>\s*([\s\S]*)\s*<\/JS HP SLIP DAMAGE>/i)){if(_0x57611a(0x244)===_0x57611a(0x21c)){function _0xdf4cc5(){const _0x430978=_0x57611a;_0x29602b[_0x430978(0x41d)][_0x430978(0x2ca)][_0x430978(0x313)](this,_0x1b9003),_0x382475[_0x430978(0x41d)][_0x430978(0x464)](_0x3483b2),_0x3056e4[_0x430978(0x41d)][_0x430978(0x2d8)](_0xa7e98f);}}else{const _0x384434=String(RegExp['$1']),_0x40a852=_0x304201[_0x57611a(0x3d8)](_0x384434,_0x57611a(0x3f9),-0x1,_0x57611a(0x414));VisuMZ[_0x57611a(0x41d)][_0x57611a(0x2d1)][_0x143b93['id']]=new Function(_0x57611a(0x317),_0x40a852);}}else{if(_0x1b0440['match'](/<JS HP SLIP HEAL>\s*([\s\S]*)\s*<\/JS HP SLIP HEAL>/i)){const _0x3297ee=String(RegExp['$1']),_0x1cc6a3=_0x304201['format'](_0x3297ee,_0x57611a(0x315),0x1,'slipHp');VisuMZ[_0x57611a(0x41d)]['stateHpSlipHealJS'][_0x143b93['id']]=new Function('stateId',_0x1cc6a3);}}if(_0x1b0440['match'](/<JS MP SLIP DAMAGE>\s*([\s\S]*)\s*<\/JS MP SLIP DAMAGE>/i)){const _0x3c2991=String(RegExp['$1']),_0x129e85=_0x304201['format'](_0x3c2991,_0x57611a(0x3f9),-0x1,'slipMp');VisuMZ[_0x57611a(0x41d)][_0x57611a(0x2a4)][_0x143b93['id']]=new Function(_0x57611a(0x317),_0x129e85);}else{if(_0x1b0440[_0x57611a(0x30a)](/<JS MP SLIP HEAL>\s*([\s\S]*)\s*<\/JS MP SLIP HEAL>/i)){const _0xd8a38f=String(RegExp['$1']),_0x3f1503=_0x304201['format'](_0xd8a38f,_0x57611a(0x315),0x1,_0x57611a(0x219));VisuMZ[_0x57611a(0x41d)][_0x57611a(0x1e1)][_0x143b93['id']]=new Function(_0x57611a(0x317),_0x3f1503);}}if(_0x1b0440[_0x57611a(0x30a)](/<JS TP SLIP DAMAGE>\s*([\s\S]*)\s*<\/JS TP SLIP DAMAGE>/i)){if(_0x57611a(0x341)==='cRIdh'){function _0x46c069(){const _0x343a92=_0x57611a,_0x5352ec=_0xe76d0a(_0x2b4fc0['$1']);if(_0x38eeaf[_0x343a92(0x34b)](_0x5352ec))return!![];}}else{const _0x3b1fe6=String(RegExp['$1']),_0x15b444=_0x304201[_0x57611a(0x3d8)](_0x3b1fe6,'damage',-0x1,_0x57611a(0x2b1));VisuMZ[_0x57611a(0x41d)][_0x57611a(0x197)][_0x143b93['id']]=new Function(_0x57611a(0x317),_0x15b444);}}else{if(_0x1b0440[_0x57611a(0x30a)](/<JS TP SLIP HEAL>\s*([\s\S]*)\s*<\/JS TP SLIP HEAL>/i)){if(_0x57611a(0x3ba)!==_0x57611a(0x39b)){const _0x410fa3=String(RegExp['$1']),_0x29a9a2=_0x304201[_0x57611a(0x3d8)](_0x410fa3,_0x57611a(0x315),0x1,_0x57611a(0x2b1));VisuMZ['SkillsStatesCore'][_0x57611a(0x34d)][_0x143b93['id']]=new Function(_0x57611a(0x317),_0x29a9a2);}else{function _0x1c817c(){const _0xb80f96=_0x57611a,_0x338366=_0x14737e[_0xb80f96(0x1b3)];if(_0x3bcc83==='death'&&_0x338366[_0xb80f96(0x30a)](/<NO DEATH CLEAR>/i))return![];if(_0x59ea20===_0xb80f96(0x395)&&_0x338366[_0xb80f96(0x30a)](/<NO RECOVER ALL CLEAR>/i))return![];}}}}},VisuMZ[_0x2431ab(0x41d)]['stateAddJS']={},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x201)]={},VisuMZ['SkillsStatesCore'][_0x2431ab(0x3d6)]={},VisuMZ['SkillsStatesCore'][_0x2431ab(0x236)]=function(_0x3f198e){const _0x69c7f2=_0x2431ab,_0x515c73=_0x3f198e[_0x69c7f2(0x1b3)],_0x10d65d=_0x69c7f2(0x3dc);if(_0x515c73[_0x69c7f2(0x30a)](/<JS ON ADD STATE>\s*([\s\S]*)\s*<\/JS ON ADD STATE>/i)){const _0x38ebfc=String(RegExp['$1']),_0x35660e=_0x10d65d[_0x69c7f2(0x3d8)](_0x38ebfc);VisuMZ[_0x69c7f2(0x41d)][_0x69c7f2(0x3ef)][_0x3f198e['id']]=new Function(_0x69c7f2(0x317),_0x35660e);}if(_0x515c73[_0x69c7f2(0x30a)](/<JS ON ERASE STATE>\s*([\s\S]*)\s*<\/JS ON ERASE STATE>/i)){if(_0x69c7f2(0x24d)!==_0x69c7f2(0x186)){const _0x1f9acd=String(RegExp['$1']),_0x5b9ffc=_0x10d65d[_0x69c7f2(0x3d8)](_0x1f9acd);VisuMZ['SkillsStatesCore'][_0x69c7f2(0x201)][_0x3f198e['id']]=new Function(_0x69c7f2(0x317),_0x5b9ffc);}else{function _0x3cbf2f(){const _0x40cbf6=_0x69c7f2;this[_0x40cbf6(0x248)]=_0x43c4ab[_0x40cbf6(0x1dd)];}}}if(_0x515c73['match'](/<JS ON EXPIRE STATE>\s*([\s\S]*)\s*<\/JS ON EXPIRE STATE>/i)){const _0x2b0cd2=String(RegExp['$1']),_0x3b7343=_0x10d65d['format'](_0x2b0cd2);VisuMZ[_0x69c7f2(0x41d)][_0x69c7f2(0x3d6)][_0x3f198e['id']]=new Function(_0x69c7f2(0x317),_0x3b7343);}},DataManager[_0x2431ab(0x218)]=function(_0x33be61){const _0x2dec4b=_0x2431ab;_0x33be61=_0x33be61[_0x2dec4b(0x42a)]()['trim'](),this['_classIDs']=this[_0x2dec4b(0x45b)]||{};if(this[_0x2dec4b(0x45b)][_0x33be61])return this[_0x2dec4b(0x45b)][_0x33be61];for(const _0x3b8f71 of $dataClasses){if(!_0x3b8f71)continue;let _0x144be9=_0x3b8f71[_0x2dec4b(0x3e3)];_0x144be9=_0x144be9[_0x2dec4b(0x424)](/\x1I\[(\d+)\]/gi,''),_0x144be9=_0x144be9[_0x2dec4b(0x424)](/\\I\[(\d+)\]/gi,''),this[_0x2dec4b(0x45b)][_0x144be9[_0x2dec4b(0x42a)]()[_0x2dec4b(0x42e)]()]=_0x3b8f71['id'];}return this[_0x2dec4b(0x45b)][_0x33be61]||0x0;},DataManager['getSkillTypes']=function(_0x1c4b00){const _0x1175d3=_0x2431ab;this['_stypeIDs']=this['_stypeIDs']||{};if(this[_0x1175d3(0x327)][_0x1c4b00['id']])return this[_0x1175d3(0x327)][_0x1c4b00['id']];this['_stypeIDs'][_0x1c4b00['id']]=[_0x1c4b00[_0x1175d3(0x1d7)]];if(_0x1c4b00[_0x1175d3(0x1b3)][_0x1175d3(0x30a)](/<SKILL[ ](?:TYPE|TYPES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xd7cb9c=JSON['parse']('['+RegExp['$1'][_0x1175d3(0x30a)](/\d+/g)+']');this[_0x1175d3(0x327)][_0x1c4b00['id']]=this[_0x1175d3(0x327)][_0x1c4b00['id']]['concat'](_0xd7cb9c);}else{if(_0x1c4b00[_0x1175d3(0x1b3)][_0x1175d3(0x30a)](/<SKILL[ ](?:TYPE|TYPES):[ ](.*)>/i)){const _0x1cdf79=RegExp['$1'][_0x1175d3(0x23f)](',');for(const _0x598cdc of _0x1cdf79){if('fxqQH'!==_0x1175d3(0x304)){function _0x357492(){const _0x515c59=_0x1175d3,_0x1a988c=_0xdb863d(_0x438e2e['$1']),_0x5acc7d=_0x29128e[_0x515c59(0x3d8)](_0x1a988c,_0x515c59(0x3f9),-0x1,_0x515c59(0x2b1));_0x1d796b[_0x515c59(0x41d)][_0x515c59(0x197)][_0xe23f72['id']]=new _0x1ef046(_0x515c59(0x317),_0x5acc7d);}}else{const _0x374be3=DataManager[_0x1175d3(0x232)](_0x598cdc);if(_0x374be3)this[_0x1175d3(0x327)][_0x1c4b00['id']][_0x1175d3(0x3a1)](_0x374be3);}}}}return this[_0x1175d3(0x327)][_0x1c4b00['id']];},DataManager['getStypeIdWithName']=function(_0x409870){const _0x38e132=_0x2431ab;_0x409870=_0x409870[_0x38e132(0x42a)]()[_0x38e132(0x42e)](),this['_stypeIDs']=this['_stypeIDs']||{};if(this[_0x38e132(0x327)][_0x409870])return this['_stypeIDs'][_0x409870];for(let _0x589b62=0x1;_0x589b62<0x64;_0x589b62++){if(!$dataSystem[_0x38e132(0x241)][_0x589b62])continue;let _0x405998=$dataSystem[_0x38e132(0x241)][_0x589b62][_0x38e132(0x42a)]()[_0x38e132(0x42e)]();_0x405998=_0x405998[_0x38e132(0x424)](/\x1I\[(\d+)\]/gi,''),_0x405998=_0x405998[_0x38e132(0x424)](/\\I\[(\d+)\]/gi,''),this[_0x38e132(0x327)][_0x405998]=_0x589b62;}return this[_0x38e132(0x327)][_0x409870]||0x0;},DataManager['getSkillIdWithName']=function(_0x1a2ee8){const _0x48b31a=_0x2431ab;_0x1a2ee8=_0x1a2ee8[_0x48b31a(0x42a)]()['trim'](),this[_0x48b31a(0x265)]=this[_0x48b31a(0x265)]||{};if(this['_skillIDs'][_0x1a2ee8])return this[_0x48b31a(0x265)][_0x1a2ee8];for(const _0x159c4e of $dataSkills){if(!_0x159c4e)continue;this[_0x48b31a(0x265)][_0x159c4e['name']['toUpperCase']()['trim']()]=_0x159c4e['id'];}return this['_skillIDs'][_0x1a2ee8]||0x0;},DataManager['getStateIdWithName']=function(_0x36d146){const _0x26003f=_0x2431ab;_0x36d146=_0x36d146[_0x26003f(0x42a)]()[_0x26003f(0x42e)](),this[_0x26003f(0x24a)]=this[_0x26003f(0x24a)]||{};if(this['_stateIDs'][_0x36d146])return this[_0x26003f(0x24a)][_0x36d146];for(const _0x33e62a of $dataStates){if(_0x26003f(0x3b6)===_0x26003f(0x3b6)){if(!_0x33e62a)continue;this[_0x26003f(0x24a)][_0x33e62a[_0x26003f(0x3e3)]['toUpperCase']()[_0x26003f(0x42e)]()]=_0x33e62a['id'];}else{function _0x543091(){const _0x442f4c=_0x26003f;if(!_0x2a189d)return _0x543d66[_0x442f4c(0x41d)][_0x442f4c(0x428)][_0x442f4c(0x313)](this,_0x927f88);if(!this[_0x442f4c(0x25a)](_0x288391))return![];if(!this[_0x442f4c(0x444)](_0x2af970))return![];if(!this['checkShowHideJS'](_0xc7fe2b))return![];return!![];}}}return this[_0x26003f(0x24a)][_0x36d146]||0x0;},DataManager[_0x2431ab(0x1bf)]=function(_0x2873a0){const _0x45d054=_0x2431ab;this[_0x45d054(0x210)]=this[_0x45d054(0x210)]||{};if(this[_0x45d054(0x210)][_0x2873a0])return this[_0x45d054(0x210)][_0x2873a0];return $dataStates[_0x2873a0]['note'][_0x45d054(0x30a)](/<MAX TURNS:[ ](\d+)>/i)?this[_0x45d054(0x210)][_0x2873a0]=Number(RegExp['$1']):this[_0x45d054(0x210)][_0x2873a0]=VisuMZ[_0x45d054(0x41d)][_0x45d054(0x3f8)][_0x45d054(0x2d6)][_0x45d054(0x450)],this[_0x45d054(0x210)][_0x2873a0];},ColorManager[_0x2431ab(0x1d6)]=function(_0x331be5,_0x282b6a){const _0x57d7bc=_0x2431ab;_0x282b6a=String(_0x282b6a),this[_0x57d7bc(0x3e2)]=this['_colorCache']||{};if(_0x282b6a[_0x57d7bc(0x30a)](/#(.*)/i)){if('hAmMs'===_0x57d7bc(0x2c7))this[_0x57d7bc(0x3e2)][_0x331be5]='#%1'[_0x57d7bc(0x3d8)](String(RegExp['$1']));else{function _0x1213cf(){const _0x36da11=_0x57d7bc;this['resetFontSettings']();const _0x3e6785=_0x1812c8[_0x77490a];if(_0x3e6785)!_0x55c7d3[_0x36da11(0x3be)](_0x3e6785)&&this[_0x36da11(0x38c)](_0x17f5db,_0x3e6785,_0x3488ad,_0x2ae2c2),this['drawActorStateData'](_0x1c643b,_0x3e6785,_0x5e636f,_0x3b2fe1),_0x597037['push'](_0x3e6785);else{const _0x391fbb=_0x1208a1[_0x19567f-_0x2732de[_0x36da11(0x205)]];this['drawActorBuffTurns'](_0x396370,_0x391fbb,_0x4646be,_0x57f04d),this[_0x36da11(0x2c8)](_0x254874,_0x391fbb,_0x1e9701,_0xc66653);}_0x548eaf+=_0x16a301;}}}else this[_0x57d7bc(0x3e2)][_0x331be5]=this[_0x57d7bc(0x280)](Number(_0x282b6a));return this['_colorCache'][_0x331be5];},ColorManager[_0x2431ab(0x177)]=function(_0x29007f){const _0x3cec71=_0x2431ab;_0x29007f=String(_0x29007f);if(_0x29007f[_0x3cec71(0x30a)](/#(.*)/i)){if(_0x3cec71(0x20c)===_0x3cec71(0x290)){function _0x3e44de(){const _0xe6f5d3=_0x3cec71;this[_0xe6f5d3(0x210)][_0x22ac6a]=_0x3486e6(_0x4d0b0f['$1']);}}else return _0x3cec71(0x2de)['format'](String(RegExp['$1']));}else return this[_0x3cec71(0x280)](Number(_0x29007f));},ColorManager[_0x2431ab(0x3a2)]=function(_0x21f6a1){const _0x106b1e=_0x2431ab;if(typeof _0x21f6a1===_0x106b1e(0x27d))_0x21f6a1=$dataStates[_0x21f6a1];const _0x1bece8='_stored_state-%1-color'[_0x106b1e(0x3d8)](_0x21f6a1['id']);this[_0x106b1e(0x3e2)]=this[_0x106b1e(0x3e2)]||{};if(this[_0x106b1e(0x3e2)][_0x1bece8])return this[_0x106b1e(0x3e2)][_0x1bece8];const _0x5e5ffa=this[_0x106b1e(0x17c)](_0x21f6a1);return this['getColorDataFromPluginParameters'](_0x1bece8,_0x5e5ffa);},ColorManager[_0x2431ab(0x17c)]=function(_0x25b020){const _0x19d68b=_0x2431ab,_0x3be24b=_0x25b020['note'];if(_0x3be24b[_0x19d68b(0x30a)](/<TURN COLOR:[ ](.*)>/i)){if(_0x19d68b(0x194)===_0x19d68b(0x194))return String(RegExp['$1']);else{function _0x2bf797(){const _0x29e5ee=_0x19d68b;return _0x1b00ed[_0x29e5ee(0x41d)]['Settings'][_0x29e5ee(0x2d6)][_0x29e5ee(0x249)];}}}else{if(_0x3be24b[_0x19d68b(0x30a)](/<POSITIVE STATE>/i))return VisuMZ['SkillsStatesCore'][_0x19d68b(0x3f8)][_0x19d68b(0x2d6)][_0x19d68b(0x390)];else{if(_0x3be24b[_0x19d68b(0x30a)](/<NEGATIVE STATE>/i)){if(_0x19d68b(0x457)!==_0x19d68b(0x30f))return VisuMZ[_0x19d68b(0x41d)][_0x19d68b(0x3f8)][_0x19d68b(0x2d6)][_0x19d68b(0x249)];else{function _0x5530c2(){return _0x17bd86(_0x1f72d8['$1']);}}}else return VisuMZ['SkillsStatesCore'][_0x19d68b(0x3f8)][_0x19d68b(0x2d6)][_0x19d68b(0x29a)];}}},ColorManager['buffColor']=function(){const _0x34aac1=_0x2431ab,_0x55736d=_0x34aac1(0x1ef);this[_0x34aac1(0x3e2)]=this[_0x34aac1(0x3e2)]||{};if(this['_colorCache'][_0x55736d])return this[_0x34aac1(0x3e2)][_0x55736d];const _0x1081b1=VisuMZ[_0x34aac1(0x41d)][_0x34aac1(0x3f8)][_0x34aac1(0x30e)][_0x34aac1(0x2e6)];return this[_0x34aac1(0x1d6)](_0x55736d,_0x1081b1);},ColorManager['debuffColor']=function(){const _0x19ed14=_0x2431ab,_0x4db59d=_0x19ed14(0x2e7);this[_0x19ed14(0x3e2)]=this[_0x19ed14(0x3e2)]||{};if(this[_0x19ed14(0x3e2)][_0x4db59d])return this['_colorCache'][_0x4db59d];const _0x230d89=VisuMZ[_0x19ed14(0x41d)][_0x19ed14(0x3f8)][_0x19ed14(0x30e)][_0x19ed14(0x449)];return this[_0x19ed14(0x1d6)](_0x4db59d,_0x230d89);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x1da)]=BattleManager['endAction'],BattleManager['endAction']=function(){const _0x2ff1c3=_0x2431ab;this[_0x2ff1c3(0x1e8)](),VisuMZ[_0x2ff1c3(0x41d)][_0x2ff1c3(0x1da)]['call'](this);},BattleManager['updateStatesActionEnd']=function(){const _0xe0ce1b=_0x2431ab,_0x1793d2=VisuMZ[_0xe0ce1b(0x41d)][_0xe0ce1b(0x3f8)]['States'];if(!_0x1793d2)return;if(_0x1793d2[_0xe0ce1b(0x2d5)]===![])return;if(!this[_0xe0ce1b(0x1dc)])return;this['_subject'][_0xe0ce1b(0x1e8)]();},Game_Battler[_0x2431ab(0x44e)]['updateStatesActionEnd']=function(){const _0x3003de=_0x2431ab;if(BattleManager[_0x3003de(0x28d)]!==_0x3003de(0x402))return;if(this[_0x3003de(0x19a)]===Graphics[_0x3003de(0x1dd)])return;this['_lastStatesActionEndFrameCount']=Graphics[_0x3003de(0x1dd)];for(const _0x152aef of this[_0x3003de(0x2f7)]){if(_0x3003de(0x373)===_0x3003de(0x373)){const _0x4abdf9=$dataStates[_0x152aef];if(!_0x4abdf9)continue;if(_0x4abdf9[_0x3003de(0x1ec)]!==0x1)continue;this['_stateTurns'][_0x152aef]>0x0&&this[_0x3003de(0x362)][_0x152aef]--;}else{function _0x11636b(){const _0x31abef=_0x3003de;if(['none','untitled'][_0x31abef(0x3be)](_0x42ac2d[_0x31abef(0x349)]()))return;_0x310201['SkillsStatesCore'][_0x31abef(0x378)]['call'](this,_0x951fe,_0x5c836d,_0x5317c3,_0x38edff);}}}this['removeStatesAuto'](0x1);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x19e)]=function(){const _0xb3ec40=_0x2431ab,_0x139ed1=VisuMZ[_0xb3ec40(0x41d)][_0xb3ec40(0x3f8)]['States'];for(const _0x46a0c0 of this[_0xb3ec40(0x2f7)]){if(_0xb3ec40(0x316)!=='qIHXP'){const _0xc28d2e=$dataStates[_0x46a0c0];if(_0x139ed1&&_0x139ed1[_0xb3ec40(0x2d5)]!==![]){if(_0xb3ec40(0x2f5)!==_0xb3ec40(0x2f5)){function _0x455467(){const _0x32a511=_0xb3ec40,_0x2ebe8a=this[_0x32a511(0x2f6)](),_0x382e6f=_0x5b7a89[_0x32a511(0x295)]((_0x420e19-0x2)*_0x2ebe8a),_0x4cbe35=_0x59d78a-0x2,_0x68ccd=this['gaugeBackColor']();this[_0x32a511(0x319)][_0x32a511(0x3ad)](_0x225082,_0x239883,_0x4a128b,_0x35909f,_0x68ccd),this[_0x32a511(0x319)][_0x32a511(0x3e6)](_0x306a64+0x1,_0x49850d+0x1,_0x382e6f,_0x4cbe35,_0x38eb5d,_0x13d003);}}else{if(_0xc28d2e&&_0xc28d2e[_0xb3ec40(0x1ec)]===0x1)continue;}}if(this[_0xb3ec40(0x362)][_0x46a0c0]>0x0){if(_0xb3ec40(0x188)===_0xb3ec40(0x188))this[_0xb3ec40(0x362)][_0x46a0c0]--;else{function _0x5d4b6e(){const _0x2b55e1=_0xb3ec40;if(_0x5408cf[_0x2b55e1(0x31d)]())_0x389bc3[_0x2b55e1(0x245)](_0x1a398d);}}}}else{function _0x131958(){const _0x3870ce=_0xb3ec40,_0x472c21=_0x18d2c[_0x3870ce(0x174)];if(![_0x107f49,_0x4ef149]['includes'](_0x472c21[_0x3870ce(0x331)]))return _0x4fb12d[_0x3870ce(0x252)]();}}}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x260)]=Game_Action[_0x2431ab(0x44e)][_0x2431ab(0x3bc)],Game_Action[_0x2431ab(0x44e)][_0x2431ab(0x3bc)]=function(_0x2a7c83){const _0x174175=_0x2431ab;VisuMZ['SkillsStatesCore'][_0x174175(0x260)][_0x174175(0x313)](this,_0x2a7c83),this[_0x174175(0x2ac)](_0x2a7c83);},Game_Action['prototype'][_0x2431ab(0x2ac)]=function(_0x17bde9){const _0x1c6741=_0x2431ab;this[_0x1c6741(0x21a)](_0x17bde9),this[_0x1c6741(0x357)](_0x17bde9),this['applyBuffTurnManipulationEffects'](_0x17bde9),this[_0x1c6741(0x322)](_0x17bde9);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x3d3)]=Game_Action[_0x2431ab(0x44e)][_0x2431ab(0x207)],Game_Action[_0x2431ab(0x44e)][_0x2431ab(0x207)]=function(_0x54a915){const _0x1bb7fe=_0x2431ab;if(this[_0x1bb7fe(0x2cd)](_0x54a915))return!![];return VisuMZ[_0x1bb7fe(0x41d)][_0x1bb7fe(0x3d3)][_0x1bb7fe(0x313)](this,_0x54a915);},Game_Action['prototype'][_0x2431ab(0x2cd)]=function(_0x33662f){const _0x2c6b2d=_0x2431ab,_0x3e5611=this['item']()[_0x2c6b2d(0x1b3)];if(_0x3e5611[_0x2c6b2d(0x30a)](/<STATE[ ](.*)[ ]CATEGORY REMOVE:[ ](.*)>/i)){if(_0x2c6b2d(0x184)!==_0x2c6b2d(0x184)){function _0x4c10a3(){const _0x3a1f56=_0x2c6b2d;if(this[_0x3a1f56(0x223)]||this[_0x3a1f56(0x21b)])return;const _0x3d5565=_0x16d9d4[_0x3a1f56(0x41d)][_0x3a1f56(0x3ef)];if(_0x3d5565[_0x1a8481])_0x3d5565[_0x3a843a][_0x3a1f56(0x313)](this,_0x433fc9);}}else{const _0x45ad88=String(RegExp['$1']);if(_0x33662f[_0x2c6b2d(0x34b)](_0x45ad88))return!![];}}if(_0x3e5611['match'](/<SET STATE[ ](\d+)[ ]TURNS:[ ](.*)>/i)){const _0x1db40f=Number(RegExp['$1']);if(_0x33662f[_0x2c6b2d(0x243)](_0x1db40f))return!![];}else{if(_0x3e5611['match'](/<SET STATE[ ](.*)[ ]TURNS:[ ](.*)>/i)){if(_0x2c6b2d(0x314)===_0x2c6b2d(0x314)){const _0x5db080=DataManager['getStateIdWithName'](RegExp['$1']);if(_0x33662f['isStateAffected'](_0x5db080))return!![];}else{function _0xa695f3(){const _0x31179d=_0x2c6b2d;if(this[_0x31179d(0x1e7)](_0x3cb671)){const _0x16af40=_0x399dff[_0x31179d(0x41d)][_0x31179d(0x3f8)]['Buffs'][_0x31179d(0x450)];this['_buffTurns'][_0x4206b4]=_0xc14bd7['clamp'](0x0,_0x16af40);}}}}}return![];},Game_Action[_0x2431ab(0x44e)]['applyStateCategoryRemovalEffects']=function(_0x2bee78){const _0x450ea2=_0x2431ab;if(_0x2bee78[_0x450ea2(0x33c)]()['length']<=0x0)return;const _0x5891a7=this['item']()[_0x450ea2(0x1b3)];if(_0x5891a7[_0x450ea2(0x30a)](/<STATE[ ](.*)[ ]CATEGORY REMOVE:[ ]ALL>/i)){if(_0x450ea2(0x1ae)!=='yglRI'){function _0x43b466(){const _0x4cc83f=_0x450ea2;return _0x5f42e4[_0x4cc83f(0x44e)][_0x4cc83f(0x1af)]['call'](this);}}else{const _0x1ab1bf=String(RegExp['$1']);_0x2bee78['removeStatesByCategoryAll'](_0x1ab1bf);}}const _0x1118be=_0x5891a7[_0x450ea2(0x30a)](/<STATE[ ](.*)[ ]CATEGORY REMOVE:[ ](\d+)>/gi);if(_0x1118be)for(const _0x5e74fc of _0x1118be){if(_0x450ea2(0x403)!==_0x450ea2(0x22f)){_0x5e74fc[_0x450ea2(0x30a)](/<STATE[ ](.*)[ ]CATEGORY REMOVE:[ ](\d+)>/i);const _0x253761=String(RegExp['$1']),_0xdfede3=Number(RegExp['$2']);_0x2bee78[_0x450ea2(0x27f)](_0x253761,_0xdfede3);}else{function _0x58a740(){_0x1a87f6+=_0x26c4ff+0x18;}}}},Game_Action[_0x2431ab(0x44e)]['applyStateTurnManipulationEffects']=function(_0x32ae4f){const _0x499780=_0x2431ab,_0x5794be=this[_0x499780(0x396)]()[_0x499780(0x1b3)],_0x4500b7=_0x5794be[_0x499780(0x30a)](/<SET STATE[ ](.*)[ ]TURNS:[ ](\d+)>/gi);if(_0x4500b7)for(const _0x4dc79 of _0x4500b7){let _0x3b45ac=0x0,_0x1bd783=0x0;if(_0x4dc79['match'](/<SET STATE[ ](\d+)[ ]TURNS:[ ](\d+)>/i))_0x3b45ac=Number(RegExp['$1']),_0x1bd783=Number(RegExp['$2']);else _0x4dc79[_0x499780(0x30a)](/<SET STATE[ ](.*)[ ]TURNS:[ ](\d+)>/i)&&(_0x3b45ac=DataManager[_0x499780(0x275)](RegExp['$1']),_0x1bd783=Number(RegExp['$2']));_0x32ae4f[_0x499780(0x38e)](_0x3b45ac,_0x1bd783),this[_0x499780(0x1c8)](_0x32ae4f);}const _0x444978=_0x5794be[_0x499780(0x30a)](/<STATE[ ](.*)[ ]TURNS:[ ]([\+\-]\d+)>/gi);if(_0x444978)for(const _0x2c0db8 of _0x444978){let _0x14b2c9=0x0,_0x1b892f=0x0;if(_0x2c0db8['match'](/<STATE[ ](\d+)[ ]TURNS:[ ]([\+\-]\d+)>/i)){if(_0x499780(0x339)===_0x499780(0x31c)){function _0x3c48cd(){const _0x26eb81=_0x499780;_0x385c0b[_0x26eb81(0x41d)][_0x26eb81(0x3f8)][_0x26eb81(0x2d6)][_0x26eb81(0x31f)][_0x26eb81(0x313)](this,_0x5870e5);}}else _0x14b2c9=Number(RegExp['$1']),_0x1b892f=Number(RegExp['$2']);}else{if(_0x2c0db8[_0x499780(0x30a)](/<STATE[ ](.*)[ ]TURNS:[ ]([\+\-]\d+)>/i)){if('mMwIN'!=='mMwIN'){function _0x38a393(){const _0x58a296=_0x499780,_0x182217=_0x291268(_0x2f6111['$1']),_0x35fd97=_0x37e093[_0x58a296(0x3d8)](_0x182217,_0x58a296(0x315),0x1,_0x58a296(0x219));_0x3388e4[_0x58a296(0x41d)][_0x58a296(0x1e1)][_0x19ee9d['id']]=new _0x38fb2a(_0x58a296(0x317),_0x35fd97);}}else _0x14b2c9=DataManager[_0x499780(0x275)](RegExp['$1']),_0x1b892f=Number(RegExp['$2']);}}_0x32ae4f[_0x499780(0x3e1)](_0x14b2c9,_0x1b892f),this[_0x499780(0x1c8)](_0x32ae4f);}},Game_Action[_0x2431ab(0x44e)][_0x2431ab(0x1bc)]=function(_0x5599ef){const _0x36fb5f=_0x2431ab,_0xe8fdda=[_0x36fb5f(0x43f),'MAXMP',_0x36fb5f(0x26c),'DEF','MAT',_0x36fb5f(0x32e),_0x36fb5f(0x2b6),_0x36fb5f(0x293)],_0x1ffaa7=this[_0x36fb5f(0x396)]()[_0x36fb5f(0x1b3)],_0x1f2ba7=_0x1ffaa7[_0x36fb5f(0x30a)](/<SET[ ](.*)[ ]BUFF TURNS:[ ](\d+)>/gi);if(_0x1f2ba7){if(_0x36fb5f(0x446)==='AJepK')for(const _0x23fa73 of _0x1f2ba7){if('gNlkD'===_0x36fb5f(0x418)){function _0x214157(){const _0x2ba13c=_0x36fb5f;this[_0x2ba13c(0x284)](_0x56da8f),this[_0x2ba13c(0x198)](_0x39f2f9),this[_0x2ba13c(0x1f3)](_0x34c4c0);}}else{_0x23fa73[_0x36fb5f(0x30a)](/<SET[ ](.*)[ ]BUFF TURNS:[ ](\d+)>/i);const _0x3f9ddb=_0xe8fdda['indexOf'](String(RegExp['$1'])[_0x36fb5f(0x42a)]()),_0x41b55e=Number(RegExp['$2']);_0x3f9ddb>=0x0&&(_0x5599ef[_0x36fb5f(0x2a5)](_0x3f9ddb,_0x41b55e),this[_0x36fb5f(0x1c8)](_0x5599ef));}}else{function _0x530752(){return!![];}}}const _0x27ad21=_0x1ffaa7[_0x36fb5f(0x30a)](/<(.*)[ ]BUFF TURNS:[ ]([\+\-]\d+)>/gi);if(_0x27ad21){if(_0x36fb5f(0x178)!==_0x36fb5f(0x22d))for(const _0x43d57d of _0x1f2ba7){if(_0x36fb5f(0x3c7)===_0x36fb5f(0x3c7)){_0x43d57d[_0x36fb5f(0x30a)](/<(.*)[ ]BUFF TURNS:[ ]([\+\-]\d+)>/i);const _0x5732e1=_0xe8fdda[_0x36fb5f(0x203)](String(RegExp['$1'])[_0x36fb5f(0x42a)]()),_0x4f6fef=Number(RegExp['$2']);_0x5732e1>=0x0&&(_0x5599ef[_0x36fb5f(0x1de)](_0x5732e1,_0x4f6fef),this['makeSuccess'](_0x5599ef));}else{function _0x3574c7(){const _0x4f89dc=_0x36fb5f,_0x4f49f7=_0x1d7105[_0x4f89dc(0x41d)],_0x2de481=[_0x4f89dc(0x2d1),_0x4f89dc(0x2ea),_0x4f89dc(0x2a4),_0x4f89dc(0x1e1),_0x4f89dc(0x197),_0x4f89dc(0x34d)];for(const _0x47b938 of _0x2de481){_0x4f49f7[_0x47b938][_0x3dbded]&&_0x4f49f7[_0x47b938][_0x3b263a][_0x4f89dc(0x313)](this,_0x2a09d6);}}}}else{function _0x35d2eb(){const _0x3bb90c=_0x36fb5f;this[_0x3bb90c(0x30c)][_0x32827b]='';}}}},Game_Action[_0x2431ab(0x44e)][_0x2431ab(0x322)]=function(_0x2f4cd0){const _0xa4aaa9=_0x2431ab,_0x7ecb1e=[_0xa4aaa9(0x43f),'MAXMP',_0xa4aaa9(0x26c),_0xa4aaa9(0x279),_0xa4aaa9(0x2be),'MDF','AGI','LUK'],_0x5f2bb9=this[_0xa4aaa9(0x396)]()[_0xa4aaa9(0x1b3)],_0x36e515=_0x5f2bb9['match'](/<SET[ ](.*)[ ]DEBUFF TURNS:[ ](\d+)>/gi);if(_0x36e515)for(const _0x31b3a1 of _0x36e515){_0x31b3a1['match'](/<SET[ ](.*)[ ]DEBUFF TURNS:[ ](\d+)>/i);const _0x1d825b=_0x7ecb1e[_0xa4aaa9(0x203)](String(RegExp['$1'])[_0xa4aaa9(0x42a)]()),_0x2df7a9=Number(RegExp['$2']);_0x1d825b>=0x0&&(_0x2f4cd0['setDebuffTurns'](_0x1d825b,_0x2df7a9),this['makeSuccess'](_0x2f4cd0));}const _0x1427bf=_0x5f2bb9[_0xa4aaa9(0x30a)](/<(.*)[ ]DEBUFF TURNS:[ ]([\+\-]\d+)>/gi);if(_0x1427bf)for(const _0x3311e6 of _0x36e515){if(_0xa4aaa9(0x30b)==='REZjm'){function _0x16b399(){_0x4d8847=_0x374218(_0x342a12['$1']),_0x45abb1=_0x21c1a6(_0x3d91ac['$2']);}}else{_0x3311e6[_0xa4aaa9(0x30a)](/<(.*)[ ]DEBUFF TURNS:[ ]([\+\-]\d+)>/i);const _0x42870e=_0x7ecb1e[_0xa4aaa9(0x203)](String(RegExp['$1'])[_0xa4aaa9(0x42a)]()),_0x1e1875=Number(RegExp['$2']);if(_0x42870e>=0x0){if('QcEja'!=='lQgYq')_0x2f4cd0[_0xa4aaa9(0x42b)](_0x42870e,_0x1e1875),this['makeSuccess'](_0x2f4cd0);else{function _0x2c15db(){const _0x42c0cf=_0xa4aaa9;for(const _0x35b2d8 of _0x154008){_0x35b2d8['match'](/<(.*)[ ]BUFF TURNS:[ ]([\+\-]\d+)>/i);const _0x5c9178=_0x4c82eb['indexOf'](_0x28534d(_0x5cd18e['$1'])[_0x42c0cf(0x42a)]()),_0x543908=_0x5a77a9(_0x33b2a1['$2']);_0x5c9178>=0x0&&(_0x565f7c[_0x42c0cf(0x1de)](_0x5c9178,_0x543908),this[_0x42c0cf(0x1c8)](_0x5eb6e0));}}}}}}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x20f)]=Game_BattlerBase['prototype']['initMembers'],Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x43d)]=function(){const _0x155261=_0x2431ab;this['_cache']={},this['initMembersSkillsStatesCore'](),VisuMZ[_0x155261(0x41d)]['Game_BattlerBase_initMembers'][_0x155261(0x313)](this);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3a3)]=function(){const _0x5e673c=_0x2431ab;this['_stateRetainType']='',this['_stateData']={},this[_0x5e673c(0x30c)]={},this[_0x5e673c(0x226)]={};},Game_BattlerBase['prototype']['checkCacheKey']=function(_0x5c060d){const _0x5ef17e=_0x2431ab;return this['_cache']=this[_0x5ef17e(0x18a)]||{},this[_0x5ef17e(0x18a)][_0x5c060d]!==undefined;},VisuMZ[_0x2431ab(0x41d)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x356)],Game_BattlerBase['prototype']['refresh']=function(){const _0xbf093c=_0x2431ab;this[_0xbf093c(0x18a)]={},VisuMZ[_0xbf093c(0x41d)][_0xbf093c(0x37e)][_0xbf093c(0x313)](this);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x2e1)]=Game_BattlerBase[_0x2431ab(0x44e)]['eraseState'],Game_BattlerBase['prototype'][_0x2431ab(0x3d2)]=function(_0x44f58b){const _0x32ae9f=_0x2431ab;let _0x1df92c=this[_0x32ae9f(0x243)](_0x44f58b);VisuMZ[_0x32ae9f(0x41d)][_0x32ae9f(0x2e1)][_0x32ae9f(0x313)](this,_0x44f58b);if(_0x1df92c&&!this[_0x32ae9f(0x243)](_0x44f58b))this['onRemoveState'](_0x44f58b);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3cb)]=function(_0x1895ba){const _0x1e7cb4=_0x2431ab;this[_0x1e7cb4(0x284)](_0x1895ba),this[_0x1e7cb4(0x198)](_0x1895ba),this[_0x1e7cb4(0x1f3)](_0x1895ba);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x2ab)]=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x434)],Game_BattlerBase['prototype'][_0x2431ab(0x434)]=function(_0x3d7f22){const _0x570dc4=_0x2431ab,_0xdec5ba=$dataStates[_0x3d7f22],_0x184d1f=this[_0x570dc4(0x3dd)](_0x3d7f22),_0x35baf8=this[_0x570dc4(0x43a)](_0xdec5ba)['toLowerCase']()['trim']();switch(_0x35baf8){case'ignore':if(_0x184d1f<=0x0)VisuMZ['SkillsStatesCore']['Game_BattlerBase_resetStateCounts'][_0x570dc4(0x313)](this,_0x3d7f22);break;case _0x570dc4(0x35b):VisuMZ[_0x570dc4(0x41d)][_0x570dc4(0x2ab)][_0x570dc4(0x313)](this,_0x3d7f22);break;case _0x570dc4(0x22a):VisuMZ[_0x570dc4(0x41d)][_0x570dc4(0x2ab)][_0x570dc4(0x313)](this,_0x3d7f22),this[_0x570dc4(0x362)][_0x3d7f22]=Math[_0x570dc4(0x2bc)](this[_0x570dc4(0x362)][_0x3d7f22],_0x184d1f);break;case _0x570dc4(0x204):VisuMZ[_0x570dc4(0x41d)][_0x570dc4(0x2ab)]['call'](this,_0x3d7f22),this[_0x570dc4(0x362)][_0x3d7f22]+=_0x184d1f;break;default:VisuMZ[_0x570dc4(0x41d)][_0x570dc4(0x2ab)][_0x570dc4(0x313)](this,_0x3d7f22);break;}},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x43a)]=function(_0x530abc){const _0x335bfa=_0x2431ab,_0x28de81=_0x530abc[_0x335bfa(0x1b3)];if(_0x28de81[_0x335bfa(0x30a)](/<REAPPLY RULES:[ ](.*)>/i)){if(_0x335bfa(0x297)===_0x335bfa(0x400)){function _0x3d544b(){const _0x224a68=_0x335bfa;_0x2b6ce4[_0x224a68(0x42b)](_0x5d534b,_0xd4d0e),this[_0x224a68(0x1c8)](_0x279fc5);}}else return String(RegExp['$1']);}else{if(_0x335bfa(0x35d)!==_0x335bfa(0x35d)){function _0x3012be(){const _0x3430d0=_0x335bfa;return _0x3b02a5[_0x3430d0(0x1dc)];}}else return VisuMZ['SkillsStatesCore']['Settings'][_0x335bfa(0x2d6)][_0x335bfa(0x283)];}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x36f)]=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x2dc)],Game_BattlerBase[_0x2431ab(0x44e)]['overwriteBuffTurns']=function(_0x213903,_0x5c8a21){const _0x41b44d=_0x2431ab,_0x394412=VisuMZ['SkillsStatesCore'][_0x41b44d(0x3f8)][_0x41b44d(0x30e)]['ReapplyRules'],_0x153b23=this[_0x41b44d(0x1d3)](_0x213903);switch(_0x394412){case'ignore':if(_0x153b23<=0x0)this[_0x41b44d(0x359)][_0x213903]=_0x5c8a21;break;case _0x41b44d(0x35b):this['_buffTurns'][_0x213903]=_0x5c8a21;break;case _0x41b44d(0x22a):this[_0x41b44d(0x359)][_0x213903]=Math[_0x41b44d(0x2bc)](_0x153b23,_0x5c8a21);break;case _0x41b44d(0x204):this[_0x41b44d(0x359)][_0x213903]+=_0x5c8a21;break;default:VisuMZ[_0x41b44d(0x41d)]['Game_BattlerBase_overwriteBuffTurns']['call'](this,_0x213903,_0x5c8a21);break;}const _0x13149d=VisuMZ[_0x41b44d(0x41d)]['Settings'][_0x41b44d(0x30e)][_0x41b44d(0x450)];this[_0x41b44d(0x359)][_0x213903]=this[_0x41b44d(0x359)][_0x213903]['clamp'](0x0,_0x13149d);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x24c)]=function(){const _0x3ba4c8=_0x2431ab;if(this[_0x3ba4c8(0x18a)][_0x3ba4c8(0x44a)]!==undefined)return this[_0x3ba4c8(0x18a)][_0x3ba4c8(0x44a)];this['_cache'][_0x3ba4c8(0x44a)]=![];const _0x83fab0=this[_0x3ba4c8(0x33c)]();for(const _0x2981b3 of _0x83fab0){if(_0x3ba4c8(0x460)==='AnfzN'){if(!_0x2981b3)continue;if(_0x2981b3[_0x3ba4c8(0x1b3)][_0x3ba4c8(0x30a)](/<GROUP DEFEAT>/i)){this[_0x3ba4c8(0x18a)][_0x3ba4c8(0x44a)]=!![];break;}}else{function _0x5c322c(){const _0x135de5=_0x3ba4c8;return this[_0x135de5(0x429)]&&this[_0x135de5(0x429)][_0x135de5(0x41b)]?_0x4027fc['buttonAssistSwitch']:'';}}}return this['_cache'][_0x3ba4c8(0x44a)];},VisuMZ[_0x2431ab(0x41d)]['Game_BattlerBase_clearStates']=Game_BattlerBase[_0x2431ab(0x44e)]['clearStates'],Game_BattlerBase[_0x2431ab(0x44e)]['clearStates']=function(){const _0x8e04cc=_0x2431ab;this['getStateRetainType']()!==''?this[_0x8e04cc(0x3b5)]():(VisuMZ[_0x8e04cc(0x41d)][_0x8e04cc(0x217)]['call'](this),this[_0x8e04cc(0x3a3)]());},Game_Actor['prototype'][_0x2431ab(0x2a3)]=function(){const _0xbf4064=_0x2431ab;this[_0xbf4064(0x311)]=this[_0xbf4064(0x311)]||{},Game_Battler[_0xbf4064(0x44e)][_0xbf4064(0x2a3)][_0xbf4064(0x313)](this);},Game_BattlerBase[_0x2431ab(0x44e)]['clearStatesWithStateRetain']=function(){const _0x5162f4=_0x2431ab,_0x3f7fcc=this[_0x5162f4(0x33c)]();for(const _0x5ae973 of _0x3f7fcc){if(_0x5ae973&&this[_0x5162f4(0x36e)](_0x5ae973))this[_0x5162f4(0x3d2)](_0x5ae973['id']);}this['_cache']={};},Game_BattlerBase['prototype'][_0x2431ab(0x36e)]=function(_0x4ac76b){const _0x2e6015=_0x2431ab,_0x5b7cac=this[_0x2e6015(0x2c0)]();if(_0x5b7cac!==''){const _0x27e647=_0x4ac76b[_0x2e6015(0x1b3)];if(_0x5b7cac===_0x2e6015(0x1cb)&&_0x27e647['match'](/<NO DEATH CLEAR>/i))return![];if(_0x5b7cac===_0x2e6015(0x395)&&_0x27e647[_0x2e6015(0x30a)](/<NO RECOVER ALL CLEAR>/i))return![];}return this[_0x2e6015(0x243)](_0x4ac76b['id']);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x2c0)]=function(){return this['_stateRetainType'];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x19f)]=function(_0x38680b){const _0x245e08=_0x2431ab;this[_0x245e08(0x3ae)]=_0x38680b;},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x417)]=function(){const _0x31d136=_0x2431ab;this[_0x31d136(0x3ae)]='';},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x415)]=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x2cf)],Game_BattlerBase['prototype'][_0x2431ab(0x2cf)]=function(){const _0x4ffca3=_0x2431ab;this[_0x4ffca3(0x19f)](_0x4ffca3(0x1cb)),VisuMZ['SkillsStatesCore'][_0x4ffca3(0x415)][_0x4ffca3(0x313)](this),this[_0x4ffca3(0x417)]();},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x21d)]=Game_BattlerBase['prototype'][_0x2431ab(0x328)],Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x328)]=function(){const _0x394945=_0x2431ab;this[_0x394945(0x19f)]('recover\x20all'),VisuMZ[_0x394945(0x41d)]['Game_BattlerBase_recoverAll'][_0x394945(0x313)](this),this['clearStateRetainType']();},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3c1)]=function(_0x4d71b0){const _0x23d461=_0x2431ab;for(settings of VisuMZ[_0x23d461(0x41d)][_0x23d461(0x3f8)]['Costs']){const _0x2ec4d4=settings['CalcJS'][_0x23d461(0x313)](this,_0x4d71b0);if(!settings[_0x23d461(0x225)][_0x23d461(0x313)](this,_0x4d71b0,_0x2ec4d4))return![];}return!![];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x230)]=function(_0xb6c1b5){const _0x1181c0=_0x2431ab;for(settings of VisuMZ[_0x1181c0(0x41d)][_0x1181c0(0x3f8)][_0x1181c0(0x443)]){const _0x20f4fc=settings[_0x1181c0(0x19b)]['call'](this,_0xb6c1b5);settings[_0x1181c0(0x305)][_0x1181c0(0x313)](this,_0xb6c1b5,_0x20f4fc);}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x1c6)]=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x222)],Game_BattlerBase['prototype'][_0x2431ab(0x222)]=function(_0x4def78){const _0x20e7c8=_0x2431ab;if(!_0x4def78)return![];if(!VisuMZ[_0x20e7c8(0x41d)]['Game_BattlerBase_meetsSkillConditions'][_0x20e7c8(0x313)](this,_0x4def78))return![];if(!this['checkSkillConditionsNotetags'](_0x4def78))return![];if(!this[_0x20e7c8(0x268)](_0x4def78))return![];if(!this['meetsSkillConditionsGlobalJS'](_0x4def78))return![];return!![];},Game_BattlerBase[_0x2431ab(0x44e)]['checkSkillConditionsNotetags']=function(_0x55f7d2){const _0x4b74b4=_0x2431ab;if(!this[_0x4b74b4(0x3b3)](_0x55f7d2))return![];return!![];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3b3)]=function(_0x122553){const _0x4b77e8=_0x2431ab,_0x2ef70e=_0x122553[_0x4b77e8(0x1b3)];if(_0x2ef70e[_0x4b77e8(0x30a)](/<ENABLE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2161cd=JSON[_0x4b77e8(0x1aa)]('['+RegExp['$1'][_0x4b77e8(0x30a)](/\d+/g)+']');for(const _0xf5f52b of _0x2161cd){if('SBqoB'!==_0x4b77e8(0x39e)){if(!$gameSwitches['value'](_0xf5f52b))return![];}else{function _0x5a6195(){const _0x251eaa=_0x4b77e8;_0x44a05c['match'](/<(.*)[ ]BUFF TURNS:[ ]([\+\-]\d+)>/i);const _0xd23f31=_0x3037ba[_0x251eaa(0x203)](_0x4ff4d1(_0x58f32f['$1'])[_0x251eaa(0x42a)]()),_0x2a5a48=_0x322d8f(_0x5df198['$2']);_0xd23f31>=0x0&&(_0x56d6f2[_0x251eaa(0x1de)](_0xd23f31,_0x2a5a48),this[_0x251eaa(0x1c8)](_0x36fa7b));}}}return!![];}if(_0x2ef70e[_0x4b77e8(0x30a)](/<ENABLE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('GcEOG'!==_0x4b77e8(0x3e9)){const _0x1665c4=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x4d714c of _0x1665c4){if(_0x4b77e8(0x273)===_0x4b77e8(0x273)){if(!$gameSwitches[_0x4b77e8(0x3c2)](_0x4d714c))return![];}else{function _0x3c4815(){const _0x102433=_0x4b77e8;this['removeState'](_0x23dc15[_0x102433(0x1f0)]());}}}return!![];}else{function _0x20e4f6(){const _0x4a375c=_0x4b77e8,_0x4fd251=this[_0x4a375c(0x190)]!==_0x12c0f5;_0x305500[_0x4a375c(0x41d)][_0x4a375c(0x44f)]['call'](this,_0x2993b5),_0x4fd251&&(this[_0x4a375c(0x1fe)]&&this['_statusWindow'][_0x4a375c(0x331)]===_0x4056cf&&this[_0x4a375c(0x1fe)][_0x4a375c(0x44b)](this[_0x4a375c(0x1b9)](0x0)));}}}if(_0x2ef70e[_0x4b77e8(0x30a)](/<ENABLE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('MDIiS'==='MDIiS'){const _0x3ee3e9=JSON['parse']('['+RegExp['$1'][_0x4b77e8(0x30a)](/\d+/g)+']');for(const _0x4500eb of _0x3ee3e9){if($gameSwitches[_0x4b77e8(0x3c2)](_0x4500eb))return!![];}return![];}else{function _0x4335f1(){const _0x4335ad=_0x4b77e8,_0x42eb56=_0x496f3a[_0x4335ad(0x44e)][_0x4335ad(0x41e)]();this[_0x4335ad(0x1c1)]=new _0x132566(),this['_turnDisplaySprite'][_0x4335ad(0x319)]=new _0x2619cd(_0x78ee3d[_0x4335ad(0x23b)],_0x42eb56),this['_turnDisplaySprite']['anchor']['x']=this['anchor']['x'],this[_0x4335ad(0x1c1)][_0x4335ad(0x1e4)]['y']=this['anchor']['y'],this[_0x4335ad(0x172)](this[_0x4335ad(0x1c1)]),this[_0x4335ad(0x2c6)]=this['_turnDisplaySprite'][_0x4335ad(0x319)];}}}if(_0x2ef70e['match'](/<DISABLE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x370a0a=JSON['parse']('['+RegExp['$1'][_0x4b77e8(0x30a)](/\d+/g)+']');for(const _0x3f0ef8 of _0x370a0a){if(!$gameSwitches['value'](_0x3f0ef8))return!![];}return![];}if(_0x2ef70e[_0x4b77e8(0x30a)](/<DISABLE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4ba152=JSON[_0x4b77e8(0x1aa)]('['+RegExp['$1'][_0x4b77e8(0x30a)](/\d+/g)+']');for(const _0x15c2c3 of _0x4ba152){if(!$gameSwitches[_0x4b77e8(0x3c2)](_0x15c2c3))return!![];}return![];}if(_0x2ef70e[_0x4b77e8(0x30a)](/<DISABLE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x4b77e8(0x2d0)!==_0x4b77e8(0x468)){const _0x456aa8=JSON[_0x4b77e8(0x1aa)]('['+RegExp['$1'][_0x4b77e8(0x30a)](/\d+/g)+']');for(const _0x2e76c5 of _0x456aa8){if($gameSwitches[_0x4b77e8(0x3c2)](_0x2e76c5))return![];}return!![];}else{function _0x29bed2(){const _0x2b0326=_0x4b77e8;if(!this['_actor'][_0x2b0326(0x33e)](_0x307f55))return![];}}}return!![];},Game_BattlerBase[_0x2431ab(0x44e)]['meetsSkillConditionsEnableJS']=function(_0xc651f4){const _0x4250b0=_0x2431ab,_0x561e58=_0xc651f4[_0x4250b0(0x1b3)],_0x5af0a4=VisuMZ[_0x4250b0(0x41d)][_0x4250b0(0x1d0)];if(_0x5af0a4[_0xc651f4['id']]){if(_0x4250b0(0x303)===_0x4250b0(0x303))return _0x5af0a4[_0xc651f4['id']][_0x4250b0(0x313)](this,_0xc651f4);else{function _0x33a7c8(){const _0x44abfc=_0x4250b0;this[_0x44abfc(0x1fe)][_0x44abfc(0x44b)](this[_0x44abfc(0x396)]());}}}else return!![];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3e5)]=function(_0x3e740c){const _0x4f4c52=_0x2431ab;return VisuMZ[_0x4f4c52(0x41d)][_0x4f4c52(0x3f8)]['Skills']['SkillConditionJS']['call'](this,_0x3e740c);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x29b)]=Game_BattlerBase[_0x2431ab(0x44e)]['skillMpCost'],Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3d1)]=function(_0x1600eb){const _0x509069=_0x2431ab;for(settings of VisuMZ[_0x509069(0x41d)][_0x509069(0x3f8)][_0x509069(0x443)]){if(settings[_0x509069(0x2b0)][_0x509069(0x42a)]()==='MP')return settings[_0x509069(0x19b)][_0x509069(0x313)](this,_0x1600eb);}return VisuMZ[_0x509069(0x41d)]['Game_BattlerBase_skillMpCost']['call'](this,_0x1600eb);},VisuMZ[_0x2431ab(0x41d)]['Game_BattlerBase_skillTpCost']=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x31a)],Game_BattlerBase['prototype'][_0x2431ab(0x31a)]=function(_0xbf9906){const _0x331af2=_0x2431ab;for(settings of VisuMZ[_0x331af2(0x41d)][_0x331af2(0x3f8)][_0x331af2(0x443)]){if(settings['Name'][_0x331af2(0x42a)]()==='TP'){if(_0x331af2(0x325)!==_0x331af2(0x325)){function _0x84ddd3(){const _0x40f995=_0x331af2;return this[_0x40f995(0x2b9)]()?this[_0x40f995(0x182)]():_0x43f92d[_0x40f995(0x41d)][_0x40f995(0x37d)]['call'](this);}}else return settings[_0x331af2(0x19b)][_0x331af2(0x313)](this,_0xbf9906);}}return VisuMZ[_0x331af2(0x41d)][_0x331af2(0x39f)][_0x331af2(0x313)](this,_0xbf9906);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3b7)]=function(_0x18b9b7){const _0x870dbe=_0x2431ab;if(typeof _0x18b9b7==='number')_0x18b9b7=$dataStates[_0x18b9b7];return this['states']()[_0x870dbe(0x3be)](_0x18b9b7);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x1a8)]=Game_BattlerBase[_0x2431ab(0x44e)]['states'],Game_BattlerBase['prototype'][_0x2431ab(0x33c)]=function(){const _0x554459=_0x2431ab;let _0x169ee1=VisuMZ['SkillsStatesCore'][_0x554459(0x1a8)]['call'](this);if(this[_0x554459(0x389)])return _0x169ee1;return this[_0x554459(0x389)]=!![],this[_0x554459(0x1bd)](_0x169ee1),this[_0x554459(0x389)]=undefined,_0x169ee1;},Game_BattlerBase['prototype'][_0x2431ab(0x1bd)]=function(_0x1c4fcb){const _0x2f37a4=_0x2431ab,_0x45d0b7=this['passiveStates']();for(state of _0x45d0b7){if(!state)continue;if(!this[_0x2f37a4(0x32c)](state)&&_0x1c4fcb['includes'](state))continue;_0x1c4fcb['push'](state);}_0x45d0b7[_0x2f37a4(0x205)]>0x0&&_0x1c4fcb[_0x2f37a4(0x247)]((_0xf337d0,_0x2209cf)=>{const _0x3635ac=_0x2f37a4,_0x47a12a=_0xf337d0['priority'],_0x23f31b=_0x2209cf[_0x3635ac(0x465)];if(_0x47a12a!==_0x23f31b)return _0x23f31b-_0x47a12a;return _0xf337d0-_0x2209cf;});},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x32c)]=function(_0x5016c9){const _0x130d0c=_0x2431ab;return _0x5016c9[_0x130d0c(0x1b3)][_0x130d0c(0x30a)](/<PASSIVE STACKABLE>/i);},Game_BattlerBase[_0x2431ab(0x44e)]['convertPassiveStates']=function(){const _0x3d2e05=_0x2431ab,_0x3d10e4=[];for(const _0x53ae82 of this[_0x3d2e05(0x18a)][_0x3d2e05(0x36a)]){const _0x9210c4=$dataStates[_0x53ae82];if(!_0x9210c4)continue;if(!this['meetsPassiveStateConditions'](_0x9210c4))continue;_0x3d10e4[_0x3d2e05(0x3a1)](_0x9210c4);}return _0x3d10e4;},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x2a8)]=function(_0x2c68c7){const _0x4ccf48=_0x2431ab;if(!this[_0x4ccf48(0x324)](_0x2c68c7))return![];if(!this[_0x4ccf48(0x38a)](_0x2c68c7))return![];if(!this[_0x4ccf48(0x41a)](_0x2c68c7))return![];if(!this[_0x4ccf48(0x374)](_0x2c68c7))return![];return!![];},Game_BattlerBase[_0x2431ab(0x44e)]['meetsPassiveStateConditionClasses']=function(_0x2c5f94){return!![];},Game_Actor['prototype'][_0x2431ab(0x324)]=function(_0x209fd3){const _0x241576=_0x2431ab,_0xc0d928=_0x209fd3['note'];if(_0xc0d928[_0x241576(0x30a)](/<PASSIVE CONDITION[ ](?:CLASS|CLASSES):[ ](.*)>/i)){const _0x5b5978=String(RegExp['$1'])[_0x241576(0x23f)](',')[_0x241576(0x32d)](_0x4ed343=>_0x4ed343[_0x241576(0x42e)]()),_0x4b0e7=VisuMZ[_0x241576(0x41d)][_0x241576(0x3c4)](_0x5b5978);return _0x4b0e7['includes'](this['currentClass']());}if(_0xc0d928[_0x241576(0x30a)](/<PASSIVE CONDITION[ ](?:MULTICLASS|MULTICLASSES):[ ](.*)>/i)){if('oBUgG'==='TbAKx'){function _0x325d6(){const _0x5d7e47=_0x241576,_0x3166f1=this[_0x5d7e47(0x235)](_0x3e95f4,_0x81f77b),_0x262a8b=this[_0x5d7e47(0x3aa)](_0x3166f1,_0x4ba552,_0x2aa5b7,_0xac2f70),_0x2651cc=_0x9c41dc+_0x57dd68-_0x262a8b[_0x5d7e47(0x1f1)];this[_0x5d7e47(0x2dd)](_0x3166f1,_0x2651cc,_0x215d9b,_0x405b78),this[_0x5d7e47(0x367)]();}}else{const _0x16c51f=String(RegExp['$1'])['split'](',')[_0x241576(0x32d)](_0x228e7e=>_0x228e7e[_0x241576(0x42e)]()),_0xc01ad8=VisuMZ['SkillsStatesCore'][_0x241576(0x3c4)](_0x16c51f);let _0x4daf91=[this[_0x241576(0x20b)]()];return Imported[_0x241576(0x1fd)]&&this[_0x241576(0x459)]&&(_0x4daf91=this[_0x241576(0x459)]()),_0xc01ad8[_0x241576(0x253)](_0x201af8=>_0x4daf91[_0x241576(0x3be)](_0x201af8))[_0x241576(0x205)]>0x0;}}return Game_BattlerBase[_0x241576(0x44e)][_0x241576(0x324)]['call'](this,_0x209fd3);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x3c4)]=function(_0x57d38f){const _0x24db3c=_0x2431ab,_0x5c37d3=[];for(let _0x55223e of _0x57d38f){if(_0x24db3c(0x421)!==_0x24db3c(0x421)){function _0x4fceb2(){const _0x4c2b15=_0x24db3c;if(this[_0x4c2b15(0x223)]||this[_0x4c2b15(0x21b)])return;try{_0x584f04['SkillsStatesCore'][_0x4c2b15(0x3f8)]['States'][_0x4c2b15(0x337)][_0x4c2b15(0x313)](this,_0x567534);}catch(_0x81b1b2){if(_0x5cd6a3[_0x4c2b15(0x31d)]())_0x6b3ecb[_0x4c2b15(0x245)](_0x81b1b2);}}}else{_0x55223e=(String(_0x55223e)||'')[_0x24db3c(0x42e)]();const _0x288852=/^\d+$/[_0x24db3c(0x318)](_0x55223e);_0x288852?_0x5c37d3[_0x24db3c(0x3a1)](Number(_0x55223e)):_0x5c37d3[_0x24db3c(0x3a1)](DataManager[_0x24db3c(0x218)](_0x55223e));}}return _0x5c37d3['map'](_0x396c12=>$dataClasses[Number(_0x396c12)])[_0x24db3c(0x436)](null);},Game_BattlerBase[_0x2431ab(0x44e)]['meetsPassiveStateConditionSwitches']=function(_0x4e92af){const _0x5defd0=_0x2431ab,_0x4ca44e=_0x4e92af[_0x5defd0(0x1b3)];if(_0x4ca44e[_0x5defd0(0x30a)](/<PASSIVE CONDITION[ ](?:SWITCH|SWITCHES)[ ]ON:[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x214e00=JSON[_0x5defd0(0x1aa)]('['+RegExp['$1'][_0x5defd0(0x30a)](/\d+/g)+']');for(const _0x1086e9 of _0x214e00){if(!$gameSwitches[_0x5defd0(0x3c2)](_0x1086e9))return![];}return!![];}if(_0x4ca44e[_0x5defd0(0x30a)](/<PASSIVE CONDITION ALL[ ](?:SWITCH|SWITCHES)[ ]ON:[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4ed153=JSON[_0x5defd0(0x1aa)]('['+RegExp['$1'][_0x5defd0(0x30a)](/\d+/g)+']');for(const _0x1d3bc4 of _0x4ed153){if(!$gameSwitches[_0x5defd0(0x3c2)](_0x1d3bc4))return![];}return!![];}if(_0x4ca44e[_0x5defd0(0x30a)](/<PASSIVE CONDITION ANY[ ](?:SWITCH|SWITCHES)[ ]ON:[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('MSlFt'===_0x5defd0(0x1e9)){const _0x2296db=JSON[_0x5defd0(0x1aa)]('['+RegExp['$1'][_0x5defd0(0x30a)](/\d+/g)+']');for(const _0xf6d412 of _0x2296db){if($gameSwitches[_0x5defd0(0x3c2)](_0xf6d412))return!![];}return![];}else{function _0x3479f9(){const _0x3c7e58=_0x5defd0;this[_0x3c7e58(0x266)](_0x5a8012,_0x2ce720,_0x5f0229,_0x2897b9),_0x59a286++,_0x26dcfd%0x2===0x0?(_0x4f6b80=_0x5db0d5,_0x25538b+=_0x76cdf9):_0xef269f+=_0x2cafab+0x18;}}}if(_0x4ca44e['match'](/<PASSIVE CONDITION[ ](?:SWITCH|SWITCHES)[ ]OFF:[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x13cb2a=JSON[_0x5defd0(0x1aa)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3e0672 of _0x13cb2a){if(!$gameSwitches[_0x5defd0(0x3c2)](_0x3e0672))return!![];}return![];}if(_0x4ca44e[_0x5defd0(0x30a)](/<PASSIVE CONDITION ALL[ ](?:SWITCH|SWITCHES)[ ]OFF:[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('vFGOE'===_0x5defd0(0x433)){function _0x3e3466(){const _0x5c4225=_0x5defd0;return _0x1605aa['status']&&_0x71aaed[_0x5c4225(0x43e)][_0x5c4225(0x3be)]('['+_0x50c4e8+']');}}else{const _0x2ba2f1=JSON['parse']('['+RegExp['$1'][_0x5defd0(0x30a)](/\d+/g)+']');for(const _0x224e89 of _0x2ba2f1){if(!$gameSwitches[_0x5defd0(0x3c2)](_0x224e89))return!![];}return![];}}if(_0x4ca44e[_0x5defd0(0x30a)](/<PASSIVE CONDITION ANY[ ](?:SWITCH|SWITCHES)[ ]OFF:[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x5defd0(0x437)===_0x5defd0(0x193)){function _0x4ee74b(){const _0x460d11=_0x5defd0;_0x2e0b8c[_0x460d11(0x41d)][_0x460d11(0x3f8)][_0x460d11(0x30e)][_0x460d11(0x1d1)][_0x460d11(0x313)](this,_0x911cd);}}else{const _0x40d16b=JSON[_0x5defd0(0x1aa)]('['+RegExp['$1'][_0x5defd0(0x30a)](/\d+/g)+']');for(const _0x916089 of _0x40d16b){if(_0x5defd0(0x2ce)!==_0x5defd0(0x323)){if($gameSwitches['value'](_0x916089))return![];}else{function _0x5f0695(){const _0x2ea97a=_0x5defd0;return _0x3d1475['SkillsStatesCore'][_0x2ea97a(0x3f8)][_0x2ea97a(0x299)][_0x2ea97a(0x202)];}}}return!![];}}return!![];},Game_BattlerBase[_0x2431ab(0x44e)]['meetsPassiveStateConditionJS']=function(_0x24a37e){const _0x9d7a61=_0x2431ab,_0x5b2daa=VisuMZ[_0x9d7a61(0x41d)][_0x9d7a61(0x2c9)];if(_0x5b2daa[_0x24a37e['id']]&&!_0x5b2daa[_0x24a37e['id']][_0x9d7a61(0x313)](this,_0x24a37e))return![];return!![];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x374)]=function(_0x5e09a4){const _0x22e968=_0x2431ab;return VisuMZ[_0x22e968(0x41d)][_0x22e968(0x3f8)]['PassiveStates'][_0x22e968(0x298)][_0x22e968(0x313)](this,_0x5e09a4);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x36a)]=function(){const _0x1203f1=_0x2431ab;if(this['checkCacheKey'](_0x1203f1(0x36a)))return this[_0x1203f1(0x40e)]();if(this['_checkingVisuMzPassiveStateObjects'])return[];return this[_0x1203f1(0x440)]=!![],this['_cache'][_0x1203f1(0x36a)]=[],this[_0x1203f1(0x285)](),this['addPassiveStatesByNotetag'](),this[_0x1203f1(0x3f6)](),this['_checkingVisuMzPassiveStateObjects']=undefined,this[_0x1203f1(0x40e)]();},Game_BattlerBase['prototype'][_0x2431ab(0x285)]=function(){const _0x3daab0=_0x2431ab;if(Imported['VisuMZ_1_ElementStatusCore'])this[_0x3daab0(0x264)]();},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x1b1)]=function(){return[];},Game_BattlerBase[_0x2431ab(0x44e)]['addPassiveStatesByNotetag']=function(){const _0xafc5d4=_0x2431ab,_0x65e715=this['passiveStateObjects']();for(const _0x15f717 of _0x65e715){if(!_0x15f717)continue;const _0x5b7cdf=_0x15f717[_0xafc5d4(0x1b3)][_0xafc5d4(0x30a)](/<PASSIVE (?:STATE|STATES):[ ](.*)>/gi);if(_0x5b7cdf){if(_0xafc5d4(0x36b)!==_0xafc5d4(0x36b)){function _0x20fac0(){const _0x2b55af=_0xafc5d4,_0x3a0d71=this[_0x2b55af(0x208)](_0x5b9d06);if(_0x3a0d71===_0x2b55af(0x410))this['drawItemStyleIconText'](_0x377698);else _0x3a0d71===_0x2b55af(0x3d9)?this['drawItemStyleIcon'](_0x2925c4):_0xea585c[_0x2b55af(0x44e)][_0x2b55af(0x37c)][_0x2b55af(0x313)](this,_0x23517d);}}else for(const _0x45f291 of _0x5b7cdf){_0x45f291[_0xafc5d4(0x30a)](/<PASSIVE (?:STATE|STATES):[ ](.*)>/i);const _0x1c99d8=RegExp['$1'];if(_0x1c99d8['match'](/(\d+(?:\s*,\s*\d+)*)/i)){if(_0xafc5d4(0x22c)!==_0xafc5d4(0x22c)){function _0x12d4d8(){const _0x9c5c0b=_0xafc5d4,_0x5b94f4=_0xf58f1e['CalcJS'][_0x9c5c0b(0x313)](this,_0x5b9e53);_0x315f92['PayJS'][_0x9c5c0b(0x313)](this,_0x3563af,_0x5b94f4);}}else{const _0x3fb823=JSON[_0xafc5d4(0x1aa)]('['+RegExp['$1'][_0xafc5d4(0x30a)](/\d+/g)+']');this[_0xafc5d4(0x18a)][_0xafc5d4(0x36a)]=this[_0xafc5d4(0x18a)][_0xafc5d4(0x36a)][_0xafc5d4(0x233)](_0x3fb823);}}else{const _0xfaf935=_0x1c99d8[_0xafc5d4(0x23f)](',');for(const _0x5eeeb9 of _0xfaf935){const _0x384fdd=DataManager['getStateIdWithName'](_0x5eeeb9);if(_0x384fdd)this[_0xafc5d4(0x18a)][_0xafc5d4(0x36a)][_0xafc5d4(0x3a1)](_0x384fdd);}}}}}},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x3f6)]=function(){const _0x2a96c9=_0x2431ab,_0x3c544f=VisuMZ['SkillsStatesCore'][_0x2a96c9(0x3f8)][_0x2a96c9(0x3ac)][_0x2a96c9(0x21e)];this[_0x2a96c9(0x18a)]['passiveStates']=this['_cache'][_0x2a96c9(0x36a)][_0x2a96c9(0x233)](_0x3c544f);},Game_BattlerBase[_0x2431ab(0x44e)]['stateTurns']=function(_0x185954){const _0x19ac68=_0x2431ab;if(typeof _0x185954!==_0x19ac68(0x27d))_0x185954=_0x185954['id'];return this[_0x19ac68(0x362)][_0x185954]||0x0;},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x38e)]=function(_0x2bde90,_0x58a5f4){const _0x496f77=_0x2431ab;if(typeof _0x2bde90!==_0x496f77(0x27d))_0x2bde90=_0x2bde90['id'];if(this['isStateAffected'](_0x2bde90)){if('nEYOt'!==_0x496f77(0x29c)){const _0x41a9e8=DataManager[_0x496f77(0x1bf)](_0x2bde90);this[_0x496f77(0x362)][_0x2bde90]=_0x58a5f4['clamp'](0x0,_0x41a9e8);if(this['_stateTurns'][_0x2bde90]<=0x0)this[_0x496f77(0x43b)](_0x2bde90);}else{function _0x543c8e(){return _0x26ea81-_0x2ce2fb;}}}},Game_BattlerBase['prototype'][_0x2431ab(0x3e1)]=function(_0x27b1ac,_0xb0cfe1){const _0x82a405=_0x2431ab;if(typeof _0x27b1ac!=='number')_0x27b1ac=_0x27b1ac['id'];this['isStateAffected'](_0x27b1ac)&&(_0xb0cfe1+=this[_0x82a405(0x3dd)](_0x27b1ac),this[_0x82a405(0x38e)](_0x27b1ac,_0xb0cfe1));},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x1b5)]=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x301)],Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x301)]=function(_0x2061df){const _0xeae980=_0x2431ab,_0x5ee543=this['_buffs'][_0x2061df];VisuMZ[_0xeae980(0x41d)]['Game_BattlerBase_eraseBuff'][_0xeae980(0x313)](this,_0x2061df);if(_0x5ee543>0x0)this[_0xeae980(0x1f7)](_0x2061df);if(_0x5ee543<0x0)this['onEraseDebuff'](_0x2061df);},VisuMZ['SkillsStatesCore'][_0x2431ab(0x2c3)]=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x1b6)],Game_BattlerBase['prototype'][_0x2431ab(0x1b6)]=function(_0x7c92a6){const _0xfd4faf=_0x2431ab;VisuMZ['SkillsStatesCore'][_0xfd4faf(0x2c3)][_0xfd4faf(0x313)](this,_0x7c92a6);if(!this[_0xfd4faf(0x3cd)](_0x7c92a6))this[_0xfd4faf(0x301)](_0x7c92a6);},VisuMZ['SkillsStatesCore'][_0x2431ab(0x1a2)]=Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x28b)],Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x28b)]=function(_0x488b9d){const _0x378312=_0x2431ab;VisuMZ[_0x378312(0x41d)][_0x378312(0x1a2)][_0x378312(0x313)](this,_0x488b9d);if(!this[_0x378312(0x3cd)](_0x488b9d))this[_0x378312(0x301)](_0x488b9d);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x1f7)]=function(_0x4749c9){},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x276)]=function(_0x15d6c1){},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x26e)]=function(_0x56131e){const _0x556a5f=_0x2431ab;return this[_0x556a5f(0x211)][_0x56131e]===VisuMZ[_0x556a5f(0x41d)]['Settings']['Buffs'][_0x556a5f(0x2f0)];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x234)]=function(_0x4d1708){const _0x41d393=_0x2431ab;return this[_0x41d393(0x211)][_0x4d1708]===-VisuMZ[_0x41d393(0x41d)][_0x41d393(0x3f8)][_0x41d393(0x30e)][_0x41d393(0x2e2)];},VisuMZ[_0x2431ab(0x41d)]['Game_BattlerBase_buffIconIndex']=Game_BattlerBase[_0x2431ab(0x44e)]['buffIconIndex'],Game_BattlerBase['prototype'][_0x2431ab(0x19c)]=function(_0x35edd7,_0x30fc6c){const _0x563874=_0x2431ab;return _0x35edd7=_0x35edd7[_0x563874(0x237)](-0x2,0x2),VisuMZ[_0x563874(0x41d)][_0x563874(0x3a4)][_0x563874(0x313)](this,_0x35edd7,_0x30fc6c);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x2a7)]=function(_0x56a336){const _0x82741=_0x2431ab,_0x56829d=this[_0x82741(0x211)][_0x56a336];return VisuMZ[_0x82741(0x41d)]['Settings'][_0x82741(0x30e)]['MultiplierJS'][_0x82741(0x313)](this,_0x56a336,_0x56829d);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x1d3)]=function(_0x3b7cca){return this['_buffTurns'][_0x3b7cca]||0x0;},Game_BattlerBase[_0x2431ab(0x44e)]['debuffTurns']=function(_0x450f99){return this['buffTurns'](_0x450f99);},Game_BattlerBase['prototype'][_0x2431ab(0x2a5)]=function(_0xc076f9,_0x4f4116){const _0x3c840e=_0x2431ab;if(this[_0x3c840e(0x42d)](_0xc076f9)){const _0x53f1aa=VisuMZ[_0x3c840e(0x41d)][_0x3c840e(0x3f8)]['Buffs'][_0x3c840e(0x450)];this[_0x3c840e(0x359)][_0xc076f9]=_0x4f4116['clamp'](0x0,_0x53f1aa);}},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x1de)]=function(_0x4071e6,_0x126ea7){const _0x125d94=_0x2431ab;this[_0x125d94(0x42d)](_0x4071e6)&&(_0x126ea7+=this[_0x125d94(0x1d3)](stateId),this[_0x125d94(0x38e)](_0x4071e6,_0x126ea7));},Game_BattlerBase[_0x2431ab(0x44e)]['setDebuffTurns']=function(_0x591295,_0x283f0c){const _0x6b32d6=_0x2431ab;if(this[_0x6b32d6(0x1e7)](_0x591295)){if(_0x6b32d6(0x2d3)!==_0x6b32d6(0x2e4)){const _0x389c91=VisuMZ[_0x6b32d6(0x41d)][_0x6b32d6(0x3f8)][_0x6b32d6(0x30e)][_0x6b32d6(0x450)];this['_buffTurns'][_0x591295]=_0x283f0c['clamp'](0x0,_0x389c91);}else{function _0x31f886(){const _0x89260c=_0x6b32d6;return this[_0x89260c(0x251)][_0x89260c(0x336)][_0x89260c(0x313)](this[_0x89260c(0x2da)]);}}}},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x42b)]=function(_0x551c76,_0x31b759){const _0x2be3ab=_0x2431ab;this[_0x2be3ab(0x1e7)](_0x551c76)&&(_0x31b759+=this[_0x2be3ab(0x1d3)](stateId),this['setStateTurns'](_0x551c76,_0x31b759));},Game_BattlerBase[_0x2431ab(0x44e)]['stateData']=function(_0x4970c8){const _0x23a285=_0x2431ab;if(typeof _0x4970c8!=='number')_0x4970c8=_0x4970c8['id'];return this[_0x23a285(0x294)]=this[_0x23a285(0x294)]||{},this[_0x23a285(0x294)][_0x4970c8]=this[_0x23a285(0x294)][_0x4970c8]||{},this[_0x23a285(0x294)][_0x4970c8];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x2fe)]=function(_0x38fc0c,_0x54ea8f){if(typeof _0x38fc0c!=='number')_0x38fc0c=_0x38fc0c['id'];const _0x2a9486=this['stateData'](_0x38fc0c);return _0x2a9486[_0x54ea8f];},Game_BattlerBase['prototype'][_0x2431ab(0x431)]=function(_0x24b4d5,_0x59e726,_0xa55a6c){const _0xdd52e8=_0x2431ab;if(typeof _0x24b4d5!==_0xdd52e8(0x27d))_0x24b4d5=_0x24b4d5['id'];const _0x204e12=this['stateData'](_0x24b4d5);_0x204e12[_0x59e726]=_0xa55a6c;},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x284)]=function(_0x3c14ef){const _0x1a5aca=_0x2431ab;if(typeof _0x3c14ef!==_0x1a5aca(0x27d))_0x3c14ef=_0x3c14ef['id'];this[_0x1a5aca(0x294)]=this[_0x1a5aca(0x294)]||{},this['_stateData'][_0x3c14ef]={};},Game_BattlerBase['prototype'][_0x2431ab(0x401)]=function(_0x4ede4d){const _0x567cd4=_0x2431ab;if(typeof _0x4ede4d!=='number')_0x4ede4d=_0x4ede4d['id'];this[_0x567cd4(0x30c)]=this['_stateDisplay']||{};if(this['_stateDisplay'][_0x4ede4d]===undefined){if(_0x567cd4(0x2e5)==='wBPJK')this[_0x567cd4(0x30c)][_0x4ede4d]='';else{function _0x175f51(){const _0x591bec=_0x567cd4,_0x1053ee=_0x24931e[_0x591bec(0x41d)][_0x591bec(0x3f8)][_0x591bec(0x2d6)];if(!_0x1053ee)return;if(_0x1053ee['ActionEndUpdate']===![])return;if(!this[_0x591bec(0x1dc)])return;this[_0x591bec(0x1dc)]['updateStatesActionEnd']();}}}return this[_0x567cd4(0x30c)][_0x4ede4d];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x36c)]=function(_0x5d8abf,_0x1fd525){const _0x4aa624=_0x2431ab;if(typeof _0x5d8abf!==_0x4aa624(0x27d))_0x5d8abf=_0x5d8abf['id'];this[_0x4aa624(0x30c)]=this['_stateDisplay']||{},this[_0x4aa624(0x30c)][_0x5d8abf]=_0x1fd525;},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x198)]=function(_0x2941bd){const _0x29138d=_0x2431ab;if(typeof _0x2941bd!==_0x29138d(0x27d))_0x2941bd=_0x2941bd['id'];this[_0x29138d(0x30c)]=this['_stateDisplay']||{},this['_stateDisplay'][_0x2941bd]='';},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x255)]=function(_0x3456ca){const _0x3b02e5=_0x2431ab;if(typeof _0x3456ca!=='number')_0x3456ca=_0x3456ca['id'];this[_0x3b02e5(0x226)]=this[_0x3b02e5(0x226)]||{},this[_0x3b02e5(0x226)][_0x3456ca]=this[_0x3b02e5(0x226)][_0x3456ca]||_0x3b02e5(0x18e);const _0x36ec47=this['_stateOrigin'][_0x3456ca];return this[_0x3b02e5(0x1cd)](_0x36ec47);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x34f)]=function(_0x5b3441,_0x1d4b29){const _0x1ddb03=_0x2431ab;this[_0x1ddb03(0x226)]=this[_0x1ddb03(0x226)]||{};const _0x18bcca=_0x1d4b29?this[_0x1ddb03(0x2bd)](_0x1d4b29):this[_0x1ddb03(0x34a)]();this[_0x1ddb03(0x226)][_0x5b3441]=_0x18bcca;},Game_BattlerBase['prototype']['clearStateOrigin']=function(_0x2c77ed){const _0x39c9e0=_0x2431ab;this[_0x39c9e0(0x226)]=this[_0x39c9e0(0x226)]||{},delete this[_0x39c9e0(0x226)][_0x2c77ed];},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x34a)]=function(){const _0x236c5d=_0x2431ab,_0x1ca4bf=this[_0x236c5d(0x26b)]();return this[_0x236c5d(0x2bd)](_0x1ca4bf);},Game_BattlerBase[_0x2431ab(0x44e)]['getCurrentStateActiveUser']=function(){const _0x1bcba5=_0x2431ab;if($gameParty[_0x1bcba5(0x1df)]()){if(_0x1bcba5(0x2f1)!==_0x1bcba5(0x427)){if(BattleManager[_0x1bcba5(0x1dc)])return BattleManager[_0x1bcba5(0x1dc)];else{if(BattleManager['_currentActor']){if('rNMLG'===_0x1bcba5(0x3e4))return BattleManager[_0x1bcba5(0x2a2)];else{function _0x603396(){const _0x1d2c18=_0x1bcba5,_0x5a48d9=_0x5d7e32['parse']('['+_0x2d0283['$1'][_0x1d2c18(0x30a)](/\d+/g)+']');for(const _0x4c0eb8 of _0x5a48d9){if(!_0x50d32c[_0x1d2c18(0x3c2)](_0x4c0eb8))return!![];}return![];}}}}}else{function _0x3d0238(){return _0x245fea(_0x165d66['$1']);}}}else{const _0x4a0f62=SceneManager[_0x1bcba5(0x174)];if(![Scene_Map,Scene_Item]['includes'](_0x4a0f62['constructor'])){if(_0x1bcba5(0x2ec)===_0x1bcba5(0x3bf)){function _0x1001fe(){const _0x5ad6db=_0x1bcba5;_0x31bf0e[_0x5ad6db(0x44e)][_0x5ad6db(0x276)]['call'](this,_0xd8ead9),this[_0x5ad6db(0x269)](_0x59c090);}}else return $gameParty['menuActor']();}}return this;},Game_BattlerBase[_0x2431ab(0x44e)]['convertTargetToStateOriginKey']=function(_0x3e5a38){const _0x1dc690=_0x2431ab;if(!_0x3e5a38)return _0x1dc690(0x18e);if(_0x3e5a38[_0x1dc690(0x1c3)]())return _0x1dc690(0x1d9)[_0x1dc690(0x3d8)](_0x3e5a38['actorId']());else{if(_0x1dc690(0x2f8)===_0x1dc690(0x2f8)){const _0x3f4999=_0x1dc690(0x333)[_0x1dc690(0x3d8)](_0x3e5a38['enemyId']()),_0x588f9d=_0x1dc690(0x29d)[_0x1dc690(0x3d8)](_0x3e5a38[_0x1dc690(0x463)]()),_0x3490fb=_0x1dc690(0x209)[_0x1dc690(0x3d8)]($gameTroop[_0x1dc690(0x409)]());return _0x1dc690(0x430)[_0x1dc690(0x3d8)](_0x3f4999,_0x588f9d,_0x3490fb);}else{function _0x2879c9(){if(!this['_actor']['isLearnedSkill'](_0x4c29c4))return!![];}}}return _0x1dc690(0x18e);},Game_BattlerBase[_0x2431ab(0x44e)]['getStateOriginByKey']=function(_0x3043c4){const _0x3f4ea1=_0x2431ab;if(_0x3043c4===_0x3f4ea1(0x18e))return this;else{if(_0x3043c4['match'](/<actor-(\d+)>/i))return $gameActors[_0x3f4ea1(0x20a)](Number(RegExp['$1']));else{if($gameParty[_0x3f4ea1(0x1df)]()&&_0x3043c4[_0x3f4ea1(0x30a)](/<troop-(\d+)>/i)){if(_0x3f4ea1(0x2ad)==='tAyQE'){const _0x97805e=Number(RegExp['$1']);if(_0x97805e===$gameTroop[_0x3f4ea1(0x409)]()){if(_0x3043c4[_0x3f4ea1(0x30a)](/<member-(\d+)>/i))return $gameTroop[_0x3f4ea1(0x1f8)]()[Number(RegExp['$1'])];}}else{function _0x256c7d(){const _0x4fecfc=_0x3f4ea1,_0xcf2ea=_0x3473de[_0x4fecfc(0x275)](_0x5176f2);if(_0xcf2ea)this[_0x4fecfc(0x18a)][_0x4fecfc(0x36a)][_0x4fecfc(0x3a1)](_0xcf2ea);}}}if(_0x3043c4['match'](/<enemy-(\d+)>/i))return new Game_Enemy(Number(RegExp['$1']),-0x1f4,-0x1f4);}}return this;},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x447)]=Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x3a5)],Game_Battler['prototype'][_0x2431ab(0x3a5)]=function(_0x3289b7){const _0x1ec60=_0x2431ab,_0x49a562=this['isStateAddable'](_0x3289b7);VisuMZ[_0x1ec60(0x41d)][_0x1ec60(0x447)][_0x1ec60(0x313)](this,_0x3289b7);if(_0x49a562&&this['hasState']($dataStates[_0x3289b7])){this[_0x1ec60(0x453)](_0x3289b7);;}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x261)]=Game_Battler['prototype'][_0x2431ab(0x1d8)],Game_Battler[_0x2431ab(0x44e)]['isStateAddable']=function(_0x4c4efa){const _0x55a3a6=_0x2431ab,_0x5d4172=$dataStates[_0x4c4efa];if(_0x5d4172&&_0x5d4172[_0x55a3a6(0x1b3)]['match'](/<NO DEATH CLEAR>/i))return!this[_0x55a3a6(0x432)](_0x4c4efa)&&!this[_0x55a3a6(0x3e8)](_0x4c4efa)&&!this[_0x55a3a6(0x340)]['isStateRemoved'](_0x4c4efa);return VisuMZ['SkillsStatesCore'][_0x55a3a6(0x261)][_0x55a3a6(0x313)](this,_0x4c4efa);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x453)]=function(_0x541bb6){const _0x5b654e=_0x2431ab;this['setStateOrigin'](_0x541bb6),this['onAddStateMakeCustomSlipValues'](_0x541bb6),this[_0x5b654e(0x2b7)](_0x541bb6),this[_0x5b654e(0x300)](_0x541bb6);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x3cb)]=function(_0x346007){const _0x1b5f8f=_0x2431ab;Game_BattlerBase[_0x1b5f8f(0x44e)][_0x1b5f8f(0x3cb)][_0x1b5f8f(0x313)](this,_0x346007),this['onEraseStateCustomJS'](_0x346007),this[_0x1b5f8f(0x216)](_0x346007);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x3f4)]=function(_0x4b2fa8){const _0x493cec=_0x2431ab;for(const _0x122f3a of this[_0x493cec(0x33c)]()){if(_0x493cec(0x289)!==_0x493cec(0x224))this[_0x493cec(0x34c)](_0x122f3a['id'])&&_0x122f3a[_0x493cec(0x1ec)]===_0x4b2fa8&&(this['removeState'](_0x122f3a['id']),this[_0x493cec(0x278)](_0x122f3a['id']),this[_0x493cec(0x2d7)](_0x122f3a['id']));else{function _0x27d4a8(){const _0x7b923a=_0x493cec,_0x24ff6a=this['_commandNameWindow'];_0x24ff6a['drawText'](_0x22612d,0x0,_0x555518['y'],_0x24ff6a[_0x7b923a(0x3b4)],_0x7b923a(0x33f));}}}},Game_Battler[_0x2431ab(0x44e)]['onExpireState']=function(_0x5e72b8){this['onExpireStateCustomJS'](_0x5e72b8);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x2b7)]=function(_0x369673){const _0x1a245c=_0x2431ab;if(this[_0x1a245c(0x223)]||this[_0x1a245c(0x21b)])return;const _0x4a5f9f=VisuMZ[_0x1a245c(0x41d)]['stateAddJS'];if(_0x4a5f9f[_0x369673])_0x4a5f9f[_0x369673]['call'](this,_0x369673);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x212)]=function(_0x1cabea){const _0x11ef7a=_0x2431ab;if(this['_tempActor']||this[_0x11ef7a(0x21b)])return;const _0x1c2cd7=VisuMZ['SkillsStatesCore'][_0x11ef7a(0x201)];if(_0x1c2cd7[_0x1cabea])_0x1c2cd7[_0x1cabea][_0x11ef7a(0x313)](this,_0x1cabea);},Game_Battler[_0x2431ab(0x44e)]['onExpireStateCustomJS']=function(_0x19243a){const _0x1747e6=_0x2431ab;if(this[_0x1747e6(0x223)]||this[_0x1747e6(0x21b)])return;const _0x5d29db=VisuMZ['SkillsStatesCore'][_0x1747e6(0x3d6)];if(_0x5d29db[_0x19243a])_0x5d29db[_0x19243a][_0x1747e6(0x313)](this,_0x19243a);},Game_Battler['prototype'][_0x2431ab(0x300)]=function(_0x4abea6){const _0x1b7ac1=_0x2431ab;if(this[_0x1b7ac1(0x223)]||this[_0x1b7ac1(0x21b)])return;try{VisuMZ['SkillsStatesCore']['Settings'][_0x1b7ac1(0x2d6)][_0x1b7ac1(0x467)]['call'](this,_0x4abea6);}catch(_0x5807aa){if($gameTemp[_0x1b7ac1(0x31d)]())console[_0x1b7ac1(0x245)](_0x5807aa);}},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x216)]=function(_0x6d27d6){const _0x2fbbcf=_0x2431ab;if(this[_0x2fbbcf(0x223)]||this[_0x2fbbcf(0x21b)])return;try{VisuMZ[_0x2fbbcf(0x41d)]['Settings']['States'][_0x2fbbcf(0x31f)]['call'](this,_0x6d27d6);}catch(_0x3c2395){if(_0x2fbbcf(0x17a)===_0x2fbbcf(0x17f)){function _0x4f8212(){const _0x1962c9=_0x2fbbcf;_0x17736f[_0x1962c9(0x41d)]['Sprite_StateIcon_loadBitmap'][_0x1962c9(0x313)](this),this[_0x1962c9(0x192)]();}}else{if($gameTemp[_0x2fbbcf(0x31d)]())console['log'](_0x3c2395);}}},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x2d7)]=function(_0x417a0f){const _0x366ceb=_0x2431ab;if(this[_0x366ceb(0x223)]||this[_0x366ceb(0x21b)])return;try{VisuMZ['SkillsStatesCore'][_0x366ceb(0x3f8)][_0x366ceb(0x2d6)][_0x366ceb(0x337)][_0x366ceb(0x313)](this,_0x417a0f);}catch(_0x507f03){if($gameTemp['isPlaytest']())console[_0x366ceb(0x245)](_0x507f03);}},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x361)]=function(_0x3a5fbd){const _0x5b321d=_0x2431ab;return _0x3a5fbd=_0x3a5fbd[_0x5b321d(0x42a)]()[_0x5b321d(0x42e)](),this[_0x5b321d(0x33c)]()[_0x5b321d(0x253)](_0x5c4107=>_0x5c4107['categories'][_0x5b321d(0x3be)](_0x3a5fbd));},Game_Battler['prototype'][_0x2431ab(0x27f)]=function(_0x16f704,_0x5e1fd4){const _0x351f7d=_0x2431ab;_0x16f704=_0x16f704['toUpperCase']()['trim'](),_0x5e1fd4=_0x5e1fd4||0x0;const _0x486254=this[_0x351f7d(0x361)](_0x16f704),_0x22468c=[];for(const _0x407acb of _0x486254){if(!_0x407acb)continue;if(_0x5e1fd4<=0x0)return;_0x22468c['push'](_0x407acb['id']),this[_0x351f7d(0x340)][_0x351f7d(0x2f2)]=!![],_0x5e1fd4--;}while(_0x22468c[_0x351f7d(0x205)]>0x0){if(_0x351f7d(0x281)!==_0x351f7d(0x281)){function _0x46509d(){const _0xc96161=_0x351f7d,_0x56478c=_0xa15ec8(_0x3c6408['$1']);_0x59b152[_0xc96161(0x17b)](_0x56478c);}}else this[_0x351f7d(0x43b)](_0x22468c[_0x351f7d(0x1f0)]());}},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x17b)]=function(_0x374a98){const _0x43bf65=_0x2431ab;_0x374a98=_0x374a98[_0x43bf65(0x42a)]()['trim']();const _0x325e63=this[_0x43bf65(0x361)](_0x374a98),_0xd03225=[];for(const _0x4f917d of _0x325e63){if(!_0x4f917d)continue;_0xd03225[_0x43bf65(0x3a1)](_0x4f917d['id']),this['_result']['success']=!![];}while(_0xd03225[_0x43bf65(0x205)]>0x0){this[_0x43bf65(0x43b)](_0xd03225[_0x43bf65(0x1f0)]());}},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x34b)]=function(_0x50e775){const _0x3fdd8c=_0x2431ab;return this[_0x3fdd8c(0x2c1)](_0x50e775)>0x0;},Game_Battler[_0x2431ab(0x44e)]['hasStateCategory']=function(_0x53dc68){return this['totalStateCategory'](_0x53dc68)>0x0;},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x2c1)]=function(_0xbd3098){const _0x526ea7=_0x2431ab,_0x1f7487=this['statesByCategory'](_0xbd3098)[_0x526ea7(0x253)](_0x178e9d=>this[_0x526ea7(0x243)](_0x178e9d['id']));return _0x1f7487[_0x526ea7(0x205)];},Game_Battler['prototype'][_0x2431ab(0x45a)]=function(_0x9d3ef){const _0x5dd274=_0x2431ab,_0x1f4c98=this['statesByCategory'](_0x9d3ef);return _0x1f4c98[_0x5dd274(0x205)];},VisuMZ['SkillsStatesCore']['Game_Battler_addBuff']=Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x1b2)],Game_Battler['prototype']['addBuff']=function(_0x1ed20a,_0x337d0d){const _0x3a8508=_0x2431ab;VisuMZ[_0x3a8508(0x41d)][_0x3a8508(0x1fb)][_0x3a8508(0x313)](this,_0x1ed20a,_0x337d0d);if(this['isBuffAffected'](_0x1ed20a)){if(_0x3a8508(0x2ae)!=='tsyiO'){function _0x35cde8(){const _0x205b37=_0x3a8508;_0x4996d3=_0x376b47['concat'](_0x212f82[_0x205b37(0x351)]);}}else this[_0x3a8508(0x1ab)](_0x1ed20a,_0x337d0d);}},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x458)]=function(_0x3204f9){},VisuMZ[_0x2431ab(0x41d)]['Game_Battler_addDebuff']=Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x3c5)],Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x3c5)]=function(_0x5db96a,_0x71f674){const _0x5cc89a=_0x2431ab;VisuMZ['SkillsStatesCore'][_0x5cc89a(0x386)]['call'](this,_0x5db96a,_0x71f674);if(this['isDebuffAffected'](_0x5db96a)){if(_0x5cc89a(0x26d)!==_0x5cc89a(0x26d)){function _0x5d9697(){const _0x12b5f7=_0x5cc89a;if(!_0x22edd0)return![];if(!_0x49448f[_0x12b5f7(0x41d)]['Game_BattlerBase_meetsSkillConditions']['call'](this,_0x18d0d7))return![];if(!this[_0x12b5f7(0x1f9)](_0x5abbba))return![];if(!this[_0x12b5f7(0x268)](_0x572e11))return![];if(!this['meetsSkillConditionsGlobalJS'](_0x560c10))return![];return!![];}}else this[_0x5cc89a(0x364)](_0x5db96a,_0x71f674);}},Game_Battler['prototype'][_0x2431ab(0x1c9)]=function(){const _0x198374=_0x2431ab;for(let _0x42e008=0x0;_0x42e008<this[_0x198374(0x344)]();_0x42e008++){if(this[_0x198374(0x25e)](_0x42e008)){if('WTdge'===_0x198374(0x346)){const _0x8d6c26=this[_0x198374(0x211)][_0x42e008];this[_0x198374(0x2d2)](_0x42e008);if(_0x8d6c26>0x0)this[_0x198374(0x206)](_0x42e008);if(_0x8d6c26<0x0)this[_0x198374(0x307)](_0x42e008);}else{function _0x37b03e(){return this['helpWindowRectSkillsStatesCore']();}}}}},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x1ab)]=function(_0x58033f,_0x48b1e1){const _0x55ced3=_0x2431ab;this[_0x55ced3(0x1a0)](_0x58033f,_0x48b1e1);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x364)]=function(_0x1bff0f,_0x30e4c6){const _0x286894=_0x2431ab;this[_0x286894(0x288)](_0x1bff0f,_0x30e4c6);},Game_Battler['prototype'][_0x2431ab(0x1f7)]=function(_0x5ebf84){const _0x2cb845=_0x2431ab;Game_BattlerBase[_0x2cb845(0x44e)][_0x2cb845(0x1f7)][_0x2cb845(0x313)](this,_0x5ebf84),this[_0x2cb845(0x1db)](_0x5ebf84);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x276)]=function(_0x41ee1a){const _0x4bf712=_0x2431ab;Game_BattlerBase[_0x4bf712(0x44e)]['onEraseDebuff'][_0x4bf712(0x313)](this,_0x41ee1a),this['onEraseDebuffGlobalJS'](_0x41ee1a);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x206)]=function(_0x91217f){const _0x593df5=_0x2431ab;this[_0x593df5(0x2a6)](_0x91217f);},Game_Battler['prototype']['onExpireDebuff']=function(_0x4d9b31){this['onExpireDebuffGlobalJS'](_0x4d9b31);},Game_Battler[_0x2431ab(0x44e)]['onAddBuffGlobalJS']=function(_0x1ab24e,_0x573f7a){const _0x30cfc8=_0x2431ab;VisuMZ[_0x30cfc8(0x41d)][_0x30cfc8(0x3f8)]['Buffs'][_0x30cfc8(0x45c)][_0x30cfc8(0x313)](this,_0x1ab24e,_0x573f7a);},Game_Battler['prototype'][_0x2431ab(0x288)]=function(_0xd65b6f,_0x26a70b){const _0xb18b45=_0x2431ab;VisuMZ[_0xb18b45(0x41d)]['Settings'][_0xb18b45(0x30e)][_0xb18b45(0x3fd)]['call'](this,_0xd65b6f,_0x26a70b);},Game_BattlerBase['prototype'][_0x2431ab(0x1db)]=function(_0xa2e404){const _0x4173da=_0x2431ab;VisuMZ[_0x4173da(0x41d)][_0x4173da(0x3f8)]['Buffs'][_0x4173da(0x39a)][_0x4173da(0x313)](this,_0xa2e404);},Game_BattlerBase[_0x2431ab(0x44e)][_0x2431ab(0x269)]=function(_0x20fff4){const _0x433109=_0x2431ab;VisuMZ['SkillsStatesCore']['Settings'][_0x433109(0x30e)][_0x433109(0x37b)]['call'](this,_0x20fff4);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x2a6)]=function(_0x3804dc){const _0x1b88ef=_0x2431ab;VisuMZ['SkillsStatesCore'][_0x1b88ef(0x3f8)][_0x1b88ef(0x30e)][_0x1b88ef(0x1d1)][_0x1b88ef(0x313)](this,_0x3804dc);},Game_Battler[_0x2431ab(0x44e)]['onExpireDebuffGlobalJS']=function(_0x1df622){const _0x1ca1a2=_0x2431ab;VisuMZ[_0x1ca1a2(0x41d)][_0x1ca1a2(0x3f8)]['Buffs']['onExpireDebuffJS'][_0x1ca1a2(0x313)](this,_0x1df622);},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x3fe)]=function(_0x281a31){const _0x4c3f17=_0x2431ab,_0x277510=VisuMZ[_0x4c3f17(0x41d)],_0x5dfd9f=[_0x4c3f17(0x2d1),_0x4c3f17(0x2ea),_0x4c3f17(0x2a4),_0x4c3f17(0x1e1),_0x4c3f17(0x197),_0x4c3f17(0x34d)];for(const _0x5375af of _0x5dfd9f){if(_0x4c3f17(0x2fb)!=='qaqvE')_0x277510[_0x5375af][_0x281a31]&&_0x277510[_0x5375af][_0x281a31][_0x4c3f17(0x313)](this,_0x281a31);else{function _0x23bf46(){const _0x126ea0=_0x4c3f17;_0x2de013[_0x126ea0(0x44e)][_0x126ea0(0x1f7)]['call'](this,_0x200628),this[_0x126ea0(0x1db)](_0x730087);}}}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x40c)]=Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x1ed)],Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x1ed)]=function(){const _0x557708=_0x2431ab;this['recalculateSlipDamageJS'](),VisuMZ[_0x557708(0x41d)][_0x557708(0x40c)]['call'](this),this[_0x557708(0x454)](),this[_0x557708(0x3ab)]();},Game_Battler[_0x2431ab(0x44e)][_0x2431ab(0x454)]=function(){const _0x177782=_0x2431ab;for(const _0x5572be of this['passiveStates']()){if(_0x177782(0x355)!==_0x177782(0x35f)){if(!_0x5572be)continue;this[_0x177782(0x3fe)](_0x5572be['id']);}else{function _0x4ba86c(){const _0x31386a=_0x177782;if(_0x3f4c21[_0x31386a(0x33c)]()[_0x31386a(0x205)]<=0x0)return;const _0x4f766=this[_0x31386a(0x396)]()[_0x31386a(0x1b3)];if(_0x4f766['match'](/<STATE[ ](.*)[ ]CATEGORY REMOVE:[ ]ALL>/i)){const _0x3f6b3a=_0x15e28b(_0x310d81['$1']);_0x43bc71[_0x31386a(0x17b)](_0x3f6b3a);}const _0x2de715=_0x4f766['match'](/<STATE[ ](.*)[ ]CATEGORY REMOVE:[ ](\d+)>/gi);if(_0x2de715)for(const _0x2f259c of _0x2de715){_0x2f259c['match'](/<STATE[ ](.*)[ ]CATEGORY REMOVE:[ ](\d+)>/i);const _0x302cea=_0x268e70(_0x62da53['$1']),_0x59d332=_0x2bcbcb(_0x468224['$2']);_0x3b07a4[_0x31386a(0x27f)](_0x302cea,_0x59d332);}}}}},Game_Battler[_0x2431ab(0x44e)]['recalculateSlipDamageJS']=function(){const _0xd6224e=_0x2431ab;for(const _0x30186e of this['states']()){if(!_0x30186e)continue;_0x30186e['note'][_0xd6224e(0x30a)](/<JS SLIP REFRESH>/i)&&this[_0xd6224e(0x3fe)](_0x30186e['id']);}},Game_Battler['prototype']['regenerateAllSkillsStatesCore']=function(){const _0x22b014=_0x2431ab;if(!this[_0x22b014(0x348)]())return;const _0xb9b58f=this[_0x22b014(0x33c)]();for(const _0xc54074 of _0xb9b58f){if('ohBMh'!==_0x22b014(0x452)){function _0x32b26b(){const _0xb1ee40=_0x22b014;_0x527d39[_0xb1ee40(0x41d)][_0xb1ee40(0x386)][_0xb1ee40(0x313)](this,_0x18c4f0,_0x3558eb),this['isDebuffAffected'](_0x1b31db)&&this[_0xb1ee40(0x364)](_0x475293,_0x3870f3);}}else{if(!_0xc54074)continue;this[_0x22b014(0x272)](_0xc54074);}}},Game_Battler[_0x2431ab(0x44e)]['onRegenerateCustomStateDamageOverTime']=function(_0x5d71d3){const _0x1a45ee=_0x2431ab,_0x450732=this[_0x1a45ee(0x2fe)](_0x5d71d3['id'],_0x1a45ee(0x414))||0x0,_0xd62f31=-this[_0x1a45ee(0x388)](),_0x4e76e9=Math['max'](_0x450732,_0xd62f31);if(_0x4e76e9!==0x0)this[_0x1a45ee(0x3bb)](_0x4e76e9);const _0x1bfd10=this[_0x1a45ee(0x2fe)](_0x5d71d3['id'],_0x1a45ee(0x219))||0x0;if(_0x1bfd10!==0x0)this[_0x1a45ee(0x22e)](_0x1bfd10);const _0x314ed9=this[_0x1a45ee(0x2fe)](_0x5d71d3['id'],_0x1a45ee(0x2b1))||0x0;if(_0x314ed9!==0x0)this[_0x1a45ee(0x329)](_0x314ed9);},VisuMZ['SkillsStatesCore'][_0x2431ab(0x383)]=Game_Actor[_0x2431ab(0x44e)][_0x2431ab(0x241)],Game_Actor['prototype'][_0x2431ab(0x241)]=function(){const _0xe6c57d=_0x2431ab,_0x4afe9e=VisuMZ[_0xe6c57d(0x41d)][_0xe6c57d(0x383)][_0xe6c57d(0x313)](this),_0xf9c577=VisuMZ[_0xe6c57d(0x41d)][_0xe6c57d(0x3f8)]['Skills'];let _0x218d98=_0xf9c577[_0xe6c57d(0x371)];return $gameParty[_0xe6c57d(0x1df)]()&&(_0x218d98=_0x218d98[_0xe6c57d(0x233)](_0xf9c577['BattleHiddenSkillTypes'])),_0x4afe9e[_0xe6c57d(0x253)](_0x4ef0c4=>!_0x218d98[_0xe6c57d(0x3be)](_0x4ef0c4));},Game_Actor[_0x2431ab(0x44e)][_0x2431ab(0x19d)]=function(){const _0x5e0a5a=_0x2431ab;return this[_0x5e0a5a(0x3b1)]()[_0x5e0a5a(0x253)](_0x2b0a9e=>this[_0x5e0a5a(0x1c7)](_0x2b0a9e));},Game_Actor[_0x2431ab(0x44e)][_0x2431ab(0x1c7)]=function(_0x218a50){const _0x3dce3d=_0x2431ab;if(!this[_0x3dce3d(0x2d4)](_0x218a50))return![];const _0x70a956=this[_0x3dce3d(0x241)](),_0x2a077e=DataManager['getSkillTypes'](_0x218a50),_0x13d718=_0x70a956[_0x3dce3d(0x253)](_0x8365bc=>_0x2a077e[_0x3dce3d(0x3be)](_0x8365bc));return _0x13d718[_0x3dce3d(0x205)]>0x0;},Game_Actor[_0x2431ab(0x44e)][_0x2431ab(0x1b1)]=function(){const _0x41d06f=_0x2431ab;let _0x589303=[this[_0x41d06f(0x20a)](),this[_0x41d06f(0x20b)]()];_0x589303=_0x589303[_0x41d06f(0x233)](this[_0x41d06f(0x2c4)]()['filter'](_0xda7e27=>_0xda7e27));for(const _0x294bac of this[_0x41d06f(0x16d)]){const _0x3b64ba=$dataSkills[_0x294bac];if(_0x3b64ba)_0x589303[_0x41d06f(0x3a1)](_0x3b64ba);}return _0x589303;},Game_Actor['prototype']['addPassiveStatesByPluginParameters']=function(){const _0x324986=_0x2431ab;Game_Battler['prototype'][_0x324986(0x3f6)][_0x324986(0x313)](this);const _0xff9963=VisuMZ[_0x324986(0x41d)][_0x324986(0x3f8)][_0x324986(0x3ac)][_0x324986(0x215)];this[_0x324986(0x18a)][_0x324986(0x36a)]=this[_0x324986(0x18a)][_0x324986(0x36a)][_0x324986(0x233)](_0xff9963);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x267)]=Game_Actor[_0x2431ab(0x44e)][_0x2431ab(0x360)],Game_Actor[_0x2431ab(0x44e)][_0x2431ab(0x360)]=function(_0x95f1a2){const _0x3d41f5=_0x2431ab;VisuMZ[_0x3d41f5(0x41d)][_0x3d41f5(0x267)][_0x3d41f5(0x313)](this,_0x95f1a2),this[_0x3d41f5(0x18a)]={};},VisuMZ['SkillsStatesCore'][_0x2431ab(0x41c)]=Game_Actor[_0x2431ab(0x44e)]['forgetSkill'],Game_Actor['prototype'][_0x2431ab(0x41f)]=function(_0x53848a){const _0x406ec9=_0x2431ab;VisuMZ[_0x406ec9(0x41d)][_0x406ec9(0x41c)][_0x406ec9(0x313)](this,_0x53848a),this[_0x406ec9(0x18a)]={};},Game_Enemy[_0x2431ab(0x44e)][_0x2431ab(0x1b1)]=function(){const _0x1e8000=_0x2431ab;let _0x3a8dc1=[this[_0x1e8000(0x27a)]()];return _0x3a8dc1[_0x1e8000(0x233)](this[_0x1e8000(0x3b1)]());},Game_Enemy[_0x2431ab(0x44e)][_0x2431ab(0x3f6)]=function(){const _0x4d9bd9=_0x2431ab;Game_Battler[_0x4d9bd9(0x44e)]['addPassiveStatesByPluginParameters']['call'](this);const _0x1bb3ed=VisuMZ[_0x4d9bd9(0x41d)]['Settings']['PassiveStates'][_0x4d9bd9(0x3fb)];this[_0x4d9bd9(0x18a)][_0x4d9bd9(0x36a)]=this[_0x4d9bd9(0x18a)][_0x4d9bd9(0x36a)][_0x4d9bd9(0x233)](_0x1bb3ed);},Game_Enemy[_0x2431ab(0x44e)][_0x2431ab(0x3b1)]=function(){const _0x165266=_0x2431ab,_0x4f30b7=[];for(const _0x122bae of this[_0x165266(0x27a)]()[_0x165266(0x302)]){const _0x456359=$dataSkills[_0x122bae['skillId']];if(_0x456359&&!_0x4f30b7[_0x165266(0x3be)](_0x456359))_0x4f30b7[_0x165266(0x3a1)](_0x456359);}return _0x4f30b7;},Game_Enemy[_0x2431ab(0x44e)]['meetsStateCondition']=function(_0x47f3a7){const _0x2a0621=_0x2431ab;return this[_0x2a0621(0x3b7)]($dataStates[_0x47f3a7]);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x3ec)]=Game_Unit['prototype']['isAllDead'],Game_Unit['prototype'][_0x2431ab(0x24f)]=function(){const _0x41822=_0x2431ab;if(this['isPartyAllAffectedByGroupDefeatStates']())return!![];return VisuMZ[_0x41822(0x41d)]['Game_Unit_isAllDead'][_0x41822(0x313)](this);},Game_Unit[_0x2431ab(0x44e)]['isPartyAllAffectedByGroupDefeatStates']=function(){const _0x69c06=_0x2431ab,_0x5daf93=this['aliveMembers']();for(const _0x34df07 of _0x5daf93){if(!_0x34df07[_0x69c06(0x24c)]())return![];}return!![];},VisuMZ[_0x2431ab(0x41d)]['Game_Troop_setup']=Game_Troop[_0x2431ab(0x44e)][_0x2431ab(0x3a6)],Game_Troop[_0x2431ab(0x44e)]['setup']=function(_0x931e2){const _0x5aaf12=_0x2431ab;VisuMZ[_0x5aaf12(0x41d)]['Game_Troop_setup'][_0x5aaf12(0x313)](this,_0x931e2),this[_0x5aaf12(0x3da)]();},Game_Troop[_0x2431ab(0x44e)][_0x2431ab(0x3da)]=function(){const _0x283219=_0x2431ab;this[_0x283219(0x248)]=Graphics['frameCount'];},Game_Troop['prototype'][_0x2431ab(0x409)]=function(){const _0x5c31fb=_0x2431ab;return this['_currentTroopUniqueID']=this['_currentTroopUniqueID']||Graphics[_0x5c31fb(0x1dd)],this[_0x5c31fb(0x248)];},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x291)]=function(){const _0x416634=_0x2431ab;if(ConfigManager[_0x416634(0x1c0)]&&ConfigManager['uiHelpPosition']!==undefined){if(_0x416634(0x2b2)!==_0x416634(0x2b2)){function _0x3d048f(){const _0x58a9ba=_0x416634;if(!_0x5b2c9c[_0x58a9ba(0x41d)][_0x58a9ba(0x3f8)][_0x58a9ba(0x2d6)][_0x58a9ba(0x1bb)])return;const _0xfeadd0=_0x102352['iconWidth'],_0x46b5c0=_0x284582[_0x58a9ba(0x407)]/0x2,_0x34b986=_0x2b16ad[_0x58a9ba(0x451)]();this['changeTextColor'](_0x34b986),this['changeOutlineColor']('rgba(0,\x200,\x200,\x201)'),this[_0x58a9ba(0x2c6)]['fontBold']=!![],this[_0x58a9ba(0x2c6)][_0x58a9ba(0x2fa)]=_0x5d5165[_0x58a9ba(0x41d)][_0x58a9ba(0x3f8)]['States'][_0x58a9ba(0x37f)],_0xbd73fa+=_0x220e33[_0x58a9ba(0x41d)][_0x58a9ba(0x3f8)][_0x58a9ba(0x2d6)]['DataOffsetX'],_0x51d6ec+=_0xabc1bf[_0x58a9ba(0x41d)][_0x58a9ba(0x3f8)][_0x58a9ba(0x2d6)]['DataOffsetY'];const _0x350c85=_0x3337bd(_0x2c8c83[_0x58a9ba(0x401)](_0xf66578['id']));this[_0x58a9ba(0x438)](_0x350c85,_0x34b176,_0x104050,_0xfeadd0,_0x58a9ba(0x33f)),this['contents'][_0x58a9ba(0x262)]=![],this['resetFontSettings']();}}else return ConfigManager[_0x416634(0x37a)];}else{if(this['isUseSkillsStatesCoreUpdatedLayout']())return this['updatedLayoutStyle']()[_0x416634(0x30a)](/LOWER/i);else{if('XbXEh'!=='aDoVw')Scene_ItemBase[_0x416634(0x44e)]['isRightInputMode']['call'](this);else{function _0x1a5b0c(){const _0x4ab7cb=_0x416634,_0x45fef8=_0x3bb145[_0x4ab7cb(0x1aa)]('['+_0x5ea8be['$1']['match'](/\d+/g)+']');this[_0x4ab7cb(0x18a)][_0x4ab7cb(0x36a)]=this[_0x4ab7cb(0x18a)][_0x4ab7cb(0x36a)][_0x4ab7cb(0x233)](_0x45fef8);}}}}},Scene_Skill['prototype']['isRightInputMode']=function(){const _0xa7f498=_0x2431ab;if(ConfigManager['uiMenuStyle']&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0xa7f498(0x1a5)];else{if(this[_0xa7f498(0x2b9)]()){if(_0xa7f498(0x398)!==_0xa7f498(0x398)){function _0x1b6d27(){const _0x527f28=_0xa7f498,_0x401a78=_0x200db2['parse']('['+_0x2ef17a['$1'][_0x527f28(0x30a)](/\d+/g)+']');for(const _0x55de91 of _0x401a78){if(!_0x372375[_0x527f28(0x3c2)](_0x55de91))return![];}return!![];}}else return this[_0xa7f498(0x439)]()[_0xa7f498(0x30a)](/RIGHT/i);}else return Scene_ItemBase[_0xa7f498(0x44e)][_0xa7f498(0x1af)][_0xa7f498(0x313)](this);}},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x439)]=function(){const _0x327a97=_0x2431ab;return VisuMZ['SkillsStatesCore']['Settings'][_0x327a97(0x299)][_0x327a97(0x20e)];},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x3c8)]=function(){const _0x5eeb7d=_0x2431ab;return this['_categoryWindow']&&this['_categoryWindow'][_0x5eeb7d(0x3c8)]();},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x2b9)]=function(){const _0x38265e=_0x2431ab;return VisuMZ['SkillsStatesCore']['Settings'][_0x38265e(0x299)][_0x38265e(0x202)];},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x44d)]=Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x16f)],Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x16f)]=function(){const _0x4278cf=_0x2431ab;if(this['isUseSkillsStatesCoreUpdatedLayout']()){if('ReWFr'===_0x4278cf(0x27b))return this[_0x4278cf(0x179)]();else{function _0xfbfac4(){const _0x39fbc0=_0x4278cf;if(_0x44e69b[_0x39fbc0(0x3c2)](_0x2cdba3))return!![];}}}else{if(_0x4278cf(0x3e0)===_0x4278cf(0x3e0))return VisuMZ[_0x4278cf(0x41d)][_0x4278cf(0x44d)]['call'](this);else{function _0xe24360(){const _0x1d631d=_0x4278cf,_0x91ecff=_0x54cccc['parse']('['+_0x4f534f['$1'][_0x1d631d(0x30a)](/\d+/g)+']');for(const _0x14293f of _0x91ecff){if(!_0x20b7fc[_0x1d631d(0x3c2)](_0x14293f))return!![];}return![];}}}},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x179)]=function(){const _0x3ae280=_0x2431ab,_0x3661d6=0x0,_0x42b632=this[_0x3ae280(0x2c5)](),_0x3ddaa9=Graphics[_0x3ae280(0x35e)],_0x47f5f7=this[_0x3ae280(0x2df)]();return new Rectangle(_0x3661d6,_0x42b632,_0x3ddaa9,_0x47f5f7);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x37d)]=Scene_Skill['prototype']['skillTypeWindowRect'],Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x32f)]=function(){const _0x109dc0=_0x2431ab;if(this['isUseSkillsStatesCoreUpdatedLayout']())return this[_0x109dc0(0x182)]();else{if(_0x109dc0(0x1fc)==='WrcAy'){function _0x7dc699(){if(!_0x54cc38['isGroupDefeatStateAffected']())return![];}}else return VisuMZ['SkillsStatesCore'][_0x109dc0(0x37d)]['call'](this);}},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x182)]=function(){const _0x40cb6e=_0x2431ab,_0x582a15=this['mainCommandWidth'](),_0x4250e7=this['calcWindowHeight'](0x3,!![]),_0x3c05da=this['isRightInputMode']()?Graphics[_0x40cb6e(0x35e)]-_0x582a15:0x0,_0x4c3f08=this[_0x40cb6e(0x213)]();return new Rectangle(_0x3c05da,_0x4c3f08,_0x582a15,_0x4250e7);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x3d7)]=Scene_Skill['prototype'][_0x2431ab(0x292)],Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x292)]=function(){const _0xb779c=_0x2431ab;if(this[_0xb779c(0x2b9)]())return this[_0xb779c(0x3a8)]();else{if(_0xb779c(0x3ff)===_0xb779c(0x1be)){function _0x10bfa2(){const _0x1c4b8b=_0xb779c,_0x2bf55d=_0x5b9cb5[_0x1c4b8b(0x19b)][_0x1c4b8b(0x313)](this,_0x4bb181);if(!_0x52c9ce[_0x1c4b8b(0x225)][_0x1c4b8b(0x313)](this,_0x24c0f0,_0x2bf55d))return![];}}else return VisuMZ['SkillsStatesCore'][_0xb779c(0x3d7)][_0xb779c(0x313)](this);}},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x3a8)]=function(){const _0x2156fc=_0x2431ab,_0x594f04=Graphics[_0x2156fc(0x35e)]-this[_0x2156fc(0x1c4)](),_0x6a7969=this['_skillTypeWindow'][_0x2156fc(0x171)],_0x29a9e4=this[_0x2156fc(0x1af)]()?0x0:Graphics['boxWidth']-_0x594f04,_0x5b9a6b=this['mainAreaTop']();return new Rectangle(_0x29a9e4,_0x5b9a6b,_0x594f04,_0x6a7969);},VisuMZ[_0x2431ab(0x41d)]['Scene_Skill_createItemWindow']=Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x423)],Scene_Skill['prototype']['createItemWindow']=function(){const _0xb6e59a=_0x2431ab;VisuMZ['SkillsStatesCore'][_0xb6e59a(0x26a)][_0xb6e59a(0x313)](this),this[_0xb6e59a(0x28f)]()&&this[_0xb6e59a(0x1a4)]();},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x3c0)]=Scene_Skill[_0x2431ab(0x44e)]['itemWindowRect'],Scene_Skill['prototype'][_0x2431ab(0x345)]=function(){const _0x448e5e=_0x2431ab;if(this[_0x448e5e(0x2b9)]())return this[_0x448e5e(0x40a)]();else{const _0x4325c3=VisuMZ[_0x448e5e(0x41d)][_0x448e5e(0x3c0)][_0x448e5e(0x313)](this);return this[_0x448e5e(0x28f)]()&&this[_0x448e5e(0x462)]()&&(_0x4325c3['width']-=this['shopStatusWidth']()),_0x4325c3;}},Scene_Skill['prototype']['itemWindowRectSkillsStatesCore']=function(){const _0x556d66=_0x2431ab,_0x4c0b21=Graphics[_0x556d66(0x35e)]-this[_0x556d66(0x411)](),_0x1a846a=this[_0x556d66(0x3f7)]()-this[_0x556d66(0x1fe)][_0x556d66(0x171)],_0x26c40a=this[_0x556d66(0x1af)]()?Graphics[_0x556d66(0x35e)]-_0x4c0b21:0x0,_0x9089dc=this[_0x556d66(0x1fe)]['y']+this[_0x556d66(0x1fe)][_0x556d66(0x171)];return new Rectangle(_0x26c40a,_0x9089dc,_0x4c0b21,_0x1a846a);},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x28f)]=function(){const _0x7adf43=_0x2431ab;if(!Imported[_0x7adf43(0x326)]){if('dkuHD'===_0x7adf43(0x239))return![];else{function _0x2bdb7f(){const _0x462675=_0x7adf43;_0x4ffad4['SkillsStatesCore'][_0x462675(0x3f8)][_0x462675(0x30e)][_0x462675(0x3fd)][_0x462675(0x313)](this,_0x4a84f7,_0x150557);}}}else return this[_0x7adf43(0x2b9)]()?!![]:VisuMZ['SkillsStatesCore']['Settings'][_0x7adf43(0x299)][_0x7adf43(0x25f)];},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x462)]=function(){const _0x351159=_0x2431ab;return VisuMZ[_0x351159(0x41d)]['Settings'][_0x351159(0x299)][_0x351159(0x1e0)];},Scene_Skill[_0x2431ab(0x44e)]['createShopStatusWindow']=function(){const _0x4f31e3=_0x2431ab,_0x1f6595=this['shopStatusWindowRect']();this[_0x4f31e3(0x238)]=new Window_ShopStatus(_0x1f6595),this[_0x4f31e3(0x1a6)](this[_0x4f31e3(0x238)]),this[_0x4f31e3(0x2ed)][_0x4f31e3(0x397)](this[_0x4f31e3(0x238)]);const _0x268b5c=VisuMZ[_0x4f31e3(0x41d)]['Settings'][_0x4f31e3(0x299)][_0x4f31e3(0x39c)];this[_0x4f31e3(0x238)][_0x4f31e3(0x214)](_0x268b5c||0x0);},Scene_Skill['prototype'][_0x2431ab(0x372)]=function(){const _0x297128=_0x2431ab;if(this[_0x297128(0x2b9)]())return this[_0x297128(0x343)]();else{if(_0x297128(0x3c9)===_0x297128(0x2a9)){function _0x57d6dc(){if(_0x13054d['value'](_0x158a75))return!![];}}else return VisuMZ[_0x297128(0x41d)][_0x297128(0x3f8)][_0x297128(0x299)][_0x297128(0x21f)][_0x297128(0x313)](this);}},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x343)]=function(){const _0x5c6b6f=_0x2431ab,_0x160afa=this[_0x5c6b6f(0x411)](),_0x383d5e=this[_0x5c6b6f(0x2ed)][_0x5c6b6f(0x171)],_0xb9411=this[_0x5c6b6f(0x1af)]()?0x0:Graphics[_0x5c6b6f(0x35e)]-this[_0x5c6b6f(0x411)](),_0x20ea7b=this['_itemWindow']['y'];return new Rectangle(_0xb9411,_0x20ea7b,_0x160afa,_0x383d5e);},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x411)]=function(){const _0x36e7f4=_0x2431ab;return Imported[_0x36e7f4(0x326)]?Scene_Shop['prototype']['statusWidth']():0x0;},Scene_Skill[_0x2431ab(0x44e)][_0x2431ab(0x3ee)]=function(){const _0x423d23=_0x2431ab;if(this[_0x423d23(0x429)]&&this['_skillTypeWindow'][_0x423d23(0x41b)])return TextManager[_0x423d23(0x461)];else{if(_0x423d23(0x413)!==_0x423d23(0x413)){function _0x47f28b(){const _0x37663e=_0x423d23;if(!this[_0x37663e(0x190)][_0x37663e(0x33e)](_0x4cbf88))return!![];}}else return'';}},VisuMZ[_0x2431ab(0x41d)]['Sprite_Gauge_initMembers']=Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x43d)],Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x43d)]=function(){const _0x58c85d=_0x2431ab;VisuMZ[_0x58c85d(0x41d)][_0x58c85d(0x405)][_0x58c85d(0x313)](this),this[_0x58c85d(0x251)]=null;},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x180)]=Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x3a6)],Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x3a6)]=function(_0x23ccbe,_0x1bab04){const _0x130f59=_0x2431ab;this['setupSkillsStatesCore'](_0x23ccbe,_0x1bab04),_0x1bab04=_0x1bab04['toLowerCase'](),VisuMZ[_0x130f59(0x41d)][_0x130f59(0x180)]['call'](this,_0x23ccbe,_0x1bab04);},Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x23a)]=function(_0x35e379,_0x114f2a){const _0x27c3be=_0x2431ab,_0x47b007=VisuMZ[_0x27c3be(0x41d)][_0x27c3be(0x3f8)][_0x27c3be(0x443)][_0x27c3be(0x253)](_0x4cc0f0=>_0x4cc0f0[_0x27c3be(0x2b0)][_0x27c3be(0x42a)]()===_0x114f2a['toUpperCase']());if(_0x47b007[_0x27c3be(0x205)]>=0x1)this['_costSettings']=_0x47b007[0x0];else{if('dOPmn'!=='xxVIJ')this[_0x27c3be(0x251)]=null;else{function _0x4145b7(){const _0xa5ed1c=_0x27c3be,_0x19d33c=_0x2d0ef0[_0xa5ed1c(0x2e0)]['Settings'][_0xa5ed1c(0x189)][_0xa5ed1c(0x320)],_0x1c5db5=_0x573dda[_0xa5ed1c(0x295)](_0x27c0e9/0x2)-0x18;let _0x56cbf6=_0x12fd5d,_0x4f1802=_0x5b0691['floor']((this[_0xa5ed1c(0x199)]-_0x1cd679[_0xa5ed1c(0x254)](_0x19d33c[_0xa5ed1c(0x205)]/0x2)*_0x2f42f5)/0x2),_0x5db9ec=0x0;for(const _0x166396 of _0x19d33c){this[_0xa5ed1c(0x266)](_0x56cbf6,_0x4f1802,_0x1c5db5,_0x166396),_0x5db9ec++,_0x5db9ec%0x2===0x0?(_0x56cbf6=_0x1ac0f7,_0x4f1802+=_0x443fe8):_0x56cbf6+=_0x1c5db5+0x18;}}}}},VisuMZ['SkillsStatesCore'][_0x2431ab(0x448)]=Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x354)],Sprite_Gauge['prototype'][_0x2431ab(0x354)]=function(){const _0x57eb6c=_0x2431ab;return this[_0x57eb6c(0x2da)]&&this['_costSettings']?this['currentValueSkillsStatesCore']():VisuMZ[_0x57eb6c(0x41d)][_0x57eb6c(0x448)]['call'](this);},Sprite_Gauge['prototype'][_0x2431ab(0x3c3)]=function(){const _0x28d16f=_0x2431ab;return this[_0x28d16f(0x251)][_0x28d16f(0x336)]['call'](this['_battler']);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x45d)]=Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x3a0)],Sprite_Gauge[_0x2431ab(0x44e)]['currentMaxValue']=function(){const _0x915f6d=_0x2431ab;if(this['_battler']&&this[_0x915f6d(0x251)])return this[_0x915f6d(0x309)]();else{if(_0x915f6d(0x2b5)===_0x915f6d(0x2b5))return VisuMZ[_0x915f6d(0x41d)][_0x915f6d(0x45d)][_0x915f6d(0x313)](this);else{function _0x9e94e6(){this['drawItemStyleIcon'](_0x501ad8);}}}},Sprite_Gauge[_0x2431ab(0x44e)]['currentMaxValueSkillsStatesCore']=function(){const _0x5066b1=_0x2431ab;return this[_0x5066b1(0x251)]['GaugeMaxJS']['call'](this['_battler']);},VisuMZ[_0x2431ab(0x41d)]['Sprite_Gauge_gaugeRate']=Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x2f6)],Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x2f6)]=function(){const _0x568ab9=_0x2431ab,_0x446453=VisuMZ[_0x568ab9(0x41d)][_0x568ab9(0x2a1)]['call'](this);return _0x446453[_0x568ab9(0x237)](0x0,0x1);},VisuMZ[_0x2431ab(0x41d)]['Sprite_Gauge_redraw']=Sprite_Gauge[_0x2431ab(0x44e)]['redraw'],Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x3d4)]=function(){const _0x3327cc=_0x2431ab;this['_battler']&&this[_0x3327cc(0x251)]?(this[_0x3327cc(0x319)][_0x3327cc(0x173)](),this['redrawSkillsStatesCore']()):VisuMZ[_0x3327cc(0x41d)][_0x3327cc(0x442)][_0x3327cc(0x313)](this);},Sprite_Gauge['prototype']['currentDisplayedValue']=function(){const _0x29f29f=_0x2431ab;let _0x594d56=this[_0x29f29f(0x354)]();return Imported[_0x29f29f(0x240)]&&this[_0x29f29f(0x3b8)]()&&(_0x594d56=VisuMZ[_0x29f29f(0x312)](_0x594d56)),_0x594d56;},Sprite_Gauge['prototype']['redrawSkillsStatesCore']=function(){const _0x255736=_0x2431ab;this['_costSettings'][_0x255736(0x3e7)][_0x255736(0x313)](this);},Sprite_Gauge[_0x2431ab(0x44e)][_0x2431ab(0x28e)]=function(_0x2af6ad,_0x45aee8,_0x296338,_0x37ab46,_0x311928,_0x2ff765){const _0x37bc78=_0x2431ab,_0x31108f=this[_0x37bc78(0x2f6)](),_0x3734ef=Math[_0x37bc78(0x295)]((_0x311928-0x2)*_0x31108f),_0x56ca77=_0x2ff765-0x2,_0x3012c0=this[_0x37bc78(0x375)]();this[_0x37bc78(0x319)][_0x37bc78(0x3ad)](_0x296338,_0x37ab46,_0x311928,_0x2ff765,_0x3012c0),this[_0x37bc78(0x319)][_0x37bc78(0x3e6)](_0x296338+0x1,_0x37ab46+0x1,_0x3734ef,_0x56ca77,_0x2af6ad,_0x45aee8);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x17d)]=Sprite_StateIcon[_0x2431ab(0x44e)][_0x2431ab(0x1ad)],Sprite_StateIcon[_0x2431ab(0x44e)]['loadBitmap']=function(){const _0x3fb6dd=_0x2431ab;VisuMZ[_0x3fb6dd(0x41d)][_0x3fb6dd(0x17d)]['call'](this),this[_0x3fb6dd(0x192)]();},Sprite_StateIcon[_0x2431ab(0x44e)][_0x2431ab(0x192)]=function(){const _0x204e36=_0x2431ab,_0x2395ac=Window_Base['prototype']['lineHeight']();this[_0x204e36(0x1c1)]=new Sprite(),this[_0x204e36(0x1c1)][_0x204e36(0x319)]=new Bitmap(ImageManager[_0x204e36(0x23b)],_0x2395ac),this[_0x204e36(0x1c1)]['anchor']['x']=this['anchor']['x'],this[_0x204e36(0x1c1)][_0x204e36(0x1e4)]['y']=this[_0x204e36(0x1e4)]['y'],this[_0x204e36(0x172)](this[_0x204e36(0x1c1)]),this[_0x204e36(0x2c6)]=this[_0x204e36(0x1c1)][_0x204e36(0x319)];},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x366)]=Sprite_StateIcon[_0x2431ab(0x44e)][_0x2431ab(0x282)],Sprite_StateIcon[_0x2431ab(0x44e)]['updateFrame']=function(){const _0x15a8d7=_0x2431ab;VisuMZ[_0x15a8d7(0x41d)][_0x15a8d7(0x366)]['call'](this),this[_0x15a8d7(0x368)]();},Sprite_StateIcon[_0x2431ab(0x44e)]['drawText']=function(_0x20d341,_0x42fa82,_0x37c22a,_0x3b22f8,_0x212e61){const _0x4152eb=_0x2431ab;this[_0x4152eb(0x2c6)][_0x4152eb(0x438)](_0x20d341,_0x42fa82,_0x37c22a,_0x3b22f8,this[_0x4152eb(0x2c6)][_0x4152eb(0x171)],_0x212e61);},Sprite_StateIcon['prototype'][_0x2431ab(0x368)]=function(){const _0x3e90e9=_0x2431ab;this[_0x3e90e9(0x367)](),this[_0x3e90e9(0x2c6)][_0x3e90e9(0x173)]();const _0x313e69=this[_0x3e90e9(0x2da)];if(!_0x313e69)return;const _0x4e6830=_0x313e69[_0x3e90e9(0x33c)]()[_0x3e90e9(0x253)](_0x5f1982=>_0x5f1982[_0x3e90e9(0x231)]>0x0),_0x23c542=[...Array(0x8)[_0x3e90e9(0x3a9)]()][_0x3e90e9(0x253)](_0x4122f7=>_0x313e69[_0x3e90e9(0x3ce)](_0x4122f7)!==0x0),_0x2e8838=this['_animationIndex'],_0x2ade3d=_0x4e6830[_0x2e8838];if(_0x2ade3d){if('gVlKI'!==_0x3e90e9(0x1ff)){function _0x2ea3f9(){const _0x5dee03=_0x3e90e9;this['_stateMaxTurns']=this[_0x5dee03(0x210)]||{};if(this[_0x5dee03(0x210)][_0x248fa6])return this[_0x5dee03(0x210)][_0x4277a6];return _0x104572[_0x5b2de8][_0x5dee03(0x1b3)]['match'](/<MAX TURNS:[ ](\d+)>/i)?this[_0x5dee03(0x210)][_0x5a27de]=_0x24f2dc(_0x22f65e['$1']):this['_stateMaxTurns'][_0x925fb1]=_0x204fdc['SkillsStatesCore'][_0x5dee03(0x3f8)][_0x5dee03(0x2d6)][_0x5dee03(0x450)],this[_0x5dee03(0x210)][_0x41ef46];}}else Window_Base[_0x3e90e9(0x44e)][_0x3e90e9(0x38c)]['call'](this,_0x313e69,_0x2ade3d,0x0,0x0),Window_Base[_0x3e90e9(0x44e)][_0x3e90e9(0x32a)][_0x3e90e9(0x313)](this,_0x313e69,_0x2ade3d,0x0,0x0);}else{const _0x3add14=_0x23c542[_0x2e8838-_0x4e6830[_0x3e90e9(0x205)]];if(_0x3add14===undefined)return;Window_Base['prototype']['drawActorBuffTurns'][_0x3e90e9(0x313)](this,_0x313e69,_0x3add14,0x0,0x0),Window_Base['prototype']['drawActorBuffRates'][_0x3e90e9(0x313)](this,_0x313e69,_0x3add14,0x0,0x0);}},Sprite_StateIcon[_0x2431ab(0x44e)]['resetFontSettings']=function(){const _0x326093=_0x2431ab;this[_0x326093(0x2c6)][_0x326093(0x1f2)]=$gameSystem[_0x326093(0x26f)](),this['contents']['fontSize']=$gameSystem[_0x326093(0x2bf)](),this[_0x326093(0x1ea)]();},Sprite_StateIcon[_0x2431ab(0x44e)][_0x2431ab(0x1ea)]=function(){const _0x29b52a=_0x2431ab;this[_0x29b52a(0x45f)](ColorManager[_0x29b52a(0x451)]()),this['changeOutlineColor'](ColorManager[_0x29b52a(0x1eb)]());},Sprite_StateIcon[_0x2431ab(0x44e)][_0x2431ab(0x45f)]=function(_0x1bd3fb){const _0x517c42=_0x2431ab;this[_0x517c42(0x2c6)][_0x517c42(0x280)]=_0x1bd3fb;},Sprite_StateIcon[_0x2431ab(0x44e)][_0x2431ab(0x3b0)]=function(_0x3d18d4){const _0x10a095=_0x2431ab;this['contents'][_0x10a095(0x1eb)]=_0x3d18d4;},Sprite_StateIcon[_0x2431ab(0x44e)][_0x2431ab(0x3b9)]=function(){const _0x37d1eb=_0x2431ab;this[_0x37d1eb(0x259)]=!![],this['updateVisibility']();},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x3ca)]=function(_0x11edb0,_0x3b55fd,_0x22ca8f,_0x1f44fd,_0x546346){const _0x28d200=_0x2431ab,_0x5d9872=this[_0x28d200(0x235)](_0x11edb0,_0x3b55fd),_0x56c07e=this[_0x28d200(0x3aa)](_0x5d9872,_0x22ca8f,_0x1f44fd,_0x546346),_0x122c98=_0x22ca8f+_0x546346-_0x56c07e[_0x28d200(0x1f1)];this['drawTextEx'](_0x5d9872,_0x122c98,_0x1f44fd,_0x546346),this[_0x28d200(0x367)]();},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x235)]=function(_0x3931c2,_0x2628a4){const _0x2716f6=_0x2431ab;let _0x59fde5='';for(settings of VisuMZ[_0x2716f6(0x41d)][_0x2716f6(0x3f8)][_0x2716f6(0x443)]){if('wLlJc'==='wLlJc'){if(!this[_0x2716f6(0x3eb)](_0x3931c2,_0x2628a4,settings))continue;if(_0x59fde5[_0x2716f6(0x205)]>0x0)_0x59fde5+=this[_0x2716f6(0x425)]();_0x59fde5+=this[_0x2716f6(0x1e6)](_0x3931c2,_0x2628a4,settings);}else{function _0x43f8b6(){const _0x34799f=_0x2716f6,_0x302a6c=_0x17d4fe[_0x34799f(0x35e)]-this['shopStatusWidth'](),_0x6f5668=this[_0x34799f(0x3f7)]()-this[_0x34799f(0x1fe)][_0x34799f(0x171)],_0x33dd2a=this['isRightInputMode']()?_0x38d0cc[_0x34799f(0x35e)]-_0x302a6c:0x0,_0x53e493=this['_statusWindow']['y']+this['_statusWindow'][_0x34799f(0x171)];return new _0x5d1b08(_0x33dd2a,_0x53e493,_0x302a6c,_0x6f5668);}}}_0x59fde5=this['makeAdditionalSkillCostText'](_0x3931c2,_0x2628a4,_0x59fde5);if(_0x2628a4[_0x2716f6(0x1b3)]['match'](/<CUSTOM COST TEXT>\s*([\s\S]*)\s*<\/CUSTOM COST TEXT>/i)){if(_0x2716f6(0x420)===_0x2716f6(0x342)){function _0x589f15(){const _0x5a2dc3=_0x2716f6;this[_0x5a2dc3(0x3b5)]();}}else{if(_0x59fde5[_0x2716f6(0x205)]>0x0)_0x59fde5+=this[_0x2716f6(0x425)]();_0x59fde5+=String(RegExp['$1']);}}return _0x59fde5;},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x347)]=function(_0xa78fc,_0x5e2627,_0x187ef5){return _0x187ef5;},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x3eb)]=function(_0x2e9693,_0x4826f5,_0x12974d){const _0x189de4=_0x2431ab,_0x276217=_0x12974d[_0x189de4(0x19b)][_0x189de4(0x313)](_0x2e9693,_0x4826f5);return _0x12974d[_0x189de4(0x1d2)][_0x189de4(0x313)](_0x2e9693,_0x4826f5,_0x276217,_0x12974d);},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x1e6)]=function(_0xb3d42,_0x1105d8,_0x3f213a){const _0x4fbfd5=_0x2431ab,_0x377fba=_0x3f213a[_0x4fbfd5(0x19b)][_0x4fbfd5(0x313)](_0xb3d42,_0x1105d8);return _0x3f213a[_0x4fbfd5(0x2fc)][_0x4fbfd5(0x313)](_0xb3d42,_0x1105d8,_0x377fba,_0x3f213a);},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x425)]=function(){return'\x20';},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x1b4)]=function(_0x59fc59,_0xe6c19b,_0x33aafd,_0x582b0d){const _0x49ad62=_0x2431ab;if(!_0x59fc59)return;VisuMZ['SkillsStatesCore'][_0x49ad62(0x3d5)][_0x49ad62(0x313)](this,_0x59fc59,_0xe6c19b,_0x33aafd,_0x582b0d),this[_0x49ad62(0x36d)](_0x59fc59,_0xe6c19b,_0x33aafd,_0x582b0d);},Window_Base['prototype'][_0x2431ab(0x36d)]=function(_0x3d9d67,_0x33c2c7,_0xf5b894,_0x22bb57){const _0x3cf8a0=_0x2431ab;_0x22bb57=_0x22bb57||0x90;const _0x34b9c4=ImageManager[_0x3cf8a0(0x23b)],_0x2ebddf=_0x3d9d67[_0x3cf8a0(0x3fa)]()[_0x3cf8a0(0x3c6)](0x0,Math[_0x3cf8a0(0x295)](_0x22bb57/_0x34b9c4)),_0x396c24=_0x3d9d67['states']()[_0x3cf8a0(0x253)](_0x39547c=>_0x39547c['iconIndex']>0x0),_0xc18a7b=[...Array(0x8)['keys']()][_0x3cf8a0(0x253)](_0x5f039a=>_0x3d9d67[_0x3cf8a0(0x3ce)](_0x5f039a)!==0x0),_0x1a7968=[];let _0x39caac=_0x33c2c7;for(let _0x4b3676=0x0;_0x4b3676<_0x2ebddf['length'];_0x4b3676++){if(_0x3cf8a0(0x1f4)===_0x3cf8a0(0x270)){function _0x4817bb(){const _0x590e0d=_0x3cf8a0;return _0x57f7ca['CalcJS'][_0x590e0d(0x313)](this,_0x863244);}}else{this[_0x3cf8a0(0x367)]();const _0x1b2b22=_0x396c24[_0x4b3676];if(_0x1b2b22){if('zqMPN'===_0x3cf8a0(0x3af)){if(!_0x1a7968['includes'](_0x1b2b22)){if('LvTeZ'!==_0x3cf8a0(0x1b8)){function _0x4b4f31(){const _0x378193=_0x3cf8a0,_0x5b1004=this['_commandNameWindow'],_0x4fa60b=_0x17480c['windowPadding'](),_0x311b43=_0x3cf1bc['x']+_0x405457[_0x378193(0x295)](_0x1acc99[_0x378193(0x1f1)]/0x2)+_0x4fa60b;_0x5b1004['x']=_0x5b1004['width']/-0x2+_0x311b43,_0x5b1004['y']=_0x198f47[_0x378193(0x295)](_0x35bd13[_0x378193(0x171)]/0x2);}}else this['drawActorStateTurns'](_0x3d9d67,_0x1b2b22,_0x39caac,_0xf5b894);}this[_0x3cf8a0(0x32a)](_0x3d9d67,_0x1b2b22,_0x39caac,_0xf5b894),_0x1a7968[_0x3cf8a0(0x3a1)](_0x1b2b22);}else{function _0xdafc00(){const _0x4ab818=_0x3cf8a0;_0x71d6ba[_0x4ab818(0x445)](_0x251ca7,_0x5083c8),this[_0x4ab818(0x1c8)](_0x50ac77);}}}else{const _0x22c7e8=_0xc18a7b[_0x4b3676-_0x396c24['length']];this[_0x3cf8a0(0x394)](_0x3d9d67,_0x22c7e8,_0x39caac,_0xf5b894),this[_0x3cf8a0(0x2c8)](_0x3d9d67,_0x22c7e8,_0x39caac,_0xf5b894);}_0x39caac+=_0x34b9c4;}}},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x38c)]=function(_0xc51e0d,_0x21130f,_0x4f8d40,_0x2f4bea){const _0x36a472=_0x2431ab;if(!VisuMZ['SkillsStatesCore'][_0x36a472(0x3f8)]['States'][_0x36a472(0x1d5)])return;if(!_0xc51e0d['isStateAffected'](_0x21130f['id']))return;if(_0x21130f[_0x36a472(0x1ec)]===0x0)return;if(_0x21130f['note'][_0x36a472(0x30a)](/<HIDE STATE TURNS>/i))return;const _0x180ed9=_0xc51e0d[_0x36a472(0x3dd)](_0x21130f['id']),_0x3a66fe=ImageManager['iconWidth'],_0x20d031=ColorManager[_0x36a472(0x3a2)](_0x21130f);this[_0x36a472(0x45f)](_0x20d031),this['changeOutlineColor'](_0x36a472(0x1e3)),this[_0x36a472(0x2c6)][_0x36a472(0x262)]=!![],this['contents'][_0x36a472(0x2fa)]=VisuMZ['SkillsStatesCore'][_0x36a472(0x3f8)][_0x36a472(0x2d6)][_0x36a472(0x31b)],_0x4f8d40+=VisuMZ[_0x36a472(0x41d)][_0x36a472(0x3f8)]['States'][_0x36a472(0x196)],_0x2f4bea+=VisuMZ[_0x36a472(0x41d)][_0x36a472(0x3f8)][_0x36a472(0x2d6)]['TurnOffsetY'],this[_0x36a472(0x438)](_0x180ed9,_0x4f8d40,_0x2f4bea,_0x3a66fe,'right'),this[_0x36a472(0x2c6)]['fontBold']=![],this[_0x36a472(0x367)]();},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x32a)]=function(_0x385eca,_0x1fd6b4,_0x32513c,_0x54f812){const _0x1b99f2=_0x2431ab;if(!VisuMZ[_0x1b99f2(0x41d)]['Settings'][_0x1b99f2(0x2d6)][_0x1b99f2(0x1bb)])return;const _0x164adb=ImageManager['iconWidth'],_0x1a5d3b=ImageManager[_0x1b99f2(0x407)]/0x2,_0x47aa23=ColorManager[_0x1b99f2(0x451)]();this[_0x1b99f2(0x45f)](_0x47aa23),this[_0x1b99f2(0x3b0)](_0x1b99f2(0x1e3)),this[_0x1b99f2(0x2c6)][_0x1b99f2(0x262)]=!![],this[_0x1b99f2(0x2c6)][_0x1b99f2(0x2fa)]=VisuMZ[_0x1b99f2(0x41d)][_0x1b99f2(0x3f8)][_0x1b99f2(0x2d6)][_0x1b99f2(0x37f)],_0x32513c+=VisuMZ[_0x1b99f2(0x41d)]['Settings'][_0x1b99f2(0x2d6)]['DataOffsetX'],_0x54f812+=VisuMZ[_0x1b99f2(0x41d)]['Settings']['States'][_0x1b99f2(0x385)];const _0x51344a=String(_0x385eca[_0x1b99f2(0x401)](_0x1fd6b4['id']));this[_0x1b99f2(0x438)](_0x51344a,_0x32513c,_0x54f812,_0x164adb,_0x1b99f2(0x33f)),this['contents']['fontBold']=![],this[_0x1b99f2(0x367)]();},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x394)]=function(_0x1a39a9,_0x41d8a8,_0x56d247,_0xf3a0d){const _0x4ca15e=_0x2431ab;if(!VisuMZ[_0x4ca15e(0x41d)][_0x4ca15e(0x3f8)]['Buffs'][_0x4ca15e(0x1d5)])return;const _0x34e307=_0x1a39a9[_0x4ca15e(0x3ce)](_0x41d8a8);if(_0x34e307===0x0)return;const _0x1789bd=_0x1a39a9[_0x4ca15e(0x1d3)](_0x41d8a8),_0xd1d2f3=ImageManager[_0x4ca15e(0x23b)],_0x4675b7=_0x34e307>0x0?ColorManager[_0x4ca15e(0x16e)]():ColorManager[_0x4ca15e(0x2e9)]();this[_0x4ca15e(0x45f)](_0x4675b7),this[_0x4ca15e(0x3b0)](_0x4ca15e(0x1e3)),this[_0x4ca15e(0x2c6)][_0x4ca15e(0x262)]=!![],this[_0x4ca15e(0x2c6)][_0x4ca15e(0x2fa)]=VisuMZ[_0x4ca15e(0x41d)][_0x4ca15e(0x3f8)]['Buffs'][_0x4ca15e(0x31b)],_0x56d247+=VisuMZ[_0x4ca15e(0x41d)][_0x4ca15e(0x3f8)]['Buffs'][_0x4ca15e(0x196)],_0xf3a0d+=VisuMZ[_0x4ca15e(0x41d)][_0x4ca15e(0x3f8)][_0x4ca15e(0x30e)][_0x4ca15e(0x2af)],this[_0x4ca15e(0x438)](_0x1789bd,_0x56d247,_0xf3a0d,_0xd1d2f3,_0x4ca15e(0x34e)),this[_0x4ca15e(0x2c6)][_0x4ca15e(0x262)]=![],this[_0x4ca15e(0x367)]();},Window_Base[_0x2431ab(0x44e)][_0x2431ab(0x2c8)]=function(_0x408f16,_0x531ec8,_0x3965e3,_0x557022){const _0x44d49d=_0x2431ab;if(!VisuMZ[_0x44d49d(0x41d)]['Settings'][_0x44d49d(0x30e)][_0x44d49d(0x1bb)])return;const _0x85a121=_0x408f16[_0x44d49d(0x2a7)](_0x531ec8),_0x8db108=_0x408f16[_0x44d49d(0x3ce)](_0x531ec8),_0x40ecef=ImageManager[_0x44d49d(0x23b)],_0x511f33=ImageManager[_0x44d49d(0x407)]/0x2,_0x518996=_0x8db108>0x0?ColorManager['buffColor']():ColorManager[_0x44d49d(0x2e9)]();this['changeTextColor'](_0x518996),this[_0x44d49d(0x3b0)](_0x44d49d(0x1e3)),this[_0x44d49d(0x2c6)][_0x44d49d(0x262)]=!![],this[_0x44d49d(0x2c6)][_0x44d49d(0x2fa)]=VisuMZ[_0x44d49d(0x41d)][_0x44d49d(0x3f8)][_0x44d49d(0x30e)]['DataFontSize'],_0x3965e3+=VisuMZ[_0x44d49d(0x41d)][_0x44d49d(0x3f8)][_0x44d49d(0x30e)][_0x44d49d(0x175)],_0x557022+=VisuMZ[_0x44d49d(0x41d)][_0x44d49d(0x3f8)][_0x44d49d(0x30e)][_0x44d49d(0x385)];const _0x4dff50=_0x44d49d(0x370)[_0x44d49d(0x3d8)](Math[_0x44d49d(0x1a7)](_0x85a121*0x64));this[_0x44d49d(0x438)](_0x4dff50,_0x3965e3,_0x557022,_0x40ecef,_0x44d49d(0x33f)),this[_0x44d49d(0x2c6)]['fontBold']=![],this[_0x44d49d(0x367)]();},VisuMZ['SkillsStatesCore'][_0x2431ab(0x378)]=Window_StatusBase[_0x2431ab(0x44e)][_0x2431ab(0x406)],Window_StatusBase[_0x2431ab(0x44e)]['placeGauge']=function(_0x4f8190,_0x286bd8,_0x1ca6df,_0x2dca5c){const _0x1cdd33=_0x2431ab;if(_0x4f8190[_0x1cdd33(0x1c3)]())_0x286bd8=this[_0x1cdd33(0x25d)](_0x4f8190,_0x286bd8);this[_0x1cdd33(0x338)](_0x4f8190,_0x286bd8,_0x1ca6df,_0x2dca5c);},Window_StatusBase[_0x2431ab(0x44e)][_0x2431ab(0x338)]=function(_0x295008,_0x500a4f,_0x20e133,_0x198059){const _0x1464c6=_0x2431ab;if([_0x1464c6(0x3d0),_0x1464c6(0x257)][_0x1464c6(0x3be)](_0x500a4f[_0x1464c6(0x349)]()))return;VisuMZ[_0x1464c6(0x41d)][_0x1464c6(0x378)][_0x1464c6(0x313)](this,_0x295008,_0x500a4f,_0x20e133,_0x198059);},Window_StatusBase[_0x2431ab(0x44e)]['convertGaugeTypeSkillsStatesCore']=function(_0x6ddce1,_0x1ed7b3){const _0x5a18ea=_0x2431ab,_0x22cc85=_0x6ddce1[_0x5a18ea(0x20b)]()[_0x5a18ea(0x1b3)];if(_0x1ed7b3==='hp'&&_0x22cc85[_0x5a18ea(0x30a)](/<REPLACE HP GAUGE:[ ](.*)>/i))return String(RegExp['$1']);else{if(_0x1ed7b3==='mp'&&_0x22cc85[_0x5a18ea(0x30a)](/<REPLACE MP GAUGE:[ ](.*)>/i))return String(RegExp['$1']);else return _0x1ed7b3==='tp'&&_0x22cc85[_0x5a18ea(0x30a)](/<REPLACE TP GAUGE:[ ](.*)>/i)?String(RegExp['$1']):_0x1ed7b3;}},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x3d5)]=Window_StatusBase[_0x2431ab(0x44e)][_0x2431ab(0x1b4)],Window_StatusBase['prototype'][_0x2431ab(0x1b4)]=function(_0x3cbdc4,_0x53c456,_0x27c11b,_0x5d10c7){const _0x352546=_0x2431ab;if(!_0x3cbdc4)return;Window_Base[_0x352546(0x44e)][_0x352546(0x1b4)]['call'](this,_0x3cbdc4,_0x53c456,_0x27c11b,_0x5d10c7);},VisuMZ[_0x2431ab(0x41d)]['Window_SkillType_initialize']=Window_SkillType[_0x2431ab(0x44e)]['initialize'],Window_SkillType['prototype']['initialize']=function(_0xa3b43d){const _0x38ac57=_0x2431ab;VisuMZ[_0x38ac57(0x41d)]['Window_SkillType_initialize'][_0x38ac57(0x313)](this,_0xa3b43d),this[_0x38ac57(0x382)](_0xa3b43d);},Window_SkillType['prototype'][_0x2431ab(0x382)]=function(_0x43a283){const _0x430d55=_0x2431ab,_0xc1a9a=new Rectangle(0x0,0x0,_0x43a283[_0x430d55(0x1f1)],_0x43a283[_0x430d55(0x171)]);this[_0x430d55(0x227)]=new Window_Base(_0xc1a9a),this[_0x430d55(0x227)][_0x430d55(0x2cc)]=0x0,this[_0x430d55(0x172)](this[_0x430d55(0x227)]),this[_0x430d55(0x3f1)]();},Window_SkillType[_0x2431ab(0x44e)][_0x2431ab(0x3db)]=function(){const _0x39dd9f=_0x2431ab;Window_Command[_0x39dd9f(0x44e)][_0x39dd9f(0x3db)][_0x39dd9f(0x313)](this);if(this[_0x39dd9f(0x227)])this[_0x39dd9f(0x3f1)]();},Window_SkillType['prototype'][_0x2431ab(0x3f1)]=function(){const _0x43114f=_0x2431ab,_0x57086e=this[_0x43114f(0x227)];_0x57086e[_0x43114f(0x2c6)][_0x43114f(0x173)]();const _0x17e510=this['commandStyleCheck'](this[_0x43114f(0x463)]());if(_0x17e510===_0x43114f(0x3d9)&&this[_0x43114f(0x35a)]()>0x0){const _0x3aa9b1=this['itemLineRect'](this[_0x43114f(0x463)]());let _0xe7f86b=this[_0x43114f(0x330)](this['index']());_0xe7f86b=_0xe7f86b[_0x43114f(0x424)](/\\I\[(\d+)\]/gi,''),_0x57086e[_0x43114f(0x367)](),this['commandNameWindowDrawBackground'](_0xe7f86b,_0x3aa9b1),this[_0x43114f(0x3df)](_0xe7f86b,_0x3aa9b1),this[_0x43114f(0x2ba)](_0xe7f86b,_0x3aa9b1);}},Window_SkillType[_0x2431ab(0x44e)][_0x2431ab(0x24e)]=function(_0x467d6b,_0x551ec4){},Window_SkillType[_0x2431ab(0x44e)][_0x2431ab(0x3df)]=function(_0x31acdf,_0x456acd){const _0x251059=_0x2431ab,_0x25a4e2=this[_0x251059(0x227)];_0x25a4e2[_0x251059(0x438)](_0x31acdf,0x0,_0x456acd['y'],_0x25a4e2[_0x251059(0x3b4)],_0x251059(0x33f));},Window_SkillType[_0x2431ab(0x44e)][_0x2431ab(0x2ba)]=function(_0x315f04,_0x244794){const _0x4d3da5=_0x2431ab,_0x14e49b=this['_commandNameWindow'],_0x40f0f0=$gameSystem[_0x4d3da5(0x23d)](),_0x5ef996=_0x244794['x']+Math[_0x4d3da5(0x295)](_0x244794['width']/0x2)+_0x40f0f0;_0x14e49b['x']=_0x14e49b[_0x4d3da5(0x1f1)]/-0x2+_0x5ef996,_0x14e49b['y']=Math[_0x4d3da5(0x295)](_0x244794[_0x4d3da5(0x171)]/0x2);},Window_SkillType[_0x2431ab(0x44e)][_0x2431ab(0x3c8)]=function(){const _0x45a004=_0x2431ab;return Imported[_0x45a004(0x240)]&&Window_Command[_0x45a004(0x44e)][_0x45a004(0x3c8)][_0x45a004(0x313)](this);},Window_SkillType['prototype'][_0x2431ab(0x350)]=function(){const _0x361486=_0x2431ab;if(!this['_actor'])return;const _0x32d4e7=this[_0x361486(0x190)][_0x361486(0x241)]();for(const _0x5e79db of _0x32d4e7){const _0x328f96=this['makeCommandName'](_0x5e79db);this[_0x361486(0x242)](_0x328f96,_0x361486(0x3bd),!![],_0x5e79db);}},Window_SkillType[_0x2431ab(0x44e)]['makeCommandName']=function(_0xbd86b8){const _0x57fbdd=_0x2431ab;let _0x212317=$dataSystem[_0x57fbdd(0x241)][_0xbd86b8];if(_0x212317[_0x57fbdd(0x30a)](/\\I\[(\d+)\]/i))return _0x212317;if(this[_0x57fbdd(0x2e3)]()==='text')return _0x212317;const _0x570b93=VisuMZ[_0x57fbdd(0x41d)]['Settings'][_0x57fbdd(0x299)],_0x14edae=$dataSystem[_0x57fbdd(0x17e)]['includes'](_0xbd86b8),_0x17e9e2=_0x14edae?_0x570b93[_0x57fbdd(0x33b)]:_0x570b93[_0x57fbdd(0x38b)];return'\x5cI[%1]%2'[_0x57fbdd(0x3d8)](_0x17e9e2,_0x212317);},Window_SkillType['prototype'][_0x2431ab(0x40f)]=function(){const _0x1068c0=_0x2431ab;return VisuMZ['SkillsStatesCore'][_0x1068c0(0x3f8)][_0x1068c0(0x299)]['CmdTextAlign'];},Window_SkillType[_0x2431ab(0x44e)]['drawItem']=function(_0xac8141){const _0x1131c0=_0x2431ab,_0x55b016=this['commandStyleCheck'](_0xac8141);if(_0x55b016==='iconText')this[_0x1131c0(0x376)](_0xac8141);else{if(_0x55b016===_0x1131c0(0x3d9))this[_0x1131c0(0x3fc)](_0xac8141);else{if(_0x1131c0(0x271)===_0x1131c0(0x3f0)){function _0x5b9e1c(){const _0x3a0230=_0x1131c0,_0xb78221=_0x2e9196[_0x1d4527-_0x38f066['length']];this[_0x3a0230(0x394)](_0x628e92,_0xb78221,_0xa0af35,_0x5911d4),this[_0x3a0230(0x2c8)](_0x838f3f,_0xb78221,_0x12b3f,_0x27a759);}}else Window_Command[_0x1131c0(0x44e)][_0x1131c0(0x37c)]['call'](this,_0xac8141);}}},Window_SkillType[_0x2431ab(0x44e)][_0x2431ab(0x2e3)]=function(){const _0xc800a8=_0x2431ab;return VisuMZ['SkillsStatesCore'][_0xc800a8(0x3f8)]['Skills']['CmdStyle'];},Window_SkillType[_0x2431ab(0x44e)][_0x2431ab(0x208)]=function(_0x3c0a5b){const _0x1cf6f2=_0x2431ab;if(_0x3c0a5b<0x0)return'text';const _0x3b0b90=this[_0x1cf6f2(0x2e3)]();if(_0x3b0b90!==_0x1cf6f2(0x412))return _0x3b0b90;else{if(this['maxItems']()>0x0){const _0x5ede7c=this[_0x1cf6f2(0x330)](_0x3c0a5b);if(_0x5ede7c[_0x1cf6f2(0x30a)](/\\I\[(\d+)\]/i)){const _0x4fb0b9=this[_0x1cf6f2(0x286)](_0x3c0a5b),_0x19bc58=this['textSizeEx'](_0x5ede7c)[_0x1cf6f2(0x1f1)];if(_0x19bc58<=_0x4fb0b9[_0x1cf6f2(0x1f1)])return _0x1cf6f2(0x410);else{if('KiBPa'!=='XGjEL')return _0x1cf6f2(0x3d9);else{function _0x36ee16(){const _0x3045eb=_0x1cf6f2;let _0x25e5c5=_0x547614[_0x3045eb(0x241)][_0x3fa839];if(_0x25e5c5[_0x3045eb(0x30a)](/\\I\[(\d+)\]/i))return _0x25e5c5;if(this[_0x3045eb(0x2e3)]()===_0x3045eb(0x183))return _0x25e5c5;const _0x1775f5=_0x518014[_0x3045eb(0x41d)]['Settings']['Skills'],_0x502722=_0x28db12['magicSkills']['includes'](_0x557cb0),_0x4b8479=_0x502722?_0x1775f5[_0x3045eb(0x33b)]:_0x1775f5['IconStypeNorm'];return'\x5cI[%1]%2'[_0x3045eb(0x3d8)](_0x4b8479,_0x25e5c5);}}}}}}return'text';},Window_SkillType['prototype'][_0x2431ab(0x376)]=function(_0x53c721){const _0x271d5c=_0x2431ab,_0x4e37d5=this[_0x271d5c(0x286)](_0x53c721),_0x5242a2=this[_0x271d5c(0x330)](_0x53c721),_0x4cffa3=this[_0x271d5c(0x3aa)](_0x5242a2)[_0x271d5c(0x1f1)];this[_0x271d5c(0x1b7)](this['isCommandEnabled'](_0x53c721));const _0x22587b=this['itemTextAlign']();if(_0x22587b===_0x271d5c(0x34e)){if('VMNxf'!=='VMNxf'){function _0x512de6(){const _0x2a18b0=_0x271d5c,_0x2255e0=_0x11b866[_0x2a18b0(0x41d)]['Settings']['Costs'][_0x2a18b0(0x253)](_0x144ca8=>_0x144ca8['Name']['toUpperCase']()===_0x4aa2d3[_0x2a18b0(0x42a)]());_0x2255e0[_0x2a18b0(0x205)]>=0x1?this[_0x2a18b0(0x251)]=_0x2255e0[0x0]:this[_0x2a18b0(0x251)]=null;}}else this['drawTextEx'](_0x5242a2,_0x4e37d5['x']+_0x4e37d5[_0x271d5c(0x1f1)]-_0x4cffa3,_0x4e37d5['y'],_0x4cffa3);}else{if(_0x22587b===_0x271d5c(0x33f)){const _0x564769=_0x4e37d5['x']+Math[_0x271d5c(0x295)]((_0x4e37d5[_0x271d5c(0x1f1)]-_0x4cffa3)/0x2);this[_0x271d5c(0x2dd)](_0x5242a2,_0x564769,_0x4e37d5['y'],_0x4cffa3);}else{if(_0x271d5c(0x40d)!==_0x271d5c(0x40d)){function _0x47b56f(){const _0x234e19=_0x271d5c,_0x1fc6f4=_0x557b6e(_0x46c0f9['$1']),_0x531bb0=_0x234e19(0x39d)[_0x234e19(0x3d8)](_0x1fc6f4);_0x23c602['SkillsStatesCore'][_0x234e19(0x308)][_0x3296b7['id']]=new _0xc43765(_0x234e19(0x3bd),_0x531bb0);}}else this['drawTextEx'](_0x5242a2,_0x4e37d5['x'],_0x4e37d5['y'],_0x4cffa3);}}},Window_SkillType['prototype']['drawItemStyleIcon']=function(_0xf337fb){const _0x21070c=_0x2431ab;this[_0x21070c(0x330)](_0xf337fb)[_0x21070c(0x30a)](/\\I\[(\d+)\]/i);const _0x10383c=Number(RegExp['$1'])||0x0,_0x277512=this[_0x21070c(0x286)](_0xf337fb),_0x139115=_0x277512['x']+Math[_0x21070c(0x295)]((_0x277512[_0x21070c(0x1f1)]-ImageManager['iconWidth'])/0x2),_0x36d155=_0x277512['y']+(_0x277512[_0x21070c(0x171)]-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x10383c,_0x139115,_0x36d155);},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x3a7)]=Window_SkillStatus['prototype'][_0x2431ab(0x356)],Window_SkillStatus[_0x2431ab(0x44e)]['refresh']=function(){const _0x285a79=_0x2431ab;VisuMZ[_0x285a79(0x41d)][_0x285a79(0x3a7)][_0x285a79(0x313)](this);if(this['_actor'])this[_0x285a79(0x170)]();},Window_SkillStatus['prototype'][_0x2431ab(0x170)]=function(){const _0x115080=_0x2431ab;if(!Imported[_0x115080(0x240)])return;if(!Imported[_0x115080(0x20d)])return;const _0x3cab2f=this[_0x115080(0x1f6)]();let _0x20df31=this[_0x115080(0x426)]()/0x2+0xb4+0xb4+0xb4,_0x431493=this['innerWidth']-_0x20df31-0x2;if(_0x431493>=0x12c){const _0x4ddab2=VisuMZ[_0x115080(0x2e0)][_0x115080(0x3f8)]['Param'][_0x115080(0x320)],_0x1af7bd=Math[_0x115080(0x295)](_0x431493/0x2)-0x18;let _0x2dcb31=_0x20df31,_0x2adfeb=Math[_0x115080(0x295)]((this[_0x115080(0x199)]-Math['ceil'](_0x4ddab2['length']/0x2)*_0x3cab2f)/0x2),_0x2dffb5=0x0;for(const _0xb22ead of _0x4ddab2){this[_0x115080(0x266)](_0x2dcb31,_0x2adfeb,_0x1af7bd,_0xb22ead),_0x2dffb5++;if(_0x2dffb5%0x2===0x0)_0x2dcb31=_0x20df31,_0x2adfeb+=_0x3cab2f;else{if(_0x115080(0x2db)!=='tfFlm'){function _0xe0cd1a(){const _0x34c1f4=_0x115080,_0x564343=_0x54be38['note'];if(_0x564343[_0x34c1f4(0x30a)](/<JS SKILL ENABLE>\s*([\s\S]*)\s*<\/JS SKILL ENABLE>/i)){const _0x181450=_0x384654(_0x5e81f3['$1']),_0x114846='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20enabled\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20enabled;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x34c1f4(0x3d8)](_0x181450);_0x7d3136['SkillsStatesCore'][_0x34c1f4(0x1d0)][_0x1a5c4b['id']]=new _0x267954(_0x34c1f4(0x3bd),_0x114846);}if(_0x564343[_0x34c1f4(0x30a)](/<JS SKILL VISIBLE>\s*([\s\S]*)\s*<\/JS SKILL VISIBLE>/i)){const _0x2ecf48=_0x1550c7(_0x376aa0['$1']),_0x5edfee=_0x34c1f4(0x39d)[_0x34c1f4(0x3d8)](_0x2ecf48);_0x1f6688[_0x34c1f4(0x41d)][_0x34c1f4(0x308)][_0x3ac51c['id']]=new _0x21641c(_0x34c1f4(0x3bd),_0x5edfee);}}}else _0x2dcb31+=_0x1af7bd+0x18;}}}this[_0x115080(0x367)]();},Window_SkillStatus[_0x2431ab(0x44e)]['drawExtendedParameter']=function(_0x4e3def,_0x4f6399,_0x1db089,_0x278993){const _0x20ba97=_0x2431ab,_0x153c43=this['gaugeLineHeight']();this[_0x20ba97(0x367)](),this['drawParamText'](_0x4e3def,_0x4f6399,_0x1db089,_0x278993,!![]),this['resetTextColor'](),this[_0x20ba97(0x2c6)][_0x20ba97(0x2fa)]-=0x8;const _0x490de2=this[_0x20ba97(0x190)][_0x20ba97(0x2eb)](_0x278993,!![]);this[_0x20ba97(0x2c6)][_0x20ba97(0x438)](_0x490de2,_0x4e3def,_0x4f6399,_0x1db089,_0x153c43,_0x20ba97(0x34e));},VisuMZ[_0x2431ab(0x41d)]['Window_SkillList_includes']=Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x3be)],Window_SkillList['prototype']['includes']=function(_0x443964){const _0x5b9fc9=_0x2431ab;return this[_0x5b9fc9(0x176)](_0x443964);},VisuMZ[_0x2431ab(0x41d)]['Window_SkillList_maxCols']=Window_SkillList[_0x2431ab(0x44e)]['maxCols'],Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x2f4)]=function(){const _0x3a0c97=_0x2431ab;return SceneManager[_0x3a0c97(0x174)][_0x3a0c97(0x331)]===Scene_Battle?VisuMZ[_0x3a0c97(0x41d)]['Window_SkillList_maxCols'][_0x3a0c97(0x313)](this):VisuMZ[_0x3a0c97(0x41d)][_0x3a0c97(0x3f8)][_0x3a0c97(0x299)][_0x3a0c97(0x3b2)];},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x44f)]=Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x455)],Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x455)]=function(_0x1215fe){const _0x15c2bb=_0x2431ab,_0x104f01=this[_0x15c2bb(0x190)]!==_0x1215fe;VisuMZ[_0x15c2bb(0x41d)][_0x15c2bb(0x44f)][_0x15c2bb(0x313)](this,_0x1215fe);if(_0x104f01){if(this[_0x15c2bb(0x1fe)]&&this[_0x15c2bb(0x1fe)][_0x15c2bb(0x331)]===Window_ShopStatus){if(_0x15c2bb(0x369)!=='QGjFa')this[_0x15c2bb(0x1fe)][_0x15c2bb(0x44b)](this[_0x15c2bb(0x1b9)](0x0));else{function _0x1757ea(){const _0x389e64=_0x15c2bb,_0x522c25=_0x23722d[_0x389e64(0x19b)][_0x389e64(0x313)](_0xcbc757,_0x448ef7);return _0x5bce1e[_0x389e64(0x2fc)]['call'](_0x35f5de,_0x4daacd,_0x522c25,_0x2c14c9);}}}}},Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x2ef)]=function(_0x13af20){const _0x2441d2=_0x2431ab;if(this[_0x2441d2(0x25b)]===_0x13af20)return;this['_stypeId']=_0x13af20,this[_0x2441d2(0x356)](),this[_0x2441d2(0x23c)](0x0,0x0),this[_0x2441d2(0x1fe)]&&this['_statusWindow'][_0x2441d2(0x331)]===Window_ShopStatus&&this[_0x2441d2(0x1fe)][_0x2441d2(0x44b)](this[_0x2441d2(0x1b9)](0x0));},Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x176)]=function(_0x410645){const _0x1d9344=_0x2431ab;if(!_0x410645)return VisuMZ[_0x1d9344(0x41d)][_0x1d9344(0x428)][_0x1d9344(0x313)](this,_0x410645);if(!this[_0x1d9344(0x25a)](_0x410645))return![];if(!this[_0x1d9344(0x444)](_0x410645))return![];if(!this[_0x1d9344(0x3f5)](_0x410645))return![];return!![];},Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x25a)]=function(_0x1f61ca){const _0x11ab66=_0x2431ab;return DataManager['getSkillTypes'](_0x1f61ca)[_0x11ab66(0x3be)](this[_0x11ab66(0x25b)]);},Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x444)]=function(_0x323223){const _0x21f4c0=_0x2431ab;if(!this[_0x21f4c0(0x334)](_0x323223))return![];if(!this[_0x21f4c0(0x40b)](_0x323223))return![];if(!this['checkShowHideSkillNotetags'](_0x323223))return![];return!![];},Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x334)]=function(_0x6863fd){const _0x45a292=_0x2431ab,_0x5776af=_0x6863fd['note'];if(_0x5776af[_0x45a292(0x30a)](/<HIDE IN BATTLE>/i)&&$gameParty[_0x45a292(0x1df)]()){if('XwUan'!==_0x45a292(0x384))return![];else{function _0x285bf4(){const _0x1c46b3=_0x45a292;_0x373026=_0x398ae[_0x1c46b3(0x275)](_0x4354ea['$1']),_0x3c8793=_0x1e2302(_0x543a90['$2']);}}}else return _0x5776af[_0x45a292(0x30a)](/<HIDE OUTSIDE BATTLE>/i)&&!$gameParty[_0x45a292(0x1df)]()?![]:!![];},Window_SkillList[_0x2431ab(0x44e)]['checkShowHideSwitchNotetags']=function(_0x235d6c){const _0x302ec7=_0x2431ab,_0x228b6c=_0x235d6c['note'];if(_0x228b6c[_0x302ec7(0x30a)](/<SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2c7b28=JSON[_0x302ec7(0x1aa)]('['+RegExp['$1'][_0x302ec7(0x30a)](/\d+/g)+']');for(const _0x99947d of _0x2c7b28){if(!$gameSwitches[_0x302ec7(0x3c2)](_0x99947d))return![];}return!![];}if(_0x228b6c[_0x302ec7(0x30a)](/<SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1caf49=JSON[_0x302ec7(0x1aa)]('['+RegExp['$1'][_0x302ec7(0x30a)](/\d+/g)+']');for(const _0x2f8912 of _0x1caf49){if('xyziD'!==_0x302ec7(0x1e5)){function _0x1a06ed(){const _0x379242=_0x302ec7;_0x2f2777[_0x379242(0x41d)]['Scene_Skill_createItemWindow']['call'](this),this['allowCreateShopStatusWindow']()&&this[_0x379242(0x1a4)]();}}else{if(!$gameSwitches[_0x302ec7(0x3c2)](_0x2f8912))return![];}}return!![];}if(_0x228b6c[_0x302ec7(0x30a)](/<SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x302ec7(0x1a9)===_0x302ec7(0x1a9)){const _0x2b8187=JSON['parse']('['+RegExp['$1'][_0x302ec7(0x30a)](/\d+/g)+']');for(const _0x578ff6 of _0x2b8187){if($gameSwitches[_0x302ec7(0x3c2)](_0x578ff6))return!![];}return![];}else{function _0x34fb04(){this['onAddDebuff'](_0x49ab38,_0x2bbd10);}}}if(_0x228b6c[_0x302ec7(0x30a)](/<HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x32f17f=JSON[_0x302ec7(0x1aa)]('['+RegExp['$1'][_0x302ec7(0x30a)](/\d+/g)+']');for(const _0x36712d of _0x32f17f){if(!$gameSwitches['value'](_0x36712d))return!![];}return![];}if(_0x228b6c['match'](/<HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x302ec7(0x306)===_0x302ec7(0x27c)){function _0xe8f093(){return _0x27e4e4;}}else{const _0x4e6fbe=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x4bdb70 of _0x4e6fbe){if(!$gameSwitches['value'](_0x4bdb70))return!![];}return![];}}if(_0x228b6c[_0x302ec7(0x30a)](/<HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x54dd8f=JSON['parse']('['+RegExp['$1'][_0x302ec7(0x30a)](/\d+/g)+']');for(const _0x4f92f0 of _0x54dd8f){if('KRAWT'===_0x302ec7(0x422)){if($gameSwitches[_0x302ec7(0x3c2)](_0x4f92f0))return![];}else{function _0x560f9e(){const _0x2838a3=_0x302ec7;return _0x51b55e[_0x2838a3(0x41d)][_0x2838a3(0x3f8)][_0x2838a3(0x2d6)]['ColorNeutral'];}}}return!![];}return!![];},Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x2fd)]=function(_0xebd24c){const _0x10a355=_0x2431ab,_0xd349c0=_0xebd24c[_0x10a355(0x1b3)];if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF LEARNED[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x35c)===_0x10a355(0x229)){function _0x1d853e(){const _0x31ba1f=_0x10a355;if(!_0x5b5177[_0x31ba1f(0x3c2)](_0x231684))return!![];}}else{const _0x42a882=JSON[_0x10a355(0x1aa)]('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x5d7e06 of _0x42a882){if(!this[_0x10a355(0x190)][_0x10a355(0x310)](_0x5d7e06))return![];}return!![];}}else{if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF LEARNED[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x57bdb6=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x21589a of _0x57bdb6){const _0x4ad0a1=DataManager[_0x10a355(0x33a)](_0x21589a);if(!_0x4ad0a1)continue;if(!this['_actor'][_0x10a355(0x310)](_0x4ad0a1))return![];}return!![];}}if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF LEARNED ALL[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x2d9)==='NyDOu'){function _0x5bab0f(){const _0x303eb8=_0x10a355;_0x42c890[_0x303eb8(0x44e)][_0x303eb8(0x37c)][_0x303eb8(0x313)](this,_0x47d8bf);}}else{const _0x3e3622=JSON['parse']('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x2f5d7e of _0x3e3622){if(_0x10a355(0x2a0)!==_0x10a355(0x33d)){if(!this[_0x10a355(0x190)]['isLearnedSkill'](_0x2f5d7e))return![];}else{function _0x5d686c(){const _0x388c9b=_0x10a355,_0x3ed8a5=_0x33c34c['SkillsStatesCore'][_0x388c9b(0x2c9)];if(_0x3ed8a5[_0x4972ed['id']]&&!_0x3ed8a5[_0x2e26cb['id']]['call'](this,_0x5a674a))return![];return!![];}}}return!![];}}else{if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF LEARNED ALL[ ](?:SKILL|SKILLS):[ ](.*)>/i)){if(_0x10a355(0x274)!==_0x10a355(0x1ca)){const _0xc7c2a2=RegExp['$1']['split'](',');for(const _0x6b5726 of _0xc7c2a2){const _0x4fdbe9=DataManager[_0x10a355(0x33a)](_0x6b5726);if(!_0x4fdbe9)continue;if(!this[_0x10a355(0x190)][_0x10a355(0x310)](_0x4fdbe9))return![];}return!![];}else{function _0x417f3a(){const _0x535804=_0x10a355;return this['_cache']=this[_0x535804(0x18a)]||{},this[_0x535804(0x18a)][_0x249796]!==_0x2ad44e;}}}}if(_0xd349c0['match'](/<SHOW IF LEARNED ANY[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x2b8)===_0x10a355(0x258)){function _0x2ae1ff(){const _0x46877d=_0x10a355,_0x1a6f27=_0x4353ce[_0x46877d(0x41d)][_0x46877d(0x3f8)]['Buffs'][_0x46877d(0x450)];this['_buffTurns'][_0x37cfb8]=_0x3faefc[_0x46877d(0x237)](0x0,_0x1a6f27);}}else{const _0x178153=JSON[_0x10a355(0x1aa)]('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x1f1ba4 of _0x178153){if(_0x10a355(0x22b)!==_0x10a355(0x22b)){function _0x3de323(){const _0x53a234=_0x10a355;return this[_0x53a234(0x2b9)]()?this[_0x53a234(0x343)]():_0x5613d2['SkillsStatesCore'][_0x53a234(0x3f8)]['Skills'][_0x53a234(0x21f)][_0x53a234(0x313)](this);}}else{if(this[_0x10a355(0x190)]['isLearnedSkill'](_0x1f1ba4))return!![];}}return![];}}else{if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF LEARNED ANY[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x5400eb=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x108f20 of _0x5400eb){if(_0x10a355(0x2ff)!==_0x10a355(0x1f5)){const _0x357597=DataManager[_0x10a355(0x33a)](_0x108f20);if(!_0x357597)continue;if(this[_0x10a355(0x190)][_0x10a355(0x310)](_0x357597))return!![];}else{function _0x3e6ff7(){const _0x2d0c57=_0x10a355;if(_0x5d36cf[_0x2d0c57(0x1c0)]&&_0x3b67a3[_0x2d0c57(0x1a5)]!==_0x4b60aa)return _0x54caf6[_0x2d0c57(0x1a5)];else return this['isUseSkillsStatesCoreUpdatedLayout']()?this['updatedLayoutStyle']()[_0x2d0c57(0x30a)](/RIGHT/i):_0x2bff94['prototype'][_0x2d0c57(0x1af)]['call'](this);}}}return![];}}if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF LEARNED[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x392)!==_0x10a355(0x392)){function _0x54d1f2(){const _0x3a3ff2=_0x10a355,_0x1e85f4=_0x5002d6[_0x3a3ff2(0x1bf)](_0x589937);this['_stateTurns'][_0x334c5f]=_0x5d87d4[_0x3a3ff2(0x237)](0x0,_0x1e85f4);if(this[_0x3a3ff2(0x362)][_0x6cf8e]<=0x0)this['removeState'](_0x408c7b);}}else{const _0x4a1421=JSON[_0x10a355(0x1aa)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x44abd7 of _0x4a1421){if(_0x10a355(0x2b3)===_0x10a355(0x42c)){function _0x235618(){const _0x27be06=_0x10a355;this[_0x27be06(0x251)]=null;}}else{if(!this[_0x10a355(0x190)][_0x10a355(0x310)](_0x44abd7))return!![];}}return![];}}else{if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF LEARNED[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x46a117=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x3ff7e4 of _0x46a117){if(_0x10a355(0x404)!=='EMPlH'){function _0x6a7283(){const _0x145002=_0x10a355,_0x1db469=new _0x293e43(0x0,0x0,_0xca6826['width'],_0x56b0fd[_0x145002(0x171)]);this['_commandNameWindow']=new _0x42b71c(_0x1db469),this[_0x145002(0x227)][_0x145002(0x2cc)]=0x0,this[_0x145002(0x172)](this['_commandNameWindow']),this[_0x145002(0x3f1)]();}}else{const _0x4ebe54=DataManager[_0x10a355(0x33a)](_0x3ff7e4);if(!_0x4ebe54)continue;if(!this[_0x10a355(0x190)]['isLearnedSkill'](_0x4ebe54))return!![];}}return![];}}if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF LEARNED ALL[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5d31ea=JSON[_0x10a355(0x1aa)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x13e086 of _0x5d31ea){if(!this[_0x10a355(0x190)][_0x10a355(0x310)](_0x13e086))return!![];}return![];}else{if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF LEARNED ALL[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x492949=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x306605 of _0x492949){if(_0x10a355(0x181)===_0x10a355(0x441)){function _0x47887c(){const _0x5b6eef=_0x10a355;return _0x48ffe9[_0x5b6eef(0x174)]['constructor']===_0x35723e?_0xc8fad6[_0x5b6eef(0x41d)][_0x5b6eef(0x228)][_0x5b6eef(0x313)](this):_0x3e4011['SkillsStatesCore']['Settings']['Skills']['ListWindowCols'];}}else{const _0x515274=DataManager[_0x10a355(0x33a)](_0x306605);if(!_0x515274)continue;if(!this[_0x10a355(0x190)]['isLearnedSkill'](_0x515274))return!![];}}return![];}}if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF LEARNED ANY[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x277)!==_0x10a355(0x2e8)){const _0x128a51=JSON[_0x10a355(0x1aa)]('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x11ebcf of _0x128a51){if(_0x10a355(0x18d)==='jDzSJ'){if(this[_0x10a355(0x190)][_0x10a355(0x310)](_0x11ebcf))return![];}else{function _0x190d37(){const _0xbc74b6=_0x10a355;if(!_0x4dfb04[_0xbc74b6(0x3c2)](_0xefb947))return![];}}}return!![];}else{function _0x2916d6(){return![];}}}else{if(_0xd349c0['match'](/<HIDE IF LEARNED ANY[ ](?:SKILL|SKILLS):[ ](.*)>/i)){if(_0x10a355(0x1cc)===_0x10a355(0x1cc)){const _0x4740fa=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x40253a of _0x4740fa){if(_0x10a355(0x1fa)!==_0x10a355(0x1fa)){function _0x388282(){const _0x1b6b4d=_0x10a355;_0x29ef5b[_0x1b6b4d(0x41d)]['Sprite_Gauge_initMembers'][_0x1b6b4d(0x313)](this),this[_0x1b6b4d(0x251)]=null;}}else{const _0x5e0373=DataManager[_0x10a355(0x33a)](_0x40253a);if(!_0x5e0373)continue;if(this[_0x10a355(0x190)][_0x10a355(0x310)](_0x5e0373))return![];}}return!![];}else{function _0x4ce6b0(){const _0x199a74=_0x10a355;this['_colorCache'][_0x3c9346]=_0x199a74(0x2de)['format'](_0x38c1ca(_0x565275['$1']));}}}}if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF (?:HAS|HAVE)[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x316aaf=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x188246 of _0x316aaf){if(!this['_actor'][_0x10a355(0x33e)](_0x188246))return![];}return!![];}else{if(_0xd349c0['match'](/<SHOW IF (?:HAS|HAVE)[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x16170a=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x2b9caa of _0x16170a){const _0x39b4a3=DataManager['getSkillIdWithName'](_0x2b9caa);if(!_0x39b4a3)continue;if(!this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x39b4a3))return![];}return!![];}}if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF (?:HAS|HAVE) ALL[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x22f68f=JSON['parse']('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x47ebad of _0x22f68f){if(!this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x47ebad))return![];}return!![];}else{if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF (?:HAS|HAVE) ALL[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x5c3ad0=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x575a0a of _0x5c3ad0){const _0x8bd551=DataManager[_0x10a355(0x33a)](_0x575a0a);if(!_0x8bd551)continue;if(!this['_actor'][_0x10a355(0x33e)](_0x8bd551))return![];}return!![];}}if(_0xd349c0[_0x10a355(0x30a)](/<SHOW IF (?:HAS|HAVE) ANY[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x3cf)===_0x10a355(0x3cf)){const _0x2aa1f5=JSON[_0x10a355(0x1aa)]('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x3f9597 of _0x2aa1f5){if(this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x3f9597))return!![];}return![];}else{function _0x38d42e(){const _0xaf35ab=_0x10a355,_0x1eca60=_0xfba2da[_0x3bb016-_0x4a6cb6[_0xaf35ab(0x205)]];if(_0x1eca60===_0x528587)return;_0x4334f0[_0xaf35ab(0x44e)][_0xaf35ab(0x394)][_0xaf35ab(0x313)](this,_0x23bec1,_0x1eca60,0x0,0x0),_0x3db9f1[_0xaf35ab(0x44e)][_0xaf35ab(0x2c8)][_0xaf35ab(0x313)](this,_0x1190fd,_0x1eca60,0x0,0x0);}}}else{if(_0xd349c0['match'](/<SHOW IF (?:HAS|HAVE) ANY[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x2a9ae4=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x266d0d of _0x2a9ae4){const _0x143136=DataManager[_0x10a355(0x33a)](_0x266d0d);if(!_0x143136)continue;if(this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x143136))return!![];}return![];}}if(_0xd349c0['match'](/<HIDE IF (?:HAS|HAVE)[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x12f41b=JSON[_0x10a355(0x1aa)]('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x34a55b of _0x12f41b){if(_0x10a355(0x44c)!==_0x10a355(0x263)){if(!this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x34a55b))return!![];}else{function _0x585766(){const _0xeb26be=_0x10a355;if(!_0x11ebbd[_0xeb26be(0x3c2)](_0x31cc92))return![];}}}return![];}else{if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF (?:HAS|HAVE)[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x1a6578=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x1ee0cf of _0x1a6578){const _0x391515=DataManager[_0x10a355(0x33a)](_0x1ee0cf);if(!_0x391515)continue;if(!this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x391515))return!![];}return![];}}if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF (?:HAS|HAVE) ALL[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x381)===_0x10a355(0x381)){const _0x5d26bc=JSON[_0x10a355(0x1aa)]('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x4bb79c of _0x5d26bc){if(!this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x4bb79c))return!![];}return![];}else{function _0x11c1b3(){const _0x45cec2=_0x10a355;return this[_0x45cec2(0x466)]&&this[_0x45cec2(0x466)][_0x45cec2(0x3c8)]();}}}else{if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF (?:HAS|HAVE) ALL[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x53f014=RegExp['$1']['split'](',');for(const _0x305e44 of _0x53f014){if(_0x10a355(0x30d)===_0x10a355(0x45e)){function _0x225fcc(){const _0x4af97b=_0x10a355,_0x1ed6b9=_0x23e0d8['parse']('['+_0x1658a0['$1']['match'](/\d+/g)+']');for(const _0x206a43 of _0x1ed6b9){if(_0x1e6d09[_0x4af97b(0x3c2)](_0x206a43))return!![];}return![];}}else{const _0x4a6384=DataManager[_0x10a355(0x33a)](_0x305e44);if(!_0x4a6384)continue;if(!this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x4a6384))return!![];}}return![];}}if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF (?:HAS|HAVE) ANY[ ](?:SKILL|SKILLS):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x10a355(0x1ce)!=='iFdGx'){const _0x577fc2=JSON[_0x10a355(0x1aa)]('['+RegExp['$1'][_0x10a355(0x30a)](/\d+/g)+']');for(const _0x53cfb4 of _0x577fc2){if(this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x53cfb4))return![];}return!![];}else{function _0x4f4212(){this['_stateTurns'][_0x5a0cac]--;}}}else{if(_0xd349c0[_0x10a355(0x30a)](/<HIDE IF (?:HAS|HAVE) ANY[ ](?:SKILL|SKILLS):[ ](.*)>/i)){const _0x3c1a60=RegExp['$1'][_0x10a355(0x23f)](',');for(const _0x186688 of _0x3c1a60){const _0x4c0998=DataManager[_0x10a355(0x33a)](_0x186688);if(!_0x4c0998)continue;if(this[_0x10a355(0x190)][_0x10a355(0x33e)](_0x4c0998))return![];}return!![];}}return!![];},Window_SkillList['prototype']['checkShowHideJS']=function(_0xf6727f){const _0x574ce3=_0x2431ab,_0x3422a4=_0xf6727f['note'],_0x27f220=VisuMZ['SkillsStatesCore'][_0x574ce3(0x308)];return _0x27f220[_0xf6727f['id']]?_0x27f220[_0xf6727f['id']][_0x574ce3(0x313)](this,_0xf6727f):!![];},VisuMZ[_0x2431ab(0x41d)][_0x2431ab(0x256)]=Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x37c)],Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x37c)]=function(_0x1757c9){const _0x33e7ca=_0x2431ab,_0x185773=this[_0x33e7ca(0x1b9)](_0x1757c9),_0x560550=_0x185773[_0x33e7ca(0x3e3)];if(_0x185773)this[_0x33e7ca(0x38f)](_0x185773);VisuMZ['SkillsStatesCore'][_0x33e7ca(0x256)][_0x33e7ca(0x313)](this,_0x1757c9);if(_0x185773)_0x185773[_0x33e7ca(0x3e3)]=_0x560550;},Window_SkillList[_0x2431ab(0x44e)]['alterSkillName']=function(_0x4088f1){const _0x5eeb4e=_0x2431ab;if(_0x4088f1&&_0x4088f1['note'][_0x5eeb4e(0x30a)](/<LIST NAME:[ ](.*)>/i)){if('nlSOL'!==_0x5eeb4e(0x24b)){_0x4088f1['name']=String(RegExp['$1'])[_0x5eeb4e(0x42e)]();for(;;){if('zJWcc'===_0x5eeb4e(0x365)){function _0x157f95(){const _0x494b21=_0x5eeb4e,_0xbdea62=_0x3227b7[_0x494b21(0x1aa)]('['+_0xe575e2['$1'][_0x494b21(0x30a)](/\d+/g)+']');for(const _0x511f55 of _0xbdea62){if(this[_0x494b21(0x190)]['hasSkill'](_0x511f55))return!![];}return![];}}else{if(_0x4088f1[_0x5eeb4e(0x3e3)][_0x5eeb4e(0x30a)](/\\V\[(\d+)\]/gi))_0x4088f1['name']=_0x4088f1[_0x5eeb4e(0x3e3)][_0x5eeb4e(0x424)](/\\V\[(\d+)\]/gi,(_0x41fbc4,_0x2ce228)=>$gameVariables[_0x5eeb4e(0x3c2)](parseInt(_0x2ce228)));else{if(_0x5eeb4e(0x416)==='UlWkg')break;else{function _0x1dc865(){const _0x1c9de0=_0x5eeb4e;this[_0x1c9de0(0x1ab)](_0x3f9609,_0x37f9a8);}}}}}}else{function _0x1b9945(){const _0x252e09=_0x5eeb4e;return _0x3d5cd5[_0x252e09(0x41d)][_0x252e09(0x3f8)]['States'][_0x252e09(0x390)];}}}},Window_SkillList['prototype'][_0x2431ab(0x3ca)]=function(_0x1999a5,_0x1d7177,_0x1cd512,_0x1ef461){const _0x3a7ad1=_0x2431ab;Window_Base[_0x3a7ad1(0x44e)][_0x3a7ad1(0x3ca)][_0x3a7ad1(0x313)](this,this[_0x3a7ad1(0x190)],_0x1999a5,_0x1d7177,_0x1cd512,_0x1ef461);},Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x397)]=function(_0x246fdf){this['_statusWindow']=_0x246fdf,this['callUpdateHelp']();},VisuMZ['SkillsStatesCore'][_0x2431ab(0x393)]=Window_SkillList['prototype'][_0x2431ab(0x387)],Window_SkillList[_0x2431ab(0x44e)][_0x2431ab(0x387)]=function(){const _0x2ee4ab=_0x2431ab;VisuMZ['SkillsStatesCore'][_0x2ee4ab(0x393)][_0x2ee4ab(0x313)](this);if(this[_0x2ee4ab(0x1fe)]&&this['_statusWindow']['constructor']===Window_ShopStatus){if(_0x2ee4ab(0x23e)!==_0x2ee4ab(0x18c))this['_statusWindow'][_0x2ee4ab(0x44b)](this[_0x2ee4ab(0x396)]());else{function _0x299d4d(){const _0x4fe7e9=_0x2ee4ab,_0x504c2e=_0x13b79b[_0x4fe7e9(0x1aa)]('['+_0x4fbaa8['$1'][_0x4fe7e9(0x30a)](/\d+/g)+']');for(const _0x3fdccb of _0x504c2e){if(_0x3b7e1c[_0x4fe7e9(0x3c2)](_0x3fdccb))return![];}return!![];}}}};